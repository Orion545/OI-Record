
;; Function void __tcf_2() (__tcf_2, funcdef_no=6108, decl_uid=80894, symbol_order=3645)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 83 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    a0 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26264,26264 SSE_REGS:26264,26264 ALL_SSE_REGS:26264,26264 MMX_REGS:35179,35179 FP_TOP_SSE_REGS:474864,474864 FP_SECOND_SSE_REGS:474864,474864 FLOAT_SSE_REGS:474864,474864 FLOAT_INT_REGS:474864,474864 INT_SSE_REGS:28047,28047 FLOAT_INT_SSE_REGS:474864,474864 ALL_REGS:474864,474864 MEM:11132,11132


Pass 1 for finding pseudo/allocno costs

    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r83,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:27264,27264 SSE_REGS:27264,27264 ALL_SSE_REGS:27264,27264 MMX_REGS:36179,36179 FP_TOP_SSE_REGS:478864,478864 FP_SECOND_SSE_REGS:478864,478864 FLOAT_SSE_REGS:478864,478864 FLOAT_INT_REGS:478864,478864 INT_SSE_REGS:29047,29047 FLOAT_INT_SSE_REGS:478864,478864 ALL_REGS:478864,478864 MEM:11132,11132

   Insn 11(l0): point = 1
   Insn 10(l0): point = 3
   Insn 8(l0): point = 6
   Insn 7(l0): point = 8
   Insn 6(l0): point = 10
 a0(r83): [4..10]
Compressing live ranges: from 13 to 2 - 15%
Ranges after the compression:
 a0(r83): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r83,l0) conflicts:  regions=1, blocks=5, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 4 3 2
    all: 0r83
    modified regnos: 83
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@22264
      Allocno a0r83 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Pushing a0(r83,l0)(cost 0)
      Popping a0(r83,l0)  -- assign reg 0
Disposition:
    0:r83  l0     0
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void __tcf_2()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 7[sp] 17[flags]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r6={1d,4u} r7={1d,7u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,3u} r17={2d,1u} r18={1d} r19={1d} r20={1d,4u} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r83={1d,2u} 
;;    total ref usage 106{85d,21u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 83 [ D.83037 ])
        (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(int * *)&num]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 83 [ D.83037 ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:177 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 14)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:177 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2165 (nil)))
 -> 14)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u6(6){ }u7(7){ }u8(16){ }u9(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 83 [ D.83037 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 83 [ D.83037 ])
        (nil)))
(call_insn 11 10 14 3 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       3 [100.0%]  (FALLTHRU)
;;              2 [21.6%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u14(6){ }u15(7){ }u16(16){ }u17(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 14 11 15 4 1 "" [1 uses])
(note 15 14 0 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int printf(const char*, ...) (_ZL6printfPKcz, funcdef_no=417, decl_uid=944, symbol_order=134)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 19.
rescanning insn with uid = 19.
deleting insn with uid = 2.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Ignoring reg 86, has equiv memory
Reg 83 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 86: (insn_list:REG_DEP_TRUE 19 (nil))
init_insns for 87: (insn_list:REG_DEP_TRUE 6 (nil))
Reg 87 has equivalence, initial gains 4000

Pass 0 for finding pseudo/allocno costs

    a2 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r83,l0) best AREG, allocno AREG

  a0(r83,l0) costs: AREG:-2000,-2000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16000,16000 SSE_REGS:16000,16000 ALL_SSE_REGS:16000,16000 MMX_REGS:21000,21000 FP_TOP_SSE_REGS:308000,308000 FP_SECOND_SSE_REGS:308000,308000 FLOAT_SSE_REGS:308000,308000 FLOAT_INT_REGS:308000,308000 INT_SSE_REGS:17000,17000 FLOAT_INT_SSE_REGS:308000,308000 ALL_REGS:308000,308000 MEM:4000,4000
  a1(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20000,20000 SSE_REGS:20000,20000 ALL_SSE_REGS:20000,20000 MMX_REGS:25000,25000 FP_TOP_SSE_REGS:312000,312000 FP_SECOND_SSE_REGS:312000,312000 FLOAT_SSE_REGS:312000,312000 FLOAT_INT_REGS:312000,312000 INT_SSE_REGS:21000,21000 FLOAT_INT_SSE_REGS:312000,312000 ALL_REGS:312000,312000 MEM:0,0
  a2(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21000,21000 SSE_REGS:21000,21000 ALL_SSE_REGS:21000,21000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:416000,416000 FP_SECOND_SSE_REGS:416000,416000 FLOAT_SSE_REGS:416000,416000 FLOAT_INT_REGS:416000,416000 INT_SSE_REGS:22000,22000 FLOAT_INT_SSE_REGS:416000,416000 ALL_REGS:416000,416000 MEM:8000,8000


Pass 1 for finding pseudo/allocno costs

    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r83,l0) costs: AREG:0,-2000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20000,20000 SSE_REGS:20000,20000 ALL_SSE_REGS:20000,20000 MMX_REGS:25000,25000 FP_TOP_SSE_REGS:312000,312000 FP_SECOND_SSE_REGS:312000,312000 FLOAT_SSE_REGS:312000,312000 FLOAT_INT_REGS:312000,312000 INT_SSE_REGS:21000,21000 FLOAT_INT_SSE_REGS:312000,312000 ALL_REGS:312000,312000 MEM:7000,7000
  a1(r86,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21000,21000 SSE_REGS:21000,21000 ALL_SSE_REGS:21000,21000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:316000,316000 FP_SECOND_SSE_REGS:316000,316000 FLOAT_SSE_REGS:316000,316000 FLOAT_INT_REGS:316000,316000 INT_SSE_REGS:22000,22000 FLOAT_INT_SSE_REGS:316000,316000 ALL_REGS:316000,316000 MEM:0,0
  a2(r87,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21000,21000 SSE_REGS:21000,21000 ALL_SSE_REGS:21000,21000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:416000,416000 FP_SECOND_SSE_REGS:416000,416000 FLOAT_SSE_REGS:416000,416000 FLOAT_INT_REGS:416000,416000 INT_SSE_REGS:22000,22000 FLOAT_INT_SSE_REGS:416000,416000 ALL_REGS:416000,416000 MEM:8000,8000

   Insn 17(l0): point = 0
   Insn 16(l0): point = 2
   Insn 11(l0): point = 4
   Insn 10(l0): point = 6
   Insn 9(l0): point = 8
   Insn 19(l0): point = 10
   Insn 8(l0): point = 12
   Insn 6(l0): point = 14
 a0(r83): [3..4]
 a1(r86): [9..10]
 a2(r87): [13..14]
Compressing live ranges: from 17 to 6 - 35%
Ranges after the compression:
 a0(r83): [0..1]
 a1(r86): [2..3]
 a2(r87): [4..5]
+++Allocating 0 bytes for conflict table (uncompressed size 24)
;; a0(r83,l0) conflicts:;; a1(r86,l0) conflicts:;; a2(r87,l0) conflicts:  pref0:a0(r83)<-hr0@3000
  regions=1, blocks=3, points=6
    allocnos=3 (big 0), copies=0, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r83 1r86 2r87
    modified regnos: 83 86 87
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@42000
      Allocno a0r83 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a1r86 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a2r87 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Pushing a2(r87,l0)(cost 0)
      Pushing a1(r86,l0)(cost 0)
      Pushing a0(r83,l0)(cost 0)
      Popping a0(r83,l0)  -- assign reg 0
      Popping a1(r86,l0)  -- assign reg 0
      Popping a2(r87,l0)  -- assign reg 0
Disposition:
    0:r83  l0     0    1:r86  l0     0    2:r87  l0     0
New iteration of spill/restore move
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int printf(const char*, ...)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 7[sp] 17[flags]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r6={1d,2u} r7={1d,7u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,3u,2e} r17={2d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r83={1d,1u} r86={1d,1u} r87={1d,1u} 
;;    total ref usage 110{88d,20u,2e} in 8{7 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 86 87
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 8 2 (parallel [
            (set (reg/f:SI 87)
                (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:299 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4]))
            (nil))))
(insn 8 6 19 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 87)) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 87)
        (nil)))
(insn 19 8 9 2 (set (reg/v/f:SI 86 [ __format ])
        (mem/f/c:SI (reg/f:SI 16 argp) [6 __format+0 S4 A32])) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (reg/f:SI 16 argp) [6 __format+0 S4 A32])
        (nil)))
(insn 9 19 10 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v/f:SI 86 [ __format ])) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 86 [ __format ])
        (nil)))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("__mingw_vprintf") [flags 0x43]  <function_decl 02668200 __mingw_vprintf>) [0 __mingw_vprintf S1 A8])
            (const_int 8 [0x8]))) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 11 10 16 2 (set (reg/v:SI 83 [ __retval ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 16 11 17 2 (set (reg/i:SI 0 ax)
        (reg/v:SI 83 [ __retval ])) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:303 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 83 [ __retval ])
        (nil)))
(insn 17 16 0 2 (use (reg/i:SI 0 ax)) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:303 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void __tcf_0() (__tcf_0, funcdef_no=6103, decl_uid=80872, symbol_order=3640)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs




Pass 1 for finding pseudo/allocno costs



   Insn 6(l0): point = 0
   Insn 5(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void __tcf_0()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 2[cx] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 93{84d,9u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 2 cx)
        (symbol_ref:SI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 035d1180 __ioinit>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 90 {*movsi_internal}
     (nil))
(call_insn/j 6 5 7 2 (call (mem:QI (symbol_ref:SI ("_ZNSt8ios_base4InitD1Ev") [flags 0x43]  <function_decl 032bbc80 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 644 {*sibcall}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 7 6 0)

;; Function long long unsigned int qpow(long long unsigned int, long long unsigned int) (_Z4qpowyy, funcdef_no=5705, decl_uid=72664, symbol_order=3171)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 4, latch 6
;;  depth 1, outer 0
;;  nodes: 4 6 5
;; 2 succs { 3 8 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 4 7 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    a11 (r101,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r97,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r95,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r93,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a9 (r92,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a10 (r91,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r87,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r86,l1) best AD_REGS, allocno AD_REGS
    a1 (r86,l0) best AD_REGS, allocno AD_REGS
    a3 (r83,l1) best AD_REGS, allocno AD_REGS
    a0 (r83,l0) best AD_REGS, allocno AD_REGS

  a0(r83,l0) costs: AD_REGS:-90,1730 Q_REGS:0,3640 NON_Q_REGS:0,3640 INDEX_REGS:0,3640 LEGACY_REGS:0,3640 GENERAL_REGS:0,3640 CLOBBERED_REGS:0,3640 MEM:719,13459
  a1(r86,l0) costs: AD_REGS:0,5460 Q_REGS:0,7280 NON_Q_REGS:0,7280 INDEX_REGS:0,7280 LEGACY_REGS:0,7280 GENERAL_REGS:0,7280 CLOBBERED_REGS:0,7280 MEM:720,33935
  a2(r87,l0) costs: AD_REGS:0,1820 Q_REGS:0,1820 NON_Q_REGS:0,1820 INDEX_REGS:0,1820 LEGACY_REGS:0,1820 GENERAL_REGS:0,1820 CLOBBERED_REGS:0,1820 MEM:1260,25830
  a3(r83,l1) costs: AD_REGS:1820,1820 Q_REGS:3640,3640 NON_Q_REGS:3640,3640 INDEX_REGS:3640,3640 LEGACY_REGS:3640,3640 GENERAL_REGS:3640,3640 CLOBBERED_REGS:3640,3640 MEM:12740,12740
  a4(r86,l1) costs: AD_REGS:5460,5460 Q_REGS:7280,7280 NON_Q_REGS:7280,7280 INDEX_REGS:7280,7280 LEGACY_REGS:7280,7280 GENERAL_REGS:7280,7280 CLOBBERED_REGS:7280,7280 MEM:33215,33215
  a5(r87,l1) costs: AD_REGS:1820,1820 Q_REGS:1820,1820 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 CLOBBERED_REGS:1820,1820 MEM:24570,24570
  a6(r97,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:5460,5460
  a7(r95,l1) costs: AREG:1820,1820 DREG:1820,1820 CREG:1820,1820 BREG:1820,1820 SIREG:1820,1820 DIREG:1820,1820 AD_REGS:1820,1820 Q_REGS:1820,1820 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 CLOBBERED_REGS:1820,1820 SSE_FIRST_REG:20930,20930 SSE_REGS:20930,20930 ALL_SSE_REGS:20930,20930 MMX_REGS:25480,25480 FP_TOP_SSE_REGS:380380,380380 FP_SECOND_SSE_REGS:380380,380380 FLOAT_SSE_REGS:380380,380380 FLOAT_INT_REGS:380380,380380 INT_SSE_REGS:21840,21840 FLOAT_INT_SSE_REGS:380380,380380 ALL_REGS:380380,380380 MEM:8190,8190
  a8(r93,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:9555,9555 SSE_REGS:9555,9555 ALL_SSE_REGS:9555,9555 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:189280,189280 FP_SECOND_SSE_REGS:189280,189280 FLOAT_SSE_REGS:189280,189280 FLOAT_INT_REGS:189280,189280 INT_SSE_REGS:10010,10010 FLOAT_INT_SSE_REGS:189280,189280 ALL_REGS:189280,189280 MEM:2730,2730
  a9(r92,l1) costs: AREG:910,910 DREG:910,910 CREG:910,910 BREG:910,910 SIREG:910,910 DIREG:910,910 AD_REGS:910,910 Q_REGS:910,910 NON_Q_REGS:910,910 INDEX_REGS:910,910 LEGACY_REGS:910,910 GENERAL_REGS:910,910 CLOBBERED_REGS:910,910 SSE_FIRST_REG:10465,10465 SSE_REGS:10465,10465 ALL_SSE_REGS:10465,10465 MMX_REGS:12740,12740 FP_TOP_SSE_REGS:190190,190190 FP_SECOND_SSE_REGS:190190,190190 FLOAT_SSE_REGS:190190,190190 FLOAT_INT_REGS:190190,190190 INT_SSE_REGS:10920,10920 FLOAT_INT_SSE_REGS:190190,190190 ALL_REGS:190190,190190 MEM:4095,4095
  a10(r91,l1) costs: AREG:910,910 DREG:910,910 CREG:910,910 BREG:910,910 SIREG:910,910 DIREG:910,910 AD_REGS:910,910 Q_REGS:910,910 NON_Q_REGS:910,910 INDEX_REGS:910,910 LEGACY_REGS:910,910 GENERAL_REGS:910,910 CLOBBERED_REGS:910,910 SSE_FIRST_REG:10465,10465 SSE_REGS:10465,10465 ALL_SSE_REGS:10465,10465 MMX_REGS:12740,12740 FP_TOP_SSE_REGS:190190,190190 FP_SECOND_SSE_REGS:190190,190190 FLOAT_SSE_REGS:190190,190190 FLOAT_INT_REGS:190190,190190 INT_SSE_REGS:10920,10920 FLOAT_INT_SSE_REGS:190190,190190 ALL_REGS:190190,190190 MEM:4095,4095
  a11(r101,l1) costs: AREG:1820,1820 DREG:1820,1820 CREG:1820,1820 BREG:1820,1820 SIREG:1820,1820 DIREG:1820,1820 AD_REGS:1820,1820 Q_REGS:1820,1820 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 CLOBBERED_REGS:1820,1820 SSE_FIRST_REG:20930,20930 SSE_REGS:20930,20930 ALL_SSE_REGS:20930,20930 MMX_REGS:25480,25480 FP_TOP_SSE_REGS:380380,380380 FP_SECOND_SSE_REGS:380380,380380 FLOAT_SSE_REGS:380380,380380 FLOAT_INT_REGS:380380,380380 INT_SSE_REGS:21840,21840 FLOAT_INT_SSE_REGS:380380,380380 ALL_REGS:380380,380380 MEM:8190,8190


Pass 1 for finding pseudo/allocno costs

    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r86: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r83,l0) costs: AD_REGS:0,1730 Q_REGS:0,3640 NON_Q_REGS:0,3640 INDEX_REGS:0,3640 LEGACY_REGS:0,3640 GENERAL_REGS:0,3640 CLOBBERED_REGS:0,3640 MEM:1342,14082
  a1(r86,l0) costs: AD_REGS:0,5460 Q_REGS:0,7280 NON_Q_REGS:0,7280 INDEX_REGS:0,7280 LEGACY_REGS:0,7280 GENERAL_REGS:0,7280 CLOBBERED_REGS:0,7280 MEM:720,33935
  a2(r87,l0) costs: GENERAL_REGS:0,1820 MEM:1260,25830
  a3(r83,l1) costs: AD_REGS:3640,1820 Q_REGS:3640,3640 NON_Q_REGS:3640,3640 INDEX_REGS:3640,3640 LEGACY_REGS:3640,3640 GENERAL_REGS:3640,3640 CLOBBERED_REGS:3640,3640 MEM:12740,12740
  a4(r86,l1) costs: AD_REGS:7280,5460 Q_REGS:7280,7280 NON_Q_REGS:7280,7280 INDEX_REGS:7280,7280 LEGACY_REGS:7280,7280 GENERAL_REGS:7280,7280 CLOBBERED_REGS:7280,7280 MEM:33215,33215
  a5(r87,l1) costs: GENERAL_REGS:1820,1820 MEM:24570,24570
  a6(r97,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:5460,5460
  a7(r95,l1) costs: GENERAL_REGS:1820,1820 SSE_FIRST_REG:20930,20930 SSE_REGS:20930,20930 ALL_SSE_REGS:20930,20930 MMX_REGS:25480,25480 FP_TOP_SSE_REGS:380380,380380 FP_SECOND_SSE_REGS:380380,380380 FLOAT_SSE_REGS:380380,380380 FLOAT_INT_REGS:380380,380380 INT_SSE_REGS:21840,21840 FLOAT_INT_SSE_REGS:380380,380380 ALL_REGS:380380,380380 MEM:8190,8190
  a8(r93,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:9555,9555 SSE_REGS:9555,9555 ALL_SSE_REGS:9555,9555 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:189280,189280 FP_SECOND_SSE_REGS:189280,189280 FLOAT_SSE_REGS:189280,189280 FLOAT_INT_REGS:189280,189280 INT_SSE_REGS:10010,10010 FLOAT_INT_SSE_REGS:189280,189280 ALL_REGS:189280,189280 MEM:2730,2730
  a9(r92,l1) costs: GENERAL_REGS:910,910 SSE_FIRST_REG:10465,10465 SSE_REGS:10465,10465 ALL_SSE_REGS:10465,10465 MMX_REGS:12740,12740 FP_TOP_SSE_REGS:190190,190190 FP_SECOND_SSE_REGS:190190,190190 FLOAT_SSE_REGS:190190,190190 FLOAT_INT_REGS:190190,190190 INT_SSE_REGS:10920,10920 FLOAT_INT_SSE_REGS:190190,190190 ALL_REGS:190190,190190 MEM:4095,4095
  a10(r91,l1) costs: GENERAL_REGS:910,910 SSE_FIRST_REG:10465,10465 SSE_REGS:10465,10465 ALL_SSE_REGS:10465,10465 MMX_REGS:12740,12740 FP_TOP_SSE_REGS:190190,190190 FP_SECOND_SSE_REGS:190190,190190 FLOAT_SSE_REGS:190190,190190 FLOAT_INT_REGS:190190,190190 INT_SSE_REGS:10920,10920 FLOAT_INT_SSE_REGS:190190,190190 ALL_REGS:190190,190190 MEM:4095,4095
  a11(r101,l1) costs: GENERAL_REGS:1820,1820 SSE_FIRST_REG:20930,20930 SSE_REGS:20930,20930 ALL_SSE_REGS:20930,20930 MMX_REGS:25480,25480 FP_TOP_SSE_REGS:380380,380380 FP_SECOND_SSE_REGS:380380,380380 FLOAT_SSE_REGS:380380,380380 FLOAT_INT_REGS:380380,380380 INT_SSE_REGS:21840,21840 FLOAT_INT_SSE_REGS:380380,380380 ALL_REGS:380380,380380 MEM:8190,8190

   Insn 48(l0): point = 0
   Insn 47(l0): point = 2
   Insn 6(l0): point = 5
   Insn 68(l0): point = 8
   Insn 5(l0): point = 11
   Insn 11(l0): point = 14
   Insn 10(l0): point = 16
   Insn 3(l0): point = 18
   Insn 2(l0): point = 20
   Insn 18(l1): point = 23
   Insn 17(l1): point = 25
   Insn 14(l1): point = 27
   Insn 40(l1): point = 30
   Insn 39(l1): point = 32
   Insn 36(l1): point = 34
   Insn 34(l1): point = 36
   Insn 32(l1): point = 38
   Insn 31(l1): point = 40
   Insn 29(l1): point = 42
   Insn 25(l1): point = 45
   Insn 23(l1): point = 47
   Insn 22(l1): point = 49
   Insn 21(l1): point = 51
   Insn 20(l1): point = 53
 a0(r83 [0]): [8..11] [3..5]
 a0(r83 [1]): [8..11] [3..5]
 a1(r86 [0]): [11..20]
 a1(r86 [1]): [11..20]
 a2(r87 [0]): [11..18]
 a2(r87 [1]): [11..18]
 a3(r83 [0]): [23..55]
 a3(r83 [1]): [54..55] [23..47]
 a4(r86 [0]): [23..55]
 a4(r86 [1]): [43..55] [23..38]
 a5(r87 [0]): [23..55]
 a5(r87 [1]): [23..55]
 a6(r97): [37..40]
 a7(r95): [41..42]
 a8(r93): [46..49]
 a9(r92): [50..51]
 a10(r91): [50..53]
 a11(r101): [26..27]
 Rebuilding regno allocno list for 101
 Rebuilding regno allocno list for 97
 Rebuilding regno allocno list for 95
 Rebuilding regno allocno list for 93
 Rebuilding regno allocno list for 92
 Rebuilding regno allocno list for 91
      Moving ranges of a5r87 to a2r87:  [23..55]
      Moving ranges of a5r87 to a2r87:  [23..55]
      Moving ranges of a4r86 to a1r86:  [23..55]
      Moving ranges of a4r86 to a1r86:  [43..55] [23..38]
      Moving ranges of a3r83 to a0r83:  [23..55]
      Moving ranges of a3r83 to a0r83:  [54..55] [23..47]
Compressing live ranges: from 56 to 17 - 30%
Ranges after the compression:
 a0(r83 [0]): [5..16] [0..3]
 a0(r83 [1]): [15..16] [5..12] [0..3]
 a1(r86 [0]): [3..16]
 a1(r86 [1]): [11..16] [3..8]
 a2(r87 [0]): [3..16]
 a2(r87 [1]): [3..16]
 a6(r97): [7..8]
 a7(r95): [9..10]
 a8(r93): [11..12]
 a9(r92): [13..14]
 a10(r91): [13..14]
 a11(r101): [5..6]
+++Allocating 96 bytes for conflict table (uncompressed size 144)
;; a0(r83,l0) conflicts:
;;   subobject 0: a1(r86,w1,l0) a1(r86,w0,l0) a2(r87,w1,l0) a2(r87,w0,l0) a11(r101,l0) a6(r97,l0) a7(r95,l0) a8(r93,l0) a9(r92,l0) a10(r91,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a1(r86,w0,l0) a2(r87,w0,l0) a11(r101,l0) a6(r97,l0) a7(r95,l0) a8(r93,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r86,l0) conflicts:
;;   subobject 0: a0(r83,w1,l0) a0(r83,w0,l0) a2(r87,w1,l0) a2(r87,w0,l0) a11(r101,l0) a6(r97,l0) a7(r95,l0) a8(r93,l0) a9(r92,l0) a10(r91,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a0(r83,w0,l0) a2(r87,w0,l0) a11(r101,l0) a6(r97,l0) a8(r93,l0) a9(r92,l0) a10(r91,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r87,l0) conflicts:
;;   subobject 0: a0(r83,w1,l0) a0(r83,w0,l0) a1(r86,w1,l0) a1(r86,w0,l0) a11(r101,l0) a6(r97,l0) a7(r95,l0) a8(r93,l0) a9(r92,l0) a10(r91,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a0(r83,w0,l0) a1(r86,w0,l0) a11(r101,l0) a6(r97,l0) a7(r95,l0) a8(r93,l0) a9(r92,l0) a10(r91,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r97,l0) conflicts: a0(r83,w1,l0) a0(r83,w0,l0) a1(r86,w1,l0) a1(r86,w0,l0) a2(r87,w1,l0) a2(r87,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a7(r95,l0) conflicts: a0(r83,w1,l0) a0(r83,w0,l0) a1(r86,w0,l0) a2(r87,w1,l0) a2(r87,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a8(r93,l0) conflicts: a0(r83,w1,l0) a0(r83,w0,l0) a1(r86,w1,l0) a1(r86,w0,l0) a2(r87,w1,l0) a2(r87,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a9(r92,l0) conflicts: a0(r83,w0,l0) a1(r86,w1,l0) a1(r86,w0,l0) a2(r87,w1,l0) a2(r87,w0,l0) a10(r91,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a10(r91,l0) conflicts: a0(r83,w0,l0) a1(r86,w1,l0) a1(r86,w0,l0) a2(r87,w1,l0) a2(r87,w0,l0) a9(r92,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a11(r101,l0) conflicts: a0(r83,w1,l0) a0(r83,w0,l0) a1(r86,w1,l0) a1(r86,w0,l0) a2(r87,w1,l0) a2(r87,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a6(r97)<->a7(r95)@113:shuffle
  cp1:a8(r93)<->a9(r92)@56:shuffle
  cp2:a8(r93)<->a10(r91)@56:shuffle
  pref2:a0(r83)<-hr0@135
  regions=2, blocks=10, points=17
    allocnos=12 (big 3), copies=3, conflicts=0, ranges=16

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r83 1r86 2r87 6r97 7r95 8r93 9r92 10r91 11r101
    modified regnos: 83 86 87 91 92 93 95 97 101
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@102620
          2:( 0 1 6)@11877954
      Allocno a0r83 of GENERAL_REGS(7) has 3 avail. regs  0 1 6, node:  0 1 6 obj 0 (confl regs =  7-75),  obj 1 (confl regs =  7-75)
      Allocno a1r86 of GENERAL_REGS(7) has 3 avail. regs  0 1 6, node:  0 1 6 obj 0 (confl regs =  7-75),  obj 1 (confl regs =  7-75)
      Allocno a2r87 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 obj 0 (confl regs =  7-75),  obj 1 (confl regs =  7-75)
      Allocno a6r97 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a7r95 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a8r93 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a9r92 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a10r91 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a11r101 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Forming thread by copy 0:a6r97-a7r95 (freq=113):
        Result (freq=3640): a6r97(1820) a7r95(1820)
      Forming thread by copy 1:a8r93-a9r92 (freq=56):
        Result (freq=1820): a8r93(910) a9r92(910)
      Pushing a10(r91,l0)(cost 0)
      Pushing a11(r101,l0)(cost 0)
      Pushing a9(r92,l0)(cost 0)
      Pushing a8(r93,l0)(cost 0)
      Pushing a7(r95,l0)(cost 0)
        Making a2(r87,l0) colorable
      Pushing a6(r97,l0)(cost 0)
      Pushing a2(r87,l0)(cost 24010)
      Pushing a1(r86,l0)(potential spill: pri=28475, cost=28475)
        Making a0(r83,l0) colorable
      Pushing a0(r83,l0)(cost 5910502)
      Popping a0(r83,l0)  -- assign reg 0
      Popping a1(r86,l0)  -- (memory is more profitable 33935 vs 2147483647) spill
      Popping a2(r87,l0)  -- assign reg 2
      Popping a6(r97,l0)  -- assign reg 4
      Popping a7(r95,l0)  -- assign reg 4
      Popping a8(r93,l0)  -- assign reg 4
      Popping a9(r92,l0)  -- assign reg 1
      Popping a11(r101,l0)  -- assign reg 4
      Popping a10(r91,l0)  -- assign reg 4
Disposition:
    0:r83  l0     0    1:r86  l0   mem    2:r87  l0     2   10:r91  l0     4
    9:r92  l0     1    8:r93  l0     4    7:r95  l0     4    6:r97  l0     4
   11:r101 l0     4
New iteration of spill/restore move
+++Costs: overall -5855205, reg -5889140, mem 33935, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


long long unsigned int qpow(long long unsigned int, long long unsigned int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 17[flags]
;;  ref usage 	r0={2d,2u} r1={2d,2u} r2={1d} r6={1d,9u} r7={1d,9u} r16={1d,10u} r17={14d,3u} r20={1d,9u} r21={1d} r22={1d} r23={1d} r29={1d} r30={1d} r31={1d} r83={4d,6u} r86={3d,9u} r87={2d,6u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r95={1d,1u} r97={1d,1u} r101={1d,1u} 
;;    total ref usage 115{44d,71u,0e} in 24{24 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 87
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg/v:DI 86 [ a ])
        (mem/c:DI (reg/f:SI 16 argp) [34 a+0 S8 A32])) D:\LHX\7.5 contest\t1.cpp:24 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:DI 87 [ b ])
        (mem/c:DI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [34 b+0 S8 A32])) D:\LHX\7.5 contest\t1.cpp:24 89 {*movdi_internal}
     (nil))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(note 9 4 10 2 NOTE_INSN_DELETED)
(insn 10 9 11 2 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ior:SI (subreg:SI (reg/v:DI 87 [ b ]) 4)
                        (subreg:SI (reg/v:DI 87 [ b ]) 0))
                    (const_int 0 [0])))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:26 425 {*iorsi_3}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 54)
            (pc))) D:\LHX\7.5 contest\t1.cpp:26 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 54)
;;  succ:       3 [91.0%]  (FALLTHRU)
;;              8 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 87

;; basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [91.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u10(6){ }u11(7){ }u12(16){ }u13(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 12 11 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 12 37 3 (set (reg/v:DI 83 [ re ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87

;; basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [100.0%]  (FALLTHRU)
;;              6 [91.0%]  (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u14(6){ }u15(7){ }u16(16){ }u17(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags] 101
(code_label 37 5 13 4 16 "" [1 uses])
(note 13 37 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 17 4 (parallel [
            (set (reg:SI 101 [ D.83044 ])
                (and:SI (subreg:SI (reg/v:DI 87 [ b ]) 0)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 370 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 14 18 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 101 [ D.83044 ])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:27 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 101 [ D.83044 ])
        (nil)))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 27)
            (pc))) D:\LHX\7.5 contest\t1.cpp:27 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 27)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87

;; basic block 5, loop depth 1, count 0, freq 4550, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 [50.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u21(6){ }u22(7){ }u23(16){ }u24(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86
;; lr  def 	 17 [flags] 83 91 92 93
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (parallel [
            (set (reg:SI 91)
                (mult:SI (subreg:SI (reg/v:DI 83 [ re ]) 4)
                    (subreg:SI (reg/v:DI 86 [ a ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 21 20 22 5 (parallel [
            (set (reg:SI 92)
                (mult:SI (subreg:SI (reg/v:DI 86 [ a ]) 4)
                    (subreg:SI (reg/v:DI 83 [ re ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 22 21 23 5 (parallel [
            (set (reg:SI 93)
                (plus:SI (reg:SI 91)
                    (reg:SI 92)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 92)
        (expr_list:REG_DEAD (reg:SI 91)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 23 22 24 5 (parallel [
            (set (reg/v:DI 83 [ re ])
                (mult:DI (zero_extend:DI (subreg:SI (reg/v:DI 83 [ re ]) 0))
                    (zero_extend:DI (subreg:SI (reg/v:DI 86 [ a ]) 0))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 323 {*umulsidi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 24 23 25 5 NOTE_INSN_DELETED)
(insn 25 24 27 5 (parallel [
            (set (subreg:SI (reg/v:DI 83 [ re ]) 4)
                (plus:SI (reg:SI 93)
                    (subreg:SI (reg/v:DI 83 [ re ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 93)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87

;; basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u37(6){ }u38(7){ }u39(16){ }u40(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 87
;; lr  def 	 17 [flags] 86 87 95 97
(code_label 27 25 28 6 15 "" [1 uses])
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 31 6 (parallel [
            (set (reg:SI 95)
                (mult:SI (subreg:SI (reg/v:DI 86 [ a ]) 4)
                    (subreg:SI (reg/v:DI 86 [ a ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 29 32 6 (parallel [
            (set (reg:SI 97)
                (ashift:SI (reg:SI 95)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 496 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 95)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 32 31 33 6 (parallel [
            (set (reg/v:DI 86 [ a ])
                (mult:DI (zero_extend:DI (subreg:SI (reg/v:DI 86 [ a ]) 0))
                    (zero_extend:DI (subreg:SI (reg/v:DI 86 [ a ]) 0))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 323 {*umulsidi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 33 32 34 6 NOTE_INSN_DELETED)
(insn 34 33 36 6 (parallel [
            (set (subreg:SI (reg/v:DI 86 [ a ]) 4)
                (plus:SI (reg:SI 97)
                    (subreg:SI (reg/v:DI 86 [ a ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 97)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 34 38 6 (parallel [
            (set (reg/v:DI 87 [ b ])
                (lshiftrt:DI (reg/v:DI 87 [ b ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 516 {*lshrdi3_doubleword}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 38 36 39 6 NOTE_INSN_DELETED)
(insn 39 38 40 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ior:SI (subreg:SI (reg/v:DI 87 [ b ]) 4)
                        (subreg:SI (reg/v:DI 87 [ b ]) 0))
                    (const_int 0 [0])))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:26 425 {*iorsi_3}
     (nil))
(jump_insn 40 39 67 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 37)
            (pc))) D:\LHX\7.5 contest\t1.cpp:26 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 37)
;;  succ:       4 [91.0%]  (DFS_BACK)
;;              7 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87

;; basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 6, next block 8, flags: (NEW, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 67 40 68 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 68 67 69 7 (set (pc)
        (label_ref 41)) 636 {jump}
     (nil)
 -> 41)
;;  succ:       9 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 69 68 54)
;; basic block 8, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       2 [9.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u55(6){ }u56(7){ }u57(16){ }u58(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 54 69 53 8 17 "" [1 uses])
(note 53 54 6 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 6 53 41 8 (set (reg/v:DI 83 [ re ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:25 89 {*movdi_internal}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 8, next block 1, flags: (RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              7 [100.0%]  (LOOP_EXIT)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u59(6){ }u60(7){ }u61(16){ }u62(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 1 [dx]
(code_label 41 6 42 9 14 "" [1 uses])
(note 42 41 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 42 48 9 (set (reg/i:DI 0 ax)
        (reg/v:DI 83 [ re ])) D:\LHX\7.5 contest\t1.cpp:31 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 83 [ re ])
        (nil)))
(insn 48 47 0 9 (use (reg/i:DI 0 ax)) D:\LHX\7.5 contest\t1.cpp:31 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void std::vector<_Tp, _Alloc>::_M_emplace_back_aux(_Args&& ...) [with _Args = {const int&}; _Tp = int; _Alloc = std::allocator<int>] (_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_, funcdef_no=5879, decl_uid=75856, symbol_order=3371)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 24 (    1)
scanning new insn with uid = 137.
rescanning insn with uid = 137.
deleting insn with uid = 3.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 24 (    1)
Ignoring reg 116, has equiv memory
Reg 94: def dominates all uses has unique first use
Reg 95: def dominates all uses has unique first use
Reg 94 not local to one basic block
Reg 95 not local to one basic block
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
;;
;; Loop 1
;;  header 16, latch 18
;;  depth 1, outer 0
;;  nodes: 16 18 17
;; 2 succs { 7 3 }
;; 3 succs { 8 4 }
;; 4 succs { 9 5 }
;; 5 succs { 6 11 }
;; 6 succs { 10 }
;; 7 succs { 10 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 20 }
;; 15 succs { 16 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 16 19 }
;; 19 succs { 20 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 116: (insn_list:REG_DEP_TRUE 137 (nil))
init_insns for 123: (insn_list:REG_DEP_TRUE 88 (nil))

Pass 0 for finding pseudo/allocno costs

    a1 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a17 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a24 (r115,l1) best CREG, allocno CREG
    a0 (r115,l0) best CREG, allocno CREG
    a14 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a23 (r104,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a22 (r98,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a9 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a21 (r97,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a10 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a25 (r95,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r93,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a19 (r92,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a11 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a18 (r91,l1) best AREG, allocno AREG
    a3 (r91,l0) best AREG, allocno AREG
    a12 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:-90,-90 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4736,4736 SSE_REGS:4736,4736 ALL_SSE_REGS:4736,4736 MMX_REGS:7246,7246 FP_TOP_SSE_REGS:113416,113416 FP_SECOND_SSE_REGS:113416,113416 FLOAT_SSE_REGS:113416,113416 FLOAT_INT_REGS:113416,113416 INT_SSE_REGS:5238,5238 FLOAT_INT_SSE_REGS:113416,113416 ALL_REGS:113416,113416 MEM:2098,2098
  a1(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:37440,37440 FP_SECOND_SSE_REGS:37440,37440 FLOAT_SSE_REGS:37440,37440 FLOAT_INT_REGS:37440,37440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:37440,37440 ALL_REGS:37440,37440 MEM:630,630
  a2(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1669,1669 SSE_REGS:1669,1669 ALL_SSE_REGS:1669,1669 MMX_REGS:2249,2249 FP_TOP_SSE_REGS:33436,33436 FP_SECOND_SSE_REGS:33436,33436 FLOAT_SSE_REGS:33436,33436 FLOAT_INT_REGS:33436,33436 INT_SSE_REGS:1785,1785 FLOAT_INT_SSE_REGS:33436,33436 ALL_REGS:33436,33436 MEM:468,468
  a3(r91,l0) costs: AREG:-26,-26 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:3880,3880 SSE_REGS:3880,3880 ALL_SSE_REGS:3880,3880 MMX_REGS:6170,6170 FP_TOP_SSE_REGS:97964,97964 FP_SECOND_SSE_REGS:97964,97964 FLOAT_SSE_REGS:97964,97964 FLOAT_INT_REGS:97964,97964 INT_SSE_REGS:4338,4338 FLOAT_INT_SSE_REGS:97964,97964 ALL_REGS:97964,97964 MEM:1598,1598
  a4(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2119,2119 SSE_REGS:2119,2119 ALL_SSE_REGS:2119,2119 MMX_REGS:2569,2569 FP_TOP_SSE_REGS:41076,41076 FP_SECOND_SSE_REGS:41076,41076 FLOAT_SSE_REGS:41076,41076 FLOAT_INT_REGS:41076,41076 INT_SSE_REGS:2209,2209 FLOAT_INT_SSE_REGS:41076,41076 ALL_REGS:41076,41076 MEM:789,789
  a5(r93,l0) costs: AREG:232,232 DREG:232,232 CREG:232,232 BREG:232,232 SIREG:232,232 DIREG:232,232 AD_REGS:232,232 Q_REGS:232,232 NON_Q_REGS:232,232 INDEX_REGS:232,232 LEGACY_REGS:232,232 GENERAL_REGS:232,232 CLOBBERED_REGS:232,232 SSE_FIRST_REG:5848,5848 SSE_REGS:5848,5848 ALL_SSE_REGS:5848,5848 MMX_REGS:8488,8488 FP_TOP_SSE_REGS:122120,122120 FP_SECOND_SSE_REGS:122120,122120 FLOAT_SSE_REGS:122120,122120 FLOAT_INT_REGS:122120,122120 INT_SSE_REGS:6376,6376 FLOAT_INT_SSE_REGS:122120,122120 ALL_REGS:122120,122120 MEM:2521,2521
  a6(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:567,567
  a7(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:486,486
  a8(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:567,567
  a9(r98,l0) costs: AREG:232,232 DREG:232,232 CREG:232,232 BREG:232,232 SIREG:232,232 DIREG:232,232 AD_REGS:232,232 Q_REGS:232,232 NON_Q_REGS:232,232 INDEX_REGS:232,232 LEGACY_REGS:232,232 GENERAL_REGS:232,232 CLOBBERED_REGS:232,232 SSE_FIRST_REG:3920,11200 SSE_REGS:3920,11200 ALL_SSE_REGS:3920,11200 MMX_REGS:5355,17185 FP_TOP_SSE_REGS:71992,261272 FP_SECOND_SSE_REGS:71992,261272 FLOAT_SSE_REGS:71992,261272 FLOAT_INT_REGS:71992,261272 INT_SSE_REGS:4207,12397 FLOAT_INT_SSE_REGS:71992,261272 ALL_REGS:71992,261272 MEM:1557,4287
  a10(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:648,33222 SSE_REGS:648,33222 ALL_SSE_REGS:648,33222 MMX_REGS:648,46187 FP_TOP_SSE_REGS:8100,736724 FP_SECOND_SSE_REGS:8100,736724 FLOAT_SSE_REGS:8100,736724 FLOAT_INT_REGS:8100,736724 INT_SSE_REGS:648,35815 FLOAT_INT_SSE_REGS:8100,736724 ALL_REGS:8100,736724 MEM:81,12273
  a11(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:648,34318 SSE_REGS:648,34318 ALL_SSE_REGS:648,34318 MMX_REGS:648,47968 FP_TOP_SSE_REGS:8100,765220 FP_SECOND_SSE_REGS:8100,765220 FLOAT_SSE_REGS:8100,765220 FLOAT_INT_REGS:8100,765220 INT_SSE_REGS:648,37048 FLOAT_INT_SSE_REGS:8100,765220 ALL_REGS:8100,765220 MEM:81,11911
  a12(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1778,1778 SSE_REGS:1778,1778 ALL_SSE_REGS:1778,1778 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:34528,34528 FP_SECOND_SSE_REGS:34528,34528 FLOAT_SSE_REGS:34528,34528 FLOAT_INT_REGS:34528,34528 INT_SSE_REGS:1854,1854 FLOAT_INT_SSE_REGS:34528,34528 ALL_REGS:34528,34528 MEM:574,574
  a13(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1688,1688 SSE_REGS:1688,1688 ALL_SSE_REGS:1688,1688 MMX_REGS:2068,2068 FP_TOP_SSE_REGS:25168,25168 FP_SECOND_SSE_REGS:25168,25168 FLOAT_SSE_REGS:25168,25168 FLOAT_INT_REGS:25168,25168 INT_SSE_REGS:1764,1764 FLOAT_INT_SSE_REGS:25168,25168 ALL_REGS:25168,25168 MEM:664,664
  a14(r111,l0) costs: AREG:412,412 DREG:412,412 CREG:412,412 BREG:412,412 SIREG:412,412 DIREG:412,412 AD_REGS:412,412 Q_REGS:412,412 NON_Q_REGS:412,412 INDEX_REGS:412,412 LEGACY_REGS:412,412 GENERAL_REGS:412,412 CLOBBERED_REGS:412,412 SSE_FIRST_REG:3360,3360 SSE_REGS:3360,3360 ALL_SSE_REGS:3360,3360 MMX_REGS:4260,4260 FP_TOP_SSE_REGS:61980,61980 FP_SECOND_SSE_REGS:61980,61980 FLOAT_SSE_REGS:61980,61980 FLOAT_INT_REGS:61980,61980 INT_SSE_REGS:3540,3540 FLOAT_INT_SSE_REGS:61980,61980 ALL_REGS:61980,61980 MEM:1300,1300
  a15(r116,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1800,1800 SSE_REGS:1800,1800 ALL_SSE_REGS:1800,1800 MMX_REGS:2250,2250 FP_TOP_SSE_REGS:28080,28080 FP_SECOND_SSE_REGS:28080,28080 FLOAT_SSE_REGS:28080,28080 FLOAT_INT_REGS:28080,28080 INT_SSE_REGS:1890,1890 FLOAT_INT_SSE_REGS:28080,28080 ALL_REGS:28080,28080 MEM:0,0
  a16(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:961,961 SSE_REGS:961,961 ALL_SSE_REGS:961,961 MMX_REGS:1196,1196 FP_TOP_SSE_REGS:19136,19136 FP_SECOND_SSE_REGS:19136,19136 FLOAT_SSE_REGS:19136,19136 FLOAT_INT_REGS:19136,19136 INT_SSE_REGS:1008,1008 FLOAT_INT_SSE_REGS:19136,19136 ALL_REGS:19136,19136 MEM:322,322
  a17(r117,l0) costs: AREG:180,180 DREG:180,180 CREG:180,180 BREG:180,180 SIREG:180,180 DIREG:180,180 AD_REGS:180,180 Q_REGS:180,180 NON_Q_REGS:180,180 INDEX_REGS:180,180 LEGACY_REGS:180,180 GENERAL_REGS:180,180 CLOBBERED_REGS:180,180 SSE_FIRST_REG:2798,2798 SSE_REGS:2798,2798 ALL_SSE_REGS:2798,2798 MMX_REGS:3703,3703 FP_TOP_SSE_REGS:56548,56548 FP_SECOND_SSE_REGS:56548,56548 FLOAT_SSE_REGS:56548,56548 FLOAT_INT_REGS:56548,56548 INT_SSE_REGS:2979,2979 FLOAT_INT_SSE_REGS:56548,56548 ALL_REGS:56548,56548 MEM:1128,1128
  a18(r91,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a19(r92,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:33670,33670 SSE_REGS:33670,33670 ALL_SSE_REGS:33670,33670 MMX_REGS:47320,47320 FP_TOP_SSE_REGS:757120,757120 FP_SECOND_SSE_REGS:757120,757120 FLOAT_SSE_REGS:757120,757120 FLOAT_INT_REGS:757120,757120 INT_SSE_REGS:36400,36400 FLOAT_INT_SSE_REGS:757120,757120 ALL_REGS:757120,757120 MEM:11830,11830
  a20(r93,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a21(r97,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:32574,32574 SSE_REGS:32574,32574 ALL_SSE_REGS:32574,32574 MMX_REGS:45539,45539 FP_TOP_SSE_REGS:728624,728624 FP_SECOND_SSE_REGS:728624,728624 FLOAT_SSE_REGS:728624,728624 FLOAT_INT_REGS:728624,728624 INT_SSE_REGS:35167,35167 FLOAT_INT_SSE_REGS:728624,728624 ALL_REGS:728624,728624 MEM:12192,12192
  a22(r98,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:7280,7280 SSE_REGS:7280,7280 ALL_SSE_REGS:7280,7280 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:189280,189280 FP_SECOND_SSE_REGS:189280,189280 FLOAT_SSE_REGS:189280,189280 FLOAT_INT_REGS:189280,189280 INT_SSE_REGS:8190,8190 FLOAT_INT_SSE_REGS:189280,189280 ALL_REGS:189280,189280 MEM:2730,2730
  a23(r104,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a24(r115,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a25(r95,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:17104,17104 SSE_REGS:17104,17104 ALL_SSE_REGS:17104,17104 MMX_REGS:20969,20969 FP_TOP_SSE_REGS:255424,255424 FP_SECOND_SSE_REGS:255424,255424 FLOAT_SSE_REGS:255424,255424 FLOAT_INT_REGS:255424,255424 INT_SSE_REGS:17877,17877 FLOAT_INT_SSE_REGS:255424,255424 ALL_REGS:255424,255424 MEM:6732,6732


Pass 1 for finding pseudo/allocno costs

    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r115: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r115,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r91,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,-90 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5096,5096 SSE_REGS:5096,5096 ALL_SSE_REGS:5096,5096 MMX_REGS:7606,7606 FP_TOP_SSE_REGS:113776,113776 FP_SECOND_SSE_REGS:113776,113776 FLOAT_SSE_REGS:113776,113776 FLOAT_INT_REGS:113776,113776 INT_SSE_REGS:5598,5598 FLOAT_INT_SSE_REGS:113776,113776 ALL_REGS:113776,113776 MEM:2368,2368
  a1(r123,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:37440,37440 FP_SECOND_SSE_REGS:37440,37440 FLOAT_SSE_REGS:37440,37440 FLOAT_INT_REGS:37440,37440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:37440,37440 ALL_REGS:37440,37440 MEM:630,630
  a2(r104,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2033,2033 SSE_REGS:2033,2033 ALL_SSE_REGS:2033,2033 MMX_REGS:2613,2613 FP_TOP_SSE_REGS:33800,33800 FP_SECOND_SSE_REGS:33800,33800 FLOAT_SSE_REGS:33800,33800 FLOAT_INT_REGS:33800,33800 INT_SSE_REGS:2149,2149 FLOAT_INT_SSE_REGS:33800,33800 ALL_REGS:33800,33800 MEM:741,741
  a3(r91,l0) costs: AREG:0,-26 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:3988,3988 SSE_REGS:3988,3988 ALL_SSE_REGS:3988,3988 MMX_REGS:6278,6278 FP_TOP_SSE_REGS:98072,98072 FP_SECOND_SSE_REGS:98072,98072 FLOAT_SSE_REGS:98072,98072 FLOAT_INT_REGS:98072,98072 INT_SSE_REGS:4446,4446 FLOAT_INT_SSE_REGS:98072,98072 ALL_REGS:98072,98072 MEM:1679,1679
  a4(r109,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2123,2123 SSE_REGS:2123,2123 ALL_SSE_REGS:2123,2123 MMX_REGS:2573,2573 FP_TOP_SSE_REGS:41080,41080 FP_SECOND_SSE_REGS:41080,41080 FLOAT_SSE_REGS:41080,41080 FLOAT_INT_REGS:41080,41080 INT_SSE_REGS:2213,2213 FLOAT_INT_SSE_REGS:41080,41080 ALL_REGS:41080,41080 MEM:792,792
  a5(r93,l0) costs: GENERAL_REGS:232,232 SSE_FIRST_REG:5964,5964 SSE_REGS:5964,5964 ALL_SSE_REGS:5964,5964 MMX_REGS:8604,8604 FP_TOP_SSE_REGS:122584,122584 FP_SECOND_SSE_REGS:122584,122584 FLOAT_SSE_REGS:122584,122584 FLOAT_INT_REGS:122584,122584 INT_SSE_REGS:6492,6492 FLOAT_INT_SSE_REGS:122584,122584 ALL_REGS:122584,122584 MEM:2521,2521
  a6(r120,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:567,567
  a7(r119,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:486,486
  a8(r118,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:567,567
  a9(r98,l0) costs: GENERAL_REGS:232,232 SSE_FIRST_REG:4036,11316 SSE_REGS:4036,11316 ALL_SSE_REGS:4036,11316 MMX_REGS:5471,17301 FP_TOP_SSE_REGS:72456,261736 FP_SECOND_SSE_REGS:72456,261736 FLOAT_SSE_REGS:72456,261736 FLOAT_INT_REGS:72456,261736 INT_SSE_REGS:4323,12513 FLOAT_INT_SSE_REGS:72456,261736 ALL_REGS:72456,261736 MEM:1557,4287
  a10(r97,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:972,33546 SSE_REGS:972,33546 ALL_SSE_REGS:972,33546 MMX_REGS:972,46511 FP_TOP_SSE_REGS:8424,737048 FP_SECOND_SSE_REGS:8424,737048 FLOAT_SSE_REGS:8424,737048 FLOAT_INT_REGS:8424,737048 INT_SSE_REGS:972,36139 FLOAT_INT_SSE_REGS:8424,737048 ALL_REGS:8424,737048 MEM:324,12516
  a11(r92,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:972,34642 SSE_REGS:972,34642 ALL_SSE_REGS:972,34642 MMX_REGS:972,48292 FP_TOP_SSE_REGS:8424,765544 FP_SECOND_SSE_REGS:8424,765544 FLOAT_SSE_REGS:8424,765544 FLOAT_INT_REGS:8424,765544 INT_SSE_REGS:972,37372 FLOAT_INT_SSE_REGS:8424,765544 ALL_REGS:8424,765544 MEM:324,12154
  a12(r87,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1778,1778 SSE_REGS:1778,1778 ALL_SSE_REGS:1778,1778 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:34528,34528 FP_SECOND_SSE_REGS:34528,34528 FLOAT_SSE_REGS:34528,34528 FLOAT_INT_REGS:34528,34528 INT_SSE_REGS:1854,1854 FLOAT_INT_SSE_REGS:34528,34528 ALL_REGS:34528,34528 MEM:574,574
  a13(r94,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1778,1778 SSE_REGS:1778,1778 ALL_SSE_REGS:1778,1778 MMX_REGS:2158,2158 FP_TOP_SSE_REGS:25528,25528 FP_SECOND_SSE_REGS:25528,25528 FLOAT_SSE_REGS:25528,25528 FLOAT_INT_REGS:25528,25528 INT_SSE_REGS:1854,1854 FLOAT_INT_SSE_REGS:25528,25528 ALL_REGS:25528,25528 MEM:664,664
  a14(r111,l0) costs: GENERAL_REGS:412,412 SSE_FIRST_REG:3360,3360 SSE_REGS:3360,3360 ALL_SSE_REGS:3360,3360 MMX_REGS:4260,4260 FP_TOP_SSE_REGS:61980,61980 FP_SECOND_SSE_REGS:61980,61980 FLOAT_SSE_REGS:61980,61980 FLOAT_INT_REGS:61980,61980 INT_SSE_REGS:3540,3540 FLOAT_INT_SSE_REGS:61980,61980 ALL_REGS:61980,61980 MEM:1300,1300
  a15(r116,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:28440,28440 FP_SECOND_SSE_REGS:28440,28440 FLOAT_SSE_REGS:28440,28440 FLOAT_INT_REGS:28440,28440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:28440,28440 ALL_REGS:28440,28440 MEM:0,0
  a16(r105,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:961,961 SSE_REGS:961,961 ALL_SSE_REGS:961,961 MMX_REGS:1196,1196 FP_TOP_SSE_REGS:19136,19136 FP_SECOND_SSE_REGS:19136,19136 FLOAT_SSE_REGS:19136,19136 FLOAT_INT_REGS:19136,19136 INT_SSE_REGS:1008,1008 FLOAT_INT_SSE_REGS:19136,19136 ALL_REGS:19136,19136 MEM:322,322
  a17(r117,l0) costs: GENERAL_REGS:180,180 SSE_FIRST_REG:2798,2798 SSE_REGS:2798,2798 ALL_SSE_REGS:2798,2798 MMX_REGS:3703,3703 FP_TOP_SSE_REGS:56548,56548 FP_SECOND_SSE_REGS:56548,56548 FLOAT_SSE_REGS:56548,56548 FLOAT_INT_REGS:56548,56548 INT_SSE_REGS:2979,2979 FLOAT_INT_SSE_REGS:56548,56548 ALL_REGS:56548,56548 MEM:1128,1128
  a18(r91,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a19(r92,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:33670,33670 SSE_REGS:33670,33670 ALL_SSE_REGS:33670,33670 MMX_REGS:47320,47320 FP_TOP_SSE_REGS:757120,757120 FP_SECOND_SSE_REGS:757120,757120 FLOAT_SSE_REGS:757120,757120 FLOAT_INT_REGS:757120,757120 INT_SSE_REGS:36400,36400 FLOAT_INT_SSE_REGS:757120,757120 ALL_REGS:757120,757120 MEM:11830,11830
  a20(r93,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a21(r97,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:32574,32574 SSE_REGS:32574,32574 ALL_SSE_REGS:32574,32574 MMX_REGS:45539,45539 FP_TOP_SSE_REGS:728624,728624 FP_SECOND_SSE_REGS:728624,728624 FLOAT_SSE_REGS:728624,728624 FLOAT_INT_REGS:728624,728624 INT_SSE_REGS:35167,35167 FLOAT_INT_SSE_REGS:728624,728624 ALL_REGS:728624,728624 MEM:12192,12192
  a22(r98,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:7280,7280 SSE_REGS:7280,7280 ALL_SSE_REGS:7280,7280 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:189280,189280 FP_SECOND_SSE_REGS:189280,189280 FLOAT_SSE_REGS:189280,189280 FLOAT_INT_REGS:189280,189280 INT_SSE_REGS:8190,8190 FLOAT_INT_SSE_REGS:189280,189280 ALL_REGS:189280,189280 MEM:2730,2730
  a23(r104,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a24(r115,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a25(r95,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:18014,18014 SSE_REGS:18014,18014 ALL_SSE_REGS:18014,18014 MMX_REGS:21879,21879 FP_TOP_SSE_REGS:259064,259064 FP_SECOND_SSE_REGS:259064,259064 FLOAT_SSE_REGS:259064,259064 FLOAT_INT_REGS:259064,259064 INT_SSE_REGS:18787,18787 FLOAT_INT_SSE_REGS:259064,259064 ALL_REGS:259064,259064 MEM:6732,6732

   Insn 88(l0): point = 0
   Insn 87(l0): point = 2
   Insn 86(l0): point = 4
   Insn 85(l0): point = 6
   Insn 82(l0): point = 9
   Insn 81(l0): point = 11
   Insn 79(l0): point = 14
   Insn 78(l0): point = 16
   Insn 75(l0): point = 19
   Insn 70(l0): point = 21
   Insn 69(l0): point = 23
   Insn 68(l0): point = 25
   Insn 10(l0): point = 28
   Insn 53(l0): point = 30
   Insn 51(l0): point = 33
   Insn 50(l0): point = 35
   Insn 47(l0): point = 38
   Insn 45(l0): point = 41
   Insn 44(l0): point = 43
   Insn 43(l0): point = 45
   Insn 137(l0): point = 47
   Insn 9(l0): point = 50
   Insn 8(l0): point = 52
   Insn 135(l0): point = 55
   Insn 39(l0): point = 57
   Insn 38(l0): point = 59
   Insn 37(l0): point = 61
   Insn 36(l0): point = 63
   Insn 35(l0): point = 65
   Insn 34(l0): point = 67
   Insn 33(l0): point = 69
   Insn 5(l0): point = 72
   Insn 133(l0): point = 75
   Insn 6(l0): point = 77
   Insn 131(l0): point = 80
   Insn 7(l0): point = 82
   Insn 129(l0): point = 85
   Insn 30(l0): point = 88
   Insn 29(l0): point = 90
   Insn 28(l0): point = 92
   Insn 26(l0): point = 95
   Insn 25(l0): point = 97
   Insn 23(l0): point = 100
   Insn 22(l0): point = 102
   Insn 21(l0): point = 104
   Insn 19(l0): point = 107
   Insn 18(l0): point = 109
   Insn 16(l0): point = 111
   Insn 15(l0): point = 113
   Insn 14(l0): point = 115
   Insn 13(l0): point = 117
   Insn 2(l0): point = 119
   Insn 57(l1): point = 122
   Insn 56(l1): point = 124
   Insn 55(l1): point = 126
   Insn 66(l1): point = 129
   Insn 65(l1): point = 131
   Insn 63(l1): point = 133
   Insn 62(l1): point = 135
   Insn 59(l1): point = 138
 a0(r115): [1..119]
 a1(r123): [1..2]
 a2(r104): [85..92] [80..82] [75..77] [3..72]
 a3(r91): [55..65] [3..50]
 a4(r109): [55..57] [33..52] [5..19]
 a5(r93): [88..117] [12..63]
 a6(r120): [20..21]
 a7(r119): [22..23]
 a8(r118): [24..25]
 a9(r98): [88..115] [24..61]
 a10(r97): [28..28]
 a11(r92): [28..30]
 a12(r87): [39..43]
 a13(r94): [39..45]
 a14(r111): [88..113] [44..59]
 a15(r116): [46..47]
 a16(r105): [91..104]
 a17(r117): [93..111]
 a18(r91): [122..140]
 a19(r92): [122..140]
 a20(r93): [122..140]
 a21(r97): [122..140]
 a22(r98): [122..140]
 a23(r104): [122..140]
 a24(r115): [122..140]
 a25(r95): [139..140] [122..126]
Compressing live ranges: from 141 to 32 - 22%
Ranges after the compression:
 a0(r115): [0..27]
 a1(r123): [0..1]
 a2(r104): [2..25]
 a3(r91): [2..19]
 a4(r109): [12..19] [2..3]
 a5(r93): [24..27] [2..19]
 a6(r120): [4..5]
 a7(r119): [6..7]
 a8(r118): [8..9]
 a9(r98): [24..27] [8..19]
 a10(r97): [10..10]
 a11(r92): [10..11]
 a12(r87): [12..13]
 a13(r94): [12..15]
 a14(r111): [24..27] [14..19]
 a15(r116): [16..17]
 a16(r105): [24..27]
 a17(r117): [26..27]
 a18(r91): [28..31]
 a19(r92): [28..31]
 a20(r93): [28..31]
 a21(r97): [28..31]
 a22(r98): [28..31]
 a23(r104): [28..31]
 a24(r115): [28..31]
 a25(r95): [28..31]
    Creating cap  a26(r95,l0: a25(r95,l1))
+++Allocating 216 bytes for conflict table (uncompressed size 216)
;; a0(r115,l0) conflicts: a1(r123,l0) a4(r109,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a6(r120,l0) a7(r119,l0) a8(r118,l0) a9(r98,l0) a10(r97,l0) a11(r92,l0) a12(r87,l0) a13(r94,l0) a14(r111,l0) a15(r116,l0) a16(r105,l0) a17(r117,l0) a26(r95,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a1(r123,l0) conflicts: a0(r115,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r104,l0) conflicts: a0(r115,l0) a4(r109,l0) a3(r91,l0) a5(r93,l0) a6(r120,l0) a7(r119,l0) a8(r118,l0) a9(r98,l0) a10(r97,l0) a11(r92,l0) a12(r87,l0) a13(r94,l0) a14(r111,l0) a15(r116,l0) a16(r105,l0) a26(r95,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a3(r91,l0) conflicts: a0(r115,l0) a4(r109,l0) a2(r104,l0) a5(r93,l0) a6(r120,l0) a7(r119,l0) a8(r118,l0) a9(r98,l0) a10(r97,l0) a11(r92,l0) a12(r87,l0) a13(r94,l0) a14(r111,l0) a15(r116,l0) a26(r95,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r109,l0) conflicts: a0(r115,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0) a12(r87,l0) a13(r94,l0) a14(r111,l0) a15(r116,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r93,l0) conflicts: a0(r115,l0) a4(r109,l0) a2(r104,l0) a3(r91,l0) a6(r120,l0) a7(r119,l0) a8(r118,l0) a9(r98,l0) a10(r97,l0) a11(r92,l0) a12(r87,l0) a13(r94,l0) a14(r111,l0) a15(r116,l0) a16(r105,l0) a17(r117,l0) a26(r95,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r120,l0) conflicts: a0(r115,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a7(r119,l0) conflicts: a0(r115,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a8(r118,l0) conflicts: a0(r115,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a9(r98,l0) conflicts: a0(r115,l0) a4(r109,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a8(r118,l0) a10(r97,l0) a11(r92,l0) a12(r87,l0) a13(r94,l0) a14(r111,l0) a15(r116,l0) a16(r105,l0) a17(r117,l0) a26(r95,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a10(r97,l0) conflicts: a0(r115,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0) a11(r92,l0) a26(r95,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a11(r92,l0) conflicts: a0(r115,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0) a10(r97,l0) a26(r95,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a12(r87,l0) conflicts: a0(r115,l0) a4(r109,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0) a13(r94,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r94,l0) conflicts: a0(r115,l0) a4(r109,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0) a12(r87,l0) a14(r111,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a14(r111,l0) conflicts: a0(r115,l0) a4(r109,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0) a13(r94,l0) a15(r116,l0) a16(r105,l0) a17(r117,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r116,l0) conflicts: a0(r115,l0) a4(r109,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0) a14(r111,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a16(r105,l0) conflicts: a0(r115,l0) a2(r104,l0) a5(r93,l0) a9(r98,l0) a14(r111,l0) a17(r117,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a17(r117,l0) conflicts: a0(r115,l0) a5(r93,l0) a9(r98,l0) a14(r111,l0) a16(r105,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a18(r91,l1) conflicts: a19(r92,l1) a20(r93,l1) a21(r97,l1) a22(r98,l1) a23(r104,l1) a24(r115,l1) a25(r95,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a19(r92,l1) conflicts: a18(r91,l1) a20(r93,l1) a21(r97,l1) a22(r98,l1) a23(r104,l1) a24(r115,l1) a25(r95,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a20(r93,l1) conflicts: a18(r91,l1) a19(r92,l1) a21(r97,l1) a22(r98,l1) a23(r104,l1) a24(r115,l1) a25(r95,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a21(r97,l1) conflicts: a18(r91,l1) a19(r92,l1) a20(r93,l1) a22(r98,l1) a23(r104,l1) a24(r115,l1) a25(r95,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a22(r98,l1) conflicts: a18(r91,l1) a19(r92,l1) a20(r93,l1) a21(r97,l1) a23(r104,l1) a24(r115,l1) a25(r95,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a23(r104,l1) conflicts: a18(r91,l1) a19(r92,l1) a20(r93,l1) a21(r97,l1) a22(r98,l1) a24(r115,l1) a25(r95,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a24(r115,l1) conflicts: a18(r91,l1) a19(r92,l1) a20(r93,l1) a21(r97,l1) a22(r98,l1) a23(r104,l1) a25(r95,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a25(r95,l1) conflicts: a18(r91,l1) a19(r92,l1) a20(r93,l1) a21(r97,l1) a22(r98,l1) a23(r104,l1) a24(r115,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a26(r95,l0) conflicts: a0(r115,l0) a2(r104,l0) a3(r91,l0) a5(r93,l0) a9(r98,l0) a10(r97,l0) a11(r92,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a1(r123)<->a2(r104)@11:shuffle
  cp1:a1(r123)<->a3(r91)@11:shuffle
  cp2:a7(r119)<->a9(r98)@81:constraint
  cp3:a6(r120)<->a7(r119)@81:constraint
  cp4:a12(r87)<->a14(r111)@11:shuffle
  cp5:a2(r104)<->a17(r117)@1:shuffle
  pref0:a0(r115)<-hr2@135
  pref1:a3(r91)<-hr0@39
  regions=2, blocks=23, points=32
    allocnos=27 (big 0), copies=6, conflicts=1, ranges=30

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 22 21 20 19 15(->16:l1) 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r115 1r123 2r104 3r91 4r109 5r93 6r120 7r119 8r118 9r98 10r97 11r92 12r87 13r94 14r111 15r116 16r105 17r117 26r95
    modified regnos: 87 91 92 93 94 95 97 98 104 105 109 111 115 116 117 118 119 120 123
    border:
    Pressure: GENERAL_REGS=8
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@91726
          2:( 1-6)@4736
            3:( 3-6)@1482
      Allocno a0r115 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a1r123 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a2r104 of GENERAL_REGS(7) has 4 avail. regs  3-6, node:  3-6 (confl regs =  0 7-75)
      Allocno a3r91 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a4r109 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a5r93 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a6r120 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a7r119 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a8r118 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a9r98 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a10r97 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a11r92 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a12r87 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a13r94 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a14r111 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a15r116 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a16r105 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a17r117 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a26r95 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Forming thread by copy 2:a7r119-a9r98 (freq=81):
        Result (freq=1475): a7r119(162) a9r98(1313)
      Forming thread by copy 3:a6r120-a7r119 (freq=81):
        Result (freq=1637): a6r120(162) a7r119(162) a9r98(1313)
      Forming thread by copy 0:a1r123-a2r104 (freq=11):
        Result (freq=388): a1r123(180) a2r104(208)
      Pushing a16(r105,l0)(cost 0)
      Pushing a8(r118,l0)(cost 0)
      Pushing a17(r117,l0)(cost 0)
      Pushing a1(r123,l0)(cost 0)
      Pushing a7(r119,l0)(cost 0)
      Pushing a6(r120,l0)(cost 0)
      Pushing a2(r104,l0)(potential spill: pri=43, cost=741)
        Making a10(r97,l0) colorable
        Making a11(r92,l0) colorable
        Making a12(r87,l0) colorable
        Making a15(r116,l0) colorable
        Making a26(r95,l0: a25(r95,l1)) colorable
      Forming thread by copy 4:a12r87-a14r111 (freq=11):
        Result (freq=552): a12r87(166) a14r111(386)
      Pushing a15(r116,l0)(cost 0)
        Making a14(r111,l0) colorable
      Pushing a12(r87,l0)(cost 574)
        Making a4(r109,l0) colorable
        Making a13(r94,l0) colorable
      Pushing a13(r94,l0)(cost 664)
      Pushing a4(r109,l0)(cost 792)
      Pushing a14(r111,l0)(cost 888)
        Making a3(r91,l0) colorable
        Making a5(r93,l0) colorable
        Making a9(r98,l0) colorable
      Pushing a3(r91,l0)(cost 1679)
        Making a0(r115,l0) colorable
      Pushing a0(r115,l0)(cost 2368)
      Pushing a5(r93,l0)(cost 2289)
      Pushing a9(r98,l0)(cost 4055)
      Pushing a26(r95,l0: a25(r95,l1))(cost 6732)
      Pushing a10(r97,l0)(cost 12516)
      Pushing a11(r92,l0)(cost 12154)
      Popping a11(r92,l0)  -- assign reg 1
      Popping a10(r97,l0)  -- assign reg 3
      Popping a26(r95,l0: a25(r95,l1))  -- assign reg 4
      Popping a9(r98,l0)  -- assign reg 5
      Popping a5(r93,l0)  -- assign reg 6
      Popping a0(r115,l0)  -- assign reg 2
      Popping a3(r91,l0)  -- assign reg 0
      Popping a14(r111,l0)  -- assign reg 1
      Popping a4(r109,l0)  -- assign reg 3
      Popping a13(r94,l0)  -- assign reg 4
      Popping a12(r87,l0)  -- assign reg 1
      Popping a15(r116,l0)  -- assign reg 4
      Popping a2(r104,l0)  -- spill
      Popping a6(r120,l0)  -- assign reg 5
      Popping a7(r119,l0)  -- assign reg 5
      Popping a1(r123,l0)  -- assign reg 0
      Popping a17(r117,l0)  -- assign reg 0
      Popping a8(r118,l0)  -- assign reg 1
      Popping a16(r105,l0)  -- assign reg 3

  Loop 1 (parent 0, header bb16, depth 1)
    bbs: 18(->19:l0) 17 16
    all: 18r91 19r92 20r93 21r97 22r98 23r104 24r115 25r95
    modified regnos: 92 95 97
    border: 18r91 19r92 20r93 21r97 22r98 23r104 24r115
    Pressure: GENERAL_REGS=8
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@66968
      Spill a23(r104,l1)
      Allocno a18r91 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a19r92 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a20r93 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a21r97 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a22r98 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a24r115 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a25r95 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Pushing a24(r115,l1)(cost 0)
      Pushing a20(r93,l1)(cost 0)
      Pushing a18(r91,l1)(cost 0)
      Pushing a22(r98,l1)(cost 0)
      Pushing a25(r95,l1)(cost 0)
      Pushing a21(r97,l1)(cost 0)
      Pushing a19(r92,l1)(cost 0)
      Popping a19(r92,l1)  -- assign reg 1
      Popping a21(r97,l1)  -- assign reg 3
      Popping a25(r95,l1)  -- assign reg 4
      Popping a22(r98,l1)  -- assign reg 5
      Popping a18(r91,l1)  -- assign reg 0
      Popping a20(r93,l1)  -- assign reg 6
      Popping a24(r115,l1)  -- assign reg 2
Disposition:
   12:r87  l0     1   18:r91  l1     0    3:r91  l0     0   19:r92  l1     1
   11:r92  l0     1   20:r93  l1     6    5:r93  l0     6   13:r94  l0     4
   25:r95  l1     4   21:r97  l1     3   10:r97  l0     3   22:r98  l1     5
    9:r98  l0     5   23:r104 l1   mem    2:r104 l0   mem   16:r105 l0     3
    4:r109 l0     3   14:r111 l0     1   24:r115 l1     2    0:r115 l0     2
   15:r116 l0     4   17:r117 l0     0    8:r118 l0     1    7:r119 l0     5
    6:r120 l0     5    1:r123 l0     0
New iteration of spill/restore move
      Changing RTL for loop 1 (header bb16)
  0 vs parent 0:      Creating newreg=128 from oldreg=91
  1 vs parent 1:      Creating newreg=129 from oldreg=92
  6 vs parent 6:      Creating newreg=130 from oldreg=93
  3 vs parent 3:      Creating newreg=131 from oldreg=97
  5 vs parent 5:      Creating newreg=132 from oldreg=98
  2 vs parent 2:      Creating newreg=133 from oldreg=115
rescanning insn with uid = 62.
rescanning insn with uid = 63.
rescanning insn with uid = 65.
rescanning insn with uid = 59.
rescanning insn with uid = 55.
rescanning insn with uid = 56.
scanning new insn with uid = 138.
scanning new insn with uid = 139.
scanning new insn with uid = 140.
scanning new insn with uid = 141.
scanning new insn with uid = 142.
scanning new insn with uid = 143.
scanning new insn with uid = 144.
scanning new insn with uid = 145.
scanning new insn with uid = 146.
scanning new insn with uid = 147.
    Adding cp6:a3r91-a18r128
    Adding range [33..33] to allocno a3r91
    Adding cp7:a11r92-a19r129
    Adding range [33..35] to allocno a11r92
    Adding cp8:a5r93-a20r130
    Adding range [33..37] to allocno a5r93
    Adding cp9:a10r97-a21r131
    Adding range [33..39] to allocno a10r97
    Adding cp10:a9r98-a22r132
    Adding range [33..41] to allocno a9r98
    Adding cp11:a0r115-a24r133
    Adding range [33..43] to allocno a0r115
    Adding range [34..44] to allocno a18r128
    Adding range [36..44] to allocno a19r129
    Adding range [38..44] to allocno a20r130
    Adding range [40..44] to allocno a21r131
    Adding range [42..44] to allocno a22r132
    Adding range [44..44] to allocno a24r133
    Adding range [33..44] to live through  allocno a2r104
    Adding cp12:a3r91-a18r128
    Adding range [46..46] to allocno a18r128
    Adding cp13:a5r93-a20r130
    Adding range [46..48] to allocno a20r130
    Adding cp14:a9r98-a22r132
    Adding range [46..50] to allocno a22r132
    Adding cp15:a0r115-a24r133
    Adding range [46..52] to allocno a24r133
    Adding range [47..53] to allocno a3r91
    Adding range [49..53] to allocno a5r93
    Adding range [51..53] to allocno a9r98
    Adding range [53..53] to allocno a0r115
    Adding range [46..53] to live through  allocno a2r104
    New r128: setting preferred AREG, alternative GENERAL_REGS
    New r129: setting preferred GENERAL_REGS, alternative NO_REGS
    New r130: setting preferred GENERAL_REGS, alternative NO_REGS
    New r131: setting preferred GENERAL_REGS, alternative NO_REGS
    New r132: setting preferred GENERAL_REGS, alternative NO_REGS
    New r133: setting preferred CREG, alternative GENERAL_REGS
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 24 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
;;
;; Loop 1
;;  header 16, latch 18
;;  depth 1, outer 0
;;  nodes: 16 18 17
;; 2 succs { 7 3 }
;; 3 succs { 8 4 }
;; 4 succs { 9 5 }
;; 5 succs { 6 11 }
;; 6 succs { 10 }
;; 7 succs { 10 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 20 }
;; 15 succs { 16 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 16 19 }
;; 19 succs { 20 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 1 }
+++Costs: overall 2777, reg 2036, mem 741, ld 0, st 0, move 1620
+++       move loops 0, new jumps 0


void std::vector<_Tp, _Alloc>::_M_emplace_back_aux(_Args&& ...) [with _Args = {const int&}; _Tp = int; _Alloc = std::allocator<int>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={3d,1u} r1={3d} r2={3d,1u} r6={1d,22u} r7={1d,28u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,22u,1e} r17={23d,9u} r18={2d} r19={2d} r20={1d,22u} r21={3d} r22={3d} r23={3d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={3d} r30={3d} r31={3d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r87={1d,1u} r91={3d,8u} r92={1d,1u} r93={3d,8u} r94={1d,1u} r95={1d,1u} r97={1d,1u} r98={3d,5u} r104={4d,2u} r105={1d,3u} r109={3d,1u} r111={2d,3u,1e} r115={2d,8u,1e} r116={1d,1u} r117={1d,4u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r123={1d,1u} r128={1d,1u} r129={2d,3u} r130={1d,1u} r131={2d,3u} r132={1d,2u} r133={1d,1u} 
;;    total ref usage 385{214d,168u,3e} in 70{68 regular + 2 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 98 111 115 117
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 4 2 (set (reg/f:SI 115 [ this ])
        (reg:SI 2 cx [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:407 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ this ])
        (nil)))
(note 4 2 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 4 14 2 (set (reg/f:SI 93 [ D.83068 ])
        (mem/f:SI (reg/f:SI 115 [ this ]) [6 MEM[(int * *)this_2(D)]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 98 [ D.83068 ])
        (mem/f:SI (plus:SI (reg/f:SI 115 [ this ])
                (const_int 4 [0x4])) [6 MEM[(int * *)this_2(D) + 4B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 111 [ D.83069 ])
                (minus:SI (reg/f:SI 98 [ D.83068 ])
                    (reg/f:SI 93 [ D.83068 ])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 263 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 16 15 18 2 (parallel [
            (set (reg:SI 117 [ D.83069 ])
                (ashiftrt:SI (reg:SI 111 [ D.83069 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 530 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (div:SI (reg:SI 111 [ D.83069 ])
                (const_int 4 [0x4]))
            (nil))))
(insn 18 16 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 117 [ D.83069 ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_algobase.h:222 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 95)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_algobase.h:222 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 95)
;;  succ:       7 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98 111 115 117

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(6){ }u16(7){ }u17(16){ }u18(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98 111 115 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 117
;; lr  def 	 17 [flags] 105
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (parallel [
            (set (reg/v:SI 105 [ __len ])
                (ashift:SI (reg:SI 117 [ D.83069 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1427 496 {*ashlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 22 21 23 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 117 [ D.83069 ])
            (reg/v:SI 105 [ __len ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 7 {*cmpsi_1}
     (nil))
(jump_insn 23 22 24 3 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 99)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 99)
;;  succ:       8 [100.0%] 
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98 105 111 115 117

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u23(6){ }u24(7){ }u25(16){ }u26(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98 105 111 115 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 105
;; lr  def 	 17 [flags]
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 105 [ __len ])
            (const_int 1073741823 [0x3fffffff]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 7 {*cmpsi_1}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 103)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 103)
;;  succ:       9 [100.0%] 
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98 105 111 115 117

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u29(6){ }u30(7){ }u31(16){ }u32(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98 105 111 115 117
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 105 117
;; lr  def 	 17 [flags] 104
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (parallel [
            (set (reg:SI 104 [ D.83065 ])
                (ashift:SI (reg:SI 117 [ D.83069 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 496 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 117 [ D.83069 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 105 [ __len ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:170 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg/v:SI 105 [ __len ])
        (nil)))
(jump_insn 30 29 128 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 107)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:170 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 107)
;;  succ:       6 (FALLTHRU)
;;              11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98 104 111 115

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 128 30 129 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 129 128 130 6 (set (pc)
        (label_ref 31)) 636 {jump}
     (nil)
 -> 31)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 115

(barrier 130 129 95)
;; basic block 7, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u36(6){ }u37(7){ }u38(16){ }u39(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104
(code_label 95 130 94 7 31 "" [1 uses])
(note 94 95 7 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 7 94 131 7 (set (reg:SI 104 [ D.83065 ])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_algobase.h:222 90 {*movsi_internal}
     (nil))
(jump_insn 131 7 132 7 (set (pc)
        (label_ref 31)) 636 {jump}
     (nil)
 -> 31)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 115

(barrier 132 131 99)
;; basic block 8, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u40(6){ }u41(7){ }u42(16){ }u43(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104
(code_label 99 132 98 8 32 "" [1 uses])
(note 98 99 6 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 6 98 133 8 (set (reg:SI 104 [ D.83065 ])
        (const_int -4 [0xfffffffffffffffc])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 90 {*movsi_internal}
     (nil))
(jump_insn 133 6 134 8 (set (pc)
        (label_ref 31)) 636 {jump}
     (nil)
 -> 31)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 115

(barrier 134 133 103)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u44(6){ }u45(7){ }u46(16){ }u47(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104
(code_label 103 134 102 9 33 "" [1 uses])
(note 102 103 5 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 5 102 31 9 (set (reg:SI 104 [ D.83065 ])
        (const_int -4 [0xfffffffffffffffc])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 90 {*movsi_internal}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 115

;; basic block 10, loop depth 0, count 0, freq 261, maybe hot
;; Invalid sum of incoming frequencies 900, should be 261
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              7 [100.0%] 
;;              6 [100.0%] 
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u48(6){ }u49(7){ }u50(16){ }u51(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 115
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 91 93 98 109 111
(code_label 31 5 32 10 24 "" [3 uses])
(note 32 31 33 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 10 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 104 [ D.83065 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(call_insn 34 33 35 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znwj") [flags 0x43]  <function_decl 01938d00 operator new>) [0 operator new S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 648 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 35 34 36 10 (set (reg/v/f:SI 91 [ __new_finish ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 36 35 37 10 (set (reg/f:SI 93 [ D.83068 ])
        (mem/f:SI (reg/f:SI 115 [ this ]) [6 MEM[(int * *)this_2(D)]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 37 36 38 10 (set (reg/f:SI 98 [ D.83068 ])
        (mem/f:SI (plus:SI (reg/f:SI 115 [ this ])
                (const_int 4 [0x4])) [6 MEM[(int * *)this_2(D) + 4B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 38 37 39 10 (parallel [
            (set (reg:SI 111 [ D.83069 ])
                (minus:SI (reg/f:SI 98 [ D.83068 ])
                    (reg/f:SI 93 [ D.83068 ])))
            (clobber (reg:CC 17 flags))
        ]) 263 {*subsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 39 38 135 10 (parallel [
            (set (reg/f:SI 109 [ D.83071 ])
                (plus:SI (reg/v/f:SI 91 [ __new_finish ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 135 39 136 10 (set (pc)
        (label_ref 40)) 636 {jump}
     (nil)
 -> 40)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 98 104 109 111 115

(barrier 136 135 107)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       5 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u62(6){ }u63(7){ }u64(16){ }u65(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98 104 111 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 109
(code_label 107 136 106 11 34 "" [1 uses])
(note 106 107 8 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 8 106 9 11 (set (reg/f:SI 109 [ D.83071 ])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:170 90 {*movsi_internal}
     (nil))
(insn 9 8 40 11 (set (reg/v/f:SI 91 [ __new_finish ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:170 90 {*movsi_internal}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 98 104 109 111 115

;; basic block 12, loop depth 0, count 0, freq 900, maybe hot
;; Invalid sum of incoming frequencies 261, should be 900
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u66(6){ }u67(7){ }u68(16){ }u69(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 98 104 109 111 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 111
;; lr  def 	 17 [flags] 87 94 116
(code_label 40 9 41 12 25 "" [1 uses])
(note 41 40 42 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 42 41 137 12 NOTE_INSN_DELETED)
(insn 137 42 43 12 (set (reg/v/f:SI 116 [ __args#0 ])
        (mem/f/c:SI (reg/f:SI 16 argp) [6 __args#0+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (reg/f:SI 16 argp) [6 __args#0+0 S4 A32])
        (nil)))
(insn 43 137 44 12 (set (reg:SI 94 [ D.83069 ])
        (mem:SI (reg/v/f:SI 116 [ __args#0 ]) [21 *__args#0_5(D)+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 116 [ __args#0 ])
        (nil)))
(insn 44 43 45 12 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (reg/v/f:SI 91 [ __new_finish ])
                        (reg:SI 111 [ D.83069 ]))
                    (const_int 0 [0])))
            (set (reg/f:SI 87 [ D.83066 ])
                (plus:SI (reg/v/f:SI 91 [ __new_finish ])
                    (reg:SI 111 [ D.83069 ])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 228 {*addsi_2}
     (expr_list:REG_DEAD (reg:SI 111 [ D.83069 ])
        (nil)))
(jump_insn 45 44 46 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 48)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 48)
;;  succ:       13 [85.0%]  (FALLTHRU)
;;              14 [15.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 91 93 94 98 104 109 115

;; basic block 13, loop depth 0, count 0, freq 765, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 [85.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u75(6){ }u76(7){ }u77(16){ }u78(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 91 93 94 98 104 109 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 94
;; lr  def 	
(note 46 45 47 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 13 (set (mem:SI (reg/f:SI 87 [ D.83066 ]) [21 *_9+0 S4 A32])
        (reg:SI 94 [ D.83069 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94 [ D.83069 ])
        (expr_list:REG_DEAD (reg/f:SI 87 [ D.83066 ])
            (nil))))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 98 104 109 115

;; basic block 14, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       12 [15.0%] 
;;              13 [100.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u81(6){ }u82(7){ }u83(16){ }u84(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 98 104 109 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 98
;; lr  def 	 17 [flags]
(code_label 48 47 49 14 26 "" [1 uses])
(note 49 48 50 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 93 [ D.83068 ])
            (reg/f:SI 98 [ D.83068 ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 7 {*cmpsi_1}
     (nil))
(jump_insn 51 50 52 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 76)
;;  succ:       15 [91.0%]  (FALLTHRU)
;;              20 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 98 104 109 115

;; basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 [91.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u88(6){ }u89(7){ }u90(16){ }u91(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 98 104 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 98 115
;; lr  def 	 92 97 128 129 130 131 132 133
(note 52 51 53 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 10 15 (set (reg:SI 92 [ ivtmp.296 ])
        (reg/f:SI 93 [ D.83068 ])) 90 {*movsi_internal}
     (nil))
(insn 10 53 138 15 (set (reg/v/f:SI 97 [ __new_finish ])
        (reg/v/f:SI 91 [ __new_finish ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 90 {*movsi_internal}
     (nil))
(insn 138 10 139 15 (set (reg/v/f:SI 128 [orig:91 __new_finish ] [91])
        (reg/v/f:SI 91 [ __new_finish ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 91 [ __new_finish ])
        (nil)))
(insn 139 138 140 15 (set (reg:SI 129 [orig:92 ivtmp.296 ] [92])
        (reg:SI 92 [ ivtmp.296 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ ivtmp.296 ])
        (nil)))
(insn 140 139 141 15 (set (reg/f:SI 130 [orig:93 D.83068 ] [93])
        (reg/f:SI 93 [ D.83068 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 93 [ D.83068 ])
        (nil)))
(insn 141 140 142 15 (set (reg/v/f:SI 131 [orig:97 __new_finish ] [97])
        (reg/v/f:SI 97 [ __new_finish ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 97 [ __new_finish ])
        (nil)))
(insn 142 141 143 15 (set (reg/f:SI 132 [orig:98 D.83068 ] [98])
        (reg/f:SI 98 [ D.83068 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 98 [ D.83068 ])
        (nil)))
(insn 143 142 64 15 (set (reg/f:SI 133 [orig:115 this ] [115])
        (reg/f:SI 115 [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 115 [ this ])
        (nil)))
;;  succ:       16 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 128 129 130 131 132 133

;; basic block 16, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;;              18 [91.0%]  (DFS_BACK)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u94(6){ }u95(7){ }u96(16){ }u97(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 128 129 130 131 132 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129 131
;; lr  def 	 17 [flags] 95
(code_label 64 143 54 16 29 "" [1 uses])
(note 54 64 55 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 16 (set (reg:SI 95 [ D.83069 ])
        (mem:SI (reg:SI 129 [orig:92 ivtmp.296 ] [92]) [21 MEM[base: _3, offset: 0]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_construct.h:75 90 {*movsi_internal}
     (nil))
(insn 56 55 57 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:SI 131 [orig:97 __new_finish ] [97])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_construct.h:75 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 57 56 58 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 60)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_construct.h:75 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 60)
;;  succ:       17 [85.0%]  (FALLTHRU)
;;              18 [15.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 104 128 129 130 131 132 133

;; basic block 17, loop depth 1, count 0, freq 7735, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 [85.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u101(6){ }u102(7){ }u103(16){ }u104(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 104 128 129 130 131 132 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 95 131
;; lr  def 	
(note 58 57 59 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 17 (set (mem:SI (reg/v/f:SI 131 [orig:97 __new_finish ] [97]) [21 MEM[base: __new_finish_57, offset: 0B]+0 S4 A32])
        (reg:SI 95 [ D.83069 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 95 [ D.83069 ])
        (nil)))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 128 129 130 131 132 133

;; basic block 18, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16 [15.0%] 
;;              17 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u107(6){ }u108(7){ }u109(16){ }u110(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 128 129 130 131 132 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129 131 132
;; lr  def 	 17 [flags] 129 131
(code_label 60 59 61 18 28 "" [1 uses])
(note 61 60 62 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 18 (parallel [
            (set (reg/v/f:SI 131 [orig:97 __new_finish ] [97])
                (plus:SI (reg/v/f:SI 131 [orig:97 __new_finish ] [97])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 63 62 65 18 (parallel [
            (set (reg:SI 129 [orig:92 ivtmp.296 ] [92])
                (plus:SI (reg:SI 129 [orig:92 ivtmp.296 ] [92])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 65 63 66 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 132 [orig:98 D.83068 ] [98])
            (reg:SI 129 [orig:92 ivtmp.296 ] [92]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 7 {*cmpsi_1}
     (nil))
(jump_insn 66 65 67 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 64)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 64)
;;  succ:       16 [91.0%]  (DFS_BACK)
;;              19 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 128 129 130 131 132 133

;; basic block 19, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u116(6){ }u117(7){ }u118(16){ }u119(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 128 130 132 133
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 130 132 133
;; lr  def 	 17 [flags] 91 93 98 109 115 118 119 120
(note 67 66 144 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 144 67 145 19 (set (reg/v/f:SI 91 [ __new_finish ])
        (reg/v/f:SI 128 [orig:91 __new_finish ] [91])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 128 [orig:91 __new_finish ] [91])
        (nil)))
(insn 145 144 146 19 (set (reg/f:SI 93 [ D.83068 ])
        (reg/f:SI 130 [orig:93 D.83068 ] [93])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 130 [orig:93 D.83068 ] [93])
        (nil)))
(insn 146 145 147 19 (set (reg/f:SI 98 [ D.83068 ])
        (reg/f:SI 132 [orig:98 D.83068 ] [98])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 132 [orig:98 D.83068 ] [98])
        (nil)))
(insn 147 146 68 19 (set (reg/f:SI 115 [ this ])
        (reg/f:SI 133 [orig:115 this ] [115])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 133 [orig:115 this ] [115])
        (nil)))
(insn 68 147 69 19 (parallel [
            (set (reg/f:SI 118 [ D.83066 ])
                (plus:SI (reg/f:SI 93 [ D.83068 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 69 68 70 19 (parallel [
            (set (reg:SI 119 [ D.83067 ])
                (minus:SI (reg/f:SI 98 [ D.83068 ])
                    (reg/f:SI 118 [ D.83066 ])))
            (clobber (reg:CC 17 flags))
        ]) 263 {*subsi_1}
     (expr_list:REG_DEAD (reg/f:SI 118 [ D.83066 ])
        (expr_list:REG_DEAD (reg/f:SI 98 [ D.83068 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 70 69 71 19 (parallel [
            (set (reg:SI 120 [ D.83067 ])
                (lshiftrt:SI (reg:SI 119 [ D.83067 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 529 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 119 [ D.83067 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 71 70 72 19 NOTE_INSN_DELETED)
(note 72 71 74 19 NOTE_INSN_DELETED)
(note 74 72 75 19 NOTE_INSN_DELETED)
(insn 75 74 76 19 (set (reg/f:SI 109 [ D.83071 ])
        (plus:SI (plus:SI (mult:SI (reg:SI 120 [ D.83067 ])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 91 [ __new_finish ]))
            (const_int 8 [0x8]))) 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 120 [ D.83067 ])
        (nil)))
;;  succ:       20 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 104 109 115

;; basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 [100.0%]  (FALLTHRU)
;;              14 [9.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u129(6){ }u130(7){ }u131(16){ }u132(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 104 109 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(code_label 76 75 77 20 27 "" [1 uses])
(note 77 76 78 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 93 [ D.83068 ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:177 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 79 78 80 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 83)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:177 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2165 (nil)))
 -> 83)
;;  succ:       21 [78.3%]  (FALLTHRU)
;;              22 [21.6%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 104 109 115

;; basic block 21, loop depth 0, count 0, freq 705, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       20 [78.3%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u135(6){ }u136(7){ }u137(16){ }u138(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 93 104 109 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 80 79 81 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 21 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 93 [ D.83068 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 93 [ D.83068 ])
        (nil)))
(call_insn 82 81 83 21 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       22 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 109 115

;; basic block 22, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 21, next block 1, flags: (RTL)
;;  pred:       21 [100.0%]  (FALLTHRU)
;;              20 [21.6%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u143(6){ }u144(7){ }u145(16){ }u146(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 109 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 109 115
;; lr  def 	 17 [flags] 123
(code_label 83 82 84 22 30 "" [1 uses])
(note 84 83 85 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 22 (set (mem/f:SI (reg/f:SI 115 [ this ]) [6 this_2(D)->D.72607._M_impl._M_start+0 S4 A32])
        (reg/v/f:SI 91 [ __new_finish ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:441 90 {*movsi_internal}
     (nil))
(insn 86 85 87 22 (set (mem/f:SI (plus:SI (reg/f:SI 115 [ this ])
                (const_int 4 [0x4])) [6 this_2(D)->D.72607._M_impl._M_finish+0 S4 A32])
        (reg/f:SI 109 [ D.83071 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:442 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 109 [ D.83071 ])
        (nil)))
(insn 87 86 88 22 (parallel [
            (set (reg:SI 123)
                (plus:SI (reg/v/f:SI 91 [ __new_finish ])
                    (reg:SI 104 [ D.83065 ])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:443 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 104 [ D.83065 ])
        (expr_list:REG_DEAD (reg/v/f:SI 91 [ __new_finish ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg/f:SI 115 [ this ])
                            (const_int 8 [0x8])) [6 this_2(D)->D.72607._M_impl._M_end_of_storage+0 S4 A32])
                    (nil))))))
(insn 88 87 0 22 (set (mem/f:SI (plus:SI (reg/f:SI 115 [ this ])
                (const_int 8 [0x8])) [6 this_2(D)->D.72607._M_impl._M_end_of_storage+0 S4 A32])
        (reg:SI 123)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:443 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 123)
        (expr_list:REG_DEAD (reg/f:SI 115 [ this ])
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::value_type = int] (_ZNSt6vectorIiSaIiEE9push_backERKi, funcdef_no=5790, decl_uid=72197, symbol_order=3279)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 8 (    1)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 88 uninteresting (no unique first use)
Reg 83 uninteresting (no unique first use)
Reg 86: def dominates all uses has unique first use
Reg 86 not local to one basic block
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 3 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 7 }
;; 6 succs { 1 }
;; 7 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 89: (insn_list:REG_DEP_TRUE 19 (nil))

Pass 0 for finding pseudo/allocno costs

    a2 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r87,l0) best CREG, allocno CREG
    a4 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:-1067,-1067 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:31992,31992 SSE_REGS:31992,31992 ALL_SSE_REGS:31992,31992 MMX_REGS:46987,46987 FP_TOP_SSE_REGS:723792,723792 FP_SECOND_SSE_REGS:723792,723792 FLOAT_SSE_REGS:723792,723792 FLOAT_INT_REGS:723792,723792 INT_SSE_REGS:34991,34991 FLOAT_INT_SSE_REGS:723792,723792 ALL_REGS:723792,723792 MEM:12929,12929
  a1(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:19992,19992 SSE_REGS:19992,19992 ALL_SSE_REGS:19992,19992 MMX_REGS:24987,24987 FP_TOP_SSE_REGS:311792,311792 FP_SECOND_SSE_REGS:311792,311792 FLOAT_SSE_REGS:311792,311792 FLOAT_INT_REGS:311792,311792 INT_SSE_REGS:20991,20991 FLOAT_INT_SSE_REGS:311792,311792 ALL_REGS:311792,311792 MEM:7996,7996
  a2(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:19572,19572 SSE_REGS:19572,19572 ALL_SSE_REGS:19572,19572 MMX_REGS:24232,24232 FP_TOP_SSE_REGS:387712,387712 FP_SECOND_SSE_REGS:387712,387712 FLOAT_SSE_REGS:387712,387712 FLOAT_INT_REGS:387712,387712 INT_SSE_REGS:20504,20504 FLOAT_INT_SSE_REGS:387712,387712 ALL_REGS:387712,387712 MEM:6524,6524
  a3(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:41616,41616 SSE_REGS:41616,41616 ALL_SSE_REGS:41616,41616 MMX_REGS:60126,60126 FP_TOP_SSE_REGS:874016,874016 FP_SECOND_SSE_REGS:874016,874016 FLOAT_SSE_REGS:874016,874016 FLOAT_INT_REGS:874016,874016 INT_SSE_REGS:45318,45318 FLOAT_INT_SSE_REGS:874016,874016 ALL_REGS:874016,874016 MEM:17876,17876
  a4(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:17888,17888 SSE_REGS:17888,17888 ALL_SSE_REGS:17888,17888 MMX_REGS:22078,22078 FP_TOP_SSE_REGS:271232,271232 FP_SECOND_SSE_REGS:271232,271232 FLOAT_SSE_REGS:271232,271232 FLOAT_INT_REGS:271232,271232 INT_SSE_REGS:18726,18726 FLOAT_INT_SSE_REGS:271232,271232 ALL_REGS:271232,271232 MEM:7080,7080


Pass 1 for finding pseudo/allocno costs

    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r87: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,-1067 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:35992,35992 SSE_REGS:35992,35992 ALL_SSE_REGS:35992,35992 MMX_REGS:50987,50987 FP_TOP_SSE_REGS:727792,727792 FP_SECOND_SSE_REGS:727792,727792 FLOAT_SSE_REGS:727792,727792 FLOAT_INT_REGS:727792,727792 INT_SSE_REGS:38991,38991 FLOAT_INT_SSE_REGS:727792,727792 ALL_REGS:727792,727792 MEM:15929,15929
  a1(r88,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:20992,20992 SSE_REGS:20992,20992 ALL_SSE_REGS:20992,20992 MMX_REGS:25987,25987 FP_TOP_SSE_REGS:315792,315792 FP_SECOND_SSE_REGS:315792,315792 FLOAT_SSE_REGS:315792,315792 FLOAT_INT_REGS:315792,315792 INT_SSE_REGS:21991,21991 FLOAT_INT_SSE_REGS:315792,315792 ALL_REGS:315792,315792 MEM:7996,7996
  a2(r89,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19572,19572 SSE_REGS:19572,19572 ALL_SSE_REGS:19572,19572 MMX_REGS:24232,24232 FP_TOP_SSE_REGS:387712,387712 FP_SECOND_SSE_REGS:387712,387712 FLOAT_SSE_REGS:387712,387712 FLOAT_INT_REGS:387712,387712 INT_SSE_REGS:20504,20504 FLOAT_INT_SSE_REGS:387712,387712 ALL_REGS:387712,387712 MEM:6524,6524
  a3(r83,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:42616,42616 SSE_REGS:42616,42616 ALL_SSE_REGS:42616,42616 MMX_REGS:61126,61126 FP_TOP_SSE_REGS:878016,878016 FP_SECOND_SSE_REGS:878016,878016 FLOAT_SSE_REGS:878016,878016 FLOAT_INT_REGS:878016,878016 INT_SSE_REGS:46318,46318 FLOAT_INT_SSE_REGS:878016,878016 ALL_REGS:878016,878016 MEM:17876,17876
  a4(r86,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:18820,18820 SSE_REGS:18820,18820 ALL_SSE_REGS:18820,18820 MMX_REGS:23010,23010 FP_TOP_SSE_REGS:274960,274960 FP_SECOND_SSE_REGS:274960,274960 FLOAT_SSE_REGS:274960,274960 FLOAT_INT_REGS:274960,274960 INT_SSE_REGS:19658,19658 FLOAT_INT_SSE_REGS:274960,274960 ALL_REGS:274960,274960 MEM:7080,7080

   Insn 26(l0): point = 1
   Insn 25(l0): point = 3
   Insn 24(l0): point = 5
   Insn 40(l0): point = 8
   Insn 19(l0): point = 10
   Insn 18(l0): point = 12
   Insn 15(l0): point = 15
   Insn 13(l0): point = 18
   Insn 12(l0): point = 20
   Insn 11(l0): point = 22
   Insn 9(l0): point = 25
   Insn 8(l0): point = 27
   Insn 7(l0): point = 29
   Insn 3(l0): point = 31
   Insn 2(l0): point = 33
 a0(r87): [11..33] [4..7]
 a1(r88): [23..31] [6..7]
 a2(r89): [11..12]
 a3(r83): [13..29]
 a4(r86): [16..22]
Compressing live ranges: from 36 to 8 - 22%
Ranges after the compression:
 a0(r87): [0..7]
 a1(r88): [6..7] [0..1]
 a2(r89): [2..3]
 a3(r83): [4..7]
 a4(r86): [4..5]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r87,l0) conflicts: a1(r88,l0) a2(r89,l0) a4(r86,l0) a3(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r88,l0) conflicts: a0(r87,l0) a3(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r89,l0) conflicts: a0(r87,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a3(r83,l0) conflicts: a0(r87,l0) a1(r88,l0) a4(r86,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r86,l0) conflicts: a0(r87,l0) a3(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a2(r89)<->a3(r83)@116:shuffle
  pref0:a0(r87)<-hr2@1600
  regions=1, blocks=8, points=8
    allocnos=5 (big 0), copies=1, conflicts=1, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r87 1r88 2r89 3r83 4r86
    modified regnos: 83 86 87 88 89
    border:
    Pressure: GENERAL_REGS=3
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@117212
      Allocno a0r87 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a1r88 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a2r89 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a3r83 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a4r86 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Forming thread by copy 0:a2r89-a3r83 (freq=116):
        Result (freq=6566): a2r89(1864) a3r83(4702)
      Pushing a4(r86,l0)(cost 0)
      Pushing a1(r88,l0)(cost 0)
      Pushing a0(r87,l0)(cost 0)
      Pushing a2(r89,l0)(cost 0)
      Pushing a3(r83,l0)(cost 0)
      Popping a3(r83,l0)  -- assign reg 0
      Popping a2(r89,l0)  -- assign reg 0
      Popping a0(r87,l0)  -- assign reg 2
      Popping a1(r88,l0)  -- assign reg 1
      Popping a4(r86,l0)  -- assign reg 1
Disposition:
    3:r83  l0     0    4:r86  l0     1    0:r87  l0     2    1:r88  l0     1
    2:r89  l0     0
New iteration of spill/restore move
+++Costs: overall -3201, reg -3201, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::value_type = int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={2d} r1={2d} r2={3d,2u} r6={1d,7u} r7={2d,10u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,9u} r17={4d,2u} r18={1d} r19={1d} r20={1d,7u} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r83={1d,4u} r86={1d,1u} r87={1d,4u,1e} r88={1d,2u} r89={1d,1u} 
;;    total ref usage 143{93d,49u,1e} in 15{14 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/f:SI 87 [ this ])
        (reg:SI 2 cx [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:913 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:SI 88 [ __x ])
        (mem/f/c:SI (reg/f:SI 16 argp) [6 __x+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:913 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 83 [ D.83074 ])
        (mem/f:SI (plus:SI (reg/f:SI 87 [ this ])
                (const_int 4 [0x4])) [6 this_3(D)->D.72607._M_impl._M_finish+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:915 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 83 [ D.83074 ])
            (mem/f:SI (plus:SI (reg/f:SI 87 [ this ])
                    (const_int 8 [0x8])) [6 this_3(D)->D.72607._M_impl._M_end_of_storage+0 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:915 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:915 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 672 (nil)))
 -> 22)
;;  succ:       3 [93.3%]  (FALLTHRU)
;;              6 [6.7%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 87 88

;; basic block 3, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [93.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u10(6){ }u11(7){ }u12(16){ }u13(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 87 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 88
;; lr  def 	 17 [flags] 86
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 86 [ D.83075 ])
        (mem:SI (reg/v/f:SI 88 [ __x ]) [21 MEM[(const int &)__x_6(D)]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 88 [ __x ])
        (nil)))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 83 [ D.83074 ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 16)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 16)
;;  succ:       4 [89.9%]  (FALLTHRU)
;;              5 [10.1%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87

;; basic block 4, loop depth 0, count 0, freq 8382, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [89.9%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u17(6){ }u18(7){ }u19(16){ }u20(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 86
;; lr  def 	
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (mem:SI (reg/f:SI 83 [ D.83074 ]) [21 *_4+0 S4 A32])
        (reg:SI 86 [ D.83075 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86 [ D.83075 ])
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 87

;; basic block 5, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [10.1%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u23(6){ }u24(7){ }u25(16){ }u26(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 87
;; lr  def 	 17 [flags] 89
(code_label 16 15 17 5 49 "" [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (parallel [
            (set (reg/f:SI 89)
                (plus:SI (reg/f:SI 83 [ D.83074 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:919 220 {*addsi_1}
     (expr_list:REG_DEAD (reg/f:SI 83 [ D.83074 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg/f:SI 87 [ this ])
                        (const_int 4 [0x4])) [6 this_3(D)->D.72607._M_impl._M_finish+0 S4 A32])
                (nil)))))
(insn 19 18 40 5 (set (mem/f:SI (plus:SI (reg/f:SI 87 [ this ])
                (const_int 4 [0x4])) [6 this_3(D)->D.72607._M_impl._M_finish+0 S4 A32])
        (reg/f:SI 89)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:919 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 89)
        (expr_list:REG_DEAD (reg/f:SI 87 [ this ])
            (nil))))
(jump_insn 40 19 41 5 (set (pc)
        (label_ref 39)) 636 {jump}
     (nil)
 -> 39)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 41 40 22)
;; basic block 6, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       2 [6.7%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u30(6){ }u31(7){ }u32(16){ }u33(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 22 41 23 6 48 "" [1 uses])
(note 23 22 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 6 (set (mem:SI (reg/f:SI 16 argp) [0  S4 A32])
        (reg/v/f:SI 88 [ __x ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:923 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 88 [ __x ])
        (nil)))
(insn 25 24 26 6 (set (reg:SI 2 cx)
        (reg/f:SI 87 [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:923 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 87 [ this ])
        (nil)))
(call_insn/j 26 25 28 6 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_") [flags 0x3]  <function_decl 07016d00 _M_emplace_back_aux>) [0 _M_emplace_back_aux S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:923 647 {*sibcall_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 16 argp) [0  S4 A32]))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 28 26 39)
;; basic block 7, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u42(6){ }u43(7){ }u44(16){ }u45(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 39 28 32 7 54 "" [1 uses])
(note 32 39 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const long long unsigned int, int> >*] (_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E, funcdef_no=5921, decl_uid=70302, symbol_order=3414)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 6 count 5 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 3 4 }
;; 3 succs { 3 4 }
;; 4 succs { 1 }
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 85: def dominates all uses has unique first use
Ignoring reg 87, has equiv memory
Reg 84: local to bb 3 def dominates all uses has unique first use
Found def insn 20 for 84 to be not moveable
Reg 85 not local to one basic block
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 3 4 }
;; 3 succs { 3 4 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 86: (insn_list:REG_DEP_TRUE 3 (nil))
init_insns for 87: (insn_list:REG_DEP_TRUE 15 (nil))

Pass 0 for finding pseudo/allocno costs

    a5 (r87,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r86,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r85,l1) best CREG, allocno CREG
    a1 (r85,l0) best CREG, allocno CREG
    a4 (r84,l1) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1800,45480 SSE_REGS:1800,45480 ALL_SSE_REGS:1800,45480 MMX_REGS:2250,68680 FP_TOP_SSE_REGS:28080,1065480 FP_SECOND_SSE_REGS:28080,1065480 FLOAT_SSE_REGS:28080,1065480 FLOAT_INT_REGS:28080,1065480 INT_SSE_REGS:1890,50120 FLOAT_INT_SSE_REGS:28080,1065480 ALL_REGS:28080,1065480 MEM:0,19110
  a1(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:-90,-90 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:720,8000 SSE_REGS:720,8000 ALL_SSE_REGS:720,8000 MMX_REGS:720,12550 FP_TOP_SSE_REGS:9000,198280 FP_SECOND_SSE_REGS:9000,198280 FLOAT_SSE_REGS:9000,198280 FLOAT_INT_REGS:9000,198280 INT_SSE_REGS:720,8910 FLOAT_INT_SSE_REGS:9000,198280 ALL_REGS:9000,198280 MEM:90,2820
  a2(r85,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:7280,7280 SSE_REGS:7280,7280 ALL_SSE_REGS:7280,7280 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:189280,189280 FP_SECOND_SSE_REGS:189280,189280 FLOAT_SSE_REGS:189280,189280 FLOAT_INT_REGS:189280,189280 INT_SSE_REGS:8190,8190 FLOAT_INT_SSE_REGS:189280,189280 ALL_REGS:189280,189280 MEM:2730,2730
  a3(r86,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:43680,43680 SSE_REGS:43680,43680 ALL_SSE_REGS:43680,43680 MMX_REGS:66430,66430 FP_TOP_SSE_REGS:1037400,1037400 FP_SECOND_SSE_REGS:1037400,1037400 FLOAT_SSE_REGS:1037400,1037400 FLOAT_INT_REGS:1037400,1037400 INT_SSE_REGS:48230,48230 FLOAT_INT_SSE_REGS:1037400,1037400 ALL_REGS:1037400,1037400 MEM:19110,19110
  a4(r84,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18200,18200 SSE_REGS:18200,18200 ALL_SSE_REGS:18200,18200 MMX_REGS:22750,22750 FP_TOP_SSE_REGS:283920,283920 FP_SECOND_SSE_REGS:283920,283920 FLOAT_SSE_REGS:283920,283920 FLOAT_INT_REGS:283920,283920 INT_SSE_REGS:19110,19110 FLOAT_INT_SSE_REGS:283920,283920 ALL_REGS:283920,283920 MEM:6370,6370
  a5(r87,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18200,18200 SSE_REGS:18200,18200 ALL_SSE_REGS:18200,18200 MMX_REGS:22750,22750 FP_TOP_SSE_REGS:283920,283920 FP_SECOND_SSE_REGS:283920,283920 FLOAT_SSE_REGS:283920,283920 FLOAT_INT_REGS:283920,283920 INT_SSE_REGS:19110,19110 FLOAT_INT_SSE_REGS:283920,283920 ALL_REGS:283920,283920 MEM:0,0


Pass 1 for finding pseudo/allocno costs

    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r85: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r85,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r86,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1890,49210 SSE_REGS:1890,49210 ALL_SSE_REGS:1890,49210 MMX_REGS:2340,72410 FP_TOP_SSE_REGS:28440,1069480 FP_SECOND_SSE_REGS:28440,1069480 FLOAT_SSE_REGS:28440,1069480 FLOAT_INT_REGS:28440,1069480 INT_SSE_REGS:1980,53850 FLOAT_INT_SSE_REGS:28440,1069480 ALL_REGS:28440,1069480 MEM:0,21840
  a1(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,-90 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1080,8360 SSE_REGS:1080,8360 ALL_SSE_REGS:1080,8360 MMX_REGS:1080,12910 FP_TOP_SSE_REGS:9360,198640 FP_SECOND_SSE_REGS:9360,198640 FLOAT_SSE_REGS:9360,198640 FLOAT_INT_REGS:9360,198640 INT_SSE_REGS:1080,9270 FLOAT_INT_SSE_REGS:9360,198640 ALL_REGS:9360,198640 MEM:360,3090
  a2(r85,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:7280,7280 SSE_REGS:7280,7280 ALL_SSE_REGS:7280,7280 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:189280,189280 FP_SECOND_SSE_REGS:189280,189280 FLOAT_SSE_REGS:189280,189280 FLOAT_INT_REGS:189280,189280 INT_SSE_REGS:8190,8190 FLOAT_INT_SSE_REGS:189280,189280 ALL_REGS:189280,189280 MEM:2730,2730
  a3(r86,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:47320,47320 SSE_REGS:47320,47320 ALL_SSE_REGS:47320,47320 MMX_REGS:70070,70070 FP_TOP_SSE_REGS:1041040,1041040 FP_SECOND_SSE_REGS:1041040,1041040 FLOAT_SSE_REGS:1041040,1041040 FLOAT_INT_REGS:1041040,1041040 INT_SSE_REGS:51870,51870 FLOAT_INT_SSE_REGS:1041040,1041040 ALL_REGS:1041040,1041040 MEM:21840,21840
  a4(r84,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:287560,287560 FP_SECOND_SSE_REGS:287560,287560 FLOAT_SSE_REGS:287560,287560 FLOAT_INT_REGS:287560,287560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:287560,287560 ALL_REGS:287560,287560 MEM:6370,6370
  a5(r87,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:287560,287560 FP_SECOND_SSE_REGS:287560,287560 FLOAT_SSE_REGS:287560,287560 FLOAT_INT_REGS:287560,287560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:287560,287560 ALL_REGS:287560,287560 MEM:0,0

   Insn 8(l0): point = 1
   Insn 7(l0): point = 3
   Insn 3(l0): point = 5
   Insn 2(l0): point = 7
   Insn 26(l1): point = 10
   Insn 25(l1): point = 12
   Insn 23(l1): point = 14
   Insn 22(l1): point = 16
   Insn 21(l1): point = 18
   Insn 20(l1): point = 20
   Insn 19(l1): point = 22
   Insn 18(l1): point = 24
   Insn 17(l1): point = 26
   Insn 16(l1): point = 28
   Insn 15(l1): point = 30
 a0(r86): [1..5]
 a1(r85): [1..7]
 a2(r85): [10..32]
 a3(r86): [19..32] [10..14]
 a4(r84): [15..20]
 a5(r87): [29..30]
 Rebuilding regno allocno list for 87
      Moving ranges of a3r86 to a0r86:  [19..32] [10..14]
      Moving ranges of a2r85 to a1r85:  [10..32]
 Rebuilding regno allocno list for 84
Compressing live ranges: from 33 to 8 - 24%
Ranges after the compression:
 a0(r86): [0..7]
 a1(r85): [0..7]
 a4(r84): [4..5]
 a5(r87): [6..7]
+++Allocating 32 bytes for conflict table (uncompressed size 48)
;; a0(r86,l0) conflicts: a1(r85,l0) a4(r84,l0) a5(r87,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2

;; a1(r85,l0) conflicts: a0(r86,l0) a4(r84,l0) a5(r87,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2

;; a4(r84,l0) conflicts: a0(r86,l0) a1(r85,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r87,l0) conflicts: a0(r86,l0) a1(r85,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  pref0:a1(r85)<-hr2@1045
  regions=2, blocks=5, points=8
    allocnos=6 (big 0), copies=0, conflicts=0, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 4 3 2
    all: 0r86 1r85 4r84 5r87
    modified regnos: 84 85 86 87
    border:
    Pressure: GENERAL_REGS=3
 Removing pref0:hr2@1045
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@0
          2:( 0 1 3-6)@43680
            3:( 3-6)@18920
      Allocno a0r86 of GENERAL_REGS(7) has 6 avail. regs  0 1 3-6, node:  0 1 3-6 (confl regs =  2 7-75)
      Allocno a1r85 of GENERAL_REGS(7) has 4 avail. regs  3-6, node:  3-6 (confl regs =  2 7-75)
      Allocno a4r84 of GENERAL_REGS(7) has 4 avail. regs  3-6, node:  3-6 (confl regs =  7-75)
      Allocno a5r87 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Pushing a1(r85,l0)(cost 0)
      Pushing a5(r87,l0)(cost 0)
      Pushing a4(r84,l0)(cost 0)
      Pushing a0(r86,l0)(cost 0)
      Popping a0(r86,l0)  -- assign reg 3
      Popping a4(r84,l0)  -- assign reg 4
      Popping a5(r87,l0)  -- assign reg 0
      Popping a1(r85,l0)  -- assign reg 5
Disposition:
    4:r84  l0     4    1:r85  l0     5    0:r86  l0     3    5:r87  l0     0
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const long long unsigned int, int> >*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={3d} r2={4d,2u} r6={1d,4u} r7={3d,14u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,4u,1e} r17={5d,2u} r18={2d} r19={2d} r20={1d,4u} r21={3d} r22={3d} r23={3d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={3d} r30={3d} r31={3d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r84={1d,1u} r85={1d,1u} r86={2d,5u,1e} r87={1d,1u} 
;;    total ref usage 204{164d,38u,2e} in 15{13 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 85 86
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/f:SI 85 [ this ])
        (reg:SI 2 cx [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1239 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:SI 86 [ __x ])
        (mem/f/c:SI (reg/f:SI 16 argp) [6 __x+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1239 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (reg/f:SI 16 argp) [6 __x+0 S4 A32])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:SI 86 [ __x ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1243 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 38 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 31)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1243 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 31)
;;  succ:       3 [91.0%]  (FALLTHRU)
;;              4 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85 86

;; basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [91.0%]  (FALLTHRU)
;;              3 [91.0%]  (DFS_BACK)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(6){ }u10(7){ }u11(16){ }u12(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 86 87
(code_label 38 8 37 3 60 "" [1 uses])
(note 37 38 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 37 16 3 (set (reg/f:SI 87 [ MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B] ])
        (mem/f:SI (plus:SI (reg/v/f:SI 86 [ __x ])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg/v/f:SI 86 [ __x ])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B]+0 S4 A32])
        (nil)))
(insn 16 15 17 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 87 [ MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B] ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 87 [ MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B] ])
        (nil)))
(insn 17 16 18 3 (set (reg:SI 2 cx)
        (reg/f:SI 85 [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 90 {*movsi_internal}
     (nil))
(call_insn 18 17 19 3 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E") [flags 0x3]  <function_decl 06e20200 _M_erase>) [0 _M_erase S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 646 {*call_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 19 18 20 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 20 19 21 3 (set (reg/v/f:SI 84 [ __x ])
        (mem/f:SI (plus:SI (reg/v/f:SI 86 [ __x ])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__x_12 + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v/f:SI 86 [ __x ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 86 [ __x ])
        (nil)))
(call_insn 22 21 23 3 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 23 22 25 3 (set (reg/v/f:SI 86 [ __x ])
        (reg/v/f:SI 84 [ __x ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 84 [ __x ])
        (nil)))
(insn 25 23 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:SI 86 [ __x ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1243 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 26 25 31 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 38)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1243 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 38)
;;  succ:       3 [91.0%]  (DFS_BACK)
;;              4 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85 86

;; basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2 [9.0%] 
;;              3 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u32(6){ }u33(7){ }u34(16){ }u35(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 31 26 32 4 56 "" [1 uses])
(note 32 31 0 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void __tcf_1() (__tcf_1, funcdef_no=6107, decl_uid=80892, symbol_order=3644)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Ignoring reg 85, has equiv memory
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 85: (insn_list:REG_DEP_TRUE 6 (nil))

Pass 0 for finding pseudo/allocno costs

    a0 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20000,20000 SSE_REGS:20000,20000 ALL_SSE_REGS:20000,20000 MMX_REGS:25000,25000 FP_TOP_SSE_REGS:312000,312000 FP_SECOND_SSE_REGS:312000,312000 FLOAT_SSE_REGS:312000,312000 FLOAT_INT_REGS:312000,312000 INT_SSE_REGS:21000,21000 FLOAT_INT_SSE_REGS:312000,312000 ALL_REGS:312000,312000 MEM:0,0


Pass 1 for finding pseudo/allocno costs

    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r85,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21000,21000 SSE_REGS:21000,21000 ALL_SSE_REGS:21000,21000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:316000,316000 FP_SECOND_SSE_REGS:316000,316000 FLOAT_SSE_REGS:316000,316000 FLOAT_INT_REGS:316000,316000 INT_SSE_REGS:22000,22000 FLOAT_INT_SSE_REGS:316000,316000 ALL_REGS:316000,316000 MEM:0,0

   Insn 10(l0): point = 0
   Insn 9(l0): point = 2
   Insn 8(l0): point = 4
   Insn 7(l0): point = 6
   Insn 6(l0): point = 8
 a0(r85): [7..8]
Compressing live ranges: from 11 to 2 - 18%
Ranges after the compression:
 a0(r85): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r85,l0) conflicts:  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r85
    modified regnos: 85
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@0
      Allocno a0r85 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Pushing a0(r85,l0)(cost 0)
      Popping a0(r85,l0)  -- assign reg 0
Disposition:
    0:r85  l0     0
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void __tcf_1()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={2d} r1={2d} r2={3d,1u} r6={1d,2u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={2d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r85={1d,1u} 
;;    total ref usage 104{88d,16u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 85 [ MEM[(struct _Rb_tree_node_base * *)&s + 8B] ])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])
        (nil)))
(insn 7 6 8 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 85 [ MEM[(struct _Rb_tree_node_base * *)&s + 8B] ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 85 [ MEM[(struct _Rb_tree_node_base * *)&s + 8B] ])
        (nil)))
(insn 8 7 9 2 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 90 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E") [flags 0x3]  <function_decl 06e20200 _M_erase>) [0 _M_erase S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 646 {*call_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 10 9 0 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = long long unsigned int] (_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE24_M_get_insert_unique_posERS1_, funcdef_no=5998, decl_uid=70242, symbol_order=3498)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 11 10 9 8 7
;; 2 succs { 4 3 }
;; 3 succs { 13 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 10 7 }
;; 7 succs { 9 8 }
;; 8 succs { 10 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 5 12 }
;; 12 succs { 13 16 }
;; 13 succs { 14 15 }
;; 14 succs { 21 }
;; 15 succs { 16 }
;; 16 succs { 20 17 }
;; 17 succs { 19 18 }
;; 18 succs { 20 19 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 1 }
Will split live ranges of parameters at BB 15
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 93 uninteresting (no unique first use)
Ignoring reg 94, has equiv memory
Reg 88: local to bb 15 def dominates all uses has unique first use
Found def insn 61 for 88 to be not moveable
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 11 10 9 8 7
;; 2 succs { 4 3 }
;; 3 succs { 13 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 10 7 }
;; 7 succs { 9 8 }
;; 8 succs { 10 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 5 12 }
;; 12 succs { 13 16 }
;; 13 succs { 14 15 }
;; 14 succs { 21 }
;; 15 succs { 16 }
;; 16 succs { 20 17 }
;; 17 succs { 19 18 }
;; 18 succs { 20 19 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 94: (insn_list:REG_DEP_TRUE 3 (nil))

Pass 0 for finding pseudo/allocno costs

    a0 (r101,l0) best DREG, allocno DREG
    a1 (r100,l0) best AREG, allocno AREG
    a19 (r99,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a18 (r98,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r97,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r96,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r94,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a9 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r93,l1) best CREG, allocno CREG
    a10 (r93,l0) best CREG, allocno CREG
    a3 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r88,l0) best AREG, allocno AREG
    a12 (r86,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r84,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a17 (r83,l1) best Q_REGS, allocno Q_REGS
    a11 (r83,l0) best Q_REGS, allocno Q_REGS

  a0(r101,l0) costs: AREG:0,0 DREG:-90,-90 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1432,1432 SSE_REGS:1432,1432 ALL_SSE_REGS:1432,1432 MMX_REGS:1882,1882 FP_TOP_SSE_REGS:27620,27620 FP_SECOND_SSE_REGS:27620,27620 FLOAT_SSE_REGS:27620,27620 FLOAT_INT_REGS:27620,27620 INT_SSE_REGS:1522,1522 FLOAT_INT_SSE_REGS:27620,27620 ALL_REGS:27620,27620 MEM:359,359
  a1(r100,l0) costs: AREG:-90,-90 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1432,1432 SSE_REGS:1432,1432 ALL_SSE_REGS:1432,1432 MMX_REGS:1882,1882 FP_TOP_SSE_REGS:27620,27620 FP_SECOND_SSE_REGS:27620,27620 FLOAT_SSE_REGS:27620,27620 FLOAT_INT_REGS:27620,27620 INT_SSE_REGS:1522,1522 FLOAT_INT_SSE_REGS:27620,27620 ALL_REGS:27620,27620 MEM:359,359
  a2(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4320,32784 SSE_REGS:4320,32784 ALL_SSE_REGS:4320,32784 MMX_REGS:6080,48194 FP_TOP_SSE_REGS:88240,738880 FP_SECOND_SSE_REGS:88240,738880 FLOAT_SSE_REGS:88240,738880 FLOAT_INT_REGS:88240,738880 INT_SSE_REGS:4672,35866 FLOAT_INT_SSE_REGS:88240,738880 ALL_REGS:88240,738880 MEM:1663,13411
  a3(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1232,1232 SSE_REGS:1232,1232 ALL_SSE_REGS:1232,1232 MMX_REGS:1397,1397 FP_TOP_SSE_REGS:18964,18964 FP_SECOND_SSE_REGS:18964,18964 FLOAT_SSE_REGS:18964,18964 FLOAT_INT_REGS:18964,18964 INT_SSE_REGS:1265,1265 FLOAT_INT_SSE_REGS:18964,18964 ALL_REGS:18964,18964 MEM:220,220
  a4(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1620,3436 SSE_REGS:1620,3436 ALL_SSE_REGS:1620,3436 MMX_REGS:1725,4676 FP_TOP_SSE_REGS:16952,64168 FP_SECOND_SSE_REGS:16952,64168 FLOAT_SSE_REGS:16952,64168 FLOAT_INT_REGS:16952,64168 INT_SSE_REGS:1641,3684 FLOAT_INT_SSE_REGS:16952,64168 ALL_REGS:16952,64168 MEM:547,1228
  a5(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:648,13384 SSE_REGS:648,13384 ALL_SSE_REGS:648,13384 MMX_REGS:753,14624 FP_TOP_SSE_REGS:8528,150384 FP_SECOND_SSE_REGS:8528,150384 FLOAT_SSE_REGS:8528,150384 FLOAT_INT_REGS:8528,150384 INT_SSE_REGS:669,13632 FLOAT_INT_SSE_REGS:8528,150384 ALL_REGS:8528,150384 MEM:223,4544
  a6(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2132,9412 SSE_REGS:2132,9412 ALL_SSE_REGS:2132,9412 MMX_REGS:2557,14387 FP_TOP_SSE_REGS:30264,219544 FP_SECOND_SSE_REGS:30264,219544 FLOAT_SSE_REGS:30264,219544 FLOAT_INT_REGS:30264,219544 INT_SSE_REGS:2217,10407 FLOAT_INT_SSE_REGS:30264,219544 ALL_REGS:30264,219544 MEM:739,3469
  a7(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1160,19360 SSE_REGS:1160,19360 ALL_SSE_REGS:1160,19360 MMX_REGS:1585,24335 FP_TOP_SSE_REGS:21840,305760 FP_SECOND_SSE_REGS:21840,305760 FLOAT_SSE_REGS:21840,305760 FLOAT_INT_REGS:21840,305760 INT_SSE_REGS:1245,20355 FLOAT_INT_SSE_REGS:21840,305760 ALL_REGS:21840,305760 MEM:415,6785
  a8(r88,l0) costs: AREG:-40,-40 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1280,1280 SSE_REGS:1280,1280 ALL_SSE_REGS:1280,1280 MMX_REGS:1880,1880 FP_TOP_SSE_REGS:28960,28960 FP_SECOND_SSE_REGS:28960,28960 FLOAT_SSE_REGS:28960,28960 FLOAT_INT_REGS:28960,28960 INT_SSE_REGS:1400,1400 FLOAT_INT_SSE_REGS:28960,28960 ALL_REGS:28960,28960 MEM:480,480
  a9(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:3016,3016 SSE_REGS:3016,3016 ALL_SSE_REGS:3016,3016 MMX_REGS:4226,4226 FP_TOP_SSE_REGS:59696,59696 FP_SECOND_SSE_REGS:59696,59696 FLOAT_SSE_REGS:59696,59696 FLOAT_INT_REGS:59696,59696 INT_SSE_REGS:3258,3258 FLOAT_INT_SSE_REGS:59696,59696 ALL_REGS:59696,59696 MEM:608,608
  a10(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:-90,-90 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1864,1864 SSE_REGS:1864,1864 ALL_SSE_REGS:1864,1864 MMX_REGS:2579,2579 FP_TOP_SSE_REGS:38744,38744 FP_SECOND_SSE_REGS:38744,38744 FLOAT_SSE_REGS:38744,38744 FLOAT_INT_REGS:38744,38744 INT_SSE_REGS:2007,2007 FLOAT_INT_SSE_REGS:38744,38744 ALL_REGS:38744,38744 MEM:662,662
  a11(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:162,162 DIREG:162,162 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:162,162 INDEX_REGS:162,162 LEGACY_REGS:162,162 GENERAL_REGS:162,162 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:16848,107848 INT_SSE_REGS:16848,107848 FLOAT_INT_SSE_REGS:16848,107848 ALL_REGS:16848,107848 MEM:324,1234
  a12(r86,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:28464,28464 SSE_REGS:28464,28464 ALL_SSE_REGS:28464,28464 MMX_REGS:42114,42114 FP_TOP_SSE_REGS:650640,650640 FP_SECOND_SSE_REGS:650640,650640 FLOAT_SSE_REGS:650640,650640 FLOAT_INT_REGS:650640,650640 INT_SSE_REGS:31194,31194 FLOAT_INT_SSE_REGS:650640,650640 ALL_REGS:650640,650640 MEM:11748,11748
  a13(r93,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a14(r94,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a15(r96,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1816,1816 SSE_REGS:1816,1816 ALL_SSE_REGS:1816,1816 MMX_REGS:2951,2951 FP_TOP_SSE_REGS:47216,47216 FP_SECOND_SSE_REGS:47216,47216 FLOAT_SSE_REGS:47216,47216 FLOAT_INT_REGS:47216,47216 INT_SSE_REGS:2043,2043 FLOAT_INT_SSE_REGS:47216,47216 ALL_REGS:47216,47216 MEM:681,681
  a16(r97,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:7280,7280 SSE_REGS:7280,7280 ALL_SSE_REGS:7280,7280 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:189280,189280 FP_SECOND_SSE_REGS:189280,189280 FLOAT_SSE_REGS:189280,189280 FLOAT_INT_REGS:189280,189280 INT_SSE_REGS:8190,8190 FLOAT_INT_SSE_REGS:189280,189280 ALL_REGS:189280,189280 MEM:2730,2730
  a17(r83,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:91000,91000 INT_SSE_REGS:91000,91000 FLOAT_INT_SSE_REGS:91000,91000 ALL_REGS:91000,91000 MEM:910,910
  a18(r98,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12736,12736 SSE_REGS:12736,12736 ALL_SSE_REGS:12736,12736 MMX_REGS:13871,13871 FP_TOP_SSE_REGS:141856,141856 FP_SECOND_SSE_REGS:141856,141856 FLOAT_SSE_REGS:141856,141856 FLOAT_INT_REGS:141856,141856 INT_SSE_REGS:12963,12963 FLOAT_INT_SSE_REGS:141856,141856 ALL_REGS:141856,141856 MEM:4321,4321
  a19(r99,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18200,18200 SSE_REGS:18200,18200 ALL_SSE_REGS:18200,18200 MMX_REGS:22750,22750 FP_TOP_SSE_REGS:283920,283920 FP_SECOND_SSE_REGS:283920,283920 FLOAT_SSE_REGS:283920,283920 FLOAT_INT_REGS:283920,283920 INT_SSE_REGS:19110,19110 FLOAT_INT_SSE_REGS:283920,283920 ALL_REGS:283920,283920 MEM:6370,6370
  a20(r84,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24824,24824 SSE_REGS:24824,24824 ALL_SSE_REGS:24824,24824 MMX_REGS:33514,33514 FP_TOP_SSE_REGS:456144,456144 FP_SECOND_SSE_REGS:456144,456144 FLOAT_SSE_REGS:456144,456144 FLOAT_INT_REGS:456144,456144 INT_SSE_REGS:26562,26562 FLOAT_INT_SSE_REGS:456144,456144 ALL_REGS:456144,456144 MEM:9764,9764


Pass 1 for finding pseudo/allocno costs

    r101: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r93: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r93,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r83: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r83,l1) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r101,l0) costs: AREG:0,0 DREG:0,-90 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1788,1788 SSE_REGS:1788,1788 ALL_SSE_REGS:1788,1788 MMX_REGS:2238,2238 FP_TOP_SSE_REGS:27976,27976 FP_SECOND_SSE_REGS:27976,27976 FLOAT_SSE_REGS:27976,27976 FLOAT_INT_REGS:27976,27976 INT_SSE_REGS:1878,1878 FLOAT_INT_SSE_REGS:27976,27976 ALL_REGS:27976,27976 MEM:626,626
  a1(r100,l0) costs: AREG:0,-90 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1788,1788 SSE_REGS:1788,1788 ALL_SSE_REGS:1788,1788 MMX_REGS:2238,2238 FP_TOP_SSE_REGS:27976,27976 FP_SECOND_SSE_REGS:27976,27976 FLOAT_SSE_REGS:27976,27976 FLOAT_INT_REGS:27976,27976 INT_SSE_REGS:1878,1878 FLOAT_INT_SSE_REGS:27976,27976 ALL_REGS:27976,27976 MEM:626,626
  a2(r86,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4570,36346 SSE_REGS:4570,36346 ALL_SSE_REGS:4570,36346 MMX_REGS:6330,51756 FP_TOP_SSE_REGS:88760,742712 FP_SECOND_SSE_REGS:88760,742712 FLOAT_SSE_REGS:88760,742712 FLOAT_INT_REGS:88760,742712 INT_SSE_REGS:4922,39428 FLOAT_INT_SSE_REGS:88760,742712 ALL_REGS:88760,742712 MEM:1783,16015
  a3(r90,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1716,1716 SSE_REGS:1716,1716 ALL_SSE_REGS:1716,1716 MMX_REGS:1881,1881 FP_TOP_SSE_REGS:19448,19448 FP_SECOND_SSE_REGS:19448,19448 FLOAT_SSE_REGS:19448,19448 FLOAT_INT_REGS:19448,19448 INT_SSE_REGS:1749,1749 FLOAT_INT_SSE_REGS:19448,19448 ALL_REGS:19448,19448 MEM:583,583
  a4(r96,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1741,3557 SSE_REGS:1741,3557 ALL_SSE_REGS:1741,3557 MMX_REGS:1846,4797 FP_TOP_SSE_REGS:17436,64652 FP_SECOND_SSE_REGS:17436,64652 FLOAT_SSE_REGS:17436,64652 FLOAT_INT_REGS:17436,64652 INT_SSE_REGS:1762,3805 FLOAT_INT_SSE_REGS:17436,64652 ALL_REGS:17436,64652 MEM:547,1228
  a5(r98,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:688,14334 SSE_REGS:688,14334 ALL_SSE_REGS:688,14334 MMX_REGS:793,15574 FP_TOP_SSE_REGS:8688,154184 FP_SECOND_SSE_REGS:8688,154184 FLOAT_SSE_REGS:8688,154184 FLOAT_INT_REGS:8688,154184 INT_SSE_REGS:709,14582 FLOAT_INT_SSE_REGS:8688,154184 ALL_REGS:8688,154184 MEM:223,4544
  a6(r97,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2253,9533 SSE_REGS:2253,9533 ALL_SSE_REGS:2253,9533 MMX_REGS:2678,14508 FP_TOP_SSE_REGS:30748,220028 FP_SECOND_SSE_REGS:30748,220028 FLOAT_SSE_REGS:30748,220028 FLOAT_INT_REGS:30748,220028 INT_SSE_REGS:2338,10528 FLOAT_INT_SSE_REGS:30748,220028 ALL_REGS:30748,220028 MEM:739,3469
  a7(r99,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1200,20310 SSE_REGS:1200,20310 ALL_SSE_REGS:1200,20310 MMX_REGS:1625,25285 FP_TOP_SSE_REGS:22000,309560 FP_SECOND_SSE_REGS:22000,309560 FLOAT_SSE_REGS:22000,309560 FLOAT_INT_REGS:22000,309560 INT_SSE_REGS:1285,21305 FLOAT_INT_SSE_REGS:22000,309560 ALL_REGS:22000,309560 MEM:415,6785
  a8(r88,l0) costs: AREG:0,-40 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1440,1440 SSE_REGS:1440,1440 ALL_SSE_REGS:1440,1440 MMX_REGS:2040,2040 FP_TOP_SSE_REGS:29120,29120 FP_SECOND_SSE_REGS:29120,29120 FLOAT_SSE_REGS:29120,29120 FLOAT_INT_REGS:29120,29120 INT_SSE_REGS:1560,1560 FLOAT_INT_SSE_REGS:29120,29120 ALL_REGS:29120,29120 MEM:600,600
  a9(r94,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:3106,3106 SSE_REGS:3106,3106 ALL_SSE_REGS:3106,3106 MMX_REGS:4316,4316 FP_TOP_SSE_REGS:60056,60056 FP_SECOND_SSE_REGS:60056,60056 FLOAT_SSE_REGS:60056,60056 FLOAT_INT_REGS:60056,60056 INT_SSE_REGS:3348,3348 FLOAT_INT_SSE_REGS:60056,60056 ALL_REGS:60056,60056 MEM:608,608
  a10(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,-90 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2224,2224 SSE_REGS:2224,2224 ALL_SSE_REGS:2224,2224 MMX_REGS:2939,2939 FP_TOP_SSE_REGS:39104,39104 FP_SECOND_SSE_REGS:39104,39104 FLOAT_SSE_REGS:39104,39104 FLOAT_INT_REGS:39104,39104 INT_SSE_REGS:2367,2367 FLOAT_INT_SSE_REGS:39104,39104 ALL_REGS:39104,39104 MEM:932,932
  a11(r83,l0) costs: SIREG:162,162 DIREG:162,162 Q_REGS:0,0 NON_Q_REGS:162,162 INDEX_REGS:162,162 LEGACY_REGS:162,162 GENERAL_REGS:162,162 FLOAT_INT_REGS:16848,111488 INT_SSE_REGS:16848,111488 FLOAT_INT_SSE_REGS:16848,111488 ALL_REGS:16848,111488 MEM:324,3964
  a12(r86,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:31776,31776 SSE_REGS:31776,31776 ALL_SSE_REGS:31776,31776 MMX_REGS:45426,45426 FP_TOP_SSE_REGS:653952,653952 FP_SECOND_SSE_REGS:653952,653952 FLOAT_SSE_REGS:653952,653952 FLOAT_INT_REGS:653952,653952 INT_SSE_REGS:34506,34506 FLOAT_INT_SSE_REGS:653952,653952 ALL_REGS:653952,653952 MEM:14232,14232
  a13(r93,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a14(r94,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a15(r96,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1816,1816 SSE_REGS:1816,1816 ALL_SSE_REGS:1816,1816 MMX_REGS:2951,2951 FP_TOP_SSE_REGS:47216,47216 FP_SECOND_SSE_REGS:47216,47216 FLOAT_SSE_REGS:47216,47216 FLOAT_INT_REGS:47216,47216 INT_SSE_REGS:2043,2043 FLOAT_INT_SSE_REGS:47216,47216 ALL_REGS:47216,47216 MEM:681,681
  a16(r97,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:7280,7280 SSE_REGS:7280,7280 ALL_SSE_REGS:7280,7280 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:189280,189280 FP_SECOND_SSE_REGS:189280,189280 FLOAT_SSE_REGS:189280,189280 FLOAT_INT_REGS:189280,189280 INT_SSE_REGS:8190,8190 FLOAT_INT_SSE_REGS:189280,189280 ALL_REGS:189280,189280 MEM:2730,2730
  a17(r83,l1) costs: SIREG:0,0 DIREG:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 FLOAT_INT_REGS:94640,94640 INT_SSE_REGS:94640,94640 FLOAT_INT_SSE_REGS:94640,94640 ALL_REGS:94640,94640 MEM:3640,3640
  a18(r98,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13646,13646 SSE_REGS:13646,13646 ALL_SSE_REGS:13646,13646 MMX_REGS:14781,14781 FP_TOP_SSE_REGS:145496,145496 FP_SECOND_SSE_REGS:145496,145496 FLOAT_SSE_REGS:145496,145496 FLOAT_INT_REGS:145496,145496 INT_SSE_REGS:13873,13873 FLOAT_INT_SSE_REGS:145496,145496 ALL_REGS:145496,145496 MEM:4321,4321
  a19(r99,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:287560,287560 FP_SECOND_SSE_REGS:287560,287560 FLOAT_SSE_REGS:287560,287560 FLOAT_INT_REGS:287560,287560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:287560,287560 ALL_REGS:287560,287560 MEM:6370,6370
  a20(r84,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:25734,25734 SSE_REGS:25734,25734 ALL_SSE_REGS:25734,25734 MMX_REGS:34424,34424 FP_TOP_SSE_REGS:459784,459784 FP_SECOND_SSE_REGS:459784,459784 FLOAT_SSE_REGS:459784,459784 FLOAT_INT_REGS:459784,459784 INT_SSE_REGS:27472,27472 FLOAT_INT_SSE_REGS:459784,459784 ALL_REGS:459784,459784 MEM:9764,9764

   Insn 89(l0): point = 0
   Insn 118(l0): point = 2
   Insn 117(l0): point = 4
   Insn 81(l0): point = 7
   Insn 80(l0): point = 9
   Insn 129(l0): point = 12
   Insn 75(l0): point = 14
   Insn 74(l0): point = 16
   Insn 71(l0): point = 19
   Insn 70(l0): point = 21
   Insn 69(l0): point = 24
   Insn 67(l0): point = 27
   Insn 66(l0): point = 29
   Insn 10(l0): point = 32
   Insn 9(l0): point = 34
   Insn 114(l0): point = 36
   Insn 113(l0): point = 38
   Insn 112(l0): point = 40
   Insn 111(l0): point = 42
   Insn 61(l0): point = 44
   Insn 60(l0): point = 46
   Insn 59(l0): point = 48
   Insn 127(l0): point = 51
   Insn 54(l0): point = 53
   Insn 53(l0): point = 55
   Insn 51(l0): point = 58
   Insn 50(l0): point = 60
   Insn 46(l0): point = 63
   Insn 45(l0): point = 65
   Insn 8(l0): point = 67
   Insn 123(l0): point = 70
   Insn 108(l0): point = 72
   Insn 107(l0): point = 74
   Insn 121(l0): point = 77
   Insn 17(l0): point = 79
   Insn 15(l0): point = 82
   Insn 14(l0): point = 84
   Insn 13(l0): point = 86
   Insn 3(l0): point = 88
   Insn 2(l0): point = 90
   Insn 5(l1): point = 93
   Insn 43(l1): point = 96
   Insn 42(l1): point = 98
   Insn 7(l1): point = 101
   Insn 38(l1): point = 103
   Insn 125(l1): point = 106
   Insn 6(l1): point = 108
   Insn 33(l1): point = 110
   Insn 30(l1): point = 113
   Insn 29(l1): point = 115
   Insn 28(l1): point = 118
   Insn 26(l1): point = 121
   Insn 25(l1): point = 123
   Insn 110(l1): point = 125
   Insn 109(l1): point = 127
 a0(r101): [51..53] [12..14] [3..7]
 a1(r100): [51..55] [12..16] [5..9]
 a2(r86): [82..86] [54..79] [35..50] [19..32] [10..11]
 a3(r90): [63..67] [15..34]
 a4(r96): [63..74] [22..42]
 a5(r98): [63..69] [22..38]
 a6(r97): [63..72] [30..40]
 a7(r99): [63..69] [30..36]
 a8(r88): [33..44]
 a9(r94): [58..88] [41..50]
 a10(r93): [61..90]
 a11(r83): [66..69]
 a12(r86): [96..129] [93..93]
 a13(r93): [93..129]
 a14(r94): [93..129]
 a15(r96): [93..129]
 a16(r97): [93..129]
 a17(r83): [106..108] [96..101]
 a18(r98): [96..127]
 a19(r99): [96..125]
 a20(r84): [106..110] [94..103]
Compressing live ranges: from 130 to 29 - 22%
Ranges after the compression:
 a0(r101): [16..17] [4..5] [0..1]
 a1(r100): [16..19] [4..7] [0..1]
 a2(r86): [18..23] [12..15] [8..9] [2..3]
 a3(r90): [20..21] [6..11]
 a4(r96): [20..21] [8..15]
 a5(r98): [20..21] [8..13]
 a6(r97): [20..21] [8..13]
 a7(r99): [20..21] [8..13]
 a8(r88): [10..15]
 a9(r94): [20..23] [14..15]
 a10(r93): [20..23]
 a11(r83): [20..21]
 a12(r86): [24..28]
 a13(r93): [24..28]
 a14(r94): [24..28]
 a15(r96): [24..28]
 a16(r97): [24..28]
 a17(r83): [25..28]
 a18(r98): [25..28]
 a19(r99): [25..28]
 a20(r84): [25..28]
    Creating cap  a21(r84,l0: a20(r84,l1))
+++Allocating 176 bytes for conflict table (uncompressed size 176)
;; a0(r101,l0) conflicts: a1(r100,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a1(r100,l0) conflicts: a0(r101,l0) a2(r86,l0) a3(r90,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r86,l0) conflicts: a1(r100,l0) a3(r90,l0) a4(r96,l0) a5(r98,l0) a6(r97,l0) a7(r99,l0) a8(r88,l0) a9(r94,l0) a10(r93,l0) a11(r83,l0) a21(r84,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a3(r90,l0) conflicts: a1(r100,l0) a2(r86,l0) a4(r96,l0) a5(r98,l0) a6(r97,l0) a7(r99,l0) a8(r88,l0) a9(r94,l0) a10(r93,l0) a11(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r96,l0) conflicts: a2(r86,l0) a3(r90,l0) a5(r98,l0) a6(r97,l0) a7(r99,l0) a8(r88,l0) a9(r94,l0) a10(r93,l0) a11(r83,l0) a21(r84,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r98,l0) conflicts: a2(r86,l0) a3(r90,l0) a4(r96,l0) a6(r97,l0) a7(r99,l0) a8(r88,l0) a9(r94,l0) a10(r93,l0) a11(r83,l0) a21(r84,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r97,l0) conflicts: a2(r86,l0) a3(r90,l0) a4(r96,l0) a5(r98,l0) a7(r99,l0) a8(r88,l0) a9(r94,l0) a10(r93,l0) a11(r83,l0) a21(r84,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a7(r99,l0) conflicts: a2(r86,l0) a3(r90,l0) a4(r96,l0) a5(r98,l0) a6(r97,l0) a8(r88,l0) a9(r94,l0) a10(r93,l0) a11(r83,l0) a21(r84,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a8(r88,l0) conflicts: a2(r86,l0) a3(r90,l0) a4(r96,l0) a5(r98,l0) a6(r97,l0) a7(r99,l0) a9(r94,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a9(r94,l0) conflicts: a2(r86,l0) a3(r90,l0) a4(r96,l0) a5(r98,l0) a6(r97,l0) a7(r99,l0) a8(r88,l0) a10(r93,l0) a11(r83,l0) a21(r84,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a10(r93,l0) conflicts: a2(r86,l0) a3(r90,l0) a4(r96,l0) a5(r98,l0) a6(r97,l0) a7(r99,l0) a9(r94,l0) a11(r83,l0) a21(r84,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a11(r83,l0) conflicts: a2(r86,l0) a3(r90,l0) a4(r96,l0) a5(r98,l0) a6(r97,l0) a7(r99,l0) a9(r94,l0) a10(r93,l0) a21(r84,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a12(r86,l1) conflicts: a13(r93,l1) a14(r94,l1) a15(r96,l1) a16(r97,l1) a17(r83,l1) a18(r98,l1) a19(r99,l1) a20(r84,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r93,l1) conflicts: a12(r86,l1) a14(r94,l1) a15(r96,l1) a16(r97,l1) a17(r83,l1) a18(r98,l1) a19(r99,l1) a20(r84,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a14(r94,l1) conflicts: a12(r86,l1) a13(r93,l1) a15(r96,l1) a16(r97,l1) a17(r83,l1) a18(r98,l1) a19(r99,l1) a20(r84,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r96,l1) conflicts: a12(r86,l1) a13(r93,l1) a14(r94,l1) a16(r97,l1) a17(r83,l1) a18(r98,l1) a19(r99,l1) a20(r84,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a16(r97,l1) conflicts: a12(r86,l1) a13(r93,l1) a14(r94,l1) a15(r96,l1) a17(r83,l1) a18(r98,l1) a19(r99,l1) a20(r84,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a17(r83,l1) conflicts: a12(r86,l1) a13(r93,l1) a14(r94,l1) a15(r96,l1) a16(r97,l1) a18(r98,l1) a19(r99,l1) a20(r84,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a18(r98,l1) conflicts: a12(r86,l1) a13(r93,l1) a14(r94,l1) a15(r96,l1) a16(r97,l1) a17(r83,l1) a19(r99,l1) a20(r84,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a19(r99,l1) conflicts: a12(r86,l1) a13(r93,l1) a14(r94,l1) a15(r96,l1) a16(r97,l1) a17(r83,l1) a18(r98,l1) a20(r84,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a20(r84,l1) conflicts: a12(r86,l1) a13(r93,l1) a14(r94,l1) a15(r96,l1) a16(r97,l1) a17(r83,l1) a18(r98,l1) a19(r99,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a21(r84,l0) conflicts: a2(r86,l0) a4(r96,l0) a5(r98,l0) a6(r97,l0) a7(r99,l0) a9(r94,l0) a10(r93,l0) a11(r83,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a0(r101)<->a3(r90)@33:move
  cp1:a0(r101)<->a2(r86)@4:move
  pref0:a0(r101)<-hr1@135
  pref1:a1(r100)<-hr0@135
  pref2:a10(r93)<-hr2@135
  pref3:a8(r88)<-hr0@60
  regions=2, blocks=22, points=29
    allocnos=22 (big 0), copies=2, conflicts=1, ranges=34

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 21 20 19 18 17 16 15 14 13 12 4(->6:l1) 3 2
    all: 0r101 1r100 2r86 3r90 4r96 5r98 6r97 7r99 8r88 9r94 10r93 11r83 21r84
    modified regnos: 83 84 86 88 90 93 94 96 97 98 99 100 101
    border:
    Pressure: GENERAL_REGS=9
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@66310
          2:( 1-6)@35038
      Allocno a0r101 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a1r100 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a2r86 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a3r90 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a4r96 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a5r98 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a6r97 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a7r99 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a8r88 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a9r94 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a10r93 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a11r83 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a21r84 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Forming thread by copy 0:a0r101-a3r90 (freq=33):
        Result (freq=333): a0r101(179) a3r90(154)
      Pushing a1(r100,l0)(cost 0)
      Pushing a0(r101,l0)(cost 0)
      Pushing a9(r94,l0)(potential spill: pri=28, cost=608)
        Making a8(r88,l0) colorable
      Pushing a8(r88,l0)(cost 720)
      Pushing a10(r93,l0)(potential spill: pri=57, cost=1202)
        Making a3(r90,l0) colorable
        Making a21(r84,l0: a20(r84,l1)) colorable
      Pushing a3(r90,l0)(cost 583)
        Making a4(r96,l0) colorable
        Making a5(r98,l0) colorable
        Making a6(r97,l0) colorable
        Making a7(r99,l0) colorable
        Making a11(r83,l0) colorable
      Pushing a4(r96,l0)(cost 1228)
        Making a2(r86,l0) colorable
      Pushing a11(r83,l0)(cost 3964)
      Pushing a6(r97,l0)(cost 3469)
      Pushing a5(r98,l0)(cost 4544)
      Pushing a7(r99,l0)(cost 6785)
      Pushing a21(r84,l0: a20(r84,l1))(cost 9764)
      Pushing a2(r86,l0)(cost 16015)
      Popping a2(r86,l0)  -- assign reg 3
      Popping a21(r84,l0: a20(r84,l1))  -- assign reg 0
      Popping a7(r99,l0)  -- assign reg 2
      Popping a5(r98,l0)  -- assign reg 4
      Popping a6(r97,l0)  -- assign reg 5
      Popping a11(r83,l0)  -- assign reg 1
      Popping a4(r96,l0)  -- assign reg 6
      Popping a3(r90,l0)  -- (memory is more profitable 583 vs 650) spill!
      Popping a10(r93,l0)  -- spill
      Popping a8(r88,l0)  -- assign reg 0
      Popping a9(r94,l0)  -- spill
      Popping a0(r101,l0)  -- assign reg 1
      Popping a1(r100,l0)  -- assign reg 0

  Loop 1 (parent 0, header bb6, depth 1)
    bbs: 11(->12:l0) 10 9 8 7 6 5
    all: 12r86 13r93 14r94 15r96 16r97 17r83 18r98 19r99 20r84
    modified regnos: 83 84 86 98 99
    border: 12r86 13r93 14r94 15r96 16r97 17r83 18r98 19r99
    Pressure: GENERAL_REGS=9
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@83476
      Spill a13(r93,l1)
      Spill a14(r94,l1)
      Allocno a12r86 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a15r96 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a16r97 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a17r83 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a18r98 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a19r99 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a20r84 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Pushing a15(r96,l1)(cost 0)
      Pushing a17(r83,l1)(cost 0)
      Pushing a16(r97,l1)(cost 0)
      Pushing a18(r98,l1)(cost 0)
      Pushing a19(r99,l1)(cost 0)
      Pushing a20(r84,l1)(cost 0)
      Pushing a12(r86,l1)(cost 0)
      Popping a12(r86,l1)  -- assign reg 3
      Popping a20(r84,l1)  -- assign reg 0
      Popping a19(r99,l1)  -- assign reg 2
      Popping a18(r98,l1)  -- assign reg 4
      Popping a16(r97,l1)  -- assign reg 5
      Popping a17(r83,l1)  -- assign reg 1
      Popping a15(r96,l1)  -- assign reg 6
Disposition:
   17:r83  l1     1   11:r83  l0     1   20:r84  l1     0   12:r86  l1     3
    2:r86  l0     3    8:r88  l0     0    3:r90  l0   mem   13:r93  l1   mem
   10:r93  l0   mem   14:r94  l1   mem    9:r94  l0   mem   15:r96  l1     6
    4:r96  l0     6   16:r97  l1     5    6:r97  l0     5   18:r98  l1     4
    5:r98  l0     4   19:r99  l1     2    7:r99  l0     2    1:r100 l0     0
    0:r101 l0     1
New iteration of spill/restore move
      Changing RTL for loop 1 (header bb6)
  3 vs parent 3:      Creating newreg=104 from oldreg=86
  6 vs parent 6:      Creating newreg=105 from oldreg=96
  5 vs parent 5:      Creating newreg=106 from oldreg=97
  1 vs parent 1:      Creating newreg=107 from oldreg=83
  4 vs parent 4:      Creating newreg=108 from oldreg=98
  2 vs parent 2:      Creating newreg=109 from oldreg=99
rescanning insn with uid = 38.
rescanning insn with uid = 7.
rescanning insn with uid = 33.
rescanning insn with uid = 6.
rescanning insn with uid = 29.
rescanning insn with uid = 109.
rescanning insn with uid = 110.
rescanning insn with uid = 25.
rescanning insn with uid = 5.
scanning new insn with uid = 134.
scanning new insn with uid = 135.
scanning new insn with uid = 136.
scanning new insn with uid = 137.
scanning new insn with uid = 138.
scanning new insn with uid = 139.
    Adding cp2:a2r86-a12r104
    Adding range [30..30] to allocno a2r86
    Adding cp3:a4r96-a15r105
    Adding range [30..32] to allocno a4r96
    Adding cp4:a6r97-a16r106
    Adding range [30..34] to allocno a6r97
    Adding range [31..35] to allocno a12r104
    Adding range [33..35] to allocno a15r105
    Adding range [35..35] to allocno a16r106
    Adding range [30..35] to live through  allocno a10r93
    Adding range [30..35] to live through  allocno a9r94
    Adding cp5:a11r83-a17r107
    Adding range [37..37] to allocno a17r107
    Adding cp6:a2r86-a12r104
    Adding range [37..39] to allocno a12r104
    Adding cp7:a4r96-a15r105
    Adding range [37..41] to allocno a15r105
    Adding cp8:a6r97-a16r106
    Adding range [37..43] to allocno a16r106
    Adding cp9:a5r98-a18r108
    Adding range [37..45] to allocno a18r108
    Adding cp10:a7r99-a19r109
    Adding range [37..47] to allocno a19r109
    Adding range [38..48] to allocno a11r83
    Adding range [40..48] to allocno a2r86
    Adding range [42..48] to allocno a4r96
    Adding range [44..48] to allocno a6r97
    Adding range [46..48] to allocno a5r98
    Adding range [48..48] to allocno a7r99
    Adding range [37..48] to live through  allocno a10r93
    Adding range [37..48] to live through  allocno a9r94
scanning new insn with uid = 131.
scanning new insn with uid = 132.
scanning new insn with uid = 133.
    New r104: setting preferred GENERAL_REGS, alternative NO_REGS
    New r105: setting preferred GENERAL_REGS, alternative NO_REGS
    New r106: setting preferred GENERAL_REGS, alternative NO_REGS
    New r107: setting preferred Q_REGS, alternative GENERAL_REGS
    New r108: setting preferred GENERAL_REGS, alternative NO_REGS
    New r109: setting preferred GENERAL_REGS, alternative NO_REGS
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 31 count 24 (  1.1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 11 10 9 8 7
;; 2 succs { 4 3 }
;; 3 succs { 13 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 10 7 }
;; 7 succs { 9 8 }
;; 8 succs { 10 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 5 12 }
;; 12 succs { 13 16 }
;; 13 succs { 14 15 }
;; 14 succs { 21 }
;; 15 succs { 16 }
;; 16 succs { 20 17 }
;; 17 succs { 19 18 }
;; 18 succs { 20 19 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 1 }
+++Costs: overall 1463, reg -660, mem 2123, ld 0, st 0, move 1458
+++       move loops 0, new jumps 1


std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = long long unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={3d,3u} r1={3d,2u} r2={2d,1u} r6={1d,21u} r7={1d,24u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,21u,1e} r17={10d,10u} r18={1d} r19={1d} r20={1d,21u} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r83={1d,1u} r84={2d,2u} r86={4d,8u} r88={1d,3u} r90={2d,1u} r93={1d,3u} r94={1d,4u} r96={3d,2u} r97={3d,2u} r98={2d,1u} r99={2d,1u} r100={3d,1u} r101={3d,1u} r104={2d,5u} r105={1d,2u} r106={1d,2u} r107={2d,1u} r108={1d,2u} r109={1d,2u} 
;;    total ref usage 278{130d,147u,1e} in 64{63 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 93 94
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/f:SI 93 [ this ])
        (reg:SI 2 cx [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1435 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:SI 94 [ __k ])
        (mem/f/c:SI (reg/f:SI 16 argp) [6 __k+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1435 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (reg/f:SI 16 argp) [6 __k+0 S4 A32])
        (nil)))
(note 4 3 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 4 14 2 (set (reg/f:SI 86 [ __j ])
        (mem/f:SI (plus:SI (reg/f:SI 93 [ this ])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)this_6(D) + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 86 [ __j ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1442 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1442 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 20)
;;  succ:       4 [91.0%] 
;;              3 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 93 94

;; basic block 3, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [9.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u10(6){ }u11(7){ }u12(16){ }u13(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags] 86
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 121 3 (parallel [
            (set (reg/f:SI 86 [ __j ])
                (plus:SI (reg/f:SI 93 [ this ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:529 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 121 17 122 3 (set (pc)
        (label_ref 47)) 636 {jump}
     (nil)
 -> 47)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 93 94

(barrier 122 121 20)
;; basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 [91.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u15(6){ }u16(7){ }u17(16){ }u18(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 93 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 94
;; lr  def 	 96 97 104 105 106
(code_label 20 122 21 4 66 "" [1 uses])
(note 21 20 107 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 107 21 108 4 (set (reg:SI 96 [ D.83085 ])
        (mem:SI (reg/v/f:SI 94 [ __k ]) [34 MEM[(const long long unsigned int &)__k_8(D)]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 108 107 131 4 (set (reg:SI 97 [ D.83085+4 ])
        (mem:SI (plus:SI (reg/v/f:SI 94 [ __k ])
                (const_int 4 [0x4])) [34 MEM[(const long long unsigned int &)__k_8(D)]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 131 108 132 4 (set (reg/f:SI 104 [orig:86 __j ] [86])
        (reg/f:SI 86 [ __j ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 86 [ __j ])
        (nil)))
(insn 132 131 133 4 (set (reg:SI 105 [orig:96 D.83085 ] [96])
        (reg:SI 96 [ D.83085 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 96 [ D.83085 ])
        (nil)))
(insn 133 132 123 4 (set (reg:SI 106 [orig:97 D.83085+4 ] [97])
        (reg:SI 97 [ D.83085+4 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97 [ D.83085+4 ])
        (nil)))
(jump_insn 123 133 124 4 (set (pc)
        (label_ref 41)) 636 {jump}
     (nil)
 -> 41)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106

(barrier 124 123 94)
;; basic block 5, loop depth 1, count 0, freq 8281, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       11 [91.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u21(6){ }u22(7){ }u23(16){ }u24(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 93 94 105 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84
;; lr  def 	 104
(code_label 94 124 93 5 77 "" [1 uses])
(note 93 94 5 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 5 93 41 5 (set (reg/f:SI 104 [orig:86 __j ] [86])
        (reg/f:SI 84 [ __j ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 84 [ __j ])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106

;; basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u26(6){ }u27(7){ }u28(16){ }u29(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 106
;; lr  def 	 17 [flags] 108 109
(code_label 41 5 23 6 71 "" [1 uses])
(note 23 41 109 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 109 23 110 6 (set (reg:SI 108 [orig:98 D.83085 ] [98])
        (mem:SI (plus:SI (reg/f:SI 104 [orig:86 __j ] [86])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__j_43 + 16]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 110 109 25 6 (set (reg:SI 109 [orig:99 D.83085+4 ] [99])
        (mem:SI (plus:SI (reg/f:SI 104 [orig:86 __j ] [86])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__j_43 + 16]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 25 110 26 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 109 [orig:99 D.83085+4 ] [99])
            (reg:SI 106 [orig:97 D.83085+4 ] [97]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 7 {*cmpsi_1}
     (nil))
(jump_insn 26 25 99 6 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 36)
;;  succ:       10 [50.0%] 
;;              7 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 93 94 104 105 106 108 109

;; basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [50.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u35(6){ }u36(7){ }u37(16){ }u38(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 93 94 104 105 106 108 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 99 26 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 28 99 100 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 105)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 105)
;;  succ:       9 [50.0%] 
;;              8 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106 108 109

;; basic block 8, loop depth 1, count 0, freq 2275, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 [50.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u40(6){ }u41(7){ }u42(16){ }u43(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106 108 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 105 108
;; lr  def 	 17 [flags]
(note 100 28 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 100 30 8 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 108 [orig:98 D.83085 ] [98])
            (reg:SI 105 [orig:96 D.83085 ] [96]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 7 {*cmpsi_1}
     (nil))
(jump_insn 30 29 105 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 36)
;;  succ:       10 [50.0%] 
;;              9 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106 108 109

;; basic block 9, loop depth 1, count 0, freq 4550, maybe hot
;; Invalid sum of incoming frequencies 3413, should be 4550
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u47(6){ }u48(7){ }u49(16){ }u50(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106 108 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104
;; lr  def 	 84 107
(code_label 105 30 32 9 79 "" [1 uses])
(note 32 105 33 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 6 9 (set (reg/f:SI 84 [ __j ])
        (mem/f:SI (plus:SI (reg/f:SI 104 [orig:86 __j ] [86])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__j_43 + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 6 33 125 9 (set (reg/v:QI 107 [orig:83 __comp ] [83])
        (const_int 1 [0x1])) 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(jump_insn 125 6 126 9 (set (pc)
        (label_ref 39)) 636 {jump}
     (nil)
 -> 39)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 93 94 104 105 106 107 108 109

(barrier 126 125 36)
;; basic block 10, loop depth 1, count 0, freq 4550, maybe hot
;; Invalid sum of incoming frequencies 5688, should be 4550
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6 [50.0%] 
;;              8 [50.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u52(6){ }u53(7){ }u54(16){ }u55(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106 108 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104
;; lr  def 	 84 107
(code_label 36 126 37 10 68 "" [2 uses])
(note 37 36 38 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 7 10 (set (reg/f:SI 84 [ __j ])
        (mem/f:SI (plus:SI (reg/f:SI 104 [orig:86 __j ] [86])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__j_43 + 12B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 7 38 39 10 (set (reg/v:QI 107 [orig:83 __comp ] [83])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 93 94 104 105 106 107 108 109

;; basic block 11, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u57(6){ }u58(7){ }u59(16){ }u60(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 93 94 104 105 106 107 108 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84
;; lr  def 	 17 [flags]
(code_label 39 7 40 11 70 "" [1 uses])
(note 40 39 42 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 42 40 43 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 84 [ __j ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1442 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 43 42 44 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 94)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1442 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 94)
;;  succ:       5 [91.0%] 
;;              12 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 93 94 104 105 106 107 108 109

;; basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u63(6){ }u64(7){ }u65(16){ }u66(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93 94 104 105 106 107 108 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 106 107 108 109
;; lr  def 	 17 [flags] 83 86 90 96 97 98 99
(note 44 43 134 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 134 44 135 12 (set (reg/v:QI 83 [ __comp ])
        (reg/v:QI 107 [orig:83 __comp ] [83])) 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:QI 107 [orig:83 __comp ] [83])
        (nil)))
(insn 135 134 136 12 (set (reg/f:SI 86 [ __j ])
        (reg/f:SI 104 [orig:86 __j ] [86])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 104 [orig:86 __j ] [86])
        (nil)))
(insn 136 135 137 12 (set (reg:SI 96 [ D.83085 ])
        (reg:SI 105 [orig:96 D.83085 ] [96])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105 [orig:96 D.83085 ] [96])
        (nil)))
(insn 137 136 138 12 (set (reg:SI 97 [ D.83085+4 ])
        (reg:SI 106 [orig:97 D.83085+4 ] [97])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106 [orig:97 D.83085+4 ] [97])
        (nil)))
(insn 138 137 139 12 (set (reg:SI 98 [ D.83085 ])
        (reg:SI 108 [orig:98 D.83085 ] [98])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108 [orig:98 D.83085 ] [98])
        (nil)))
(insn 139 138 8 12 (set (reg:SI 99 [ D.83085+4 ])
        (reg:SI 109 [orig:99 D.83085+4 ] [99])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 109 [orig:99 D.83085+4 ] [99])
        (nil)))
(insn 8 139 45 12 (set (reg/f:SI 90 [ __j ])
        (reg/f:SI 86 [ __j ])) 90 {*movsi_internal}
     (nil))
(insn 45 8 46 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 83 [ __comp ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1449 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg/v:QI 83 [ __comp ])
        (nil)))
(jump_insn 46 45 47 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 64)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1449 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5495 (nil)))
 -> 64)
;;  succ:       13 [45.0%]  (FALLTHRU)
;;              16 [55.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 90 93 94 96 97 98 99

;; basic block 13, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 [45.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u70(6){ }u71(7){ }u72(16){ }u73(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 93 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 93
;; lr  def 	 17 [flags]
(code_label 47 46 48 13 67 "" [1 uses])
(note 48 47 49 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(note 49 48 50 13 NOTE_INSN_DELETED)
(insn 50 49 51 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 93 [ this ])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)this_6(D) + 12B]+0 S4 A32])
            (reg/f:SI 86 [ __j ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1451 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/f:SI 93 [ this ])
        (nil)))
(jump_insn 51 50 52 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1451 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8986 (nil)))
 -> 57)
;;  succ:       14 [10.1%]  (FALLTHRU)
;;              15 [89.9%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 94

;; basic block 14, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [10.1%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u78(6){ }u79(7){ }u80(16){ }u81(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86
;; lr  def 	 100 101
(note 52 51 53 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 14 (set (reg:SI 100 [ D.81357 ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1452 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 54 53 127 14 (set (reg:SI 101 [ D.81357+4 ])
        (reg/f:SI 86 [ __j ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1452 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 86 [ __j ])
        (nil)))
(jump_insn 127 54 128 14 (set (pc)
        (label_ref 82)) 636 {jump}
     (nil)
 -> 82)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

(barrier 128 127 57)
;; basic block 15, loop depth 0, count 0, freq 404, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13 [89.9%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u83(6){ }u84(7){ }u85(16){ }u86(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 94
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 86 88 90 96 97 98 99
(code_label 57 128 58 15 73 "" [1 uses])
(note 58 57 59 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 15 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 86 [ __j ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (nil))
(call_insn/i 60 59 61 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base") [flags 0x43]  <function_decl 06b62500 _Rb_tree_decrement>) [0 _Rb_tree_decrement S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 61 60 111 15 (set (reg/f:SI 88 [ __j ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 111 61 112 15 (set (reg:SI 96 [ D.83085 ])
        (mem:SI (reg/v/f:SI 94 [ __k ]) [34 MEM[(const long long unsigned int &)__k_8(D)]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 112 111 113 15 (set (reg:SI 97 [ D.83085+4 ])
        (mem:SI (plus:SI (reg/v/f:SI 94 [ __k ])
                (const_int 4 [0x4])) [34 MEM[(const long long unsigned int &)__k_8(D)]+4 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 94 [ __k ])
        (nil)))
(insn 113 112 114 15 (set (reg:SI 98 [ D.83085 ])
        (mem:SI (plus:SI (reg/f:SI 88 [ __j ])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__j_25 + 16]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 114 113 9 15 (set (reg:SI 99 [ D.83085+4 ])
        (mem:SI (plus:SI (reg/f:SI 88 [ __j ])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__j_25 + 16]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 9 114 10 15 (set (reg/f:SI 90 [ __j ])
        (reg/f:SI 86 [ __j ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 86 [ __j ])
        (nil)))
(insn 10 9 64 15 (set (reg/f:SI 86 [ __j ])
        (reg/f:SI 88 [ __j ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 88 [ __j ])
        (nil)))
;;  succ:       16 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 90 96 97 98 99

;; basic block 16, loop depth 0, count 0, freq 854, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       12 [55.0%] 
;;              15 [100.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u98(6){ }u99(7){ }u100(16){ }u101(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 90 96 97 98 99
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97 99
;; lr  def 	 17 [flags]
(code_label 64 10 65 16 72 "" [1 uses])
(note 65 64 66 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 16 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 99 [ D.83085+4 ])
            (reg:SI 97 [ D.83085+4 ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 99 [ D.83085+4 ])
        (expr_list:REG_DEAD (reg:SI 97 [ D.83085+4 ])
            (nil))))
(jump_insn 67 66 102 16 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 78)
;;  succ:       20 [50.0%] 
;;              17 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 86 90 96 98

;; basic block 17, loop depth 0, count 0, freq 427, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 [50.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u105(6){ }u106(7){ }u107(16){ }u108(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 86 90 96 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 102 67 69 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(jump_insn 69 102 103 17 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 106)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 106)
;;  succ:       19 [50.0%] 
;;              18 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 90 96 98

;; basic block 18, loop depth 0, count 0, freq 214, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 [50.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u110(6){ }u111(7){ }u112(16){ }u113(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 90 96 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 98
;; lr  def 	 17 [flags]
(note 103 69 70 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 70 103 71 18 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 98 [ D.83085 ])
            (reg:SI 96 [ D.83085 ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 98 [ D.83085 ])
        (expr_list:REG_DEAD (reg:SI 96 [ D.83085 ])
            (nil))))
(jump_insn 71 70 106 18 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 78)
;;  succ:       20 [50.0%] 
;;              19 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86 90

;; basic block 19, loop depth 0, count 0, freq 333, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 [50.0%]  (FALLTHRU)
;;              17 [50.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u117(6){ }u118(7){ }u119(16){ }u120(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  def 	 100 101
(code_label 106 71 73 19 80 "" [1 uses])
(note 73 106 74 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 19 (set (reg:SI 100 [ D.81357 ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1457 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 75 74 129 19 (set (reg:SI 101 [ D.81357+4 ])
        (reg/f:SI 90 [ __j ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1457 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 90 [ __j ])
        (nil)))
(jump_insn 129 75 130 19 (set (pc)
        (label_ref 82)) 636 {jump}
     (nil)
 -> 82)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

(barrier 130 129 78)
;; basic block 20, loop depth 0, count 0, freq 521, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       16 [50.0%] 
;;              18 [50.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u122(6){ }u123(7){ }u124(16){ }u125(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 86
;; lr  def 	 100 101
(code_label 78 130 79 20 75 "" [2 uses])
(note 79 78 80 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 20 (set (reg:SI 100 [ D.81357 ])
        (reg/f:SI 86 [ __j ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1458 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 86 [ __j ])
        (nil)))
(insn 81 80 82 20 (set (reg:SI 101 [ D.81357+4 ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1458 90 {*movsi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101

;; basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 20, next block 1, flags: (RTL)
;;  pred:       20 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u127(6){ }u128(7){ }u129(16){ }u130(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100 101
;; lr  def 	 0 [ax] 1 [dx]
(code_label 82 81 83 21 74 "" [2 uses])
(note 83 82 117 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 117 83 118 21 (set (reg:SI 0 ax)
        (reg:SI 100 [ D.81357 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1459 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ D.81357 ])
        (nil)))
(insn 118 117 89 21 (set (reg:SI 1 dx [+4 ])
        (reg:SI 101 [ D.81357+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1459 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 101 [ D.81357+4 ])
        (nil)))
(insn 89 118 0 21 (use (reg/i:DI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1459 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const key_type&) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = long long unsigned int] (_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_, funcdef_no=5939, decl_uid=70248, symbol_order=3443)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 203.
verify found no changes in insn with uid = 203.
deleting insn with uid = 184.
scanning new insn with uid = 204.
verify found no changes in insn with uid = 204.
deleting insn with uid = 179.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 46 count 29 (    1)
Reg 101 uninteresting (no unique first use)
Ignoring reg 102, has equiv memory
Ignoring reg 103, has equiv memory
Reg 85 uninteresting
Reg 115: def dominates all uses has unique first use
Reg 107 uninteresting (no unique first use)
Reg 108 uninteresting (no unique first use)
Reg 109: def dominates all uses has unique first use
Reg 110 uninteresting
Reg 97 uninteresting (no unique first use)
Reg 117 uninteresting
Reg 98 uninteresting (no unique first use)
Reg 118 uninteresting
Reg 109 not local to one basic block
Reg 115 not local to one basic block
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
;; 2 succs { 3 8 }
;; 3 succs { 4 17 }
;; 4 succs { 27 5 }
;; 5 succs { 17 6 }
;; 6 succs { 27 7 }
;; 7 succs { 17 }
;; 8 succs { 20 9 }
;; 9 succs { 11 10 }
;; 10 succs { 18 11 }
;; 11 succs { 12 13 }
;; 12 succs { 28 }
;; 13 succs { 17 14 }
;; 14 succs { 16 15 }
;; 15 succs { 17 16 }
;; 16 succs { 28 }
;; 17 succs { 28 }
;; 18 succs { 20 19 }
;; 19 succs { 26 20 }
;; 20 succs { 21 22 }
;; 21 succs { 28 }
;; 22 succs { 17 23 }
;; 23 succs { 25 24 }
;; 24 succs { 17 25 }
;; 25 succs { 28 }
;; 26 succs { 28 }
;; 27 succs { 28 }
;; 28 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 102: (insn_list:REG_DEP_TRUE 3 (nil))
init_insns for 103: (insn_list:REG_DEP_TRUE 4 (nil))
init_insns for 117: (insn_list:REG_DEP_TRUE 204 (nil))
init_insns for 118: (insn_list:REG_DEP_TRUE 203 (nil))

Pass 0 for finding pseudo/allocno costs

    a5 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r112,l0) best DREG, allocno DREG
    a1 (r111,l0) best AREG, allocno AREG
    a11 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a10 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a9 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a6 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r101,l0) best CREG, allocno CREG
    a4 (r98,l0) best AREG, allocno AREG
    a12 (r97,l0) best AREG, allocno AREG
    a2 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r112,l0) costs: AREG:0,0 DREG:-1231,-1231 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18241,18241 SSE_REGS:18241,18241 ALL_SSE_REGS:18241,18241 MMX_REGS:23241,23241 FP_TOP_SSE_REGS:356624,356624 FP_SECOND_SSE_REGS:356624,356624 FLOAT_SSE_REGS:356624,356624 FLOAT_INT_REGS:356624,356624 INT_SSE_REGS:19241,19241 FLOAT_INT_SSE_REGS:356624,356624 ALL_REGS:356624,356624 MEM:5356,5356
  a1(r111,l0) costs: AREG:-1231,-1231 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:18585,18585 SSE_REGS:18585,18585 ALL_SSE_REGS:18585,18585 MMX_REGS:23800,23800 FP_TOP_SSE_REGS:365568,365568 FP_SECOND_SSE_REGS:365568,365568 FLOAT_SSE_REGS:365568,365568 FLOAT_INT_REGS:365568,365568 INT_SSE_REGS:19628,19628 FLOAT_INT_SSE_REGS:365568,365568 ALL_REGS:365568,365568 MEM:5485,5485
  a2(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2396,2396 SSE_REGS:2396,2396 ALL_SSE_REGS:2396,2396 MMX_REGS:3331,3331 FP_TOP_SSE_REGS:46696,46696 FP_SECOND_SSE_REGS:46696,46696 FLOAT_SSE_REGS:46696,46696 FLOAT_INT_REGS:46696,46696 INT_SSE_REGS:2583,2583 FLOAT_INT_SSE_REGS:46696,46696 ALL_REGS:46696,46696 MEM:1011,1011
  a3(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:53936,53936 SSE_REGS:53936,53936 ALL_SSE_REGS:53936,53936 MMX_REGS:80146,80146 FP_TOP_SSE_REGS:1194336,1194336 FP_SECOND_SSE_REGS:1194336,1194336 FLOAT_SSE_REGS:1194336,1194336 FLOAT_INT_REGS:1194336,1194336 INT_SSE_REGS:59178,59178 FLOAT_INT_SSE_REGS:1194336,1194336 ALL_REGS:1194336,1194336 MEM:14937,14937
  a4(r98,l0) costs: AREG:-191,-191 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5848,5848 SSE_REGS:5848,5848 ALL_SSE_REGS:5848,5848 MMX_REGS:8548,8548 FP_TOP_SSE_REGS:131420,131420 FP_SECOND_SSE_REGS:131420,131420 FLOAT_SSE_REGS:131420,131420 FLOAT_INT_REGS:131420,131420 INT_SSE_REGS:6388,6388 FLOAT_INT_SSE_REGS:131420,131420 ALL_REGS:131420,131420 MEM:2049,2049
  a5(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2416,2416 SSE_REGS:2416,2416 ALL_SSE_REGS:2416,2416 MMX_REGS:3171,3171 FP_TOP_SSE_REGS:46508,46508 FP_SECOND_SSE_REGS:46508,46508 FLOAT_SSE_REGS:46508,46508 FLOAT_INT_REGS:46508,46508 INT_SSE_REGS:2567,2567 FLOAT_INT_SSE_REGS:46508,46508 ALL_REGS:46508,46508 MEM:755,755
  a6(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13880,13880 SSE_REGS:13880,13880 ALL_SSE_REGS:13880,13880 MMX_REGS:16180,16180 FP_TOP_SSE_REGS:184080,184080 FP_SECOND_SSE_REGS:184080,184080 FLOAT_SSE_REGS:184080,184080 FLOAT_INT_REGS:184080,184080 INT_SSE_REGS:14340,14340 FLOAT_INT_SSE_REGS:184080,184080 ALL_REGS:184080,184080 MEM:4922,4922
  a7(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:-1231,-1231 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24744,24744 SSE_REGS:24744,24744 ALL_SSE_REGS:24744,24744 MMX_REGS:35209,35209 FP_TOP_SSE_REGS:535344,535344 FP_SECOND_SSE_REGS:535344,535344 FLOAT_SSE_REGS:535344,535344 FLOAT_INT_REGS:535344,535344 INT_SSE_REGS:26837,26837 FLOAT_INT_SSE_REGS:535344,535344 ALL_REGS:535344,535344 MEM:9141,9141
  a8(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:28192,28192 SSE_REGS:28192,28192 ALL_SSE_REGS:28192,28192 MMX_REGS:38312,38312 FP_TOP_SSE_REGS:524992,524992 FP_SECOND_SSE_REGS:524992,524992 FLOAT_SSE_REGS:524992,524992 FLOAT_INT_REGS:524992,524992 INT_SSE_REGS:30216,30216 FLOAT_INT_SSE_REGS:524992,524992 ALL_REGS:524992,524992 MEM:4096,4096
  a9(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21584,21584 SSE_REGS:21584,21584 ALL_SSE_REGS:21584,21584 MMX_REGS:28699,28699 FP_TOP_SSE_REGS:384384,384384 FP_SECOND_SSE_REGS:384384,384384 FLOAT_SSE_REGS:384384,384384 FLOAT_INT_REGS:384384,384384 INT_SSE_REGS:23007,23007 FLOAT_INT_SSE_REGS:384384,384384 ALL_REGS:384384,384384 MEM:8241,8241
  a10(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12744,12744 SSE_REGS:12744,12744 ALL_SSE_REGS:12744,12744 MMX_REGS:14334,14334 FP_TOP_SSE_REGS:154544,154544 FP_SECOND_SSE_REGS:154544,154544 FLOAT_SSE_REGS:154544,154544 FLOAT_INT_REGS:154544,154544 INT_SSE_REGS:13062,13062 FLOAT_INT_SSE_REGS:154544,154544 ALL_REGS:154544,154544 MEM:4354,4354
  a11(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:17008,17008 SSE_REGS:17008,17008 ALL_SSE_REGS:17008,17008 MMX_REGS:21263,21263 FP_TOP_SSE_REGS:265408,265408 FP_SECOND_SSE_REGS:265408,265408 FLOAT_SSE_REGS:265408,265408 FLOAT_INT_REGS:265408,265408 INT_SSE_REGS:17859,17859 FLOAT_INT_SSE_REGS:265408,265408 ALL_REGS:265408,265408 MEM:5953,5953
  a12(r97,l0) costs: AREG:-381,-381 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:14104,14104 SSE_REGS:14104,14104 ALL_SSE_REGS:14104,14104 MMX_REGS:21014,21014 FP_TOP_SSE_REGS:325556,325556 FP_SECOND_SSE_REGS:325556,325556 FLOAT_SSE_REGS:325556,325556 FLOAT_INT_REGS:325556,325556 INT_SSE_REGS:15486,15486 FLOAT_INT_SSE_REGS:325556,325556 ALL_REGS:325556,325556 MEM:5607,5607
  a13(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4832,4832 SSE_REGS:4832,4832 ALL_SSE_REGS:4832,4832 MMX_REGS:6342,6342 FP_TOP_SSE_REGS:93016,93016 FP_SECOND_SSE_REGS:93016,93016 FLOAT_SSE_REGS:93016,93016 FLOAT_INT_REGS:93016,93016 INT_SSE_REGS:5134,5134 FLOAT_INT_SSE_REGS:93016,93016 ALL_REGS:93016,93016 MEM:1510,1510
  a14(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1044,1044 SSE_REGS:1044,1044 ALL_SSE_REGS:1044,1044 MMX_REGS:1134,1134 FP_TOP_SSE_REGS:11544,11544 FP_SECOND_SSE_REGS:11544,11544 FLOAT_SSE_REGS:11544,11544 FLOAT_INT_REGS:11544,11544 INT_SSE_REGS:1062,1062 FLOAT_INT_SSE_REGS:11544,11544 ALL_REGS:11544,11544 MEM:372,372
  a15(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21000,21000 SSE_REGS:21000,21000 ALL_SSE_REGS:21000,21000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:416000,416000 FP_SECOND_SSE_REGS:416000,416000 FLOAT_SSE_REGS:416000,416000 FLOAT_INT_REGS:416000,416000 INT_SSE_REGS:22000,22000 FLOAT_INT_SSE_REGS:416000,416000 ALL_REGS:416000,416000 MEM:7000,7000


Pass 1 for finding pseudo/allocno costs

    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r112: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r101: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r112,l0) costs: AREG:0,0 DREG:0,-1231 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20417,20417 SSE_REGS:20417,20417 ALL_SSE_REGS:20417,20417 MMX_REGS:25417,25417 FP_TOP_SSE_REGS:358800,358800 FP_SECOND_SSE_REGS:358800,358800 FLOAT_SSE_REGS:358800,358800 FLOAT_INT_REGS:358800,358800 INT_SSE_REGS:21417,21417 FLOAT_INT_SSE_REGS:358800,358800 ALL_REGS:358800,358800 MEM:6988,6988
  a1(r111,l0) costs: AREG:0,-1231 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20761,20761 SSE_REGS:20761,20761 ALL_SSE_REGS:20761,20761 MMX_REGS:25976,25976 FP_TOP_SSE_REGS:367744,367744 FP_SECOND_SSE_REGS:367744,367744 FLOAT_SSE_REGS:367744,367744 FLOAT_INT_REGS:367744,367744 INT_SSE_REGS:21804,21804 FLOAT_INT_SSE_REGS:367744,367744 ALL_REGS:367744,367744 MEM:7117,7117
  a2(r85,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2471,2471 SSE_REGS:2471,2471 ALL_SSE_REGS:2471,2471 MMX_REGS:3406,3406 FP_TOP_SSE_REGS:46996,46996 FP_SECOND_SSE_REGS:46996,46996 FLOAT_SSE_REGS:46996,46996 FLOAT_INT_REGS:46996,46996 INT_SSE_REGS:2658,2658 FLOAT_INT_SSE_REGS:46996,46996 ALL_REGS:46996,46996 MEM:1011,1011
  a3(r102,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:54936,54936 SSE_REGS:54936,54936 ALL_SSE_REGS:54936,54936 MMX_REGS:81146,81146 FP_TOP_SSE_REGS:1198336,1198336 FP_SECOND_SSE_REGS:1198336,1198336 FLOAT_SSE_REGS:1198336,1198336 FLOAT_INT_REGS:1198336,1198336 INT_SSE_REGS:60178,60178 FLOAT_INT_SSE_REGS:1198336,1198336 ALL_REGS:1198336,1198336 MEM:14937,14937
  a4(r98,l0) costs: AREG:0,-191 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6612,6612 SSE_REGS:6612,6612 ALL_SSE_REGS:6612,6612 MMX_REGS:9312,9312 FP_TOP_SSE_REGS:132184,132184 FP_SECOND_SSE_REGS:132184,132184 FLOAT_SSE_REGS:132184,132184 FLOAT_INT_REGS:132184,132184 INT_SSE_REGS:7152,7152 FLOAT_INT_SSE_REGS:132184,132184 ALL_REGS:132184,132184 MEM:2622,2622
  a5(r118,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:3020,3020 SSE_REGS:3020,3020 ALL_SSE_REGS:3020,3020 MMX_REGS:3775,3775 FP_TOP_SSE_REGS:47112,47112 FP_SECOND_SSE_REGS:47112,47112 FLOAT_SSE_REGS:47112,47112 FLOAT_INT_REGS:47112,47112 INT_SSE_REGS:3171,3171 FLOAT_INT_SSE_REGS:47112,47112 ALL_REGS:47112,47112 MEM:1208,1208
  a6(r107,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:14730,14730 SSE_REGS:14730,14730 ALL_SSE_REGS:14730,14730 MMX_REGS:17030,17030 FP_TOP_SSE_REGS:187480,187480 FP_SECOND_SSE_REGS:187480,187480 FLOAT_SSE_REGS:187480,187480 FLOAT_INT_REGS:187480,187480 INT_SSE_REGS:15190,15190 FLOAT_INT_SSE_REGS:187480,187480 ALL_REGS:187480,187480 MEM:4922,4922
  a7(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,-1231 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:28744,28744 SSE_REGS:28744,28744 ALL_SSE_REGS:28744,28744 MMX_REGS:39209,39209 FP_TOP_SSE_REGS:539344,539344 FP_SECOND_SSE_REGS:539344,539344 FLOAT_SSE_REGS:539344,539344 FLOAT_INT_REGS:539344,539344 INT_SSE_REGS:30837,30837 FLOAT_INT_SSE_REGS:539344,539344 ALL_REGS:539344,539344 MEM:12141,12141
  a8(r103,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:29192,29192 SSE_REGS:29192,29192 ALL_SSE_REGS:29192,29192 MMX_REGS:39312,39312 FP_TOP_SSE_REGS:528992,528992 FP_SECOND_SSE_REGS:528992,528992 FLOAT_SSE_REGS:528992,528992 FLOAT_INT_REGS:528992,528992 INT_SSE_REGS:31216,31216 FLOAT_INT_SSE_REGS:528992,528992 ALL_REGS:528992,528992 MEM:4096,4096
  a9(r108,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:22434,22434 SSE_REGS:22434,22434 ALL_SSE_REGS:22434,22434 MMX_REGS:29549,29549 FP_TOP_SSE_REGS:387784,387784 FP_SECOND_SSE_REGS:387784,387784 FLOAT_SSE_REGS:387784,387784 FLOAT_INT_REGS:387784,387784 INT_SSE_REGS:23857,23857 FLOAT_INT_SSE_REGS:387784,387784 ALL_REGS:387784,387784 MEM:8241,8241
  a10(r109,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13594,13594 SSE_REGS:13594,13594 ALL_SSE_REGS:13594,13594 MMX_REGS:15184,15184 FP_TOP_SSE_REGS:157944,157944 FP_SECOND_SSE_REGS:157944,157944 FLOAT_SSE_REGS:157944,157944 FLOAT_INT_REGS:157944,157944 INT_SSE_REGS:13912,13912 FLOAT_INT_SSE_REGS:157944,157944 ALL_REGS:157944,157944 MEM:4354,4354
  a11(r110,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:17858,17858 SSE_REGS:17858,17858 ALL_SSE_REGS:17858,17858 MMX_REGS:22113,22113 FP_TOP_SSE_REGS:268808,268808 FP_SECOND_SSE_REGS:268808,268808 FLOAT_SSE_REGS:268808,268808 FLOAT_INT_REGS:268808,268808 INT_SSE_REGS:18709,18709 FLOAT_INT_SSE_REGS:268808,268808 ALL_REGS:268808,268808 MEM:5953,5953
  a12(r97,l0) costs: AREG:0,-381 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:15628,15628 SSE_REGS:15628,15628 ALL_SSE_REGS:15628,15628 MMX_REGS:22538,22538 FP_TOP_SSE_REGS:327080,327080 FP_SECOND_SSE_REGS:327080,327080 FLOAT_SSE_REGS:327080,327080 FLOAT_INT_REGS:327080,327080 INT_SSE_REGS:17010,17010 FLOAT_INT_SSE_REGS:327080,327080 ALL_REGS:327080,327080 MEM:6750,6750
  a13(r117,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:6040,6040 SSE_REGS:6040,6040 ALL_SSE_REGS:6040,6040 MMX_REGS:7550,7550 FP_TOP_SSE_REGS:94224,94224 FP_SECOND_SSE_REGS:94224,94224 FLOAT_SSE_REGS:94224,94224 FLOAT_INT_REGS:94224,94224 INT_SSE_REGS:6342,6342 FLOAT_INT_SSE_REGS:94224,94224 ALL_REGS:94224,94224 MEM:2416,2416
  a14(r115,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1119,1119 SSE_REGS:1119,1119 ALL_SSE_REGS:1119,1119 MMX_REGS:1209,1209 FP_TOP_SSE_REGS:11844,11844 FP_SECOND_SSE_REGS:11844,11844 FLOAT_SSE_REGS:11844,11844 FLOAT_INT_REGS:11844,11844 INT_SSE_REGS:1137,1137 FLOAT_INT_SSE_REGS:11844,11844 ALL_REGS:11844,11844 MEM:372,372
  a15(r104,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21000,21000 SSE_REGS:21000,21000 ALL_SSE_REGS:21000,21000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:416000,416000 FP_SECOND_SSE_REGS:416000,416000 FLOAT_SSE_REGS:416000,416000 FLOAT_INT_REGS:416000,416000 INT_SSE_REGS:22000,22000 FLOAT_INT_SSE_REGS:416000,416000 ALL_REGS:416000,416000 MEM:7000,7000

   Insn 144(l0): point = 0
   Insn 176(l0): point = 2
   Insn 175(l0): point = 4
   Insn 139(l0): point = 7
   Insn 138(l0): point = 9
   Insn 201(l0): point = 12
   Insn 130(l0): point = 14
   Insn 129(l0): point = 16
   Insn 199(l0): point = 19
   Insn 187(l0): point = 21
   Insn 186(l0): point = 23
   Insn 185(l0): point = 25
   Insn 203(l0): point = 27
   Insn 183(l0): point = 29
   Insn 197(l0): point = 32
   Insn 98(l0): point = 34
   Insn 97(l0): point = 36
   Insn 195(l0): point = 39
   Insn 172(l0): point = 41
   Insn 171(l0): point = 43
   Insn 79(l0): point = 45
   Insn 78(l0): point = 47
   Insn 77(l0): point = 49
   Insn 76(l0): point = 51
   Insn 107(l0): point = 54
   Insn 106(l0): point = 56
   Insn 105(l0): point = 58
   Insn 104(l0): point = 60
   Insn 103(l0): point = 62
   Insn 95(l0): point = 65
   Insn 94(l0): point = 67
   Insn 90(l0): point = 70
   Insn 89(l0): point = 72
   Insn 88(l0): point = 75
   Insn 87(l0): point = 77
   Insn 111(l0): point = 80
   Insn 110(l0): point = 82
   Insn 109(l0): point = 85
   Insn 193(l0): point = 88
   Insn 182(l0): point = 90
   Insn 181(l0): point = 92
   Insn 180(l0): point = 94
   Insn 204(l0): point = 96
   Insn 178(l0): point = 98
   Insn 58(l0): point = 101
   Insn 57(l0): point = 103
   Insn 56(l0): point = 106
   Insn 54(l0): point = 109
   Insn 53(l0): point = 111
   Insn 52(l0): point = 113
   Insn 51(l0): point = 115
   Insn 50(l0): point = 117
   Insn 191(l0): point = 120
   Insn 45(l0): point = 122
   Insn 44(l0): point = 124
   Insn 42(l0): point = 127
   Insn 41(l0): point = 129
   Insn 37(l0): point = 132
   Insn 36(l0): point = 134
   Insn 35(l0): point = 137
   Insn 33(l0): point = 140
   Insn 32(l0): point = 142
   Insn 170(l0): point = 144
   Insn 169(l0): point = 146
   Insn 168(l0): point = 148
   Insn 167(l0): point = 150
   Insn 189(l0): point = 153
   Insn 23(l0): point = 156
   Insn 22(l0): point = 158
   Insn 21(l0): point = 161
   Insn 19(l0): point = 164
   Insn 18(l0): point = 166
   Insn 165(l0): point = 168
   Insn 16(l0): point = 170
   Insn 14(l0): point = 173
   Insn 13(l0): point = 175
   Insn 11(l0): point = 178
   Insn 10(l0): point = 180
   Insn 9(l0): point = 182
   Insn 4(l0): point = 184
   Insn 3(l0): point = 186
   Insn 2(l0): point = 188
 a0(r112): [120..122] [88..90] [39..41] [32..34] [19..21] [12..14] [3..7]
 a1(r111): [120..124] [88..94] [39..43] [32..36] [19..25] [12..16] [5..9]
 a2(r85): [156..170] [8..11]
 a3(r102): [178..186] [125..152] [91..119] [54..87] [35..38] [22..31] [17..18]
 a4(r98): [80..87] [54..58] [22..31]
 a5(r118): [26..27]
 a6(r107): [127..150] [104..119] [83..87] [54..79]
 a7(r101): [127..188] [101..119] [50..87]
 a8(r103): [127..184] [101..119] [52..87]
 a9(r108): [127..148] [112..119] [57..79]
 a10(r109): [132..146] [73..79]
 a11(r110): [132..144] [78..79]
 a12(r97): [91..113]
 a13(r117): [95..96]
 a14(r115): [159..168]
 a15(r104): [181..182]
Compressing live ranges: from 191 to 42 - 21%
Ranges after the compression:
 a0(r112): [34..35] [26..27] [18..19] [14..15] [8..9] [4..5] [0..1]
 a1(r111): [34..35] [26..29] [14..19] [8..11] [0..5]
 a2(r85): [38..39] [2..3]
 a3(r102): [40..41] [36..37] [28..33] [20..25] [16..17] [10..13] [6..7]
 a4(r98): [24..25] [20..21] [10..13]
 a5(r118): [12..13]
 a6(r107): [36..37] [32..33] [20..25]
 a7(r101): [36..41] [32..33] [20..25]
 a8(r103): [36..41] [32..33] [20..25]
 a9(r108): [36..37] [32..33] [20..23]
 a10(r109): [36..37] [22..23]
 a11(r110): [36..37] [22..23]
 a12(r97): [28..33]
 a13(r117): [30..31]
 a14(r115): [38..39]
 a15(r104): [40..41]
+++Allocating 128 bytes for conflict table (uncompressed size 128)
;; a0(r112,l0) conflicts: a1(r111,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a1(r111,l0) conflicts: a0(r112,l0) a2(r85,l0) a3(r102,l0) a4(r98,l0) a12(r97,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a2(r85,l0) conflicts: a1(r111,l0) a7(r101,l0) a8(r103,l0) a14(r115,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a3(r102,l0) conflicts: a1(r111,l0) a4(r98,l0) a5(r118,l0) a6(r107,l0) a9(r108,l0) a7(r101,l0) a8(r103,l0) a10(r109,l0) a11(r110,l0) a12(r97,l0) a13(r117,l0) a15(r104,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a4(r98,l0) conflicts: a1(r111,l0) a3(r102,l0) a5(r118,l0) a6(r107,l0) a9(r108,l0) a7(r101,l0) a8(r103,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r118,l0) conflicts: a3(r102,l0) a4(r98,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r107,l0) conflicts: a3(r102,l0) a4(r98,l0) a9(r108,l0) a7(r101,l0) a8(r103,l0) a10(r109,l0) a11(r110,l0) a12(r97,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a7(r101,l0) conflicts: a2(r85,l0) a3(r102,l0) a4(r98,l0) a6(r107,l0) a9(r108,l0) a8(r103,l0) a10(r109,l0) a11(r110,l0) a12(r97,l0) a14(r115,l0) a15(r104,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a8(r103,l0) conflicts: a2(r85,l0) a3(r102,l0) a4(r98,l0) a6(r107,l0) a9(r108,l0) a7(r101,l0) a10(r109,l0) a11(r110,l0) a12(r97,l0) a14(r115,l0) a15(r104,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a9(r108,l0) conflicts: a3(r102,l0) a4(r98,l0) a6(r107,l0) a7(r101,l0) a8(r103,l0) a10(r109,l0) a11(r110,l0) a12(r97,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a10(r109,l0) conflicts: a3(r102,l0) a6(r107,l0) a9(r108,l0) a7(r101,l0) a8(r103,l0) a11(r110,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a11(r110,l0) conflicts: a3(r102,l0) a6(r107,l0) a9(r108,l0) a7(r101,l0) a8(r103,l0) a10(r109,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a12(r97,l0) conflicts: a1(r111,l0) a3(r102,l0) a6(r107,l0) a9(r108,l0) a7(r101,l0) a8(r103,l0) a13(r117,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r117,l0) conflicts: a3(r102,l0) a12(r97,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a14(r115,l0) conflicts: a2(r85,l0) a7(r101,l0) a8(r103,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r104,l0) conflicts: a3(r102,l0) a7(r101,l0) a8(r103,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a0(r112)<->a2(r85)@37:move
  cp1:a1(r111)<->a5(r118)@18:shuffle
  cp2:a0(r112)<->a4(r98)@18:shuffle
  cp3:a0(r112)<->a3(r102)@55:shuffle
  cp4:a0(r112)<->a3(r102)@21:move
  cp5:a1(r111)<->a13(r117)@37:shuffle
  cp6:a0(r112)<->a12(r97)@37:shuffle
  pref0:a0(r112)<-hr1@1846
  pref1:a1(r111)<-hr0@1846
  pref2:a7(r101)<-hr2@1846
  pref3:a4(r98)<-hr0@286
  pref4:a12(r97)<-hr0@571
  regions=1, blocks=29, points=42
    allocnos=16 (big 0), copies=7, conflicts=1, ranges=45

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r112 1r111 2r85 3r102 4r98 5r118 6r107 7r101 8r103 9r108 10r109 11r110 12r97 13r117 14r115 15r104
    modified regnos: 85 97 98 101 102 103 104 107 108 109 110 111 112 115 117 118
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
        1:( 0-6)@66804
          2:( 1-6)@101844
            3:( 3-6)@8192
      Allocno a0r112 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a1r111 of GENERAL_REGS(7) has 6 avail. regs  0 2-6, ^node:  0-6 (confl regs =  1 7-75)
      Allocno a2r85 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a3r102 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a4r98 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a5r118 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a6r107 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a7r101 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a8r103 of GENERAL_REGS(7) has 4 avail. regs  3-6, node:  3-6 (confl regs =  0 7-75)
      Allocno a9r108 of GENERAL_REGS(7) has 6 avail. regs  1-6, node:  1-6 (confl regs =  0 7-75)
      Allocno a10r109 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a11r110 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a12r97 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a13r117 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a14r115 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Allocno a15r104 of GENERAL_REGS(7) has 7 avail. regs  0-6, node:  0-6 (confl regs =  7-75)
      Forming thread by copy 3:a0r112-a3r102 (freq=55):
        Result (freq=8239): a0r112(1997) a3r102(6242)
      Forming thread by copy 0:a0r112-a2r85 (freq=37):
        Result (freq=8501): a0r112(1997) a2r85(262) a3r102(6242)
      Forming thread by copy 5:a1r111-a13r117 (freq=37):
        Result (freq=2644): a1r111(2040) a13r117(604)
      Forming thread by copy 1:a1r111-a5r118 (freq=18):
        Result (freq=2946): a1r111(2040) a5r118(302) a13r117(604)
      Pushing a14(r115,l0)(cost 0)
      Pushing a10(r109,l0)(cost 0)
      Pushing a11(r110,l0)(cost 0)
      Pushing a15(r104,l0)(cost 0)
      Pushing a5(r118,l0)(cost 0)
        Making a4(r98,l0) colorable
      Pushing a4(r98,l0)(cost 3195)
        Making a6(r107,l0) colorable
        Making a9(r108,l0) colorable
      Pushing a6(r107,l0)(cost 4922)
        Making a7(r101,l0) colorable
        Making a12(r97,l0) colorable
      Pushing a12(r97,l0)(cost 7893)
        Making a3(r102,l0) colorable
      Pushing a9(r108,l0)(cost 8241)
        Making a8(r103,l0) colorable
      Pushing a13(r117,l0)(cost 0)
      Pushing a1(r111,l0)(cost 0)
      Pushing a8(r103,l0)(cost 4096)
      Pushing a7(r101,l0)(cost 12141)
      Pushing a2(r85,l0)(cost 0)
      Pushing a0(r112,l0)(cost 0)
      Pushing a3(r102,l0)(cost 14937)
      Popping a3(r102,l0)  -- assign reg 3
      Popping a0(r112,l0)  -- assign reg 1
      Popping a2(r85,l0)  -- assign reg 3
      Popping a7(r101,l0)  -- assign reg 4
      Popping a8(r103,l0)  -- assign reg 5
      Popping a1(r111,l0)  -- assign reg 0
      Popping a13(r117,l0)  -- assign reg 2
      Popping a9(r108,l0)  -- assign reg 6
      Popping a12(r97,l0)  -- assign reg 1
      Popping a6(r107,l0)  -- assign reg 2
      Popping a4(r98,l0)  -- assign reg 1
      Popping a5(r118,l0)  -- assign reg 0
      Popping a15(r104,l0)  -- assign reg 0
      Popping a11(r110,l0)  -- assign reg 0
      Popping a10(r109,l0)  -- assign reg 1
      Popping a14(r115,l0)  -- assign reg 0
Spilling a8r103 for a6r107
Assigning 5 to a6r107
       a8(r103,l0)  -- assign memory
Disposition:
    2:r85  l0     3   12:r97  l0     1    4:r98  l0     1    7:r101 l0     4
    3:r102 l0     3    8:r103 l0   mem   15:r104 l0     0    6:r107 l0     5
    9:r108 l0     6   10:r109 l0     1   11:r110 l0     0    1:r111 l0     0
    0:r112 l0     1   14:r115 l0     0   13:r117 l0     2    5:r118 l0     0
New iteration of spill/restore move
+++Costs: overall -3290, reg -7386, mem 4096, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const key_type&) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = long long unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={5d,5u} r1={6d,3u} r2={5d,2u} r6={1d,28u} r7={3d,41u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,29u,2e} r17={23d,22u} r18={3d} r19={3d} r20={1d,28u} r21={4d} r22={4d} r23={4d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={4d} r30={4d} r31={4d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r85={1d,3u} r97={1d,5u} r98={1d,4u} r101={1d,6u} r102={1d,15u} r103={1d,5u} r104={1d,1u} r107={1d,4u} r108={1d,4u} r109={1d,2u} r110={1d,2u} r111={7d,2u} r112={7d,1u} r115={1d,1u} r117={1d,1u} r118={1d,1u} 
;;    total ref usage 494{277d,215u,2e} in 82{79 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/f:SI 101 [ this ])
        (reg:SI 2 cx [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1532 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v:SI 102 [ __position ])
        (mem/c:SI (reg/f:SI 16 argp) [36 __position+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1532 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:SI 16 argp) [36 __position+0 S4 A32])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:SI 103 [ __k ])
        (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 __k+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1532 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 __k+0 S4 A32])
        (nil)))
(note 5 4 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 5 10 2 (parallel [
            (set (reg/f:SI 104 [ D.83088 ])
                (plus:SI (reg/f:SI 101 [ this ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:529 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 102 [ __position ])
            (reg/f:SI 104 [ D.83088 ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1540 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/f:SI 104 [ D.83088 ])
        (nil)))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1540 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8500 (nil)))
 -> 28)
;;  succ:       3 [15.0%]  (FALLTHRU)
;;              8 [85.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103

;; basic block 3, loop depth 0, count 0, freq 1500, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [15.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u13(6){ }u14(7){ }u15(16){ }u16(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101
;; lr  def 	 17 [flags]
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg/f:SI 101 [ this ])
                    (const_int 20 [0x14])) [21 MEM[(unsigned int *)this_5(D) + 20B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 74)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              17 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 103

;; basic block 4, loop depth 0, count 0, freq 750, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [50.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(6){ }u20(7){ }u21(16){ }u22(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 103
;; lr  def 	 17 [flags] 85 115
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 165 4 (set (reg/f:SI 85 [ D.83090 ])
        (mem/f:SI (plus:SI (reg/f:SI 101 [ this ])
                (const_int 16 [0x10])) [6 MEM[(struct _Rb_tree_node_base * &)this_5(D) + 16]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1543 90 {*movsi_internal}
     (nil))
(insn 165 16 166 4 (set (reg:SI 115 [ MEM[(const long long unsigned int &)_7 + 16] ])
        (mem:SI (plus:SI (reg/f:SI 85 [ D.83090 ])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)_7 + 16]+0 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 90 {*movsi_internal}
     (nil))
(note 166 165 18 4 NOTE_INSN_DELETED)
(insn 18 166 19 4 (set (reg:CC 17 flags)
        (compare:CC (mem:SI (plus:SI (reg/f:SI 85 [ D.83090 ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)_7 + 16]+4 S4 A32])
            (mem:SI (plus:SI (reg/v/f:SI 103 [ __k ])
                    (const_int 4 [0x4])) [34 MEM[(const long long unsigned int &)__k_9(D)]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 7 {*cmpsi_1}
     (nil))
(jump_insn 19 18 146 4 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 136)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 136)
;;  succ:       27 [50.0%] 
;;              5 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 85 101 103 115

;; basic block 5, loop depth 0, count 0, freq 375, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [50.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u29(6){ }u30(7){ }u31(16){ }u32(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 85 101 103 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 146 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 21 146 147 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 74)
;;  succ:       17 [50.0%] 
;;              6 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85 101 103 115

;; basic block 6, loop depth 0, count 0, freq 188, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [50.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u34(6){ }u35(7){ }u36(16){ }u37(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85 101 103 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 103 115
;; lr  def 	 17 [flags]
(note 147 21 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 22 147 23 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 115 [ MEM[(const long long unsigned int &)_7 + 16] ])
            (mem:SI (reg/v/f:SI 103 [ __k ]) [34 MEM[(const long long unsigned int &)__k_9(D)]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 115 [ MEM[(const long long unsigned int &)_7 + 16] ])
        (nil)))
(jump_insn 23 22 188 6 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 136)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 136)
;;  succ:       27 [50.0%] 
;;              7 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85 101 103

;; basic block 7, loop depth 0, count 0, freq 94, maybe hot
;;  prev block 6, next block 8, flags: (NEW, RTL, MODIFIED)
;;  pred:       6 [50.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 188 23 189 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 189 188 190 7 (set (pc)
        (label_ref 74)) 636 {jump}
     (nil)
 -> 74)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 103

(barrier 190 189 28)
;; basic block 8, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       2 [85.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u41(6){ }u42(7){ }u43(16){ }u44(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102 103
;; lr  def 	 17 [flags] 107 108 109 110
(code_label 28 190 29 8 89 "" [1 uses])
(note 29 28 167 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 167 29 168 8 (set (reg:SI 107 [ D.83091 ])
        (mem:SI (reg/v/f:SI 103 [ __k ]) [34 MEM[(const long long unsigned int &)__k_9(D)]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 168 167 169 8 (set (reg:SI 108 [ D.83091+4 ])
        (mem:SI (plus:SI (reg/v/f:SI 103 [ __k ])
                (const_int 4 [0x4])) [34 MEM[(const long long unsigned int &)__k_9(D)]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 169 168 170 8 (set (reg:SI 109 [ D.83091 ])
        (mem:SI (plus:SI (reg/v:SI 102 [ __position ])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)_33 + 16]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 170 169 32 8 (set (reg:SI 110 [ D.83091+4 ])
        (mem:SI (plus:SI (reg/v:SI 102 [ __position ])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)_33 + 16]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 32 170 33 8 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 108 [ D.83091+4 ])
            (reg:SI 110 [ D.83091+4 ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 7 {*cmpsi_1}
     (nil))
(jump_insn 33 32 149 8 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 163)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 163)
;;  succ:       20 [50.0%] 
;;              9 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 101 102 103 107 108 109 110

;; basic block 9, loop depth 0, count 0, freq 4250, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [50.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u52(6){ }u53(7){ }u54(16){ }u55(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 101 102 103 107 108 109 110
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 149 33 35 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 35 149 150 9 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 161)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 161)
;;  succ:       11 [50.0%] 
;;              10 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108 109 110

;; basic block 10, loop depth 0, count 0, freq 2125, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 [50.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u57(6){ }u58(7){ }u59(16){ }u60(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108 109 110
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 109
;; lr  def 	 17 [flags]
(note 150 35 36 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 36 150 37 10 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 107 [ D.83091 ])
            (reg:SI 109 [ D.83091 ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 7 {*cmpsi_1}
     (nil))
(jump_insn 37 36 161 10 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 83)
;;  succ:       18 [50.0%] 
;;              11 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108 109 110

;; basic block 11, loop depth 0, count 0, freq 4250, maybe hot
;; Invalid sum of incoming frequencies 3188, should be 4250
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 [50.0%]  (FALLTHRU)
;;              9 [50.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u64(6){ }u65(7){ }u66(16){ }u67(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102
;; lr  def 	 17 [flags]
(code_label 161 37 39 11 104 "" [1 uses])
(note 39 161 40 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(note 40 39 41 11 NOTE_INSN_DELETED)
(insn 41 40 42 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 101 [ this ])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * &)this_5(D) + 12]+0 S4 A32])
            (reg/v:SI 102 [ __position ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1552 7 {*cmpsi_1}
     (nil))
(jump_insn 42 41 43 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1552 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8986 (nil)))
 -> 48)
;;  succ:       12 [10.1%]  (FALLTHRU)
;;              13 [89.9%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108

;; basic block 12, loop depth 0, count 0, freq 431, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [10.1%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u72(6){ }u73(7){ }u74(16){ }u75(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  def 	 111 112
(note 43 42 44 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 12 (set (reg:SI 111 [ D.81243 ])
        (reg/v:SI 102 [ __position ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1553 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 102 [ __position ])
        (nil)))
(insn 45 44 191 12 (set (reg:SI 112 [ D.81243+4 ])
        (reg:SI 111 [ D.81243 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1553 90 {*movsi_internal}
     (nil))
(jump_insn 191 45 192 12 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112

(barrier 192 191 48)
;; basic block 13, loop depth 0, count 0, freq 3819, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11 [89.9%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u78(6){ }u79(7){ }u80(16){ }u81(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102 108
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 97
(code_label 48 192 49 13 95 "" [1 uses])
(note 49 48 50 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 13 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v:SI 102 [ __position ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (nil))
(call_insn/i 51 50 52 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base") [flags 0x43]  <function_decl 06b62500 _Rb_tree_decrement>) [0 _Rb_tree_decrement S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 52 51 53 13 (set (reg/f:SI 97 [ D.83090 ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 53 52 54 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 108 [ D.83091+4 ])
            (mem:SI (plus:SI (reg/f:SI 97 [ D.83090 ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)_35 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 108 [ D.83091+4 ])
        (nil)))
(jump_insn 54 53 152 13 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
;;  succ:       17 [50.0%] 
;;              14 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 97 101 102 103 107

;; basic block 14, loop depth 0, count 0, freq 1910, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [50.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u90(6){ }u91(7){ }u92(16){ }u93(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 97 101 102 103 107
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 152 54 56 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 56 152 153 14 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 162)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 162)
;;  succ:       16 [50.0%] 
;;              15 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97 101 102 103 107

;; basic block 15, loop depth 0, count 0, freq 955, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 [50.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u95(6){ }u96(7){ }u97(16){ }u98(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97 101 102 103 107
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97 107
;; lr  def 	 17 [flags]
(note 153 56 57 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 57 153 58 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 107 [ D.83091 ])
            (mem:SI (plus:SI (reg/f:SI 97 [ D.83090 ])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)_35 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 107 [ D.83091 ])
        (nil)))
(jump_insn 58 57 162 15 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 74)
;;  succ:       17 [50.0%] 
;;              16 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97 101 102 103

;; basic block 16, loop depth 0, count 0, freq 3028, maybe hot
;; Invalid sum of incoming frequencies 1433, should be 3028
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [50.0%]  (FALLTHRU)
;;              14 [50.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u102(6){ }u103(7){ }u104(16){ }u105(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97 102
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97 102
;; lr  def 	 17 [flags] 111 112 117
(code_label 162 58 60 16 105 "" [1 uses])
(note 60 162 178 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 178 60 204 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 97 [ D.83090 ])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)_35 + 12B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 3 {*cmpsi_ccno_1}
     (nil))
(insn 204 178 180 16 (set (reg:SI 117)
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 180 204 181 16 (set (reg:SI 111 [ D.81243 ])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/v:SI 102 [ __position ])
            (reg:SI 117))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 927 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:SI 117)
        (expr_list:REG_DEAD (reg:CCZ 17 flags)
            (nil))))
(insn 181 180 182 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 97 [ D.83090 ])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)_35 + 12B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 3 {*cmpsi_ccno_1}
     (nil))
(insn 182 181 193 16 (set (reg:SI 112 [ D.81243+4 ])
        (if_then_else:SI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/f:SI 97 [ D.83090 ])
            (reg/v:SI 102 [ __position ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 927 {*movsicc_noc}
     (expr_list:REG_DEAD (reg/v:SI 102 [ __position ])
        (expr_list:REG_DEAD (reg/f:SI 97 [ D.83090 ])
            (expr_list:REG_DEAD (reg:CCZ 17 flags)
                (nil)))))
(jump_insn 193 182 194 16 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112

(barrier 194 193 74)
;; basic block 17, loop depth 0, count 0, freq 2311, maybe hot
;; Invalid sum of incoming frequencies 4614, should be 2311
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       5 [50.0%] 
;;              3 [50.0%] 
;;              13 [50.0%] 
;;              15 [50.0%] 
;;              22 [50.0%] 
;;              24 [50.0%] 
;;              7 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u114(6){ }u115(7){ }u116(16){ }u117(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 103
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 111 112
(code_label 74 194 75 17 90 "" [7 uses])
(note 75 74 76 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 17 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v/f:SI 103 [ __k ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 103 [ __k ])
        (nil)))
(insn 77 76 78 17 (set (reg:SI 2 cx)
        (reg/f:SI 101 [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 101 [ this ])
        (nil)))
(call_insn 78 77 79 17 (parallel [
            (set (reg:DI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE24_M_get_insert_unique_posERS1_") [flags 0x3]  <function_decl 06e17c80 _M_get_insert_unique_pos>) [0 _M_get_insert_unique_pos S1 A8])
                    (const_int 4 [0x4])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 653 {*call_value_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 79 78 171 17 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 171 79 172 17 (set (reg:SI 111 [ D.81243 ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 172 171 195 17 (set (reg:SI 112 [ D.81243+4 ])
        (reg:SI 1 dx [+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [+4 ])
        (nil)))
(jump_insn 195 172 196 17 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112

(barrier 196 195 83)
;; basic block 18, loop depth 0, count 0, freq 0
;; Invalid sum of incoming frequencies 1063, should be 0
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       10 [50.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u130(6){ }u131(7){ }u132(16){ }u133(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108 109 110
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108 110
;; lr  def 	 17 [flags]
(code_label 83 196 84 18 93 "" [1 uses])
(note 84 83 87 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 87 84 88 18 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 108 [ D.83091+4 ])
            (reg:SI 110 [ D.83091+4 ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1564 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 110 [ D.83091+4 ])
        (nil)))
(jump_insn 88 87 156 18 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 163)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1564 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 163)
;;  succ:       20
;;              19 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108 109

;; basic block 19, loop depth 0, count 0, freq 1063, maybe hot
;; Invalid sum of incoming frequencies 0, should be 1063
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 [100.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u137(6){ }u138(7){ }u139(16){ }u140(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 107 109
;; lr  def 	 17 [flags]
(note 156 88 89 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 89 156 90 19 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 107 [ D.83091 ])
            (reg:SI 109 [ D.83091 ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1564 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 109 [ D.83091 ])
        (nil)))
(jump_insn 90 89 163 19 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1564 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 127)
;;  succ:       26 [50.0%] 
;;              20 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108

;; basic block 20, loop depth 0, count 0, freq 2125, maybe hot
;; Invalid sum of incoming frequencies 4782, should be 2125
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [50.0%]  (FALLTHRU)
;;              18
;;              8 [50.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u144(6){ }u145(7){ }u146(16){ }u147(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102
;; lr  def 	 17 [flags]
(code_label 163 90 92 20 106 "" [2 uses])
(note 92 163 93 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(note 93 92 94 20 NOTE_INSN_DELETED)
(insn 94 93 95 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 101 [ this ])
                    (const_int 16 [0x10])) [6 MEM[(struct _Rb_tree_node_base * &)this_5(D) + 16]+0 S4 A32])
            (reg/v:SI 102 [ __position ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1568 7 {*cmpsi_1}
     (nil))
(jump_insn 95 94 96 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1568 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8986 (nil)))
 -> 101)
;;  succ:       21 [10.1%]  (FALLTHRU)
;;              22 [89.9%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108

;; basic block 21, loop depth 0, count 0, freq 215, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 [10.1%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u152(6){ }u153(7){ }u154(16){ }u155(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  def 	 111 112
(note 96 95 97 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 21 (set (reg:SI 111 [ D.81243 ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1569 90 {*movsi_internal}
     (nil))
(insn 98 97 197 21 (set (reg:SI 112 [ D.81243+4 ])
        (reg/v:SI 102 [ __position ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1569 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 102 [ __position ])
        (nil)))
(jump_insn 197 98 198 21 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112

(barrier 198 197 101)
;; basic block 22, loop depth 0, count 0, freq 1910, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       20 [89.9%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u157(6){ }u158(7){ }u159(16){ }u160(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 102 103 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102 108
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 98
(code_label 101 198 102 22 101 "" [1 uses])
(note 102 101 103 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 22 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v:SI 102 [ __position ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:203 90 {*movsi_internal}
     (nil))
(call_insn/i 104 103 105 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base") [flags 0x43]  <function_decl 06b62400 _Rb_tree_increment>) [0 _Rb_tree_increment S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:203 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 105 104 106 22 (set (reg/f:SI 98 [ D.83090 ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:203 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 106 105 107 22 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 108 [ D.83091+4 ])
            (mem:SI (plus:SI (reg/f:SI 98 [ D.83090 ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)_36 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 108 [ D.83091+4 ])
        (nil)))
(jump_insn 107 106 158 22 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
;;  succ:       17 [50.0%] 
;;              23 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 98 101 102 103 107

;; basic block 23, loop depth 0, count 0, freq 955, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 [50.0%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u169(6){ }u170(7){ }u171(16){ }u172(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 98 101 102 103 107
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 158 107 109 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(jump_insn 109 158 159 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 164)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 164)
;;  succ:       25 [50.0%] 
;;              24 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 101 102 103 107

;; basic block 24, loop depth 0, count 0, freq 478, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 [50.0%]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u174(6){ }u175(7){ }u176(16){ }u177(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 101 102 103 107
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 107
;; lr  def 	 17 [flags]
(note 159 109 110 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 110 159 111 24 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 107 [ D.83091 ])
            (mem:SI (plus:SI (reg/f:SI 98 [ D.83090 ])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)_36 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 107 [ D.83091 ])
        (nil)))
(jump_insn 111 110 164 24 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 74)
;;  succ:       17 [50.0%] 
;;              25 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 101 102 103

;; basic block 25, loop depth 0, count 0, freq 1514, maybe hot
;; Invalid sum of incoming frequencies 717, should be 1514
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 [50.0%]  (FALLTHRU)
;;              23 [50.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u181(6){ }u182(7){ }u183(16){ }u184(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 102
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 102
;; lr  def 	 17 [flags] 111 112 118
(code_label 164 111 113 25 107 "" [1 uses])
(note 113 164 183 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 183 113 203 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/v:SI 102 [ __position ])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)_33 + 12B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 3 {*cmpsi_ccno_1}
     (nil))
(insn 203 183 185 25 (set (reg:SI 118)
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 185 203 186 25 (set (reg:SI 111 [ D.81243 ])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/f:SI 98 [ D.83090 ])
            (reg:SI 118))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 927 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:SI 118)
        (expr_list:REG_DEAD (reg:CCZ 17 flags)
            (nil))))
(insn 186 185 187 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/v:SI 102 [ __position ])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)_33 + 12B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 3 {*cmpsi_ccno_1}
     (nil))
(insn 187 186 199 25 (set (reg:SI 112 [ D.81243+4 ])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/f:SI 98 [ D.83090 ])
            (reg/v:SI 102 [ __position ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 927 {*movsicc_noc}
     (expr_list:REG_DEAD (reg/v:SI 102 [ __position ])
        (expr_list:REG_DEAD (reg/f:SI 98 [ D.83090 ])
            (expr_list:REG_DEAD (reg:CCZ 17 flags)
                (nil)))))
(jump_insn 199 187 200 25 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112

(barrier 200 199 127)
;; basic block 26, loop depth 0, count 0, freq 2125, maybe hot
;; Invalid sum of incoming frequencies 532, should be 2125
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       19 [50.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u193(6){ }u194(7){ }u195(16){ }u196(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  def 	 111 112
(code_label 127 200 128 26 99 "" [1 uses])
(note 128 127 129 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 26 (set (reg:SI 111 [ D.81243 ])
        (reg/v:SI 102 [ __position ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1582 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 102 [ __position ])
        (nil)))
(insn 130 129 201 26 (set (reg:SI 112 [ D.81243+4 ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1582 90 {*movsi_internal}
     (nil))
(jump_insn 201 130 202 26 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112

(barrier 202 201 136)
;; basic block 27, loop depth 0, count 0, freq 375, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       4 [50.0%] 
;;              6 [50.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u198(6){ }u199(7){ }u200(16){ }u201(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85
;; lr  def 	 111 112
(code_label 136 202 137 27 91 "" [2 uses])
(note 137 136 138 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 138 137 139 27 (set (reg:SI 111 [ D.81243 ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1544 90 {*movsi_internal}
     (nil))
(insn 139 138 177 27 (set (reg:SI 112 [ D.81243+4 ])
        (reg/f:SI 85 [ D.83090 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1544 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 85 [ D.83090 ])
        (nil)))
;;  succ:       28 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112

;; basic block 28, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 27, next block 1, flags: (RTL)
;;  pred:       27 [100.0%]  (FALLTHRU)
;;              21 [100.0%] 
;;              12 [100.0%] 
;;              25 [100.0%] 
;;              16 [100.0%] 
;;              17 [100.0%] 
;;              26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u203(6){ }u204(7){ }u205(16){ }u206(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111 112
;; lr  def 	 0 [ax] 1 [dx]
(code_label 177 139 145 28 108 "" [6 uses])
(note 145 177 175 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 175 145 176 28 (set (reg:SI 0 ax)
        (reg:SI 111 [ D.81243 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1583 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 111 [ D.81243 ])
        (nil)))
(insn 176 175 144 28 (set (reg:SI 1 dx [+4 ])
        (reg:SI 112 [ D.81243+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1583 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 112 [ D.81243+4 ])
        (nil)))
(insn 144 176 0 28 (use (reg/i:DI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1583 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int main() (main, funcdef_no=5706, decl_uid=72670, symbol_order=3172) (executed once)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 149 uninteresting
Reg 461: def dominates all uses has unique first use
Reg 150 uninteresting
Reg 267 uninteresting
Reg 160 uninteresting
Reg 85: local to bb 7 def dominates all uses has unique first use
Reg 460: def dominates all uses has unique first use
Reg 84 uninteresting
Reg 166 uninteresting
Reg 280 uninteresting
Reg 176 uninteresting
Reg 458: def dominates all uses has unique first use
Ignoring reg 291, has equiv memory
Reg 457: def dominates all uses has unique first use
Ignoring reg 305, has equiv memory
Ignoring reg 320, has equiv memory
Reg 347 uninteresting
Reg 113: def dominates all uses has unique first use
Reg 427: def dominates all uses has unique first use
Reg 428: def dominates all uses has unique first use
Reg 441: def dominates all uses has unique first use
Ignoring reg 356, has equiv memory
Reg 448 uninteresting
Reg 443: def dominates all uses has unique first use
Ignoring reg 374, has equiv memory
Reg 445: def dominates all uses has unique first use
Ignoring reg 386, has equiv memory
Ignoring reg 397, has equiv memory
Ignoring reg 404, has equiv memory
Ignoring reg 410, has equiv memory
Ignoring reg 414, has equiv memory
Ignoring reg 418, has equiv memory
Reg 258: local to bb 113 def dominates all uses has unique first use
Reg 437 uninteresting (no unique first use)
Reg 438 uninteresting (no unique first use)
Reg 435 uninteresting (no unique first use)
Reg 436 uninteresting (no unique first use)
Reg 254: local to bb 120 def dominates all uses has unique first use
Reg 433 uninteresting (no unique first use)
Reg 434 uninteresting (no unique first use)
Examining insn 100, def for 85
  all ok
Reg 113 not local to one basic block
Examining insn 726, def for 254
  all ok
Examining insn 663, def for 258
  all ok
Reg 427 not local to one basic block
Reg 428 not local to one basic block
Reg 441 not local to one basic block
Reg 443 not local to one basic block
Reg 445 not local to one basic block
Reg 457 not local to one basic block
Reg 458 not local to one basic block
Reg 460 not local to one basic block
Reg 461 not local to one basic block
;; 15 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130
;;
;; Loop 14
;;  header 110, latch 110
;;  depth 1, outer 0
;;  nodes: 110
;;
;; Loop 8
;;  header 22, latch 108
;;  depth 1, outer 0
;;  nodes: 22 108 107 106 105 104 101 103 30 29 28 27 25 26 24 23 78 100 54 129 128 65 67 66 64 63 62 61 60 59 58 57 56 55 53 44 42 52 51 49 47 50 48 46 45 113 112 40 41 43 39 38 37 36 35 34 33 32 31 102 114 99 90 88 98 97 95 93 96 94 92 91 120 119 86 87 89 85 84 83 82 81 80 79 118 127 77 76 75 74 72 70 73 71 69 68 116 115 117 121
;;
;; Loop 10
;;  header 32, latch 102
;;  depth 2, outer 8
;;  nodes: 32 102 101 78 100 54 129 128 65 67 66 64 63 62 61 60 59 58 57 56 55 53 44 42 52 51 49 47 50 48 46 45 113 112 40 41 43 39 38 37 36 35 34 33 114 99 90 88 98 97 95 93 96 94 92 91 120 119 86 87 89 85 84 83 82 81 80 79 118 127 77 76 75 74 72 70 73 71 69 68 116 115 117 121
;;
;; Loop 13
;;  header 80, latch 85
;;  depth 3, outer 10
;;  nodes: 80 85 84 83 82 81
;;
;; Loop 12
;;  header 57, latch 62
;;  depth 3, outer 10
;;  nodes: 57 62 61 60 59 58
;;
;; Loop 11
;;  header 34, latch 39
;;  depth 3, outer 10
;;  nodes: 34 39 38 37 36 35
;;
;; Loop 9
;;  header 25, latch 27
;;  depth 2, outer 8
;;  nodes: 25 27 26
;;
;; Loop 7
;;  header 19, latch 19
;;  depth 1, outer 0
;;  nodes: 19
;;
;; Loop 6
;;  header 17, latch 17
;;  depth 1, outer 0
;;  nodes: 17
;;
;; Loop 3
;;  header 9, latch 14
;;  depth 1, outer 0
;;  nodes: 9 14 13 125 124 12 11 10
;;
;; Loop 5
;;  header 13, latch 13
;;  depth 2, outer 3
;;  nodes: 13
;;
;; Loop 4
;;  header 11, latch 11
;;  depth 2, outer 3
;;  nodes: 11
;;
;; Loop 2
;;  header 6, latch 6
;;  depth 1, outer 0
;;  nodes: 6
;;
;; Loop 1
;;  header 4, latch 4
;;  depth 1, outer 0
;;  nodes: 4
;; 2 succs { 3 122 }
;; 3 succs { 4 }
;; 4 succs { 4 5 }
;; 5 succs { 123 }
;; 6 succs { 6 7 }
;; 7 succs { 8 126 }
;; 8 succs { 9 }
;; 9 succs { 10 124 }
;; 10 succs { 11 }
;; 11 succs { 11 12 }
;; 12 succs { 125 }
;; 13 succs { 13 14 }
;; 14 succs { 9 15 }
;; 15 succs { 16 20 }
;; 16 succs { 17 }
;; 17 succs { 17 18 }
;; 18 succs { 19 }
;; 19 succs { 19 20 }
;; 20 succs { 22 21 }
;; 21 succs { 109 }
;; 22 succs { 108 23 }
;; 23 succs { 24 29 }
;; 24 succs { 25 }
;; 25 succs { 26 27 }
;; 26 succs { 27 }
;; 27 succs { 25 28 }
;; 28 succs { 30 }
;; 29 succs { 30 }
;; 30 succs { 31 103 }
;; 31 succs { 32 }
;; 32 succs { 33 112 }
;; 33 succs { 34 }
;; 34 succs { 38 35 }
;; 35 succs { 37 36 }
;; 36 succs { 38 37 }
;; 37 succs { 39 }
;; 38 succs { 39 }
;; 39 succs { 34 40 }
;; 40 succs { 113 41 }
;; 41 succs { 113 42 }
;; 42 succs { 54 43 }
;; 43 succs { 113 44 }
;; 44 succs { 54 }
;; 45 succs { 51 46 }
;; 46 succs { 51 47 }
;; 47 succs { 52 48 }
;; 48 succs { 50 49 }
;; 49 succs { 52 50 }
;; 50 succs { 52 }
;; 51 succs { 52 }
;; 52 succs { 54 }
;; 53 succs { 54 }
;; 54 succs { 55 101 }
;; 55 succs { 56 115 }
;; 56 succs { 57 }
;; 57 succs { 61 58 }
;; 58 succs { 60 59 }
;; 59 succs { 61 60 }
;; 60 succs { 62 }
;; 61 succs { 62 }
;; 62 succs { 57 63 }
;; 63 succs { 116 64 }
;; 64 succs { 116 65 }
;; 65 succs { 128 66 }
;; 66 succs { 116 67 }
;; 67 succs { 128 }
;; 68 succs { 74 69 }
;; 69 succs { 74 70 }
;; 70 succs { 75 71 }
;; 71 succs { 73 72 }
;; 72 succs { 75 73 }
;; 73 succs { 75 }
;; 74 succs { 75 }
;; 75 succs { 77 }
;; 76 succs { 77 }
;; 77 succs { 118 78 }
;; 78 succs { 101 }
;; 79 succs { 80 }
;; 80 succs { 84 81 }
;; 81 succs { 83 82 }
;; 82 succs { 84 83 }
;; 83 succs { 85 }
;; 84 succs { 85 }
;; 85 succs { 80 86 }
;; 86 succs { 120 87 }
;; 87 succs { 120 88 }
;; 88 succs { 100 89 }
;; 89 succs { 120 90 }
;; 90 succs { 100 }
;; 91 succs { 97 92 }
;; 92 succs { 97 93 }
;; 93 succs { 98 94 }
;; 94 succs { 96 95 }
;; 95 succs { 98 96 }
;; 96 succs { 98 }
;; 97 succs { 98 }
;; 98 succs { 100 }
;; 99 succs { 100 }
;; 100 succs { 101 }
;; 101 succs { 102 104 }
;; 102 succs { 32 }
;; 103 succs { 104 }
;; 104 succs { 105 106 }
;; 105 succs { 108 }
;; 106 succs { 107 108 }
;; 107 succs { 108 }
;; 108 succs { 22 109 }
;; 109 succs { 110 130 }
;; 110 succs { 110 111 }
;; 111 succs { 130 }
;; 112 succs { 113 }
;; 113 succs { 45 114 }
;; 114 succs { 53 }
;; 115 succs { 116 }
;; 116 succs { 68 117 }
;; 117 succs { 76 }
;; 118 succs { 79 119 }
;; 119 succs { 120 }
;; 120 succs { 91 121 }
;; 121 succs { 99 }
;; 122 succs { 123 }
;; 123 succs { 6 }
;; 124 succs { 125 }
;; 125 succs { 13 }
;; 126 succs { 21 }
;; 127 succs { 79 }
;; 128 succs { 127 129 }
;; 129 succs { 101 }
;; 130 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 3.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 231.
verify found no changes in insn with uid = 365.
verify found no changes in insn with uid = 378.
verify found no changes in insn with uid = 461.
verify found no changes in insn with uid = 474.
verify found no changes in insn with uid = 545.
verify found no changes in insn with uid = 558.
verify found no changes in insn with uid = 592.
verify found no changes in insn with uid = 605.
verify found no changes in insn with uid = 627.
verify found no changes in insn with uid = 646.
verify found no changes in insn with uid = 665.
verify found no changes in insn with uid = 673.
verify found no changes in insn with uid = 689.
verify found no changes in insn with uid = 697.
verify found no changes in insn with uid = 728.
verify found no changes in insn with uid = 736.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 291: (insn_list:REG_DEP_TRUE 168 (nil))
init_insns for 301: (insn_list:REG_DEP_TRUE 182 (nil))
init_insns for 305: (insn_list:REG_DEP_TRUE 191 (nil))
init_insns for 315: (insn_list:REG_DEP_TRUE 205 (nil))
init_insns for 320: (insn_list:REG_DEP_TRUE 228 (nil))
init_insns for 356: (insn_list:REG_DEP_TRUE 364 (nil))
init_insns for 374: (insn_list:REG_DEP_TRUE 460 (nil))
init_insns for 386: (insn_list:REG_DEP_TRUE 544 (nil))
init_insns for 397: (insn_list:REG_DEP_TRUE 587 (nil))
init_insns for 404: (insn_list:REG_DEP_TRUE 621 (nil))
init_insns for 406: (insn_list:REG_DEP_TRUE 624 (nil))
init_insns for 410: (insn_list:REG_DEP_TRUE 631 (nil))
init_insns for 414: (insn_list:REG_DEP_TRUE 644 (nil))
init_insns for 418: (insn_list:REG_DEP_TRUE 652 (nil))
init_insns for 421: (insn_list:REG_DEP_TRUE 670 (nil))
init_insns for 422: (insn_list:REG_DEP_TRUE 694 (nil))
init_insns for 424: (insn_list:REG_DEP_TRUE 733 (nil))
init_insns for 456: (insn_list:REG_DEP_TRUE 602 (nil))
init_insns for 457: (insn_list:REG_DEP_TRUE 199 (nil))
init_insns for 458: (insn_list:REG_DEP_TRUE 176 (nil))
init_insns for 460: (insn_list:REG_DEP_TRUE 933 (nil))
init_insns for 461: (insn_list:REG_DEP_TRUE 927 (nil))
Reg 456 has equivalence, initial gains 4

Pass 0 for finding pseudo/allocno costs

    a208 (r461,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a28 (r461,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a190 (r460,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a177 (r460,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a160 (r460,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a21 (r460,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a153 (r458,l6) best AD_REGS, allocno AD_REGS
    a18 (r458,l0) best AD_REGS, allocno AD_REGS
    a144 (r457,l7) best AD_REGS, allocno AD_REGS
    a16 (r457,l0) best AD_REGS, allocno AD_REGS
    a135 (r456,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a129 (r456,l11) best GENERAL_REGS, allocno GENERAL_REGS
    a119 (r456,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a110 (r456,l13) best GENERAL_REGS, allocno GENERAL_REGS
    a60 (r456,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a40 (r456,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r456,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a134 (r451,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a61 (r451,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a41 (r451,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a59 (r450,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a44 (r450,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a161 (r449,l3) best AREG, allocno AREG
    a152 (r449,l6) best AREG, allocno AREG
    a143 (r449,l7) best AREG, allocno AREG
    a39 (r449,l8) best AREG, allocno AREG
    a13 (r449,l0) best AREG, allocno AREG
    a118 (r448,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a64 (r448,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a86 (r445,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a89 (r443,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a97 (r441,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a141 (r439,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a81 (r438,l10) best DREG, allocno DREG
    a80 (r437,l10) best AREG, allocno AREG
    a73 (r436,l10) best DREG, allocno DREG
    a72 (r435,l10) best AREG, allocno AREG
    a68 (r434,l10) best DREG, allocno DREG
    a67 (r433,l10) best AREG, allocno AREG
    a189 (r432,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a176 (r432,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a165 (r432,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a188 (r431,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a175 (r431,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a164 (r431,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a207 (r430,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a196 (r430,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r430,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a206 (r429,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a195 (r429,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r429,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a128 (r428,l11) best GENERAL_REGS, allocno GENERAL_REGS
    a79 (r428,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a127 (r427,l11) best AD_REGS, allocno AD_REGS
    a78 (r427,l10) best AD_REGS, allocno AD_REGS
    a70 (r424,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a74 (r422,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a83 (r421,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a33 (r420,l14) best GENERAL_REGS, allocno GENERAL_REGS
    a35 (r418,l14) best NO_REGS, allocno NO_REGS
    a34 (r417,l14) best GENERAL_REGS, allocno GENERAL_REGS
    a36 (r414,l14) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r412,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r410,l0) best NO_REGS, allocno NO_REGS
    a6 (r409,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a10 (r406,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a12 (r404,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a11 (r403,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a43 (r397,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a84 (r386,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a87 (r374,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a91 (r366,l10) best AD_REGS, allocno AD_REGS
    a92 (r365,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a93 (r364,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a94 (r363,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a95 (r356,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a99 (r347,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a98 (r345,l10) best AD_REGS, allocno AD_REGS
    a100 (r344,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a102 (r342,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a103 (r340,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a101 (r339,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a136 (r334,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a137 (r332,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a138 (r330,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a139 (r329,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a140 (r328,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a51 (r320,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a53 (r318,l8) best DREG, allocno DREG
    a52 (r317,l8) best AREG, allocno AREG
    a145 (r315,l7) best GENERAL_REGS, allocno GENERAL_REGS
    a146 (r312,l7) best AD_REGS, allocno AD_REGS
    a148 (r307,l7) best GENERAL_REGS, allocno GENERAL_REGS
    a149 (r305,l7) best GENERAL_REGS, allocno GENERAL_REGS
    a147 (r304,l7) best GENERAL_REGS, allocno GENERAL_REGS
    a154 (r301,l6) best GENERAL_REGS, allocno GENERAL_REGS
    a155 (r298,l6) best AD_REGS, allocno AD_REGS
    a157 (r293,l6) best GENERAL_REGS, allocno GENERAL_REGS
    a158 (r291,l6) best GENERAL_REGS, allocno GENERAL_REGS
    a156 (r290,l6) best GENERAL_REGS, allocno GENERAL_REGS
    a166 (r286,l3) best AD_REGS, allocno AD_REGS
    a167 (r285,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a168 (r284,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a169 (r283,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a178 (r281,l5) best Q_REGS, allocno Q_REGS
    a183 (r280,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a181 (r279,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a182 (r278,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a184 (r277,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a185 (r276,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a191 (r275,l4) best Q_REGS, allocno Q_REGS
    a170 (r274,l3) best Q_REGS, allocno Q_REGS
    a24 (r272,l0) best AD_REGS, allocno AD_REGS
    a25 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a26 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a27 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a197 (r268,l2) best Q_REGS, allocno Q_REGS
    a202 (r267,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a200 (r266,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a201 (r265,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a203 (r264,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a204 (r263,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a209 (r262,l1) best Q_REGS, allocno Q_REGS
    a29 (r261,l0) best Q_REGS, allocno Q_REGS
    a82 (r258,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a69 (r254,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a38 (r252,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a9 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a151 (r240,l6) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a85 (r229,l10) best Q_REGS, allocno Q_REGS
    a88 (r212,l10) best Q_REGS, allocno Q_REGS
    a71 (r209,l10) best AREG, allocno AREG
    a126 (r203,l11) best AREG, allocno AREG
    a77 (r203,l10) best AREG, allocno AREG
    a125 (r189,l11) best GENERAL_REGS, allocno GENERAL_REGS
    a58 (r189,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a46 (r189,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a117 (r187,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a90 (r187,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a116 (r186,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a62 (r186,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a109 (r181,l13) best AREG, allocno AREG
    a66 (r181,l10) best AREG, allocno AREG
    a179 (r176,l5) best AREG, allocno AREG
    a174 (r175,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a162 (r175,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a180 (r174,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a187 (r167,l4) best Q_REGS, allocno Q_REGS
    a173 (r167,l5) best Q_REGS, allocno Q_REGS
    a163 (r167,l3) best Q_REGS, allocno Q_REGS
    a192 (r166,l4) best AREG, allocno AREG
    a108 (r165,l13) best GENERAL_REGS, allocno GENERAL_REGS
    a65 (r165,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a198 (r160,l2) best AREG, allocno AREG
    a194 (r159,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a0 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a199 (r158,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a205 (r151,l1) best Q_REGS, allocno Q_REGS
    a193 (r151,l2) best Q_REGS, allocno Q_REGS
    a1 (r151,l0) best Q_REGS, allocno Q_REGS
    a210 (r150,l1) best AREG, allocno AREG
    a30 (r149,l0) best AREG, allocno AREG
    a133 (r136,l9) best AD_REGS, allocno AD_REGS
    a124 (r136,l11) best AD_REGS, allocno AD_REGS
    a115 (r136,l12) best AD_REGS, allocno AD_REGS
    a107 (r136,l13) best AD_REGS, allocno AD_REGS
    a57 (r136,l10) best AD_REGS, allocno AD_REGS
    a48 (r136,l8) best AD_REGS, allocno AD_REGS
    a132 (r135,l9) best AD_REGS, allocno AD_REGS
    a49 (r135,l8) best AD_REGS, allocno AD_REGS
    a32 (r132,l14) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a31 (r129,l14) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a37 (r125,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a123 (r123,l11) best GENERAL_REGS, allocno GENERAL_REGS
    a114 (r123,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a106 (r123,l13) best GENERAL_REGS, allocno GENERAL_REGS
    a56 (r123,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a45 (r123,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a96 (r120,l10) best Q_REGS, allocno Q_REGS
    a113 (r117,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a75 (r117,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a122 (r113,l11) best GENERAL_REGS, allocno GENERAL_REGS
    a76 (r113,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a121 (r112,l11) best GENERAL_REGS, allocno GENERAL_REGS
    a112 (r112,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a105 (r112,l13) best GENERAL_REGS, allocno GENERAL_REGS
    a63 (r112,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a131 (r106,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a55 (r106,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a47 (r106,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a130 (r104,l9) best GENERAL_REGS, allocno GENERAL_REGS
    a50 (r104,l8) best GENERAL_REGS, allocno GENERAL_REGS
    a142 (r101,l7) best GENERAL_REGS, allocno GENERAL_REGS
    a17 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a150 (r94,l6) best GENERAL_REGS, allocno GENERAL_REGS
    a19 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a186 (r87,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a172 (r87,l5) best GENERAL_REGS, allocno GENERAL_REGS
    a159 (r87,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a22 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a23 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a171 (r84,l3) best AREG, allocno AREG
    a120 (r83,l11) best GENERAL_REGS, allocno GENERAL_REGS
    a111 (r83,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a104 (r83,l13) best GENERAL_REGS, allocno GENERAL_REGS
    a54 (r83,l10) best GENERAL_REGS, allocno GENERAL_REGS
    a42 (r83,l8) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r159,l0) costs: AD_REGS:2,20 Q_REGS:2,20 NON_Q_REGS:2,20 INDEX_REGS:2,20 LEGACY_REGS:2,20 GENERAL_REGS:2,20 CLOBBERED_REGS:2,20 MEM:12,183
  a1(r151,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,54 DIREG:0,54 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,54 INDEX_REGS:0,54 LEGACY_REGS:0,54 GENERAL_REGS:0,54 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:100,7516 INT_SSE_REGS:100,7516 FLOAT_INT_SSE_REGS:100,7516 ALL_REGS:100,7516 MEM:1,100
  a2(r429,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:34,223 SSE_REGS:34,223 ALL_SSE_REGS:34,223 MMX_REGS:44,278 FP_TOP_SSE_REGS:618,4362 FP_SECOND_SSE_REGS:618,4362 FLOAT_SSE_REGS:618,4362 FLOAT_INT_REGS:618,4362 INT_SSE_REGS:36,234 FLOAT_INT_SSE_REGS:618,4362 ALL_REGS:618,4362 MEM:10,82
  a3(r430,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:24,213 SSE_REGS:24,213 ALL_SSE_REGS:24,213 MMX_REGS:29,263 FP_TOP_SSE_REGS:408,4152 FP_SECOND_SSE_REGS:408,4152 FLOAT_SSE_REGS:408,4152 FLOAT_INT_REGS:408,4152 INT_SSE_REGS:25,223 FLOAT_INT_SSE_REGS:408,4152 ALL_REGS:408,4152 MEM:6,78
  a4(r412,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:7,7
  a5(r132,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8,413 SSE_REGS:8,413 ALL_SSE_REGS:8,413 MMX_REGS:8,593 FP_TOP_SSE_REGS:100,9460 FP_SECOND_SSE_REGS:100,9460 FLOAT_SSE_REGS:100,9460 FLOAT_INT_REGS:100,9460 INT_SSE_REGS:8,449 FLOAT_INT_SSE_REGS:100,9460 ALL_REGS:100,9460 MEM:1,154
  a6(r409,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:6,6
  a7(r129,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20,344 SSE_REGS:20,344 ALL_SSE_REGS:20,344 MMX_REGS:25,484 FP_TOP_SSE_REGS:312,6864 FP_SECOND_SSE_REGS:312,6864 FLOAT_SSE_REGS:312,6864 FLOAT_INT_REGS:312,6864 INT_SSE_REGS:21,372 FLOAT_INT_SSE_REGS:312,6864 ALL_REGS:312,6864 MEM:7,142
  a8(r410,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20,20 SSE_REGS:20,20 ALL_SSE_REGS:20,20 MMX_REGS:25,25 FP_TOP_SSE_REGS:312,312 FP_SECOND_SSE_REGS:312,312 FLOAT_SSE_REGS:312,312 FLOAT_INT_REGS:312,312 INT_SSE_REGS:21,21 FLOAT_INT_SSE_REGS:312,312 ALL_REGS:312,312 MEM:-1,-1
  a9(r252,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:32,176 SSE_REGS:32,176 ALL_SSE_REGS:32,176 MMX_REGS:37,241 FP_TOP_SSE_REGS:416,3328 FP_SECOND_SSE_REGS:416,3328 FLOAT_SSE_REGS:416,3328 FLOAT_INT_REGS:416,3328 INT_SSE_REGS:33,189 FLOAT_INT_SSE_REGS:416,3328 ALL_REGS:416,3328 MEM:12,64
  a10(r406,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:7,7
  a11(r403,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:7,7
  a12(r404,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20,20 SSE_REGS:20,20 ALL_SSE_REGS:20,20 MMX_REGS:25,25 FP_TOP_SSE_REGS:312,312 FP_SECOND_SSE_REGS:312,312 FLOAT_SSE_REGS:312,312 FLOAT_INT_REGS:312,312 INT_SSE_REGS:21,21 FLOAT_INT_SSE_REGS:312,312 ALL_REGS:312,312 MEM:0,0
  a13(r449,l0) costs: AREG:0,18 DREG:0,36 CREG:0,36 BREG:0,36 SIREG:0,36 DIREG:0,36 AD_REGS:0,36 Q_REGS:0,36 NON_Q_REGS:0,36 INDEX_REGS:0,36 LEGACY_REGS:0,36 GENERAL_REGS:0,36 CLOBBERED_REGS:0,36 SSE_FIRST_REG:32,1850 SSE_REGS:32,1850 ALL_SSE_REGS:32,1850 MMX_REGS:52,2365 FP_TOP_SSE_REGS:832,30178 FP_SECOND_SSE_REGS:832,30178 FLOAT_SSE_REGS:832,30178 FLOAT_INT_REGS:832,30178 INT_SSE_REGS:36,1953 FLOAT_INT_SSE_REGS:832,30178 ALL_REGS:832,30178 MEM:15,675
  a14(r456,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,29 SSE_REGS:13,29 ALL_SSE_REGS:13,29 MMX_REGS:13,39 FP_TOP_SSE_REGS:208,624 FP_SECOND_SSE_REGS:208,624 FLOAT_SSE_REGS:208,624 FLOAT_INT_REGS:208,624 INT_SSE_REGS:13,31 FLOAT_INT_SSE_REGS:208,624 ALL_REGS:208,624 MEM:4,12
  a15(r125,l0) costs: AREG:0,18 DREG:0,18 CREG:0,18 BREG:0,18 SIREG:0,18 DIREG:0,18 AD_REGS:0,18 Q_REGS:0,18 NON_Q_REGS:0,18 INDEX_REGS:0,18 LEGACY_REGS:0,18 GENERAL_REGS:0,18 CLOBBERED_REGS:0,18 SSE_FIRST_REG:8,359 SSE_REGS:8,359 ALL_SSE_REGS:8,359 MMX_REGS:8,494 FP_TOP_SSE_REGS:100,7606 FP_SECOND_SSE_REGS:100,7606 FLOAT_SSE_REGS:100,7606 FLOAT_INT_REGS:100,7606 INT_SSE_REGS:8,386 FLOAT_INT_SSE_REGS:100,7606 ALL_REGS:100,7606 MEM:1,136
  a16(r457,l0) costs: AREG:0,180 DREG:0,180 CREG:0,360 BREG:0,360 SIREG:0,360 DIREG:0,360 AD_REGS:0,180 Q_REGS:0,360 NON_Q_REGS:0,360 INDEX_REGS:0,360 LEGACY_REGS:0,360 GENERAL_REGS:0,360 CLOBBERED_REGS:0,360 SSE_FIRST_REG:8,908 SSE_REGS:8,908 ALL_SSE_REGS:8,908 MMX_REGS:8,1358 FP_TOP_SSE_REGS:100,19000 FP_SECOND_SSE_REGS:100,19000 FLOAT_SSE_REGS:100,19000 FLOAT_INT_REGS:100,19000 INT_SSE_REGS:8,998 FLOAT_INT_SSE_REGS:100,19000 ALL_REGS:100,19000 MEM:1,541
  a17(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8,6218 SSE_REGS:8,6218 ALL_SSE_REGS:8,6218 MMX_REGS:8,9368 FP_TOP_SSE_REGS:100,149860 FP_SECOND_SSE_REGS:100,149860 FLOAT_SSE_REGS:100,149860 FLOAT_INT_REGS:100,149860 INT_SSE_REGS:8,6848 FLOAT_INT_SSE_REGS:100,149860 ALL_REGS:100,149860 MEM:1,2701
  a18(r458,l0) costs: AREG:0,180 DREG:0,180 CREG:0,360 BREG:0,360 SIREG:0,360 DIREG:0,360 AD_REGS:0,180 Q_REGS:0,360 NON_Q_REGS:0,360 INDEX_REGS:0,360 LEGACY_REGS:0,360 GENERAL_REGS:0,360 CLOBBERED_REGS:0,360 SSE_FIRST_REG:8,908 SSE_REGS:8,908 ALL_SSE_REGS:8,908 MMX_REGS:8,1358 FP_TOP_SSE_REGS:100,19000 FP_SECOND_SSE_REGS:100,19000 FLOAT_SSE_REGS:100,19000 FLOAT_INT_REGS:100,19000 INT_SSE_REGS:8,998 FLOAT_INT_SSE_REGS:100,19000 ALL_REGS:100,19000 MEM:1,541
  a19(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8,6218 SSE_REGS:8,6218 ALL_SSE_REGS:8,6218 MMX_REGS:8,9368 FP_TOP_SSE_REGS:100,149860 FP_SECOND_SSE_REGS:100,149860 FLOAT_SSE_REGS:100,149860 FLOAT_INT_REGS:100,149860 INT_SSE_REGS:8,6848 FLOAT_INT_SSE_REGS:100,149860 ALL_REGS:100,149860 MEM:1,2611
  a20(r240,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,733 SSE_REGS:13,733 ALL_SSE_REGS:13,733 MMX_REGS:13,1183 FP_TOP_SSE_REGS:208,18928 FP_SECOND_SSE_REGS:208,18928 FLOAT_SSE_REGS:208,18928 FLOAT_INT_REGS:208,18928 INT_SSE_REGS:13,823 FLOAT_INT_SSE_REGS:208,18928 ALL_REGS:208,18928 MEM:4,274
  a21(r460,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8,14568 SSE_REGS:8,14568 ALL_SSE_REGS:8,14568 MMX_REGS:8,23668 FP_TOP_SSE_REGS:100,378660 FP_SECOND_SSE_REGS:100,378660 FLOAT_SSE_REGS:100,378660 FLOAT_INT_REGS:100,378660 INT_SSE_REGS:8,16388 FLOAT_INT_SSE_REGS:100,378660 ALL_REGS:100,378660 MEM:1,5461
  a22(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8,3005 SSE_REGS:8,3005 ALL_SSE_REGS:8,3005 MMX_REGS:8,4220 FP_TOP_SSE_REGS:100,67492 FP_SECOND_SSE_REGS:100,67492 FLOAT_SSE_REGS:100,67492 FLOAT_INT_REGS:100,67492 INT_SSE_REGS:8,3248 FLOAT_INT_SSE_REGS:100,67492 ALL_REGS:100,67492 MEM:1,1054
  a23(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 ALL_SSE_REGS:16,16 MMX_REGS:21,21 FP_TOP_SSE_REGS:308,308 FP_SECOND_SSE_REGS:308,308 FLOAT_SSE_REGS:308,308 FLOAT_INT_REGS:308,308 INT_SSE_REGS:17,17 FLOAT_INT_SSE_REGS:308,308 ALL_REGS:308,308 MEM:5,5
  a24(r272,l0) costs: AD_REGS:0,0 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 CLOBBERED_REGS:2,2 MEM:21,21
  a25(r271,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:6,6
  a26(r270,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:23,23 SSE_REGS:23,23 ALL_SSE_REGS:23,23 MMX_REGS:28,28 FP_TOP_SSE_REGS:418,418 FP_SECOND_SSE_REGS:418,418 FLOAT_SSE_REGS:418,418 FLOAT_INT_REGS:418,418 INT_SSE_REGS:24,24 FLOAT_INT_SSE_REGS:418,418 ALL_REGS:418,418 MEM:9,9
  a27(r269,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:7,7
  a28(r461,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:8,152 SSE_REGS:8,152 ALL_SSE_REGS:8,152 MMX_REGS:8,242 FP_TOP_SSE_REGS:100,3844 FP_SECOND_SSE_REGS:100,3844 FLOAT_SSE_REGS:100,3844 FLOAT_INT_REGS:100,3844 INT_SSE_REGS:8,170 FLOAT_INT_SSE_REGS:100,3844 ALL_REGS:100,3844 MEM:1,55
  a29(r261,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:2,2 DIREG:2,2 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:2,2 INDEX_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:416,416 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:6,6
  a30(r149,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:7,7
  a31(r129,l14) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:324,324 SSE_REGS:324,324 ALL_SSE_REGS:324,324 MMX_REGS:459,459 FP_TOP_SSE_REGS:6552,6552 FP_SECOND_SSE_REGS:6552,6552 FLOAT_SSE_REGS:6552,6552 FLOAT_INT_REGS:6552,6552 INT_SSE_REGS:351,351 FLOAT_INT_SSE_REGS:6552,6552 ALL_REGS:6552,6552 MEM:135,135
  a32(r132,l14) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:405,405 SSE_REGS:405,405 ALL_SSE_REGS:405,405 MMX_REGS:585,585 FP_TOP_SSE_REGS:9360,9360 FP_SECOND_SSE_REGS:9360,9360 FLOAT_SSE_REGS:9360,9360 FLOAT_INT_REGS:9360,9360 INT_SSE_REGS:441,441 FLOAT_INT_SSE_REGS:9360,9360 ALL_REGS:9360,9360 MEM:153,153
  a33(r420,l14) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a34(r417,l14) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a35(r418,l14) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:180,180 SSE_REGS:180,180 ALL_SSE_REGS:180,180 MMX_REGS:225,225 FP_TOP_SSE_REGS:2808,2808 FP_SECOND_SSE_REGS:2808,2808 FLOAT_SSE_REGS:2808,2808 FLOAT_INT_REGS:2808,2808 INT_SSE_REGS:189,189 FLOAT_INT_SSE_REGS:2808,2808 ALL_REGS:2808,2808 MEM:-9,-9
  a36(r414,l14) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:180,180 SSE_REGS:180,180 ALL_SSE_REGS:180,180 MMX_REGS:225,225 FP_TOP_SSE_REGS:2808,2808 FP_SECOND_SSE_REGS:2808,2808 FLOAT_SSE_REGS:2808,2808 FLOAT_INT_REGS:2808,2808 INT_SSE_REGS:189,189 FLOAT_INT_SSE_REGS:2808,2808 ALL_REGS:2808,2808 MEM:0,0
  a37(r125,l8) costs: AREG:18,18 DREG:18,18 CREG:18,18 BREG:18,18 SIREG:18,18 DIREG:18,18 AD_REGS:18,18 Q_REGS:18,18 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 CLOBBERED_REGS:18,18 SSE_FIRST_REG:351,351 SSE_REGS:351,351 ALL_SSE_REGS:351,351 MMX_REGS:486,486 FP_TOP_SSE_REGS:7506,7506 FP_SECOND_SSE_REGS:7506,7506 FLOAT_SSE_REGS:7506,7506 FLOAT_INT_REGS:7506,7506 INT_SSE_REGS:378,378 FLOAT_INT_SSE_REGS:7506,7506 ALL_REGS:7506,7506 MEM:135,135
  a38(r252,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:144,144 SSE_REGS:144,144 ALL_SSE_REGS:144,144 MMX_REGS:204,204 FP_TOP_SSE_REGS:2912,2912 FP_SECOND_SSE_REGS:2912,2912 FLOAT_SSE_REGS:2912,2912 FLOAT_INT_REGS:2912,2912 INT_SSE_REGS:156,156 FLOAT_INT_SSE_REGS:2912,2912 ALL_REGS:2912,2912 MEM:52,52
  a39(r449,l8) costs: AREG:18,18 DREG:36,36 CREG:36,36 BREG:36,36 SIREG:36,36 DIREG:36,36 AD_REGS:36,36 Q_REGS:36,36 NON_Q_REGS:36,36 INDEX_REGS:36,36 LEGACY_REGS:36,36 GENERAL_REGS:36,36 CLOBBERED_REGS:36,36 SSE_FIRST_REG:198,198 SSE_REGS:198,198 ALL_SSE_REGS:198,198 MMX_REGS:288,288 FP_TOP_SSE_REGS:4074,4074 FP_SECOND_SSE_REGS:4074,4074 FLOAT_SSE_REGS:4074,4074 FLOAT_INT_REGS:4074,4074 INT_SSE_REGS:216,216 FLOAT_INT_SSE_REGS:4074,4074 ALL_REGS:4074,4074 MEM:93,93
  a40(r456,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 ALL_SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:8,8
  a41(r451,l8) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 INDEX_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 CLOBBERED_REGS:4,4 SSE_FIRST_REG:312,1068 SSE_REGS:312,1068 ALL_SSE_REGS:312,1068 MMX_REGS:407,1433 FP_TOP_SSE_REGS:5308,19348 FP_SECOND_SSE_REGS:5308,19348 FLOAT_SSE_REGS:5308,19348 FLOAT_INT_REGS:5308,19348 INT_SSE_REGS:331,1141 FLOAT_INT_SSE_REGS:5308,19348 ALL_REGS:5308,19348 MEM:119,416
  a42(r83,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:56,203 SSE_REGS:56,203 ALL_SSE_REGS:56,203 MMX_REGS:76,258 FP_TOP_SSE_REGS:1132,4044 FP_SECOND_SSE_REGS:1132,4044 FLOAT_SSE_REGS:1132,4044 FLOAT_INT_REGS:1132,4044 INT_SSE_REGS:60,214 FLOAT_INT_SSE_REGS:1132,4044 ALL_REGS:1132,4044 MEM:16,58
  a43(r397,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20,20 SSE_REGS:20,20 ALL_SSE_REGS:20,20 MMX_REGS:25,25 FP_TOP_SSE_REGS:312,312 FP_SECOND_SSE_REGS:312,312 FLOAT_SSE_REGS:312,312 FLOAT_INT_REGS:312,312 INT_SSE_REGS:21,21 FLOAT_INT_SSE_REGS:312,312 ALL_REGS:312,312 MEM:0,0
  a44(r450,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,1025 SSE_REGS:26,1025 ALL_SSE_REGS:26,1025 MMX_REGS:26,1430 FP_TOP_SSE_REGS:416,22880 FP_SECOND_SSE_REGS:416,22880 FLOAT_SSE_REGS:416,22880 FLOAT_INT_REGS:416,22880 INT_SSE_REGS:26,1106 FLOAT_INT_SSE_REGS:416,22880 ALL_REGS:416,22880 MEM:8,440
  a45(r123,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,1231 SSE_REGS:16,1231 ALL_SSE_REGS:16,1231 MMX_REGS:16,1771 FP_TOP_SSE_REGS:200,28280 FP_SECOND_SSE_REGS:200,28280 FLOAT_SSE_REGS:200,28280 FLOAT_INT_REGS:200,28280 INT_SSE_REGS:16,1339 FLOAT_INT_SSE_REGS:200,28280 ALL_REGS:200,28280 MEM:2,488
  a46(r189,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,11944 SSE_REGS:16,11944 ALL_SSE_REGS:16,11944 MMX_REGS:16,17179 FP_TOP_SSE_REGS:200,248760 FP_SECOND_SSE_REGS:200,248760 FLOAT_SSE_REGS:200,248760 FLOAT_INT_REGS:200,248760 INT_SSE_REGS:16,12991 FLOAT_INT_SSE_REGS:200,248760 ALL_REGS:200,248760 MEM:2,5238
  a47(r106,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,799 SSE_REGS:16,799 ALL_SSE_REGS:16,799 MMX_REGS:16,1069 FP_TOP_SSE_REGS:200,17048 FP_SECOND_SSE_REGS:200,17048 FLOAT_SSE_REGS:200,17048 FLOAT_INT_REGS:200,17048 INT_SSE_REGS:16,853 FLOAT_INT_SSE_REGS:200,17048 ALL_REGS:200,17048 MEM:2,326
  a48(r136,l8) costs: AD_REGS:0,228 Q_REGS:0,334 NON_Q_REGS:0,334 INDEX_REGS:0,334 LEGACY_REGS:0,334 GENERAL_REGS:0,334 CLOBBERED_REGS:0,334 MEM:3,930
  a49(r135,l8) costs: AD_REGS:0,160 Q_REGS:0,214 NON_Q_REGS:0,214 INDEX_REGS:0,214 LEGACY_REGS:0,214 GENERAL_REGS:0,214 CLOBBERED_REGS:0,214 MEM:2,981
  a50(r104,l8) costs: AD_REGS:4,58 Q_REGS:4,58 NON_Q_REGS:4,58 INDEX_REGS:4,58 LEGACY_REGS:4,58 GENERAL_REGS:4,58 CLOBBERED_REGS:4,58 MEM:26,755
  a51(r320,l8) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:40,40 SSE_REGS:40,40 ALL_SSE_REGS:40,40 MMX_REGS:50,50 FP_TOP_SSE_REGS:624,624 FP_SECOND_SSE_REGS:624,624 FLOAT_SSE_REGS:624,624 FLOAT_INT_REGS:624,624 INT_SSE_REGS:42,42 FLOAT_INT_SSE_REGS:624,624 ALL_REGS:624,624 MEM:0,0
  a52(r317,l8) costs: AREG:18,18 DREG:36,36 CREG:36,36 BREG:36,36 SIREG:36,36 DIREG:36,36 AD_REGS:36,36 Q_REGS:36,36 NON_Q_REGS:36,36 INDEX_REGS:36,36 LEGACY_REGS:36,36 GENERAL_REGS:36,36 CLOBBERED_REGS:36,36 SSE_FIRST_REG:207,207 SSE_REGS:207,207 ALL_SSE_REGS:207,207 MMX_REGS:252,252 FP_TOP_SSE_REGS:3762,3762 FP_SECOND_SSE_REGS:3762,3762 FLOAT_SSE_REGS:3762,3762 FLOAT_INT_REGS:3762,3762 INT_SSE_REGS:216,216 FLOAT_INT_SSE_REGS:3762,3762 ALL_REGS:3762,3762 MEM:81,81
  a53(r318,l8) costs: AREG:36,36 DREG:18,18 CREG:36,36 BREG:36,36 SIREG:36,36 DIREG:36,36 AD_REGS:36,36 Q_REGS:36,36 NON_Q_REGS:36,36 INDEX_REGS:36,36 LEGACY_REGS:36,36 GENERAL_REGS:36,36 CLOBBERED_REGS:36,36 SSE_FIRST_REG:135,135 SSE_REGS:135,135 ALL_SSE_REGS:135,135 MMX_REGS:135,135 FP_TOP_SSE_REGS:1890,1890 FP_SECOND_SSE_REGS:1890,1890 FLOAT_SSE_REGS:1890,1890 FLOAT_INT_REGS:1890,1890 INT_SSE_REGS:135,135 FLOAT_INT_SSE_REGS:1890,1890 ALL_REGS:1890,1890 MEM:54,54
  a54(r83,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:147,147 SSE_REGS:147,147 ALL_SSE_REGS:147,147 MMX_REGS:182,182 FP_TOP_SSE_REGS:2912,2912 FP_SECOND_SSE_REGS:2912,2912 FLOAT_SSE_REGS:2912,2912 FLOAT_INT_REGS:2912,2912 INT_SSE_REGS:154,154 FLOAT_INT_SSE_REGS:2912,2912 ALL_REGS:2912,2912 MEM:42,42
  a55(r106,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:783,783 SSE_REGS:783,783 ALL_SSE_REGS:783,783 MMX_REGS:1053,1053 FP_TOP_SSE_REGS:16848,16848 FP_SECOND_SSE_REGS:16848,16848 FLOAT_SSE_REGS:16848,16848 FLOAT_INT_REGS:16848,16848 INT_SSE_REGS:837,837 FLOAT_INT_SSE_REGS:16848,16848 ALL_REGS:16848,16848 MEM:324,324
  a56(r123,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1215,1215 SSE_REGS:1215,1215 ALL_SSE_REGS:1215,1215 MMX_REGS:1755,1755 FP_TOP_SSE_REGS:28080,28080 FP_SECOND_SSE_REGS:28080,28080 FLOAT_SSE_REGS:28080,28080 FLOAT_INT_REGS:28080,28080 INT_SSE_REGS:1323,1323 FLOAT_INT_SSE_REGS:28080,28080 ALL_REGS:28080,28080 MEM:486,486
  a57(r136,l10) costs: AD_REGS:176,176 Q_REGS:230,230 NON_Q_REGS:230,230 INDEX_REGS:230,230 LEGACY_REGS:230,230 GENERAL_REGS:230,230 CLOBBERED_REGS:230,230 MEM:563,563
  a58(r189,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:504,11928 SSE_REGS:504,11928 ALL_SSE_REGS:504,11928 MMX_REGS:639,17163 FP_TOP_SSE_REGS:8112,248560 FP_SECOND_SSE_REGS:8112,248560 FLOAT_SSE_REGS:8112,248560 FLOAT_INT_REGS:8112,248560 INT_SSE_REGS:531,12975 FLOAT_INT_SSE_REGS:8112,248560 ALL_REGS:8112,248560 MEM:204,5236
  a59(r450,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:999,999 SSE_REGS:999,999 ALL_SSE_REGS:999,999 MMX_REGS:1404,1404 FP_TOP_SSE_REGS:22464,22464 FP_SECOND_SSE_REGS:22464,22464 FLOAT_SSE_REGS:22464,22464 FLOAT_INT_REGS:22464,22464 INT_SSE_REGS:1080,1080 FLOAT_INT_SSE_REGS:22464,22464 ALL_REGS:22464,22464 MEM:432,432
  a60(r456,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a61(r451,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:756,756 SSE_REGS:756,756 ALL_SSE_REGS:756,756 MMX_REGS:1026,1026 FP_TOP_SSE_REGS:14040,14040 FP_SECOND_SSE_REGS:14040,14040 FLOAT_SSE_REGS:14040,14040 FLOAT_INT_REGS:14040,14040 INT_SSE_REGS:810,810 FLOAT_INT_SSE_REGS:14040,14040 ALL_REGS:14040,14040 MEM:297,297
  a62(r186,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:232,544 SSE_REGS:232,544 ALL_SSE_REGS:232,544 MMX_REGS:337,649 FP_TOP_SSE_REGS:5168,9068 FP_SECOND_SSE_REGS:5168,9068 FLOAT_SSE_REGS:5168,9068 FLOAT_INT_REGS:5168,9068 INT_SSE_REGS:253,565 FLOAT_INT_SSE_REGS:5168,9068 ALL_REGS:5168,9068 MEM:85,124
  a63(r112,l10) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:315,2067
  a64(r448,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:204,204 SSE_REGS:204,204 ALL_SSE_REGS:204,204 MMX_REGS:279,279 FP_TOP_SSE_REGS:3848,3848 FP_SECOND_SSE_REGS:3848,3848 FLOAT_SSE_REGS:3848,3848 FLOAT_INT_REGS:3848,3848 INT_SSE_REGS:219,219 FLOAT_INT_SSE_REGS:3848,3848 ALL_REGS:3848,3848 MEM:80,80
  a65(r165,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:68,3356 SSE_REGS:68,3356 ALL_SSE_REGS:68,3356 MMX_REGS:83,4841 FP_TOP_SSE_REGS:1036,70300 FP_SECOND_SSE_REGS:1036,70300 FLOAT_SSE_REGS:1036,70300 FLOAT_INT_REGS:1036,70300 INT_SSE_REGS:71,3653 FLOAT_INT_SSE_REGS:1036,70300 ALL_REGS:1036,70300 MEM:25,1474
  a66(r181,l10) costs: AREG:-4,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:440,752 SSE_REGS:440,752 ALL_SSE_REGS:440,752 MMX_REGS:650,962 FP_TOP_SSE_REGS:10036,13936 FP_SECOND_SSE_REGS:10036,13936 FLOAT_SSE_REGS:10036,13936 FLOAT_INT_REGS:10036,13936 INT_SSE_REGS:482,794 FLOAT_INT_SSE_REGS:10036,13936 ALL_REGS:10036,13936 MEM:170,209
  a67(r433,l10) costs: AREG:-4,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:48,48 SSE_REGS:48,48 ALL_SSE_REGS:48,48 MMX_REGS:58,58 FP_TOP_SSE_REGS:816,816 FP_SECOND_SSE_REGS:816,816 FLOAT_SSE_REGS:816,816 FLOAT_INT_REGS:816,816 INT_SSE_REGS:50,50 FLOAT_INT_SSE_REGS:816,816 ALL_REGS:816,816 MEM:11,11
  a68(r434,l10) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 ALL_SSE_REGS:104,104 MMX_REGS:149,149 FP_TOP_SSE_REGS:2272,2272 FP_SECOND_SSE_REGS:2272,2272 FLOAT_SSE_REGS:2272,2272 FLOAT_INT_REGS:2272,2272 INT_SSE_REGS:113,113 FLOAT_INT_SSE_REGS:2272,2272 ALL_REGS:2272,2272 MEM:39,39
  a69(r254,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:64,64 SSE_REGS:64,64 ALL_SSE_REGS:64,64 MMX_REGS:84,84 FP_TOP_SSE_REGS:1232,1232 FP_SECOND_SSE_REGS:1232,1232 FLOAT_SSE_REGS:1232,1232 FLOAT_INT_REGS:1232,1232 INT_SSE_REGS:68,68 FLOAT_INT_SSE_REGS:1232,1232 ALL_REGS:1232,1232 MEM:20,20
  a70(r424,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:84,84 SSE_REGS:84,84 ALL_SSE_REGS:84,84 MMX_REGS:104,104 FP_TOP_SSE_REGS:1664,1664 FP_SECOND_SSE_REGS:1664,1664 FLOAT_SSE_REGS:1664,1664 FLOAT_INT_REGS:1664,1664 INT_SSE_REGS:88,88 FLOAT_INT_SSE_REGS:1664,1664 ALL_REGS:1664,1664 MEM:32,32
  a71(r209,l10) costs: AREG:-4,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:200,200 SSE_REGS:200,200 ALL_SSE_REGS:200,200 MMX_REGS:300,300 FP_TOP_SSE_REGS:4660,4660 FP_SECOND_SSE_REGS:4660,4660 FLOAT_SSE_REGS:4660,4660 FLOAT_INT_REGS:4660,4660 INT_SSE_REGS:220,220 FLOAT_INT_SSE_REGS:4660,4660 ALL_REGS:4660,4660 MEM:85,85
  a72(r435,l10) costs: AREG:-4,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:48,48 SSE_REGS:48,48 ALL_SSE_REGS:48,48 MMX_REGS:58,58 FP_TOP_SSE_REGS:816,816 FP_SECOND_SSE_REGS:816,816 FLOAT_SSE_REGS:816,816 FLOAT_INT_REGS:816,816 INT_SSE_REGS:50,50 FLOAT_INT_SSE_REGS:816,816 ALL_REGS:816,816 MEM:11,11
  a73(r436,l10) costs: AREG:0,0 DREG:-4,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 ALL_SSE_REGS:104,104 MMX_REGS:149,149 FP_TOP_SSE_REGS:2272,2272 FP_SECOND_SSE_REGS:2272,2272 FLOAT_SSE_REGS:2272,2272 FLOAT_INT_REGS:2272,2272 INT_SSE_REGS:113,113 FLOAT_INT_SSE_REGS:2272,2272 ALL_REGS:2272,2272 MEM:39,39
  a74(r422,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:84,84 SSE_REGS:84,84 ALL_SSE_REGS:84,84 MMX_REGS:104,104 FP_TOP_SSE_REGS:1664,1664 FP_SECOND_SSE_REGS:1664,1664 FLOAT_SSE_REGS:1664,1664 FLOAT_INT_REGS:1664,1664 INT_SSE_REGS:88,88 FLOAT_INT_SSE_REGS:1664,1664 ALL_REGS:1664,1664 MEM:32,32
  a75(r117,l10) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:67,459
  a76(r113,l10) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:488,488 SSE_REGS:488,488 ALL_SSE_REGS:488,488 MMX_REGS:488,488 FP_TOP_SSE_REGS:3616,3616 FP_SECOND_SSE_REGS:3616,3616 FLOAT_SSE_REGS:3616,3616 FLOAT_INT_REGS:3616,3616 INT_SSE_REGS:488,488 FLOAT_INT_SSE_REGS:3616,3616 ALL_REGS:3616,3616 MEM:265,265
  a77(r203,l10) costs: AREG:-15,-15 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1544,2632 SSE_REGS:1544,2632 ALL_SSE_REGS:1544,2632 MMX_REGS:2294,3382 FP_TOP_SSE_REGS:35500,49100 FP_SECOND_SSE_REGS:35500,49100 FLOAT_SSE_REGS:35500,49100 FLOAT_INT_REGS:35500,49100 INT_SSE_REGS:1694,2782 FLOAT_INT_SSE_REGS:35500,49100 ALL_REGS:35500,49100 MEM:604,740
  a78(r427,l10) costs: AREG:14,14 DREG:14,14 CREG:28,28 BREG:28,28 SIREG:28,28 DIREG:28,28 AD_REGS:14,14 Q_REGS:28,28 NON_Q_REGS:28,28 INDEX_REGS:28,28 LEGACY_REGS:28,28 GENERAL_REGS:28,28 CLOBBERED_REGS:28,28 SSE_FIRST_REG:450,450 SSE_REGS:450,450 ALL_SSE_REGS:450,450 MMX_REGS:520,520 FP_TOP_SSE_REGS:5734,5734 FP_SECOND_SSE_REGS:5734,5734 FLOAT_SSE_REGS:5734,5734 FLOAT_INT_REGS:5734,5734 INT_SSE_REGS:464,464 FLOAT_INT_SSE_REGS:5734,5734 ALL_REGS:5734,5734 MEM:171,171
  a79(r428,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:380,380 SSE_REGS:380,380 ALL_SSE_REGS:380,380 MMX_REGS:415,415 FP_TOP_SSE_REGS:4264,4264 FP_SECOND_SSE_REGS:4264,4264 FLOAT_SSE_REGS:4264,4264 FLOAT_INT_REGS:4264,4264 INT_SSE_REGS:387,387 FLOAT_INT_SSE_REGS:4264,4264 ALL_REGS:4264,4264 MEM:136,136
  a80(r437,l10) costs: AREG:-15,-15 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:144,144 SSE_REGS:144,144 ALL_SSE_REGS:144,144 MMX_REGS:159,159 FP_TOP_SSE_REGS:2124,2124 FP_SECOND_SSE_REGS:2124,2124 FLOAT_SSE_REGS:2124,2124 FLOAT_INT_REGS:2124,2124 INT_SSE_REGS:147,147 FLOAT_INT_SSE_REGS:2124,2124 ALL_REGS:2124,2124 MEM:25,25
  a81(r438,l10) costs: AREG:0,0 DREG:-15,-15 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:328,328 SSE_REGS:328,328 ALL_SSE_REGS:328,328 MMX_REGS:458,458 FP_TOP_SSE_REGS:6908,6908 FP_SECOND_SSE_REGS:6908,6908 FLOAT_SSE_REGS:6908,6908 FLOAT_INT_REGS:6908,6908 INT_SSE_REGS:354,354 FLOAT_INT_SSE_REGS:6908,6908 ALL_REGS:6908,6908 MEM:118,118
  a82(r258,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:240,240 SSE_REGS:240,240 ALL_SSE_REGS:240,240 MMX_REGS:315,315 FP_TOP_SSE_REGS:4620,4620 FP_SECOND_SSE_REGS:4620,4620 FLOAT_SSE_REGS:4620,4620 FLOAT_INT_REGS:4620,4620 INT_SSE_REGS:255,255 FLOAT_INT_SSE_REGS:4620,4620 ALL_REGS:4620,4620 MEM:75,75
  a83(r421,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:315,315 SSE_REGS:315,315 ALL_SSE_REGS:315,315 MMX_REGS:390,390 FP_TOP_SSE_REGS:6240,6240 FP_SECOND_SSE_REGS:6240,6240 FLOAT_SSE_REGS:6240,6240 FLOAT_INT_REGS:6240,6240 INT_SSE_REGS:330,330 FLOAT_INT_SSE_REGS:6240,6240 ALL_REGS:6240,6240 MEM:120,120
  a84(r386,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:42,42 SSE_REGS:42,42 ALL_SSE_REGS:42,42 MMX_REGS:52,52 FP_TOP_SSE_REGS:832,832 FP_SECOND_SSE_REGS:832,832 FLOAT_SSE_REGS:832,832 FLOAT_INT_REGS:832,832 INT_SSE_REGS:44,44 FLOAT_INT_SSE_REGS:832,832 ALL_REGS:832,832 MEM:16,16
  a85(r229,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 INDEX_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:716,716 INT_SSE_REGS:716,716 FLOAT_INT_SSE_REGS:716,716 ALL_REGS:716,716 MEM:9,9
  a86(r445,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20,20 SSE_REGS:20,20 ALL_SSE_REGS:20,20 MMX_REGS:25,25 FP_TOP_SSE_REGS:312,312 FP_SECOND_SSE_REGS:312,312 FLOAT_SSE_REGS:312,312 FLOAT_INT_REGS:312,312 INT_SSE_REGS:21,21 FLOAT_INT_SSE_REGS:312,312 ALL_REGS:312,312 MEM:8,8
  a87(r374,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:42,42 SSE_REGS:42,42 ALL_SSE_REGS:42,42 MMX_REGS:52,52 FP_TOP_SSE_REGS:832,832 FP_SECOND_SSE_REGS:832,832 FLOAT_SSE_REGS:832,832 FLOAT_INT_REGS:832,832 INT_SSE_REGS:44,44 FLOAT_INT_SSE_REGS:832,832 ALL_REGS:832,832 MEM:16,16
  a88(r212,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 INDEX_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:716,716 INT_SSE_REGS:716,716 FLOAT_INT_SSE_REGS:716,716 ALL_REGS:716,716 MEM:9,9
  a89(r443,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20,20 SSE_REGS:20,20 ALL_SSE_REGS:20,20 MMX_REGS:25,25 FP_TOP_SSE_REGS:312,312 FP_SECOND_SSE_REGS:312,312 FLOAT_SSE_REGS:312,312 FLOAT_INT_REGS:312,312 INT_SSE_REGS:21,21 FLOAT_INT_SSE_REGS:312,312 ALL_REGS:312,312 MEM:8,8
  a90(r187,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:56,3344 SSE_REGS:56,3344 ALL_SSE_REGS:56,3344 MMX_REGS:56,4814 FP_TOP_SSE_REGS:700,69964 FP_SECOND_SSE_REGS:700,69964 FLOAT_SSE_REGS:700,69964 FLOAT_INT_REGS:700,69964 INT_SSE_REGS:56,3638 FLOAT_INT_SSE_REGS:700,69964 ALL_REGS:700,69964 MEM:7,1456
  a91(r366,l10) costs: AD_REGS:0,0 Q_REGS:14,14 NON_Q_REGS:14,14 INDEX_REGS:14,14 LEGACY_REGS:14,14 GENERAL_REGS:14,14 CLOBBERED_REGS:14,14 MEM:147,147
  a92(r365,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:147,147 SSE_REGS:147,147 ALL_SSE_REGS:147,147 MMX_REGS:182,182 FP_TOP_SSE_REGS:2912,2912 FP_SECOND_SSE_REGS:2912,2912 FLOAT_SSE_REGS:2912,2912 FLOAT_INT_REGS:2912,2912 INT_SSE_REGS:154,154 FLOAT_INT_SSE_REGS:2912,2912 ALL_REGS:2912,2912 MEM:42,42
  a93(r364,l10) costs: AREG:14,14 DREG:14,14 CREG:14,14 BREG:14,14 SIREG:14,14 DIREG:14,14 AD_REGS:14,14 Q_REGS:14,14 NON_Q_REGS:14,14 INDEX_REGS:14,14 LEGACY_REGS:14,14 GENERAL_REGS:14,14 CLOBBERED_REGS:14,14 SSE_FIRST_REG:161,161 SSE_REGS:161,161 ALL_SSE_REGS:161,161 MMX_REGS:196,196 FP_TOP_SSE_REGS:2926,2926 FP_SECOND_SSE_REGS:2926,2926 FLOAT_SSE_REGS:2926,2926 FLOAT_INT_REGS:2926,2926 INT_SSE_REGS:168,168 FLOAT_INT_SSE_REGS:2926,2926 ALL_REGS:2926,2926 MEM:63,63
  a94(r363,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:147,147 SSE_REGS:147,147 ALL_SSE_REGS:147,147 MMX_REGS:182,182 FP_TOP_SSE_REGS:2912,2912 FP_SECOND_SSE_REGS:2912,2912 FLOAT_SSE_REGS:2912,2912 FLOAT_INT_REGS:2912,2912 INT_SSE_REGS:154,154 FLOAT_INT_SSE_REGS:2912,2912 ALL_REGS:2912,2912 MEM:49,49
  a95(r356,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:168,168 SSE_REGS:168,168 ALL_SSE_REGS:168,168 MMX_REGS:208,208 FP_TOP_SSE_REGS:3328,3328 FP_SECOND_SSE_REGS:3328,3328 FLOAT_SSE_REGS:3328,3328 FLOAT_INT_REGS:3328,3328 INT_SSE_REGS:176,176 FLOAT_INT_SSE_REGS:3328,3328 ALL_REGS:3328,3328 MEM:64,64
  a96(r120,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:16,16 DIREG:16,16 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:16,16 INDEX_REGS:16,16 LEGACY_REGS:16,16 GENERAL_REGS:16,16 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:1964,1964 INT_SSE_REGS:1964,1964 FLOAT_INT_SSE_REGS:1964,1964 ALL_REGS:1964,1964 MEM:27,27
  a97(r441,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:20,20 SSE_REGS:20,20 ALL_SSE_REGS:20,20 MMX_REGS:25,25 FP_TOP_SSE_REGS:312,312 FP_SECOND_SSE_REGS:312,312 FLOAT_SSE_REGS:312,312 FLOAT_INT_REGS:312,312 INT_SSE_REGS:21,21 FLOAT_INT_SSE_REGS:312,312 ALL_REGS:312,312 MEM:8,8
  a98(r345,l10) costs: AD_REGS:54,54 Q_REGS:108,108 NON_Q_REGS:108,108 INDEX_REGS:108,108 LEGACY_REGS:108,108 GENERAL_REGS:108,108 CLOBBERED_REGS:108,108 MEM:621,621
  a99(r347,l10) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:648,648 SSE_REGS:648,648 ALL_SSE_REGS:648,648 MMX_REGS:648,648 FP_TOP_SSE_REGS:5616,5616 FP_SECOND_SSE_REGS:5616,5616 FLOAT_SSE_REGS:5616,5616 FLOAT_INT_REGS:5616,5616 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:5616,5616 ALL_REGS:5616,5616 MEM:405,405
  a100(r344,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:567,567 SSE_REGS:567,567 ALL_SSE_REGS:567,567 MMX_REGS:702,702 FP_TOP_SSE_REGS:11232,11232 FP_SECOND_SSE_REGS:11232,11232 FLOAT_SSE_REGS:11232,11232 FLOAT_INT_REGS:11232,11232 INT_SSE_REGS:594,594 FLOAT_INT_SSE_REGS:11232,11232 ALL_REGS:11232,11232 MEM:162,162
  a101(r339,l10) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:999,999 SSE_REGS:999,999 ALL_SSE_REGS:999,999 MMX_REGS:1404,1404 FP_TOP_SSE_REGS:22464,22464 FP_SECOND_SSE_REGS:22464,22464 FLOAT_SSE_REGS:22464,22464 FLOAT_INT_REGS:22464,22464 INT_SSE_REGS:1080,1080 FLOAT_INT_SSE_REGS:22464,22464 ALL_REGS:22464,22464 MEM:432,432
  a102(r342,l10) costs: AREG:54,54 DREG:54,54 CREG:54,54 BREG:54,54 SIREG:54,54 DIREG:54,54 AD_REGS:54,54 Q_REGS:54,54 NON_Q_REGS:54,54 INDEX_REGS:54,54 LEGACY_REGS:54,54 GENERAL_REGS:54,54 CLOBBERED_REGS:54,54 SSE_FIRST_REG:621,621 SSE_REGS:621,621 ALL_SSE_REGS:621,621 MMX_REGS:756,756 FP_TOP_SSE_REGS:11286,11286 FP_SECOND_SSE_REGS:11286,11286 FLOAT_SSE_REGS:11286,11286 FLOAT_INT_REGS:11286,11286 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:11286,11286 ALL_REGS:11286,11286 MEM:243,243
  a103(r340,l10) costs: AREG:54,54 DREG:54,54 CREG:54,54 BREG:54,54 SIREG:54,54 DIREG:54,54 AD_REGS:54,54 Q_REGS:54,54 NON_Q_REGS:54,54 INDEX_REGS:54,54 LEGACY_REGS:54,54 GENERAL_REGS:54,54 CLOBBERED_REGS:54,54 SSE_FIRST_REG:621,621 SSE_REGS:621,621 ALL_SSE_REGS:621,621 MMX_REGS:756,756 FP_TOP_SSE_REGS:11286,11286 FP_SECOND_SSE_REGS:11286,11286 FLOAT_SSE_REGS:11286,11286 FLOAT_INT_REGS:11286,11286 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:11286,11286 ALL_REGS:11286,11286 MEM:243,243
  a104(r83,l13) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a105(r112,l13) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:392,392
  a106(r123,l13) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a107(r136,l13) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:0,0
  a108(r165,l13) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:3288,3288 SSE_REGS:3288,3288 ALL_SSE_REGS:3288,3288 MMX_REGS:4758,4758 FP_TOP_SSE_REGS:69264,69264 FP_SECOND_SSE_REGS:69264,69264 FLOAT_SSE_REGS:69264,69264 FLOAT_INT_REGS:69264,69264 INT_SSE_REGS:3582,3582 FLOAT_INT_SSE_REGS:69264,69264 ALL_REGS:69264,69264 MEM:1449,1449
  a109(r181,l13) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:312,312 SSE_REGS:312,312 ALL_SSE_REGS:312,312 MMX_REGS:312,312 FP_TOP_SSE_REGS:3900,3900 FP_SECOND_SSE_REGS:3900,3900 FLOAT_SSE_REGS:3900,3900 FLOAT_INT_REGS:3900,3900 INT_SSE_REGS:312,312 FLOAT_INT_SSE_REGS:3900,3900 ALL_REGS:3900,3900 MEM:39,39
  a110(r456,l13) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a111(r83,l12) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a112(r112,l12) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:0,0
  a113(r117,l12) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:392,392
  a114(r123,l12) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a115(r136,l12) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:0,0
  a116(r186,l12) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:312,312 SSE_REGS:312,312 ALL_SSE_REGS:312,312 MMX_REGS:312,312 FP_TOP_SSE_REGS:3900,3900 FP_SECOND_SSE_REGS:3900,3900 FLOAT_SSE_REGS:3900,3900 FLOAT_INT_REGS:3900,3900 INT_SSE_REGS:312,312 FLOAT_INT_SSE_REGS:3900,3900 ALL_REGS:3900,3900 MEM:39,39
  a117(r187,l12) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:3288,3288 SSE_REGS:3288,3288 ALL_SSE_REGS:3288,3288 MMX_REGS:4758,4758 FP_TOP_SSE_REGS:69264,69264 FP_SECOND_SSE_REGS:69264,69264 FLOAT_SSE_REGS:69264,69264 FLOAT_INT_REGS:69264,69264 INT_SSE_REGS:3582,3582 FLOAT_INT_SSE_REGS:69264,69264 ALL_REGS:69264,69264 MEM:1449,1449
  a118(r448,l12) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a119(r456,l12) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a120(r83,l11) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a121(r112,l11) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:1360,1360
  a122(r113,l11) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a123(r123,l11) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a124(r136,l11) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:0,0
  a125(r189,l11) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11424,11424 SSE_REGS:11424,11424 ALL_SSE_REGS:11424,11424 MMX_REGS:16524,16524 FP_TOP_SSE_REGS:240448,240448 FP_SECOND_SSE_REGS:240448,240448 FLOAT_SSE_REGS:240448,240448 FLOAT_INT_REGS:240448,240448 INT_SSE_REGS:12444,12444 FLOAT_INT_SSE_REGS:240448,240448 ALL_REGS:240448,240448 MEM:5032,5032
  a126(r203,l11) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1088,1088 SSE_REGS:1088,1088 ALL_SSE_REGS:1088,1088 MMX_REGS:1088,1088 FP_TOP_SSE_REGS:13600,13600 FP_SECOND_SSE_REGS:13600,13600 FLOAT_SSE_REGS:13600,13600 FLOAT_INT_REGS:13600,13600 INT_SSE_REGS:1088,1088 FLOAT_INT_SSE_REGS:13600,13600 ALL_REGS:13600,13600 MEM:136,136
  a127(r427,l11) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a128(r428,l11) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a129(r456,l11) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a130(r104,l9) costs: AD_REGS:54,54 Q_REGS:54,54 NON_Q_REGS:54,54 INDEX_REGS:54,54 LEGACY_REGS:54,54 GENERAL_REGS:54,54 CLOBBERED_REGS:54,54 MEM:729,729
  a131(r106,l9) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a132(r135,l9) costs: AD_REGS:160,160 Q_REGS:214,214 NON_Q_REGS:214,214 INDEX_REGS:214,214 LEGACY_REGS:214,214 GENERAL_REGS:214,214 CLOBBERED_REGS:214,214 MEM:979,979
  a133(r136,l9) costs: AD_REGS:52,52 Q_REGS:104,104 NON_Q_REGS:104,104 INDEX_REGS:104,104 LEGACY_REGS:104,104 GENERAL_REGS:104,104 CLOBBERED_REGS:104,104 MEM:364,364
  a134(r451,l9) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a135(r456,l9) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a136(r334,l9) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:567,567 SSE_REGS:567,567 ALL_SSE_REGS:567,567 MMX_REGS:702,702 FP_TOP_SSE_REGS:11232,11232 FP_SECOND_SSE_REGS:11232,11232 FLOAT_SSE_REGS:11232,11232 FLOAT_INT_REGS:11232,11232 INT_SSE_REGS:594,594 FLOAT_INT_SSE_REGS:11232,11232 ALL_REGS:11232,11232 MEM:162,162
  a137(r332,l9) costs: AREG:54,54 DREG:54,54 CREG:54,54 BREG:54,54 SIREG:54,54 DIREG:54,54 AD_REGS:54,54 Q_REGS:54,54 NON_Q_REGS:54,54 INDEX_REGS:54,54 LEGACY_REGS:54,54 GENERAL_REGS:54,54 CLOBBERED_REGS:54,54 SSE_FIRST_REG:621,621 SSE_REGS:621,621 ALL_SSE_REGS:621,621 MMX_REGS:756,756 FP_TOP_SSE_REGS:11286,11286 FP_SECOND_SSE_REGS:11286,11286 FLOAT_SSE_REGS:11286,11286 FLOAT_INT_REGS:11286,11286 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:11286,11286 ALL_REGS:11286,11286 MEM:243,243
  a138(r330,l9) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:273,273 SSE_REGS:273,273 ALL_SSE_REGS:273,273 MMX_REGS:338,338 FP_TOP_SSE_REGS:5408,5408 FP_SECOND_SSE_REGS:5408,5408 FLOAT_SSE_REGS:5408,5408 FLOAT_INT_REGS:5408,5408 INT_SSE_REGS:286,286 FLOAT_INT_SSE_REGS:5408,5408 ALL_REGS:5408,5408 MEM:78,78
  a139(r329,l9) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 CLOBBERED_REGS:26,26 SSE_FIRST_REG:299,299 SSE_REGS:299,299 ALL_SSE_REGS:299,299 MMX_REGS:364,364 FP_TOP_SSE_REGS:5434,5434 FP_SECOND_SSE_REGS:5434,5434 FLOAT_SSE_REGS:5434,5434 FLOAT_INT_REGS:5434,5434 INT_SSE_REGS:312,312 FLOAT_INT_SSE_REGS:5434,5434 ALL_REGS:5434,5434 MEM:117,117
  a140(r328,l9) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 CLOBBERED_REGS:26,26 SSE_FIRST_REG:299,299 SSE_REGS:299,299 ALL_SSE_REGS:299,299 MMX_REGS:364,364 FP_TOP_SSE_REGS:5434,5434 FP_SECOND_SSE_REGS:5434,5434 FLOAT_SSE_REGS:5434,5434 FLOAT_INT_REGS:5434,5434 INT_SSE_REGS:312,312 FLOAT_INT_SSE_REGS:5434,5434 ALL_REGS:5434,5434 MEM:117,117
  a141(r439,l9) costs: AREG:54,54 DREG:54,54 CREG:54,54 BREG:54,54 SIREG:54,54 DIREG:54,54 AD_REGS:54,54 Q_REGS:54,54 NON_Q_REGS:54,54 INDEX_REGS:54,54 LEGACY_REGS:54,54 GENERAL_REGS:54,54 CLOBBERED_REGS:54,54 SSE_FIRST_REG:621,621 SSE_REGS:621,621 ALL_SSE_REGS:621,621 MMX_REGS:756,756 FP_TOP_SSE_REGS:11286,11286 FP_SECOND_SSE_REGS:11286,11286 FLOAT_SSE_REGS:11286,11286 FLOAT_INT_REGS:11286,11286 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:11286,11286 ALL_REGS:11286,11286 MEM:243,243
  a142(r101,l7) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6210,6210 SSE_REGS:6210,6210 ALL_SSE_REGS:6210,6210 MMX_REGS:9360,9360 FP_TOP_SSE_REGS:149760,149760 FP_SECOND_SSE_REGS:149760,149760 FLOAT_SSE_REGS:149760,149760 FLOAT_INT_REGS:149760,149760 INT_SSE_REGS:6840,6840 FLOAT_INT_SSE_REGS:149760,149760 ALL_REGS:149760,149760 MEM:2700,2700
  a143(r449,l7) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a144(r457,l7) costs: AREG:180,180 DREG:180,180 CREG:360,360 BREG:360,360 SIREG:360,360 DIREG:360,360 AD_REGS:180,180 Q_REGS:360,360 NON_Q_REGS:360,360 INDEX_REGS:360,360 LEGACY_REGS:360,360 GENERAL_REGS:360,360 CLOBBERED_REGS:360,360 SSE_FIRST_REG:900,900 SSE_REGS:900,900 ALL_SSE_REGS:900,900 MMX_REGS:1350,1350 FP_TOP_SSE_REGS:18900,18900 FP_SECOND_SSE_REGS:18900,18900 FLOAT_SSE_REGS:18900,18900 FLOAT_INT_REGS:18900,18900 INT_SSE_REGS:990,990 FLOAT_INT_SSE_REGS:18900,18900 ALL_REGS:18900,18900 MEM:540,540
  a145(r315,l7) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2250,2250 SSE_REGS:2250,2250 ALL_SSE_REGS:2250,2250 MMX_REGS:2250,2250 FP_TOP_SSE_REGS:28440,28440 FP_SECOND_SSE_REGS:28440,28440 FLOAT_SSE_REGS:28440,28440 FLOAT_INT_REGS:28440,28440 INT_SSE_REGS:2250,2250 FLOAT_INT_SSE_REGS:28440,28440 ALL_REGS:28440,28440 MEM:810,810
  a146(r312,l7) costs: AD_REGS:180,180 Q_REGS:360,360 NON_Q_REGS:360,360 INDEX_REGS:360,360 LEGACY_REGS:360,360 GENERAL_REGS:360,360 CLOBBERED_REGS:360,360 MEM:2070,2070
  a147(r304,l7) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4050,4050 SSE_REGS:4050,4050 ALL_SSE_REGS:4050,4050 MMX_REGS:4050,4050 FP_TOP_SSE_REGS:28440,28440 FP_SECOND_SSE_REGS:28440,28440 FLOAT_SSE_REGS:28440,28440 FLOAT_INT_REGS:28440,28440 INT_SSE_REGS:4050,4050 FLOAT_INT_SSE_REGS:28440,28440 ALL_REGS:28440,28440 MEM:1350,1350
  a148(r307,l7) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:37440,37440 FP_SECOND_SSE_REGS:37440,37440 FLOAT_SSE_REGS:37440,37440 FLOAT_INT_REGS:37440,37440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:37440,37440 ALL_REGS:37440,37440 MEM:630,630
  a149(r305,l7) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1800,1800 SSE_REGS:1800,1800 ALL_SSE_REGS:1800,1800 MMX_REGS:2250,2250 FP_TOP_SSE_REGS:28080,28080 FP_SECOND_SSE_REGS:28080,28080 FLOAT_SSE_REGS:28080,28080 FLOAT_INT_REGS:28080,28080 INT_SSE_REGS:1890,1890 FLOAT_INT_SSE_REGS:28080,28080 ALL_REGS:28080,28080 MEM:0,0
  a150(r94,l6) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:6210,6210 SSE_REGS:6210,6210 ALL_SSE_REGS:6210,6210 MMX_REGS:9360,9360 FP_TOP_SSE_REGS:149760,149760 FP_SECOND_SSE_REGS:149760,149760 FLOAT_SSE_REGS:149760,149760 FLOAT_INT_REGS:149760,149760 INT_SSE_REGS:6840,6840 FLOAT_INT_SSE_REGS:149760,149760 ALL_REGS:149760,149760 MEM:2610,2610
  a151(r240,l6) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:720,720 SSE_REGS:720,720 ALL_SSE_REGS:720,720 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:18720,18720 FP_SECOND_SSE_REGS:18720,18720 FLOAT_SSE_REGS:18720,18720 FLOAT_INT_REGS:18720,18720 INT_SSE_REGS:810,810 FLOAT_INT_SSE_REGS:18720,18720 ALL_REGS:18720,18720 MEM:270,270
  a152(r449,l6) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a153(r458,l6) costs: AREG:180,180 DREG:180,180 CREG:360,360 BREG:360,360 SIREG:360,360 DIREG:360,360 AD_REGS:180,180 Q_REGS:360,360 NON_Q_REGS:360,360 INDEX_REGS:360,360 LEGACY_REGS:360,360 GENERAL_REGS:360,360 CLOBBERED_REGS:360,360 SSE_FIRST_REG:900,900 SSE_REGS:900,900 ALL_SSE_REGS:900,900 MMX_REGS:1350,1350 FP_TOP_SSE_REGS:18900,18900 FP_SECOND_SSE_REGS:18900,18900 FLOAT_SSE_REGS:18900,18900 FLOAT_INT_REGS:18900,18900 INT_SSE_REGS:990,990 FLOAT_INT_SSE_REGS:18900,18900 ALL_REGS:18900,18900 MEM:540,540
  a154(r301,l6) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2250,2250 SSE_REGS:2250,2250 ALL_SSE_REGS:2250,2250 MMX_REGS:2250,2250 FP_TOP_SSE_REGS:28440,28440 FP_SECOND_SSE_REGS:28440,28440 FLOAT_SSE_REGS:28440,28440 FLOAT_INT_REGS:28440,28440 INT_SSE_REGS:2250,2250 FLOAT_INT_SSE_REGS:28440,28440 ALL_REGS:28440,28440 MEM:810,810
  a155(r298,l6) costs: AD_REGS:180,180 Q_REGS:360,360 NON_Q_REGS:360,360 INDEX_REGS:360,360 LEGACY_REGS:360,360 GENERAL_REGS:360,360 CLOBBERED_REGS:360,360 MEM:2070,2070
  a156(r290,l6) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:4050,4050 SSE_REGS:4050,4050 ALL_SSE_REGS:4050,4050 MMX_REGS:4050,4050 FP_TOP_SSE_REGS:28440,28440 FP_SECOND_SSE_REGS:28440,28440 FLOAT_SSE_REGS:28440,28440 FLOAT_INT_REGS:28440,28440 INT_SSE_REGS:4050,4050 FLOAT_INT_SSE_REGS:28440,28440 ALL_REGS:28440,28440 MEM:1350,1350
  a157(r293,l6) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:37440,37440 FP_SECOND_SSE_REGS:37440,37440 FLOAT_SSE_REGS:37440,37440 FLOAT_INT_REGS:37440,37440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:37440,37440 ALL_REGS:37440,37440 MEM:630,630
  a158(r291,l6) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1800,1800 SSE_REGS:1800,1800 ALL_SSE_REGS:1800,1800 MMX_REGS:2250,2250 FP_TOP_SSE_REGS:28080,28080 FP_SECOND_SSE_REGS:28080,28080 FLOAT_SSE_REGS:28080,28080 FLOAT_INT_REGS:28080,28080 INT_SSE_REGS:1890,1890 FLOAT_INT_SSE_REGS:28080,28080 ALL_REGS:28080,28080 MEM:0,0
  a159(r87,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2997,2997 SSE_REGS:2997,2997 ALL_SSE_REGS:2997,2997 MMX_REGS:4212,4212 FP_TOP_SSE_REGS:67392,67392 FP_SECOND_SSE_REGS:67392,67392 FLOAT_SSE_REGS:67392,67392 FLOAT_INT_REGS:67392,67392 INT_SSE_REGS:3240,3240 FLOAT_INT_SSE_REGS:67392,67392 ALL_REGS:67392,67392 MEM:1053,1053
  a160(r460,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,14560 SSE_REGS:0,14560 ALL_SSE_REGS:0,14560 MMX_REGS:0,23660 FP_TOP_SSE_REGS:0,378560 FP_SECOND_SSE_REGS:0,378560 FLOAT_SSE_REGS:0,378560 FLOAT_INT_REGS:0,378560 INT_SSE_REGS:0,16380 FLOAT_INT_SSE_REGS:0,378560 ALL_REGS:0,378560 MEM:0,5460
  a161(r449,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1620,1620 SSE_REGS:1620,1620 ALL_SSE_REGS:1620,1620 MMX_REGS:2025,2025 FP_TOP_SSE_REGS:25272,25272 FP_SECOND_SSE_REGS:25272,25272 FLOAT_SSE_REGS:25272,25272 FLOAT_INT_REGS:25272,25272 INT_SSE_REGS:1701,1701 FLOAT_INT_SSE_REGS:25272,25272 ALL_REGS:25272,25272 MEM:567,567
  a162(r175,l3) costs: AD_REGS:162,1982 Q_REGS:162,1982 NON_Q_REGS:162,1982 INDEX_REGS:162,1982 LEGACY_REGS:162,1982 GENERAL_REGS:162,1982 CLOBBERED_REGS:162,1982 MEM:981,18271
  a163(r167,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,5460 DIREG:0,5460 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,5460 INDEX_REGS:0,5460 LEGACY_REGS:0,5460 GENERAL_REGS:0,5460 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:9000,758840 INT_SSE_REGS:9000,758840 FLOAT_INT_SSE_REGS:9000,758840 ALL_REGS:9000,758840 MEM:90,10100
  a164(r431,l3) costs: AREG:162,162 DREG:162,162 CREG:162,162 BREG:162,162 SIREG:162,162 DIREG:162,162 AD_REGS:162,162 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 LEGACY_REGS:162,162 GENERAL_REGS:162,162 CLOBBERED_REGS:162,162 SSE_FIRST_REG:2170,21280 SSE_REGS:2170,21280 ALL_SSE_REGS:2170,21280 MMX_REGS:2980,26640 FP_TOP_SSE_REGS:42758,421318 FP_SECOND_SSE_REGS:42758,421318 FLOAT_SSE_REGS:42758,421318 FLOAT_INT_REGS:42758,421318 INT_SSE_REGS:2332,22352 FLOAT_INT_SSE_REGS:42758,421318 ALL_REGS:42758,421318 MEM:737,8017
  a165(r432,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1360,20470 SSE_REGS:1360,20470 ALL_SSE_REGS:1360,20470 MMX_REGS:1765,25425 FP_TOP_SSE_REGS:25748,404308 FP_SECOND_SSE_REGS:25748,404308 FLOAT_SSE_REGS:25748,404308 FLOAT_INT_REGS:25748,404308 INT_SSE_REGS:1441,21461 FLOAT_INT_SSE_REGS:25748,404308 ALL_REGS:25748,404308 MEM:413,7693
  a166(r286,l3) costs: AD_REGS:0,0 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 LEGACY_REGS:162,162 GENERAL_REGS:162,162 CLOBBERED_REGS:162,162 MEM:1458,1458
  a167(r285,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:486,486
  a168(r284,l3) costs: AREG:162,162 DREG:162,162 CREG:162,162 BREG:162,162 SIREG:162,162 DIREG:162,162 AD_REGS:162,162 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 LEGACY_REGS:162,162 GENERAL_REGS:162,162 CLOBBERED_REGS:162,162 SSE_FIRST_REG:1863,1863 SSE_REGS:1863,1863 ALL_SSE_REGS:1863,1863 MMX_REGS:2268,2268 FP_TOP_SSE_REGS:33858,33858 FP_SECOND_SSE_REGS:33858,33858 FLOAT_SSE_REGS:33858,33858 FLOAT_INT_REGS:33858,33858 INT_SSE_REGS:1944,1944 FLOAT_INT_SSE_REGS:33858,33858 ALL_REGS:33858,33858 MEM:729,729
  a169(r283,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:567,567
  a170(r274,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:180,180 DIREG:180,180 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:180,180 INDEX_REGS:180,180 LEGACY_REGS:180,180 GENERAL_REGS:180,180 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:37440,37440 INT_SSE_REGS:37440,37440 FLOAT_INT_SSE_REGS:37440,37440 ALL_REGS:37440,37440 MEM:540,540
  a171(r84,l3) costs: AREG:-90,-90 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:630,630
  a172(r87,l5) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a173(r167,l5) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:1820,1820 DIREG:1820,1820 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:280280,280280 INT_SSE_REGS:280280,280280 FLOAT_INT_SSE_REGS:280280,280280 ALL_REGS:280280,280280 MEM:3640,3640
  a174(r175,l5) costs: AD_REGS:1820,1820 Q_REGS:1820,1820 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 CLOBBERED_REGS:1820,1820 MEM:17290,17290
  a175(r431,l5) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a176(r432,l5) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a177(r460,l5) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a178(r281,l5) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:1820,1820 DIREG:1820,1820 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:378560,378560 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:5460,5460
  a179(r176,l5) costs: AREG:-910,-910 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:6370,6370
  a180(r174,l5) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:14560,14560 SSE_REGS:14560,14560 ALL_SSE_REGS:14560,14560 MMX_REGS:14560,14560 FP_TOP_SSE_REGS:182000,182000 FP_SECOND_SSE_REGS:182000,182000 FLOAT_SSE_REGS:182000,182000 FLOAT_INT_REGS:182000,182000 INT_SSE_REGS:14560,14560 FLOAT_INT_SSE_REGS:182000,182000 ALL_REGS:182000,182000 MEM:7280,7280
  a181(r279,l5) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:40950,40950 SSE_REGS:40950,40950 ALL_SSE_REGS:40950,40950 MMX_REGS:40950,40950 FP_TOP_SSE_REGS:287560,287560 FP_SECOND_SSE_REGS:287560,287560 FLOAT_SSE_REGS:287560,287560 FLOAT_INT_REGS:287560,287560 INT_SSE_REGS:40950,40950 FLOAT_INT_SSE_REGS:287560,287560 ALL_REGS:287560,287560 MEM:13650,13650
  a182(r278,l5) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:14560,14560 SSE_REGS:14560,14560 ALL_SSE_REGS:14560,14560 MMX_REGS:14560,14560 FP_TOP_SSE_REGS:182000,182000 FP_SECOND_SSE_REGS:182000,182000 FLOAT_SSE_REGS:182000,182000 FLOAT_INT_REGS:182000,182000 INT_SSE_REGS:14560,14560 FLOAT_INT_SSE_REGS:182000,182000 ALL_REGS:182000,182000 MEM:7280,7280
  a183(r280,l5) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:7280,7280
  a184(r277,l5) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:40950,40950 SSE_REGS:40950,40950 ALL_SSE_REGS:40950,40950 MMX_REGS:40950,40950 FP_TOP_SSE_REGS:287560,287560 FP_SECOND_SSE_REGS:287560,287560 FLOAT_SSE_REGS:287560,287560 FLOAT_INT_REGS:287560,287560 INT_SSE_REGS:40950,40950 FLOAT_INT_SSE_REGS:287560,287560 ALL_REGS:287560,287560 MEM:13650,13650
  a185(r276,l5) costs: AD_REGS:1820,1820 Q_REGS:1820,1820 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 CLOBBERED_REGS:1820,1820 SSE_FIRST_REG:42770,42770 SSE_REGS:42770,42770 ALL_SSE_REGS:42770,42770 MMX_REGS:42770,42770 FP_TOP_SSE_REGS:289380,289380 FP_SECOND_SSE_REGS:289380,289380 FLOAT_SSE_REGS:289380,289380 FLOAT_INT_REGS:289380,289380 INT_SSE_REGS:42770,42770 FLOAT_INT_SSE_REGS:289380,289380 ALL_REGS:289380,289380 MEM:15470,15470
  a186(r87,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a187(r167,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:3640,3640 DIREG:3640,3640 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:3640,3640 INDEX_REGS:3640,3640 LEGACY_REGS:3640,3640 GENERAL_REGS:3640,3640 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:469560,469560 INT_SSE_REGS:469560,469560 FLOAT_INT_SSE_REGS:469560,469560 ALL_REGS:469560,469560 MEM:6370,6370
  a188(r431,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:7280,7280
  a189(r432,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:7280,7280
  a190(r460,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:14560,14560 SSE_REGS:14560,14560 ALL_SSE_REGS:14560,14560 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:16380,16380 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:5460,5460
  a191(r275,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:1820,1820 DIREG:1820,1820 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:378560,378560 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:5460,5460
  a192(r166,l4) costs: AREG:-910,-910 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:6370,6370
  a193(r151,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:18,18 DIREG:18,18 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:2772,2772 INT_SSE_REGS:2772,2772 FLOAT_INT_SSE_REGS:2772,2772 ALL_REGS:2772,2772 MEM:36,36
  a194(r159,l2) costs: AD_REGS:18,18 Q_REGS:18,18 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 CLOBBERED_REGS:18,18 MEM:171,171
  a195(r429,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a196(r430,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a197(r268,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:18,18 DIREG:18,18 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:3744,3744 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a198(r160,l2) costs: AREG:-9,-9 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:63,63
  a199(r158,l2) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:144,144 SSE_REGS:144,144 ALL_SSE_REGS:144,144 MMX_REGS:144,144 FP_TOP_SSE_REGS:1800,1800 FP_SECOND_SSE_REGS:1800,1800 FLOAT_SSE_REGS:1800,1800 FLOAT_INT_REGS:1800,1800 INT_SSE_REGS:144,144 FLOAT_INT_SSE_REGS:1800,1800 ALL_REGS:1800,1800 MEM:72,72
  a200(r266,l2) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:405,405 SSE_REGS:405,405 ALL_SSE_REGS:405,405 MMX_REGS:405,405 FP_TOP_SSE_REGS:2844,2844 FP_SECOND_SSE_REGS:2844,2844 FLOAT_SSE_REGS:2844,2844 FLOAT_INT_REGS:2844,2844 INT_SSE_REGS:405,405 FLOAT_INT_SSE_REGS:2844,2844 ALL_REGS:2844,2844 MEM:135,135
  a201(r265,l2) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:144,144 SSE_REGS:144,144 ALL_SSE_REGS:144,144 MMX_REGS:144,144 FP_TOP_SSE_REGS:1800,1800 FP_SECOND_SSE_REGS:1800,1800 FLOAT_SSE_REGS:1800,1800 FLOAT_INT_REGS:1800,1800 INT_SSE_REGS:144,144 FLOAT_INT_SSE_REGS:1800,1800 ALL_REGS:1800,1800 MEM:72,72
  a202(r267,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:72,72
  a203(r264,l2) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:405,405 SSE_REGS:405,405 ALL_SSE_REGS:405,405 MMX_REGS:405,405 FP_TOP_SSE_REGS:2844,2844 FP_SECOND_SSE_REGS:2844,2844 FLOAT_SSE_REGS:2844,2844 FLOAT_INT_REGS:2844,2844 INT_SSE_REGS:405,405 FLOAT_INT_SSE_REGS:2844,2844 ALL_REGS:2844,2844 MEM:135,135
  a204(r263,l2) costs: AD_REGS:18,18 Q_REGS:18,18 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 CLOBBERED_REGS:18,18 SSE_FIRST_REG:423,423 SSE_REGS:423,423 ALL_SSE_REGS:423,423 MMX_REGS:423,423 FP_TOP_SSE_REGS:2862,2862 FP_SECOND_SSE_REGS:2862,2862 FLOAT_SSE_REGS:2862,2862 FLOAT_INT_REGS:2862,2862 INT_SSE_REGS:423,423 FLOAT_INT_SSE_REGS:2862,2862 ALL_REGS:2862,2862 MEM:153,153
  a205(r151,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:36,36 DIREG:36,36 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:36,36 INDEX_REGS:36,36 LEGACY_REGS:36,36 GENERAL_REGS:36,36 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:4644,4644 INT_SSE_REGS:4644,4644 FLOAT_INT_SSE_REGS:4644,4644 ALL_REGS:4644,4644 MEM:63,63
  a206(r429,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:72,72
  a207(r430,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:72,72
  a208(r461,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:144,144 SSE_REGS:144,144 ALL_SSE_REGS:144,144 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:162,162 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a209(r262,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:18,18 DIREG:18,18 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 CLOBBERED_REGS:0,0 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:3744,3744 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a210(r150,l1) costs: AREG:-9,-9 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:63,63


Pass 1 for finding pseudo/allocno costs

    r461: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r460: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r458: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r457: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r456: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r451: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r450: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r449: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a161 (r449,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a152 (r449,l6) best GENERAL_REGS, allocno GENERAL_REGS
    a143 (r449,l7) best GENERAL_REGS, allocno GENERAL_REGS
    r448: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r445: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r443: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r441: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r439: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r438: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r437: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r436: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r435: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r434: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r433: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r432: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r431: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r430: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r429: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r428: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r427: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a127 (r427,l11) best GENERAL_REGS, allocno GENERAL_REGS
    r424: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r422: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r421: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r420: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r418: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    r417: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r414: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r412: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r410: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    r409: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r406: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r404: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r403: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r397: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r386: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r374: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r366: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r364: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r363: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r347: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r345: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r318: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r317: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r312: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r298: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r286: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r281: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r275: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r272: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r268: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r262: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r229: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a126 (r203,l11) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r181: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a109 (r181,l13) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r167: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r160: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r151: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a124 (r136,l11) best GENERAL_REGS, allocno GENERAL_REGS
    a115 (r136,l12) best GENERAL_REGS, allocno GENERAL_REGS
    a107 (r136,l13) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r120: preferred Q_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r159,l0) costs: GENERAL_REGS:2,20 MEM:19,253
  a1(r151,l0) costs: SIREG:0,54 DIREG:0,54 Q_REGS:0,0 NON_Q_REGS:0,54 INDEX_REGS:0,54 LEGACY_REGS:0,54 GENERAL_REGS:0,54 FLOAT_INT_REGS:104,7592 INT_SSE_REGS:104,7592 FLOAT_INT_SSE_REGS:104,7592 ALL_REGS:104,7592 MEM:4,157
  a2(r429,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:42,231 SSE_REGS:42,231 ALL_SSE_REGS:42,231 MMX_REGS:52,286 FP_TOP_SSE_REGS:626,4370 FP_SECOND_SSE_REGS:626,4370 FLOAT_SSE_REGS:626,4370 FLOAT_INT_REGS:626,4370 INT_SSE_REGS:44,242 FLOAT_INT_SSE_REGS:626,4370 ALL_REGS:626,4370 MEM:16,88
  a3(r430,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:32,221 SSE_REGS:32,221 ALL_SSE_REGS:32,221 MMX_REGS:37,271 FP_TOP_SSE_REGS:416,4160 FP_SECOND_SSE_REGS:416,4160 FLOAT_SSE_REGS:416,4160 FLOAT_INT_REGS:416,4160 INT_SSE_REGS:33,231 FLOAT_INT_SSE_REGS:416,4160 ALL_REGS:416,4160 MEM:12,84
  a4(r412,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:7,7
  a5(r132,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12,417 SSE_REGS:12,417 ALL_SSE_REGS:12,417 MMX_REGS:12,597 FP_TOP_SSE_REGS:104,9464 FP_SECOND_SSE_REGS:104,9464 FLOAT_SSE_REGS:104,9464 FLOAT_INT_REGS:104,9464 INT_SSE_REGS:12,453 FLOAT_INT_SSE_REGS:104,9464 ALL_REGS:104,9464 MEM:4,157
  a6(r409,l0) costs: GENERAL_REGS:4,4 SSE_FIRST_REG:25,25 SSE_REGS:25,25 ALL_SSE_REGS:25,25 MMX_REGS:30,30 FP_TOP_SSE_REGS:420,420 FP_SECOND_SSE_REGS:420,420 FLOAT_SSE_REGS:420,420 FLOAT_INT_REGS:420,420 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:420,420 ALL_REGS:420,420 MEM:10,10
  a7(r129,l0) costs: GENERAL_REGS:4,40 SSE_FIRST_REG:25,394 SSE_REGS:25,394 ALL_SSE_REGS:25,394 MMX_REGS:30,534 FP_TOP_SSE_REGS:320,6944 FP_SECOND_SSE_REGS:320,6944 FLOAT_SSE_REGS:320,6944 FLOAT_INT_REGS:320,6944 INT_SSE_REGS:26,422 FLOAT_INT_SSE_REGS:320,6944 ALL_REGS:320,6944 MEM:11,182
  a8(r410,l0) costs: GENERAL_REGS:8,8 SSE_FIRST_REG:24,24 SSE_REGS:24,24 ALL_SSE_REGS:24,24 MMX_REGS:29,29 FP_TOP_SSE_REGS:316,316 FP_SECOND_SSE_REGS:316,316 FLOAT_SSE_REGS:316,316 FLOAT_INT_REGS:316,316 INT_SSE_REGS:25,25 FLOAT_INT_SSE_REGS:316,316 ALL_REGS:316,316 MEM:3,3
  a9(r252,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:34,182 SSE_REGS:34,182 ALL_SSE_REGS:34,182 MMX_REGS:39,247 FP_TOP_SSE_REGS:424,3352 FP_SECOND_SSE_REGS:424,3352 FLOAT_SSE_REGS:424,3352 FLOAT_INT_REGS:424,3352 INT_SSE_REGS:35,195 FLOAT_INT_SSE_REGS:424,3352 ALL_REGS:424,3352 MEM:12,64
  a10(r406,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:7,7
  a11(r403,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:7,7
  a12(r404,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:316,316 FP_SECOND_SSE_REGS:316,316 FLOAT_SSE_REGS:316,316 FLOAT_INT_REGS:316,316 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:316,316 ALL_REGS:316,316 MEM:0,0
  a13(r449,l0) costs: AREG:0,18 DREG:0,36 CREG:0,36 BREG:0,36 SIREG:0,36 DIREG:0,36 AD_REGS:0,36 Q_REGS:0,36 NON_Q_REGS:0,36 INDEX_REGS:0,36 LEGACY_REGS:0,36 GENERAL_REGS:0,36 CLOBBERED_REGS:0,36 SSE_FIRST_REG:32,1934 SSE_REGS:32,1934 ALL_SSE_REGS:32,1934 MMX_REGS:52,2449 FP_TOP_SSE_REGS:832,30514 FP_SECOND_SSE_REGS:832,30514 FLOAT_SSE_REGS:832,30514 FLOAT_INT_REGS:832,30514 INT_SSE_REGS:36,2037 FLOAT_INT_SSE_REGS:832,30514 ALL_REGS:832,30514 MEM:15,675
  a14(r456,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,29 SSE_REGS:13,29 ALL_SSE_REGS:13,29 MMX_REGS:13,39 FP_TOP_SSE_REGS:208,624 FP_SECOND_SSE_REGS:208,624 FLOAT_SSE_REGS:208,624 FLOAT_INT_REGS:208,624 INT_SSE_REGS:13,31 FLOAT_INT_SSE_REGS:208,624 ALL_REGS:208,624 MEM:4,12
  a15(r125,l0) costs: GENERAL_REGS:0,18 SSE_FIRST_REG:12,363 SSE_REGS:12,363 ALL_SSE_REGS:12,363 MMX_REGS:12,498 FP_TOP_SSE_REGS:104,7610 FP_SECOND_SSE_REGS:104,7610 FLOAT_SSE_REGS:104,7610 FLOAT_INT_REGS:104,7610 INT_SSE_REGS:12,390 FLOAT_INT_SSE_REGS:104,7610 ALL_REGS:104,7610 MEM:4,139
  a16(r457,l0) costs: CREG:0,360 BREG:0,360 SIREG:0,360 DIREG:0,360 AD_REGS:0,180 Q_REGS:0,360 NON_Q_REGS:0,360 INDEX_REGS:0,360 LEGACY_REGS:0,360 GENERAL_REGS:0,360 CLOBBERED_REGS:0,360 SSE_FIRST_REG:12,912 SSE_REGS:12,912 ALL_SSE_REGS:12,912 MMX_REGS:12,1362 FP_TOP_SSE_REGS:104,19004 FP_SECOND_SSE_REGS:104,19004 FLOAT_SSE_REGS:104,19004 FLOAT_INT_REGS:104,19004 INT_SSE_REGS:12,1002 FLOAT_INT_SSE_REGS:104,19004 ALL_REGS:104,19004 MEM:4,544
  a17(r101,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12,6222 SSE_REGS:12,6222 ALL_SSE_REGS:12,6222 MMX_REGS:12,9372 FP_TOP_SSE_REGS:104,149864 FP_SECOND_SSE_REGS:104,149864 FLOAT_SSE_REGS:104,149864 FLOAT_INT_REGS:104,149864 INT_SSE_REGS:12,6852 FLOAT_INT_SSE_REGS:104,149864 ALL_REGS:104,149864 MEM:4,2704
  a18(r458,l0) costs: CREG:0,360 BREG:0,360 SIREG:0,360 DIREG:0,360 AD_REGS:0,180 Q_REGS:0,360 NON_Q_REGS:0,360 INDEX_REGS:0,360 LEGACY_REGS:0,360 GENERAL_REGS:0,360 CLOBBERED_REGS:0,360 SSE_FIRST_REG:12,912 SSE_REGS:12,912 ALL_SSE_REGS:12,912 MMX_REGS:12,1362 FP_TOP_SSE_REGS:104,19004 FP_SECOND_SSE_REGS:104,19004 FLOAT_SSE_REGS:104,19004 FLOAT_INT_REGS:104,19004 INT_SSE_REGS:12,1002 FLOAT_INT_SSE_REGS:104,19004 ALL_REGS:104,19004 MEM:4,544
  a19(r94,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12,6222 SSE_REGS:12,6222 ALL_SSE_REGS:12,6222 MMX_REGS:12,9372 FP_TOP_SSE_REGS:104,149864 FP_SECOND_SSE_REGS:104,149864 FLOAT_SSE_REGS:104,149864 FLOAT_INT_REGS:104,149864 INT_SSE_REGS:12,6852 FLOAT_INT_SSE_REGS:104,149864 ALL_REGS:104,149864 MEM:4,2614
  a20(r240,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:13,733 SSE_REGS:13,733 ALL_SSE_REGS:13,733 MMX_REGS:13,1183 FP_TOP_SSE_REGS:208,18928 FP_SECOND_SSE_REGS:208,18928 FLOAT_SSE_REGS:208,18928 FLOAT_INT_REGS:208,18928 INT_SSE_REGS:13,823 FLOAT_INT_SSE_REGS:208,18928 ALL_REGS:208,18928 MEM:4,274
  a21(r460,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12,14572 SSE_REGS:12,14572 ALL_SSE_REGS:12,14572 MMX_REGS:12,23672 FP_TOP_SSE_REGS:104,378664 FP_SECOND_SSE_REGS:104,378664 FLOAT_SSE_REGS:104,378664 FLOAT_INT_REGS:104,378664 INT_SSE_REGS:12,16392 FLOAT_INT_SSE_REGS:104,378664 ALL_REGS:104,378664 MEM:4,5464
  a22(r87,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12,3009 SSE_REGS:12,3009 ALL_SSE_REGS:12,3009 MMX_REGS:12,4224 FP_TOP_SSE_REGS:104,67496 FP_SECOND_SSE_REGS:104,67496 FLOAT_SSE_REGS:104,67496 FLOAT_INT_REGS:104,67496 INT_SSE_REGS:12,3252 FLOAT_INT_SSE_REGS:104,67496 ALL_REGS:104,67496 MEM:4,1057
  a23(r85,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:20,20 SSE_REGS:20,20 ALL_SSE_REGS:20,20 MMX_REGS:25,25 FP_TOP_SSE_REGS:312,312 FP_SECOND_SSE_REGS:312,312 FLOAT_SSE_REGS:312,312 FLOAT_INT_REGS:312,312 INT_SSE_REGS:21,21 FLOAT_INT_SSE_REGS:312,312 ALL_REGS:312,312 MEM:8,8
  a24(r272,l0) costs: AD_REGS:2,0 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 CLOBBERED_REGS:2,2 MEM:21,21
  a25(r271,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:6,6
  a26(r270,l0) costs: GENERAL_REGS:2,2 SSE_FIRST_REG:23,23 SSE_REGS:23,23 ALL_SSE_REGS:23,23 MMX_REGS:28,28 FP_TOP_SSE_REGS:418,418 FP_SECOND_SSE_REGS:418,418 FLOAT_SSE_REGS:418,418 FLOAT_INT_REGS:418,418 INT_SSE_REGS:24,24 FLOAT_INT_SSE_REGS:418,418 ALL_REGS:418,418 MEM:9,9
  a27(r269,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:7,7
  a28(r461,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:12,156 SSE_REGS:12,156 ALL_SSE_REGS:12,156 MMX_REGS:12,246 FP_TOP_SSE_REGS:104,3848 FP_SECOND_SSE_REGS:104,3848 FLOAT_SSE_REGS:104,3848 FLOAT_INT_REGS:104,3848 INT_SSE_REGS:12,174 FLOAT_INT_SSE_REGS:104,3848 ALL_REGS:104,3848 MEM:4,58
  a29(r261,l0) costs: SIREG:2,2 DIREG:2,2 Q_REGS:0,0 NON_Q_REGS:2,2 INDEX_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 FLOAT_INT_REGS:416,416 INT_SSE_REGS:416,416 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:6,6
  a30(r149,l0) costs: AREG:0,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:10,10
  a31(r129,l14) costs: GENERAL_REGS:36,36 SSE_FIRST_REG:369,369 SSE_REGS:369,369 ALL_SSE_REGS:369,369 MMX_REGS:504,504 FP_TOP_SSE_REGS:6624,6624 FP_SECOND_SSE_REGS:6624,6624 FLOAT_SSE_REGS:6624,6624 FLOAT_INT_REGS:6624,6624 INT_SSE_REGS:396,396 FLOAT_INT_SSE_REGS:6624,6624 ALL_REGS:6624,6624 MEM:171,171
  a32(r132,l14) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:405,405 SSE_REGS:405,405 ALL_SSE_REGS:405,405 MMX_REGS:585,585 FP_TOP_SSE_REGS:9360,9360 FP_SECOND_SSE_REGS:9360,9360 FLOAT_SSE_REGS:9360,9360 FLOAT_INT_REGS:9360,9360 INT_SSE_REGS:441,441 FLOAT_INT_SSE_REGS:9360,9360 ALL_REGS:9360,9360 MEM:153,153
  a33(r420,l14) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a34(r417,l14) costs: GENERAL_REGS:36,36 SSE_FIRST_REG:225,225 SSE_REGS:225,225 ALL_SSE_REGS:225,225 MMX_REGS:270,270 FP_TOP_SSE_REGS:3780,3780 FP_SECOND_SSE_REGS:3780,3780 FLOAT_SSE_REGS:3780,3780 FLOAT_INT_REGS:3780,3780 INT_SSE_REGS:234,234 FLOAT_INT_SSE_REGS:3780,3780 ALL_REGS:3780,3780 MEM:90,90
  a35(r418,l14) costs: GENERAL_REGS:72,72 SSE_FIRST_REG:216,216 SSE_REGS:216,216 ALL_SSE_REGS:216,216 MMX_REGS:261,261 FP_TOP_SSE_REGS:2844,2844 FP_SECOND_SSE_REGS:2844,2844 FLOAT_SSE_REGS:2844,2844 FLOAT_INT_REGS:2844,2844 INT_SSE_REGS:225,225 FLOAT_INT_SSE_REGS:2844,2844 ALL_REGS:2844,2844 MEM:27,27
  a36(r414,l14) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:2844,2844 FP_SECOND_SSE_REGS:2844,2844 FLOAT_SSE_REGS:2844,2844 FLOAT_INT_REGS:2844,2844 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:2844,2844 ALL_REGS:2844,2844 MEM:0,0
  a37(r125,l8) costs: GENERAL_REGS:18,18 SSE_FIRST_REG:351,351 SSE_REGS:351,351 ALL_SSE_REGS:351,351 MMX_REGS:486,486 FP_TOP_SSE_REGS:7506,7506 FP_SECOND_SSE_REGS:7506,7506 FLOAT_SSE_REGS:7506,7506 FLOAT_INT_REGS:7506,7506 INT_SSE_REGS:378,378 FLOAT_INT_SSE_REGS:7506,7506 ALL_REGS:7506,7506 MEM:135,135
  a38(r252,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:148,148 SSE_REGS:148,148 ALL_SSE_REGS:148,148 MMX_REGS:208,208 FP_TOP_SSE_REGS:2928,2928 FP_SECOND_SSE_REGS:2928,2928 FLOAT_SSE_REGS:2928,2928 FLOAT_INT_REGS:2928,2928 INT_SSE_REGS:160,160 FLOAT_INT_SSE_REGS:2928,2928 ALL_REGS:2928,2928 MEM:52,52
  a39(r449,l8) costs: AREG:36,18 DREG:36,36 CREG:36,36 BREG:36,36 SIREG:36,36 DIREG:36,36 AD_REGS:36,36 Q_REGS:36,36 NON_Q_REGS:36,36 INDEX_REGS:36,36 LEGACY_REGS:36,36 GENERAL_REGS:36,36 CLOBBERED_REGS:36,36 SSE_FIRST_REG:201,201 SSE_REGS:201,201 ALL_SSE_REGS:201,201 MMX_REGS:291,291 FP_TOP_SSE_REGS:4086,4086 FP_SECOND_SSE_REGS:4086,4086 FLOAT_SSE_REGS:4086,4086 FLOAT_INT_REGS:4086,4086 INT_SSE_REGS:219,219 FLOAT_INT_SSE_REGS:4086,4086 ALL_REGS:4086,4086 MEM:93,93
  a40(r456,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 ALL_SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:416,416 FP_SECOND_SSE_REGS:416,416 FLOAT_SSE_REGS:416,416 FLOAT_INT_REGS:416,416 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:416,416 ALL_REGS:416,416 MEM:8,8
  a41(r451,l8) costs: GENERAL_REGS:4,4 SSE_FIRST_REG:325,1108 SSE_REGS:325,1108 ALL_SSE_REGS:325,1108 MMX_REGS:420,1473 FP_TOP_SSE_REGS:5360,19508 FP_SECOND_SSE_REGS:5360,19508 FLOAT_SSE_REGS:5360,19508 FLOAT_INT_REGS:5360,19508 INT_SSE_REGS:344,1181 FLOAT_INT_SSE_REGS:5360,19508 ALL_REGS:5360,19508 MEM:119,416
  a42(r83,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:68,215 SSE_REGS:68,215 ALL_SSE_REGS:68,215 MMX_REGS:88,270 FP_TOP_SSE_REGS:1144,4056 FP_SECOND_SSE_REGS:1144,4056 FLOAT_SSE_REGS:1144,4056 FLOAT_INT_REGS:1144,4056 INT_SSE_REGS:72,226 FLOAT_INT_SSE_REGS:1144,4056 ALL_REGS:1144,4056 MEM:25,67
  a43(r397,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:316,316 FP_SECOND_SSE_REGS:316,316 FLOAT_SSE_REGS:316,316 FLOAT_INT_REGS:316,316 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:316,316 ALL_REGS:316,316 MEM:0,0
  a44(r450,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:26,1025 SSE_REGS:26,1025 ALL_SSE_REGS:26,1025 MMX_REGS:26,1430 FP_TOP_SSE_REGS:416,22880 FP_SECOND_SSE_REGS:416,22880 FLOAT_SSE_REGS:416,22880 FLOAT_INT_REGS:416,22880 INT_SSE_REGS:26,1106 FLOAT_INT_SSE_REGS:416,22880 ALL_REGS:416,22880 MEM:8,440
  a45(r123,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:24,1239 SSE_REGS:24,1239 ALL_SSE_REGS:24,1239 MMX_REGS:24,1779 FP_TOP_SSE_REGS:208,28288 FP_SECOND_SSE_REGS:208,28288 FLOAT_SSE_REGS:208,28288 FLOAT_INT_REGS:208,28288 INT_SSE_REGS:24,1347 FLOAT_INT_SSE_REGS:208,28288 ALL_REGS:208,28288 MEM:8,494
  a46(r189,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:24,12248 SSE_REGS:24,12248 ALL_SSE_REGS:24,12248 MMX_REGS:24,17483 FP_TOP_SSE_REGS:208,249952 FP_SECOND_SSE_REGS:208,249952 FLOAT_SSE_REGS:208,249952 FLOAT_INT_REGS:208,249952 INT_SSE_REGS:24,13295 FLOAT_INT_SSE_REGS:208,249952 ALL_REGS:208,249952 MEM:8,5244
  a47(r106,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:24,807 SSE_REGS:24,807 ALL_SSE_REGS:24,807 MMX_REGS:24,1077 FP_TOP_SSE_REGS:208,17056 FP_SECOND_SSE_REGS:208,17056 FLOAT_SSE_REGS:208,17056 FLOAT_INT_REGS:208,17056 INT_SSE_REGS:24,861 FLOAT_INT_SSE_REGS:208,17056 ALL_REGS:208,17056 MEM:8,332
  a48(r136,l8) costs: AD_REGS:0,228 Q_REGS:0,334 NON_Q_REGS:0,334 INDEX_REGS:0,334 LEGACY_REGS:0,334 GENERAL_REGS:0,334 CLOBBERED_REGS:0,334 MEM:24,951
  a49(r135,l8) costs: AD_REGS:0,160 Q_REGS:0,214 NON_Q_REGS:0,214 INDEX_REGS:0,214 LEGACY_REGS:0,214 GENERAL_REGS:0,214 CLOBBERED_REGS:0,214 MEM:16,995
  a50(r104,l8) costs: GENERAL_REGS:4,58 MEM:26,755
  a51(r320,l8) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:42,42 SSE_REGS:42,42 ALL_SSE_REGS:42,42 MMX_REGS:52,52 FP_TOP_SSE_REGS:632,632 FP_SECOND_SSE_REGS:632,632 FLOAT_SSE_REGS:632,632 FLOAT_INT_REGS:632,632 INT_SSE_REGS:44,44 FLOAT_INT_SSE_REGS:632,632 ALL_REGS:632,632 MEM:0,0
  a52(r317,l8) costs: AREG:36,18 DREG:36,36 CREG:36,36 BREG:36,36 SIREG:36,36 DIREG:36,36 AD_REGS:36,36 Q_REGS:36,36 NON_Q_REGS:36,36 INDEX_REGS:36,36 LEGACY_REGS:36,36 GENERAL_REGS:36,36 CLOBBERED_REGS:36,36 SSE_FIRST_REG:207,207 SSE_REGS:207,207 ALL_SSE_REGS:207,207 MMX_REGS:252,252 FP_TOP_SSE_REGS:3762,3762 FP_SECOND_SSE_REGS:3762,3762 FLOAT_SSE_REGS:3762,3762 FLOAT_INT_REGS:3762,3762 INT_SSE_REGS:216,216 FLOAT_INT_SSE_REGS:3762,3762 ALL_REGS:3762,3762 MEM:81,81
  a53(r318,l8) costs: AREG:36,36 DREG:36,18 CREG:36,36 BREG:36,36 SIREG:36,36 DIREG:36,36 AD_REGS:36,36 Q_REGS:36,36 NON_Q_REGS:36,36 INDEX_REGS:36,36 LEGACY_REGS:36,36 GENERAL_REGS:36,36 CLOBBERED_REGS:36,36 SSE_FIRST_REG:135,135 SSE_REGS:135,135 ALL_SSE_REGS:135,135 MMX_REGS:135,135 FP_TOP_SSE_REGS:1890,1890 FP_SECOND_SSE_REGS:1890,1890 FLOAT_SSE_REGS:1890,1890 FLOAT_INT_REGS:1890,1890 INT_SSE_REGS:135,135 FLOAT_INT_SSE_REGS:1890,1890 ALL_REGS:1890,1890 MEM:54,54
  a54(r83,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:147,147 SSE_REGS:147,147 ALL_SSE_REGS:147,147 MMX_REGS:182,182 FP_TOP_SSE_REGS:2912,2912 FP_SECOND_SSE_REGS:2912,2912 FLOAT_SSE_REGS:2912,2912 FLOAT_INT_REGS:2912,2912 INT_SSE_REGS:154,154 FLOAT_INT_SSE_REGS:2912,2912 ALL_REGS:2912,2912 MEM:42,42
  a55(r106,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:783,783 SSE_REGS:783,783 ALL_SSE_REGS:783,783 MMX_REGS:1053,1053 FP_TOP_SSE_REGS:16848,16848 FP_SECOND_SSE_REGS:16848,16848 FLOAT_SSE_REGS:16848,16848 FLOAT_INT_REGS:16848,16848 INT_SSE_REGS:837,837 FLOAT_INT_SSE_REGS:16848,16848 ALL_REGS:16848,16848 MEM:324,324
  a56(r123,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1215,1215 SSE_REGS:1215,1215 ALL_SSE_REGS:1215,1215 MMX_REGS:1755,1755 FP_TOP_SSE_REGS:28080,28080 FP_SECOND_SSE_REGS:28080,28080 FLOAT_SSE_REGS:28080,28080 FLOAT_INT_REGS:28080,28080 INT_SSE_REGS:1323,1323 FLOAT_INT_SSE_REGS:28080,28080 ALL_REGS:28080,28080 MEM:486,486
  a57(r136,l10) costs: AD_REGS:230,176 Q_REGS:230,230 NON_Q_REGS:230,230 INDEX_REGS:230,230 LEGACY_REGS:230,230 GENERAL_REGS:230,230 CLOBBERED_REGS:230,230 MEM:563,563
  a58(r189,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:528,12224 SSE_REGS:528,12224 ALL_SSE_REGS:528,12224 MMX_REGS:663,17459 FP_TOP_SSE_REGS:8208,249744 FP_SECOND_SSE_REGS:8208,249744 FLOAT_SSE_REGS:8208,249744 FLOAT_INT_REGS:8208,249744 INT_SSE_REGS:555,13271 FLOAT_INT_SSE_REGS:8208,249744 ALL_REGS:8208,249744 MEM:204,5236
  a59(r450,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:999,999 SSE_REGS:999,999 ALL_SSE_REGS:999,999 MMX_REGS:1404,1404 FP_TOP_SSE_REGS:22464,22464 FP_SECOND_SSE_REGS:22464,22464 FLOAT_SSE_REGS:22464,22464 FLOAT_INT_REGS:22464,22464 INT_SSE_REGS:1080,1080 FLOAT_INT_SSE_REGS:22464,22464 ALL_REGS:22464,22464 MEM:432,432
  a60(r456,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a61(r451,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:783,783 SSE_REGS:783,783 ALL_SSE_REGS:783,783 MMX_REGS:1053,1053 FP_TOP_SSE_REGS:14148,14148 FP_SECOND_SSE_REGS:14148,14148 FLOAT_SSE_REGS:14148,14148 FLOAT_INT_REGS:14148,14148 INT_SSE_REGS:837,837 FLOAT_INT_SSE_REGS:14148,14148 ALL_REGS:14148,14148 MEM:297,297
  a62(r186,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:264,732 SSE_REGS:264,732 ALL_SSE_REGS:264,732 MMX_REGS:369,837 FP_TOP_SSE_REGS:5200,9256 FP_SECOND_SSE_REGS:5200,9256 FLOAT_SSE_REGS:5200,9256 FLOAT_INT_REGS:5200,9256 INT_SSE_REGS:285,753 FLOAT_INT_SSE_REGS:5200,9256 ALL_REGS:5200,9256 MEM:109,265
  a63(r112,l10) costs: GENERAL_REGS:0,0 MEM:504,2256
  a64(r448,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:211,211 SSE_REGS:211,211 ALL_SSE_REGS:211,211 MMX_REGS:286,286 FP_TOP_SSE_REGS:3876,3876 FP_SECOND_SSE_REGS:3876,3876 FLOAT_SSE_REGS:3876,3876 FLOAT_INT_REGS:3876,3876 INT_SSE_REGS:226,226 FLOAT_INT_SSE_REGS:3876,3876 ALL_REGS:3876,3876 MEM:80,80
  a65(r165,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:75,3441 SSE_REGS:75,3441 ALL_SSE_REGS:75,3441 MMX_REGS:90,4926 FP_TOP_SSE_REGS:1052,70628 FP_SECOND_SSE_REGS:1052,70628 FLOAT_SSE_REGS:1052,70628 FLOAT_INT_REGS:1052,70628 INT_SSE_REGS:78,3738 FLOAT_INT_SSE_REGS:1052,70628 ALL_REGS:1052,70628 MEM:28,1477
  a66(r181,l10) costs: AREG:0,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:492,960 SSE_REGS:492,960 ALL_SSE_REGS:492,960 MMX_REGS:702,1170 FP_TOP_SSE_REGS:10088,14144 FP_SECOND_SSE_REGS:10088,14144 FLOAT_SSE_REGS:10088,14144 FLOAT_INT_REGS:10088,14144 INT_SSE_REGS:534,1002 FLOAT_INT_SSE_REGS:10088,14144 ALL_REGS:10088,14144 MEM:209,365
  a67(r433,l10) costs: AREG:0,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:64,64 SSE_REGS:64,64 ALL_SSE_REGS:64,64 MMX_REGS:74,74 FP_TOP_SSE_REGS:832,832 FP_SECOND_SSE_REGS:832,832 FLOAT_SSE_REGS:832,832 FLOAT_INT_REGS:832,832 INT_SSE_REGS:66,66 FLOAT_INT_SSE_REGS:832,832 ALL_REGS:832,832 MEM:23,23
  a68(r434,l10) costs: AREG:0,0 DREG:0,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:120,120 SSE_REGS:120,120 ALL_SSE_REGS:120,120 MMX_REGS:165,165 FP_TOP_SSE_REGS:2288,2288 FP_SECOND_SSE_REGS:2288,2288 FLOAT_SSE_REGS:2288,2288 FLOAT_INT_REGS:2288,2288 INT_SSE_REGS:129,129 FLOAT_INT_SSE_REGS:2288,2288 ALL_REGS:2288,2288 MEM:51,51
  a69(r254,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:80,80 SSE_REGS:80,80 ALL_SSE_REGS:80,80 MMX_REGS:100,100 FP_TOP_SSE_REGS:1248,1248 FP_SECOND_SSE_REGS:1248,1248 FLOAT_SSE_REGS:1248,1248 FLOAT_INT_REGS:1248,1248 INT_SSE_REGS:84,84 FLOAT_INT_SSE_REGS:1248,1248 ALL_REGS:1248,1248 MEM:32,32
  a70(r424,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:84,84 SSE_REGS:84,84 ALL_SSE_REGS:84,84 MMX_REGS:104,104 FP_TOP_SSE_REGS:1664,1664 FP_SECOND_SSE_REGS:1664,1664 FLOAT_SSE_REGS:1664,1664 FLOAT_INT_REGS:1664,1664 INT_SSE_REGS:88,88 FLOAT_INT_SSE_REGS:1664,1664 ALL_REGS:1664,1664 MEM:32,32
  a71(r209,l10) costs: AREG:0,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:220,220 SSE_REGS:220,220 ALL_SSE_REGS:220,220 MMX_REGS:320,320 FP_TOP_SSE_REGS:4680,4680 FP_SECOND_SSE_REGS:4680,4680 FLOAT_SSE_REGS:4680,4680 FLOAT_INT_REGS:4680,4680 INT_SSE_REGS:240,240 FLOAT_INT_SSE_REGS:4680,4680 ALL_REGS:4680,4680 MEM:100,100
  a72(r435,l10) costs: AREG:0,-4 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:64,64 SSE_REGS:64,64 ALL_SSE_REGS:64,64 MMX_REGS:74,74 FP_TOP_SSE_REGS:832,832 FP_SECOND_SSE_REGS:832,832 FLOAT_SSE_REGS:832,832 FLOAT_INT_REGS:832,832 INT_SSE_REGS:66,66 FLOAT_INT_SSE_REGS:832,832 ALL_REGS:832,832 MEM:23,23
  a73(r436,l10) costs: AREG:0,0 DREG:0,-4 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:120,120 SSE_REGS:120,120 ALL_SSE_REGS:120,120 MMX_REGS:165,165 FP_TOP_SSE_REGS:2288,2288 FP_SECOND_SSE_REGS:2288,2288 FLOAT_SSE_REGS:2288,2288 FLOAT_INT_REGS:2288,2288 INT_SSE_REGS:129,129 FLOAT_INT_SSE_REGS:2288,2288 ALL_REGS:2288,2288 MEM:51,51
  a74(r422,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:84,84 SSE_REGS:84,84 ALL_SSE_REGS:84,84 MMX_REGS:104,104 FP_TOP_SSE_REGS:1664,1664 FP_SECOND_SSE_REGS:1664,1664 FLOAT_SSE_REGS:1664,1664 FLOAT_INT_REGS:1664,1664 INT_SSE_REGS:88,88 FLOAT_INT_SSE_REGS:1664,1664 ALL_REGS:1664,1664 MEM:32,32
  a75(r117,l10) costs: GENERAL_REGS:0,0 MEM:116,508
  a76(r113,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:767,767 SSE_REGS:767,767 ALL_SSE_REGS:767,767 MMX_REGS:767,767 FP_TOP_SSE_REGS:4644,4644 FP_SECOND_SSE_REGS:4644,4644 FLOAT_SSE_REGS:4644,4644 FLOAT_INT_REGS:4644,4644 INT_SSE_REGS:767,767 FLOAT_INT_SSE_REGS:4644,4644 ALL_REGS:4644,4644 MEM:272,272
  a77(r203,l10) costs: AREG:0,-15 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1716,3348 SSE_REGS:1716,3348 ALL_SSE_REGS:1716,3348 MMX_REGS:2466,4098 FP_TOP_SSE_REGS:35672,49816 FP_SECOND_SSE_REGS:35672,49816 FLOAT_SSE_REGS:35672,49816 FLOAT_INT_REGS:35672,49816 INT_SSE_REGS:1866,3498 FLOAT_INT_SSE_REGS:35672,49816 ALL_REGS:35672,49816 MEM:733,1277
  a78(r427,l10) costs: CREG:28,28 BREG:28,28 SIREG:28,28 DIREG:28,28 AD_REGS:14,14 Q_REGS:28,28 NON_Q_REGS:28,28 INDEX_REGS:28,28 LEGACY_REGS:28,28 GENERAL_REGS:28,28 CLOBBERED_REGS:28,28 SSE_FIRST_REG:477,477 SSE_REGS:477,477 ALL_SSE_REGS:477,477 MMX_REGS:547,547 FP_TOP_SSE_REGS:5842,5842 FP_SECOND_SSE_REGS:5842,5842 FLOAT_SSE_REGS:5842,5842 FLOAT_INT_REGS:5842,5842 INT_SSE_REGS:491,491 FLOAT_INT_SSE_REGS:5842,5842 ALL_REGS:5842,5842 MEM:171,171
  a79(r428,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:407,407 SSE_REGS:407,407 ALL_SSE_REGS:407,407 MMX_REGS:442,442 FP_TOP_SSE_REGS:4372,4372 FP_SECOND_SSE_REGS:4372,4372 FLOAT_SSE_REGS:4372,4372 FLOAT_INT_REGS:4372,4372 INT_SSE_REGS:414,414 FLOAT_INT_SSE_REGS:4372,4372 ALL_REGS:4372,4372 MEM:136,136
  a80(r437,l10) costs: AREG:0,-15 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:204,204 SSE_REGS:204,204 ALL_SSE_REGS:204,204 MMX_REGS:219,219 FP_TOP_SSE_REGS:2184,2184 FP_SECOND_SSE_REGS:2184,2184 FLOAT_SSE_REGS:2184,2184 FLOAT_INT_REGS:2184,2184 INT_SSE_REGS:207,207 FLOAT_INT_SSE_REGS:2184,2184 ALL_REGS:2184,2184 MEM:70,70
  a81(r438,l10) costs: AREG:0,0 DREG:0,-15 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:388,388 SSE_REGS:388,388 ALL_SSE_REGS:388,388 MMX_REGS:518,518 FP_TOP_SSE_REGS:6968,6968 FP_SECOND_SSE_REGS:6968,6968 FLOAT_SSE_REGS:6968,6968 FLOAT_INT_REGS:6968,6968 INT_SSE_REGS:414,414 FLOAT_INT_SSE_REGS:6968,6968 ALL_REGS:6968,6968 MEM:163,163
  a82(r258,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:300,300 SSE_REGS:300,300 ALL_SSE_REGS:300,300 MMX_REGS:375,375 FP_TOP_SSE_REGS:4680,4680 FP_SECOND_SSE_REGS:4680,4680 FLOAT_SSE_REGS:4680,4680 FLOAT_INT_REGS:4680,4680 INT_SSE_REGS:315,315 FLOAT_INT_SSE_REGS:4680,4680 ALL_REGS:4680,4680 MEM:120,120
  a83(r421,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:315,315 SSE_REGS:315,315 ALL_SSE_REGS:315,315 MMX_REGS:390,390 FP_TOP_SSE_REGS:6240,6240 FP_SECOND_SSE_REGS:6240,6240 FLOAT_SSE_REGS:6240,6240 FLOAT_INT_REGS:6240,6240 INT_SSE_REGS:330,330 FLOAT_INT_SSE_REGS:6240,6240 ALL_REGS:6240,6240 MEM:120,120
  a84(r386,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:42,42 SSE_REGS:42,42 ALL_SSE_REGS:42,42 MMX_REGS:52,52 FP_TOP_SSE_REGS:832,832 FP_SECOND_SSE_REGS:832,832 FLOAT_SSE_REGS:832,832 FLOAT_INT_REGS:832,832 INT_SSE_REGS:44,44 FLOAT_INT_SSE_REGS:832,832 ALL_REGS:832,832 MEM:16,16
  a85(r229,l10) costs: SIREG:4,4 DIREG:4,4 Q_REGS:0,0 NON_Q_REGS:4,4 INDEX_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 FLOAT_INT_REGS:728,728 INT_SSE_REGS:728,728 FLOAT_INT_SSE_REGS:728,728 ALL_REGS:728,728 MEM:18,18
  a86(r445,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:316,316 FP_SECOND_SSE_REGS:316,316 FLOAT_SSE_REGS:316,316 FLOAT_INT_REGS:316,316 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:316,316 ALL_REGS:316,316 MEM:8,8
  a87(r374,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:42,42 SSE_REGS:42,42 ALL_SSE_REGS:42,42 MMX_REGS:52,52 FP_TOP_SSE_REGS:832,832 FP_SECOND_SSE_REGS:832,832 FLOAT_SSE_REGS:832,832 FLOAT_INT_REGS:832,832 INT_SSE_REGS:44,44 FLOAT_INT_SSE_REGS:832,832 ALL_REGS:832,832 MEM:16,16
  a88(r212,l10) costs: SIREG:4,4 DIREG:4,4 Q_REGS:0,0 NON_Q_REGS:4,4 INDEX_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 FLOAT_INT_REGS:728,728 INT_SSE_REGS:728,728 FLOAT_INT_SSE_REGS:728,728 ALL_REGS:728,728 MEM:18,18
  a89(r443,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:316,316 FP_SECOND_SSE_REGS:316,316 FLOAT_SSE_REGS:316,316 FLOAT_INT_REGS:316,316 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:316,316 ALL_REGS:316,316 MEM:8,8
  a90(r187,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:84,3450 SSE_REGS:84,3450 ALL_SSE_REGS:84,3450 MMX_REGS:84,4920 FP_TOP_SSE_REGS:728,70304 FP_SECOND_SSE_REGS:728,70304 FLOAT_SSE_REGS:728,70304 FLOAT_INT_REGS:728,70304 INT_SSE_REGS:84,3744 FLOAT_INT_SSE_REGS:728,70304 ALL_REGS:728,70304 MEM:28,1477
  a91(r366,l10) costs: AD_REGS:14,0 Q_REGS:14,14 NON_Q_REGS:14,14 INDEX_REGS:14,14 LEGACY_REGS:14,14 GENERAL_REGS:14,14 CLOBBERED_REGS:14,14 MEM:147,147
  a92(r365,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:147,147 SSE_REGS:147,147 ALL_SSE_REGS:147,147 MMX_REGS:182,182 FP_TOP_SSE_REGS:2912,2912 FP_SECOND_SSE_REGS:2912,2912 FLOAT_SSE_REGS:2912,2912 FLOAT_INT_REGS:2912,2912 INT_SSE_REGS:154,154 FLOAT_INT_SSE_REGS:2912,2912 ALL_REGS:2912,2912 MEM:42,42
  a93(r364,l10) costs: GENERAL_REGS:14,14 SSE_FIRST_REG:161,161 SSE_REGS:161,161 ALL_SSE_REGS:161,161 MMX_REGS:196,196 FP_TOP_SSE_REGS:2926,2926 FP_SECOND_SSE_REGS:2926,2926 FLOAT_SSE_REGS:2926,2926 FLOAT_INT_REGS:2926,2926 INT_SSE_REGS:168,168 FLOAT_INT_SSE_REGS:2926,2926 ALL_REGS:2926,2926 MEM:63,63
  a94(r363,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:147,147 SSE_REGS:147,147 ALL_SSE_REGS:147,147 MMX_REGS:182,182 FP_TOP_SSE_REGS:2912,2912 FP_SECOND_SSE_REGS:2912,2912 FLOAT_SSE_REGS:2912,2912 FLOAT_INT_REGS:2912,2912 INT_SSE_REGS:154,154 FLOAT_INT_SSE_REGS:2912,2912 ALL_REGS:2912,2912 MEM:49,49
  a95(r356,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:168,168 SSE_REGS:168,168 ALL_SSE_REGS:168,168 MMX_REGS:208,208 FP_TOP_SSE_REGS:3328,3328 FP_SECOND_SSE_REGS:3328,3328 FLOAT_SSE_REGS:3328,3328 FLOAT_INT_REGS:3328,3328 INT_SSE_REGS:176,176 FLOAT_INT_SSE_REGS:3328,3328 ALL_REGS:3328,3328 MEM:64,64
  a96(r120,l10) costs: SIREG:16,16 DIREG:16,16 Q_REGS:0,0 NON_Q_REGS:16,16 INDEX_REGS:16,16 LEGACY_REGS:16,16 GENERAL_REGS:16,16 FLOAT_INT_REGS:1976,1976 INT_SSE_REGS:1976,1976 FLOAT_INT_SSE_REGS:1976,1976 ALL_REGS:1976,1976 MEM:36,36
  a97(r441,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21,21 SSE_REGS:21,21 ALL_SSE_REGS:21,21 MMX_REGS:26,26 FP_TOP_SSE_REGS:316,316 FP_SECOND_SSE_REGS:316,316 FLOAT_SSE_REGS:316,316 FLOAT_INT_REGS:316,316 INT_SSE_REGS:22,22 FLOAT_INT_SSE_REGS:316,316 ALL_REGS:316,316 MEM:8,8
  a98(r345,l10) costs: AD_REGS:108,54 Q_REGS:108,108 NON_Q_REGS:108,108 INDEX_REGS:108,108 LEGACY_REGS:108,108 GENERAL_REGS:108,108 CLOBBERED_REGS:108,108 MEM:621,621
  a99(r347,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1107,1107 SSE_REGS:1107,1107 ALL_SSE_REGS:1107,1107 MMX_REGS:1107,1107 FP_TOP_SSE_REGS:8964,8964 FP_SECOND_SSE_REGS:8964,8964 FLOAT_SSE_REGS:8964,8964 FLOAT_INT_REGS:8964,8964 INT_SSE_REGS:1107,1107 FLOAT_INT_SSE_REGS:8964,8964 ALL_REGS:8964,8964 MEM:432,432
  a100(r344,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:567,567 SSE_REGS:567,567 ALL_SSE_REGS:567,567 MMX_REGS:702,702 FP_TOP_SSE_REGS:11232,11232 FP_SECOND_SSE_REGS:11232,11232 FLOAT_SSE_REGS:11232,11232 FLOAT_INT_REGS:11232,11232 INT_SSE_REGS:594,594 FLOAT_INT_SSE_REGS:11232,11232 ALL_REGS:11232,11232 MEM:162,162
  a101(r339,l10) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:999,999 SSE_REGS:999,999 ALL_SSE_REGS:999,999 MMX_REGS:1404,1404 FP_TOP_SSE_REGS:22464,22464 FP_SECOND_SSE_REGS:22464,22464 FLOAT_SSE_REGS:22464,22464 FLOAT_INT_REGS:22464,22464 INT_SSE_REGS:1080,1080 FLOAT_INT_SSE_REGS:22464,22464 ALL_REGS:22464,22464 MEM:432,432
  a102(r342,l10) costs: GENERAL_REGS:54,54 SSE_FIRST_REG:621,621 SSE_REGS:621,621 ALL_SSE_REGS:621,621 MMX_REGS:756,756 FP_TOP_SSE_REGS:11286,11286 FP_SECOND_SSE_REGS:11286,11286 FLOAT_SSE_REGS:11286,11286 FLOAT_INT_REGS:11286,11286 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:11286,11286 ALL_REGS:11286,11286 MEM:243,243
  a103(r340,l10) costs: GENERAL_REGS:54,54 SSE_FIRST_REG:621,621 SSE_REGS:621,621 ALL_SSE_REGS:621,621 MMX_REGS:756,756 FP_TOP_SSE_REGS:11286,11286 FP_SECOND_SSE_REGS:11286,11286 FLOAT_SSE_REGS:11286,11286 FLOAT_INT_REGS:11286,11286 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:11286,11286 ALL_REGS:11286,11286 MEM:243,243
  a104(r83,l13) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a105(r112,l13) costs: GENERAL_REGS:0,0 MEM:392,392
  a106(r123,l13) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a107(r136,l13) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:0,0
  a108(r165,l13) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:3366,3366 SSE_REGS:3366,3366 ALL_SSE_REGS:3366,3366 MMX_REGS:4836,4836 FP_TOP_SSE_REGS:69576,69576 FP_SECOND_SSE_REGS:69576,69576 FLOAT_SSE_REGS:69576,69576 FLOAT_INT_REGS:69576,69576 INT_SSE_REGS:3660,3660 FLOAT_INT_SSE_REGS:69576,69576 ALL_REGS:69576,69576 MEM:1449,1449
  a109(r181,l13) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:468,468 SSE_REGS:468,468 ALL_SSE_REGS:468,468 MMX_REGS:468,468 FP_TOP_SSE_REGS:4056,4056 FP_SECOND_SSE_REGS:4056,4056 FLOAT_SSE_REGS:4056,4056 FLOAT_INT_REGS:4056,4056 INT_SSE_REGS:468,468 FLOAT_INT_SSE_REGS:4056,4056 ALL_REGS:4056,4056 MEM:156,156
  a110(r456,l13) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a111(r83,l12) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a112(r112,l12) costs: GENERAL_REGS:0,0 MEM:0,0
  a113(r117,l12) costs: GENERAL_REGS:0,0 MEM:392,392
  a114(r123,l12) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a115(r136,l12) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:0,0
  a116(r186,l12) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:468,468 SSE_REGS:468,468 ALL_SSE_REGS:468,468 MMX_REGS:468,468 FP_TOP_SSE_REGS:4056,4056 FP_SECOND_SSE_REGS:4056,4056 FLOAT_SSE_REGS:4056,4056 FLOAT_INT_REGS:4056,4056 INT_SSE_REGS:468,468 FLOAT_INT_SSE_REGS:4056,4056 ALL_REGS:4056,4056 MEM:156,156
  a117(r187,l12) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:3366,3366 SSE_REGS:3366,3366 ALL_SSE_REGS:3366,3366 MMX_REGS:4836,4836 FP_TOP_SSE_REGS:69576,69576 FP_SECOND_SSE_REGS:69576,69576 FLOAT_SSE_REGS:69576,69576 FLOAT_INT_REGS:69576,69576 INT_SSE_REGS:3660,3660 FLOAT_INT_SSE_REGS:69576,69576 ALL_REGS:69576,69576 MEM:1449,1449
  a118(r448,l12) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a119(r456,l12) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a120(r83,l11) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a121(r112,l11) costs: GENERAL_REGS:0,0 MEM:1360,1360
  a122(r113,l11) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a123(r123,l11) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a124(r136,l11) costs: AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:0,0
  a125(r189,l11) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:11696,11696 SSE_REGS:11696,11696 ALL_SSE_REGS:11696,11696 MMX_REGS:16796,16796 FP_TOP_SSE_REGS:241536,241536 FP_SECOND_SSE_REGS:241536,241536 FLOAT_SSE_REGS:241536,241536 FLOAT_INT_REGS:241536,241536 INT_SSE_REGS:12716,12716 FLOAT_INT_SSE_REGS:241536,241536 ALL_REGS:241536,241536 MEM:5032,5032
  a126(r203,l11) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1632,1632 SSE_REGS:1632,1632 ALL_SSE_REGS:1632,1632 MMX_REGS:1632,1632 FP_TOP_SSE_REGS:14144,14144 FP_SECOND_SSE_REGS:14144,14144 FLOAT_SSE_REGS:14144,14144 FLOAT_INT_REGS:14144,14144 INT_SSE_REGS:1632,1632 FLOAT_INT_SSE_REGS:14144,14144 ALL_REGS:14144,14144 MEM:544,544
  a127(r427,l11) costs: CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a128(r428,l11) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a129(r456,l11) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a130(r104,l9) costs: GENERAL_REGS:54,54 MEM:729,729
  a131(r106,l9) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a132(r135,l9) costs: AD_REGS:214,160 Q_REGS:214,214 NON_Q_REGS:214,214 INDEX_REGS:214,214 LEGACY_REGS:214,214 GENERAL_REGS:214,214 CLOBBERED_REGS:214,214 MEM:979,979
  a133(r136,l9) costs: AD_REGS:104,52 Q_REGS:104,104 NON_Q_REGS:104,104 INDEX_REGS:104,104 LEGACY_REGS:104,104 GENERAL_REGS:104,104 CLOBBERED_REGS:104,104 MEM:364,364
  a134(r451,l9) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a135(r456,l9) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a136(r334,l9) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:567,567 SSE_REGS:567,567 ALL_SSE_REGS:567,567 MMX_REGS:702,702 FP_TOP_SSE_REGS:11232,11232 FP_SECOND_SSE_REGS:11232,11232 FLOAT_SSE_REGS:11232,11232 FLOAT_INT_REGS:11232,11232 INT_SSE_REGS:594,594 FLOAT_INT_SSE_REGS:11232,11232 ALL_REGS:11232,11232 MEM:162,162
  a137(r332,l9) costs: GENERAL_REGS:54,54 SSE_FIRST_REG:621,621 SSE_REGS:621,621 ALL_SSE_REGS:621,621 MMX_REGS:756,756 FP_TOP_SSE_REGS:11286,11286 FP_SECOND_SSE_REGS:11286,11286 FLOAT_SSE_REGS:11286,11286 FLOAT_INT_REGS:11286,11286 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:11286,11286 ALL_REGS:11286,11286 MEM:243,243
  a138(r330,l9) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:273,273 SSE_REGS:273,273 ALL_SSE_REGS:273,273 MMX_REGS:338,338 FP_TOP_SSE_REGS:5408,5408 FP_SECOND_SSE_REGS:5408,5408 FLOAT_SSE_REGS:5408,5408 FLOAT_INT_REGS:5408,5408 INT_SSE_REGS:286,286 FLOAT_INT_SSE_REGS:5408,5408 ALL_REGS:5408,5408 MEM:78,78
  a139(r329,l9) costs: GENERAL_REGS:26,26 SSE_FIRST_REG:299,299 SSE_REGS:299,299 ALL_SSE_REGS:299,299 MMX_REGS:364,364 FP_TOP_SSE_REGS:5434,5434 FP_SECOND_SSE_REGS:5434,5434 FLOAT_SSE_REGS:5434,5434 FLOAT_INT_REGS:5434,5434 INT_SSE_REGS:312,312 FLOAT_INT_SSE_REGS:5434,5434 ALL_REGS:5434,5434 MEM:117,117
  a140(r328,l9) costs: GENERAL_REGS:26,26 SSE_FIRST_REG:299,299 SSE_REGS:299,299 ALL_SSE_REGS:299,299 MMX_REGS:364,364 FP_TOP_SSE_REGS:5434,5434 FP_SECOND_SSE_REGS:5434,5434 FLOAT_SSE_REGS:5434,5434 FLOAT_INT_REGS:5434,5434 INT_SSE_REGS:312,312 FLOAT_INT_SSE_REGS:5434,5434 ALL_REGS:5434,5434 MEM:117,117
  a141(r439,l9) costs: GENERAL_REGS:54,54 SSE_FIRST_REG:621,621 SSE_REGS:621,621 ALL_SSE_REGS:621,621 MMX_REGS:756,756 FP_TOP_SSE_REGS:11286,11286 FP_SECOND_SSE_REGS:11286,11286 FLOAT_SSE_REGS:11286,11286 FLOAT_INT_REGS:11286,11286 INT_SSE_REGS:648,648 FLOAT_INT_SSE_REGS:11286,11286 ALL_REGS:11286,11286 MEM:243,243
  a142(r101,l7) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:6210,6210 SSE_REGS:6210,6210 ALL_SSE_REGS:6210,6210 MMX_REGS:9360,9360 FP_TOP_SSE_REGS:149760,149760 FP_SECOND_SSE_REGS:149760,149760 FLOAT_SSE_REGS:149760,149760 FLOAT_INT_REGS:149760,149760 INT_SSE_REGS:6840,6840 FLOAT_INT_SSE_REGS:149760,149760 ALL_REGS:149760,149760 MEM:2700,2700
  a143(r449,l7) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a144(r457,l7) costs: CREG:360,360 BREG:360,360 SIREG:360,360 DIREG:360,360 AD_REGS:180,180 Q_REGS:360,360 NON_Q_REGS:360,360 INDEX_REGS:360,360 LEGACY_REGS:360,360 GENERAL_REGS:360,360 CLOBBERED_REGS:360,360 SSE_FIRST_REG:900,900 SSE_REGS:900,900 ALL_SSE_REGS:900,900 MMX_REGS:1350,1350 FP_TOP_SSE_REGS:18900,18900 FP_SECOND_SSE_REGS:18900,18900 FLOAT_SSE_REGS:18900,18900 FLOAT_INT_REGS:18900,18900 INT_SSE_REGS:990,990 FLOAT_INT_SSE_REGS:18900,18900 ALL_REGS:18900,18900 MEM:540,540
  a145(r315,l7) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4860,4860 SSE_REGS:4860,4860 ALL_SSE_REGS:4860,4860 MMX_REGS:4860,4860 FP_TOP_SSE_REGS:38880,38880 FP_SECOND_SSE_REGS:38880,38880 FLOAT_SSE_REGS:38880,38880 FLOAT_INT_REGS:38880,38880 INT_SSE_REGS:4860,4860 FLOAT_INT_SSE_REGS:38880,38880 ALL_REGS:38880,38880 MEM:1440,1440
  a146(r312,l7) costs: AD_REGS:360,180 Q_REGS:360,360 NON_Q_REGS:360,360 INDEX_REGS:360,360 LEGACY_REGS:360,360 GENERAL_REGS:360,360 CLOBBERED_REGS:360,360 MEM:2070,2070
  a147(r304,l7) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4860,4860 SSE_REGS:4860,4860 ALL_SSE_REGS:4860,4860 MMX_REGS:4860,4860 FP_TOP_SSE_REGS:38880,38880 FP_SECOND_SSE_REGS:38880,38880 FLOAT_SSE_REGS:38880,38880 FLOAT_INT_REGS:38880,38880 INT_SSE_REGS:4860,4860 FLOAT_INT_SSE_REGS:38880,38880 ALL_REGS:38880,38880 MEM:1350,1350
  a148(r307,l7) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:37440,37440 FP_SECOND_SSE_REGS:37440,37440 FLOAT_SSE_REGS:37440,37440 FLOAT_INT_REGS:37440,37440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:37440,37440 ALL_REGS:37440,37440 MEM:630,630
  a149(r305,l7) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:28440,28440 FP_SECOND_SSE_REGS:28440,28440 FLOAT_SSE_REGS:28440,28440 FLOAT_INT_REGS:28440,28440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:28440,28440 ALL_REGS:28440,28440 MEM:0,0
  a150(r94,l6) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:6210,6210 SSE_REGS:6210,6210 ALL_SSE_REGS:6210,6210 MMX_REGS:9360,9360 FP_TOP_SSE_REGS:149760,149760 FP_SECOND_SSE_REGS:149760,149760 FLOAT_SSE_REGS:149760,149760 FLOAT_INT_REGS:149760,149760 INT_SSE_REGS:6840,6840 FLOAT_INT_SSE_REGS:149760,149760 ALL_REGS:149760,149760 MEM:2610,2610
  a151(r240,l6) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:720,720 SSE_REGS:720,720 ALL_SSE_REGS:720,720 MMX_REGS:1170,1170 FP_TOP_SSE_REGS:18720,18720 FP_SECOND_SSE_REGS:18720,18720 FLOAT_SSE_REGS:18720,18720 FLOAT_INT_REGS:18720,18720 INT_SSE_REGS:810,810 FLOAT_INT_SSE_REGS:18720,18720 ALL_REGS:18720,18720 MEM:270,270
  a152(r449,l6) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a153(r458,l6) costs: CREG:360,360 BREG:360,360 SIREG:360,360 DIREG:360,360 AD_REGS:180,180 Q_REGS:360,360 NON_Q_REGS:360,360 INDEX_REGS:360,360 LEGACY_REGS:360,360 GENERAL_REGS:360,360 CLOBBERED_REGS:360,360 SSE_FIRST_REG:900,900 SSE_REGS:900,900 ALL_SSE_REGS:900,900 MMX_REGS:1350,1350 FP_TOP_SSE_REGS:18900,18900 FP_SECOND_SSE_REGS:18900,18900 FLOAT_SSE_REGS:18900,18900 FLOAT_INT_REGS:18900,18900 INT_SSE_REGS:990,990 FLOAT_INT_SSE_REGS:18900,18900 ALL_REGS:18900,18900 MEM:540,540
  a154(r301,l6) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4860,4860 SSE_REGS:4860,4860 ALL_SSE_REGS:4860,4860 MMX_REGS:4860,4860 FP_TOP_SSE_REGS:38880,38880 FP_SECOND_SSE_REGS:38880,38880 FLOAT_SSE_REGS:38880,38880 FLOAT_INT_REGS:38880,38880 INT_SSE_REGS:4860,4860 FLOAT_INT_SSE_REGS:38880,38880 ALL_REGS:38880,38880 MEM:1440,1440
  a155(r298,l6) costs: AD_REGS:360,180 Q_REGS:360,360 NON_Q_REGS:360,360 INDEX_REGS:360,360 LEGACY_REGS:360,360 GENERAL_REGS:360,360 CLOBBERED_REGS:360,360 MEM:2070,2070
  a156(r290,l6) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:4860,4860 SSE_REGS:4860,4860 ALL_SSE_REGS:4860,4860 MMX_REGS:4860,4860 FP_TOP_SSE_REGS:38880,38880 FP_SECOND_SSE_REGS:38880,38880 FLOAT_SSE_REGS:38880,38880 FLOAT_INT_REGS:38880,38880 INT_SSE_REGS:4860,4860 FLOAT_INT_SSE_REGS:38880,38880 ALL_REGS:38880,38880 MEM:1350,1350
  a157(r293,l6) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:37440,37440 FP_SECOND_SSE_REGS:37440,37440 FLOAT_SSE_REGS:37440,37440 FLOAT_INT_REGS:37440,37440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:37440,37440 ALL_REGS:37440,37440 MEM:630,630
  a158(r291,l6) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1890,1890 SSE_REGS:1890,1890 ALL_SSE_REGS:1890,1890 MMX_REGS:2340,2340 FP_TOP_SSE_REGS:28440,28440 FP_SECOND_SSE_REGS:28440,28440 FLOAT_SSE_REGS:28440,28440 FLOAT_INT_REGS:28440,28440 INT_SSE_REGS:1980,1980 FLOAT_INT_SSE_REGS:28440,28440 ALL_REGS:28440,28440 MEM:0,0
  a159(r87,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:2997,2997 SSE_REGS:2997,2997 ALL_SSE_REGS:2997,2997 MMX_REGS:4212,4212 FP_TOP_SSE_REGS:67392,67392 FP_SECOND_SSE_REGS:67392,67392 FLOAT_SSE_REGS:67392,67392 FLOAT_INT_REGS:67392,67392 INT_SSE_REGS:3240,3240 FLOAT_INT_SSE_REGS:67392,67392 ALL_REGS:67392,67392 MEM:1053,1053
  a160(r460,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,14560 SSE_REGS:0,14560 ALL_SSE_REGS:0,14560 MMX_REGS:0,23660 FP_TOP_SSE_REGS:0,378560 FP_SECOND_SSE_REGS:0,378560 FLOAT_SSE_REGS:0,378560 FLOAT_INT_REGS:0,378560 INT_SSE_REGS:0,16380 FLOAT_INT_SSE_REGS:0,378560 ALL_REGS:0,378560 MEM:0,5460
  a161(r449,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:25596,25596 FP_SECOND_SSE_REGS:25596,25596 FLOAT_SSE_REGS:25596,25596 FLOAT_INT_REGS:25596,25596 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:25596,25596 ALL_REGS:25596,25596 MEM:567,567
  a162(r175,l3) costs: GENERAL_REGS:162,1982 MEM:1611,25271
  a163(r167,l3) costs: SIREG:0,5460 DIREG:0,5460 Q_REGS:0,0 NON_Q_REGS:0,5460 INDEX_REGS:0,5460 LEGACY_REGS:0,5460 GENERAL_REGS:0,5460 FLOAT_INT_REGS:9360,766480 INT_SSE_REGS:9360,766480 FLOAT_INT_SSE_REGS:9360,766480 ALL_REGS:9360,766480 MEM:360,15830
  a164(r431,l3) costs: GENERAL_REGS:162,162 SSE_FIRST_REG:2526,21636 SSE_REGS:2526,21636 ALL_SSE_REGS:2526,21636 MMX_REGS:3336,26996 FP_TOP_SSE_REGS:43114,421674 FP_SECOND_SSE_REGS:43114,421674 FLOAT_SSE_REGS:43114,421674 FLOAT_INT_REGS:43114,421674 INT_SSE_REGS:2688,22708 FLOAT_INT_SSE_REGS:43114,421674 ALL_REGS:43114,421674 MEM:1004,8284
  a165(r432,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1716,20826 SSE_REGS:1716,20826 ALL_SSE_REGS:1716,20826 MMX_REGS:2121,25781 FP_TOP_SSE_REGS:26104,404664 FP_SECOND_SSE_REGS:26104,404664 FLOAT_SSE_REGS:26104,404664 FLOAT_INT_REGS:26104,404664 INT_SSE_REGS:1797,21817 FLOAT_INT_SSE_REGS:26104,404664 ALL_REGS:26104,404664 MEM:680,7960
  a166(r286,l3) costs: AD_REGS:162,0 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 LEGACY_REGS:162,162 GENERAL_REGS:162,162 CLOBBERED_REGS:162,162 MEM:1458,1458
  a167(r285,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:486,486
  a168(r284,l3) costs: GENERAL_REGS:162,162 SSE_FIRST_REG:1863,1863 SSE_REGS:1863,1863 ALL_SSE_REGS:1863,1863 MMX_REGS:2268,2268 FP_TOP_SSE_REGS:33858,33858 FP_SECOND_SSE_REGS:33858,33858 FLOAT_SSE_REGS:33858,33858 FLOAT_INT_REGS:33858,33858 INT_SSE_REGS:1944,1944 FLOAT_INT_SSE_REGS:33858,33858 ALL_REGS:33858,33858 MEM:729,729
  a169(r283,l3) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1701,1701 SSE_REGS:1701,1701 ALL_SSE_REGS:1701,1701 MMX_REGS:2106,2106 FP_TOP_SSE_REGS:33696,33696 FP_SECOND_SSE_REGS:33696,33696 FLOAT_SSE_REGS:33696,33696 FLOAT_INT_REGS:33696,33696 INT_SSE_REGS:1782,1782 FLOAT_INT_SSE_REGS:33696,33696 ALL_REGS:33696,33696 MEM:567,567
  a170(r274,l3) costs: SIREG:180,180 DIREG:180,180 Q_REGS:0,0 NON_Q_REGS:180,180 INDEX_REGS:180,180 LEGACY_REGS:180,180 GENERAL_REGS:180,180 FLOAT_INT_REGS:37440,37440 INT_SSE_REGS:37440,37440 FLOAT_INT_SSE_REGS:37440,37440 ALL_REGS:37440,37440 MEM:540,540
  a171(r84,l3) costs: AREG:0,-90 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:900,900
  a172(r87,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a173(r167,l5) costs: SIREG:1820,1820 DIREG:1820,1820 Q_REGS:0,0 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 FLOAT_INT_REGS:283920,283920 INT_SSE_REGS:283920,283920 FLOAT_INT_SSE_REGS:283920,283920 ALL_REGS:283920,283920 MEM:6370,6370
  a174(r175,l5) costs: GENERAL_REGS:1820,1820 MEM:23660,23660
  a175(r431,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a176(r432,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a177(r460,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a178(r281,l5) costs: SIREG:1820,1820 DIREG:1820,1820 Q_REGS:0,0 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:378560,378560 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:5460,5460
  a179(r176,l5) costs: AREG:0,-910 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:9100,9100
  a180(r174,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:49140,49140 SSE_REGS:49140,49140 ALL_SSE_REGS:49140,49140 MMX_REGS:49140,49140 FP_TOP_SSE_REGS:393120,393120 FP_SECOND_SSE_REGS:393120,393120 FLOAT_SSE_REGS:393120,393120 FLOAT_INT_REGS:393120,393120 INT_SSE_REGS:49140,49140 FLOAT_INT_SSE_REGS:393120,393120 ALL_REGS:393120,393120 MEM:14560,14560
  a181(r279,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:49140,49140 SSE_REGS:49140,49140 ALL_SSE_REGS:49140,49140 MMX_REGS:49140,49140 FP_TOP_SSE_REGS:393120,393120 FP_SECOND_SSE_REGS:393120,393120 FLOAT_SSE_REGS:393120,393120 FLOAT_INT_REGS:393120,393120 INT_SSE_REGS:49140,49140 FLOAT_INT_SSE_REGS:393120,393120 ALL_REGS:393120,393120 MEM:13650,13650
  a182(r278,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:49140,49140 SSE_REGS:49140,49140 ALL_SSE_REGS:49140,49140 MMX_REGS:49140,49140 FP_TOP_SSE_REGS:393120,393120 FP_SECOND_SSE_REGS:393120,393120 FLOAT_SSE_REGS:393120,393120 FLOAT_INT_REGS:393120,393120 INT_SSE_REGS:49140,49140 FLOAT_INT_SSE_REGS:393120,393120 ALL_REGS:393120,393120 MEM:13650,13650
  a183(r280,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:7280,7280
  a184(r277,l5) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:49140,49140 SSE_REGS:49140,49140 ALL_SSE_REGS:49140,49140 MMX_REGS:49140,49140 FP_TOP_SSE_REGS:393120,393120 FP_SECOND_SSE_REGS:393120,393120 FLOAT_SSE_REGS:393120,393120 FLOAT_INT_REGS:393120,393120 INT_SSE_REGS:49140,49140 FLOAT_INT_SSE_REGS:393120,393120 ALL_REGS:393120,393120 MEM:13650,13650
  a185(r276,l5) costs: GENERAL_REGS:1820,1820 SSE_FIRST_REG:50960,50960 SSE_REGS:50960,50960 ALL_SSE_REGS:50960,50960 MMX_REGS:50960,50960 FP_TOP_SSE_REGS:394940,394940 FP_SECOND_SSE_REGS:394940,394940 FLOAT_SSE_REGS:394940,394940 FLOAT_INT_REGS:394940,394940 INT_SSE_REGS:50960,50960 FLOAT_INT_SSE_REGS:394940,394940 ALL_REGS:394940,394940 MEM:15470,15470
  a186(r87,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a187(r167,l4) costs: SIREG:3640,3640 DIREG:3640,3640 Q_REGS:0,0 NON_Q_REGS:3640,3640 INDEX_REGS:3640,3640 LEGACY_REGS:3640,3640 GENERAL_REGS:3640,3640 FLOAT_INT_REGS:473200,473200 INT_SSE_REGS:473200,473200 FLOAT_INT_SSE_REGS:473200,473200 ALL_REGS:473200,473200 MEM:9100,9100
  a188(r431,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:7280,7280
  a189(r432,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19110,19110 SSE_REGS:19110,19110 ALL_SSE_REGS:19110,19110 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:20020,20020 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:7280,7280
  a190(r460,l4) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:14560,14560 SSE_REGS:14560,14560 ALL_SSE_REGS:14560,14560 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:378560,378560 FP_SECOND_SSE_REGS:378560,378560 FLOAT_SSE_REGS:378560,378560 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:16380,16380 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:5460,5460
  a191(r275,l4) costs: SIREG:1820,1820 DIREG:1820,1820 Q_REGS:0,0 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 LEGACY_REGS:1820,1820 GENERAL_REGS:1820,1820 FLOAT_INT_REGS:378560,378560 INT_SSE_REGS:378560,378560 FLOAT_INT_SSE_REGS:378560,378560 ALL_REGS:378560,378560 MEM:5460,5460
  a192(r166,l4) costs: AREG:0,-910 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:9100,9100
  a193(r151,l2) costs: SIREG:18,18 DIREG:18,18 Q_REGS:0,0 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 FLOAT_INT_REGS:2808,2808 INT_SSE_REGS:2808,2808 FLOAT_INT_SSE_REGS:2808,2808 ALL_REGS:2808,2808 MEM:63,63
  a194(r159,l2) costs: GENERAL_REGS:18,18 MEM:234,234
  a195(r429,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a196(r430,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 ALL_SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a197(r268,l2) costs: SIREG:18,18 DIREG:18,18 Q_REGS:0,0 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:3744,3744 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a198(r160,l2) costs: AREG:0,-9 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:90,90
  a199(r158,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:486,486 SSE_REGS:486,486 ALL_SSE_REGS:486,486 MMX_REGS:486,486 FP_TOP_SSE_REGS:3888,3888 FP_SECOND_SSE_REGS:3888,3888 FLOAT_SSE_REGS:3888,3888 FLOAT_INT_REGS:3888,3888 INT_SSE_REGS:486,486 FLOAT_INT_SSE_REGS:3888,3888 ALL_REGS:3888,3888 MEM:144,144
  a200(r266,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:486,486 SSE_REGS:486,486 ALL_SSE_REGS:486,486 MMX_REGS:486,486 FP_TOP_SSE_REGS:3888,3888 FP_SECOND_SSE_REGS:3888,3888 FLOAT_SSE_REGS:3888,3888 FLOAT_INT_REGS:3888,3888 INT_SSE_REGS:486,486 FLOAT_INT_SSE_REGS:3888,3888 ALL_REGS:3888,3888 MEM:135,135
  a201(r265,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:486,486 SSE_REGS:486,486 ALL_SSE_REGS:486,486 MMX_REGS:486,486 FP_TOP_SSE_REGS:3888,3888 FP_SECOND_SSE_REGS:3888,3888 FLOAT_SSE_REGS:3888,3888 FLOAT_INT_REGS:3888,3888 INT_SSE_REGS:486,486 FLOAT_INT_SSE_REGS:3888,3888 ALL_REGS:3888,3888 MEM:135,135
  a202(r267,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:72,72
  a203(r264,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:486,486 SSE_REGS:486,486 ALL_SSE_REGS:486,486 MMX_REGS:486,486 FP_TOP_SSE_REGS:3888,3888 FP_SECOND_SSE_REGS:3888,3888 FLOAT_SSE_REGS:3888,3888 FLOAT_INT_REGS:3888,3888 INT_SSE_REGS:486,486 FLOAT_INT_SSE_REGS:3888,3888 ALL_REGS:3888,3888 MEM:135,135
  a204(r263,l2) costs: GENERAL_REGS:18,18 SSE_FIRST_REG:504,504 SSE_REGS:504,504 ALL_SSE_REGS:504,504 MMX_REGS:504,504 FP_TOP_SSE_REGS:3906,3906 FP_SECOND_SSE_REGS:3906,3906 FLOAT_SSE_REGS:3906,3906 FLOAT_INT_REGS:3906,3906 INT_SSE_REGS:504,504 FLOAT_INT_SSE_REGS:3906,3906 ALL_REGS:3906,3906 MEM:153,153
  a205(r151,l1) costs: SIREG:36,36 DIREG:36,36 Q_REGS:0,0 NON_Q_REGS:36,36 INDEX_REGS:36,36 LEGACY_REGS:36,36 GENERAL_REGS:36,36 FLOAT_INT_REGS:4680,4680 INT_SSE_REGS:4680,4680 FLOAT_INT_SSE_REGS:4680,4680 ALL_REGS:4680,4680 MEM:90,90
  a206(r429,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:72,72
  a207(r430,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:189,189 SSE_REGS:189,189 ALL_SSE_REGS:189,189 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:198,198 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:72,72
  a208(r461,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:144,144 SSE_REGS:144,144 ALL_SSE_REGS:144,144 MMX_REGS:234,234 FP_TOP_SSE_REGS:3744,3744 FP_SECOND_SSE_REGS:3744,3744 FLOAT_SSE_REGS:3744,3744 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:162,162 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a209(r262,l1) costs: SIREG:18,18 DIREG:18,18 Q_REGS:0,0 NON_Q_REGS:18,18 INDEX_REGS:18,18 LEGACY_REGS:18,18 GENERAL_REGS:18,18 FLOAT_INT_REGS:3744,3744 INT_SSE_REGS:3744,3744 FLOAT_INT_SSE_REGS:3744,3744 ALL_REGS:3744,3744 MEM:54,54
  a210(r150,l1) costs: AREG:0,-9 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 CLOBBERED_REGS:0,0 MEM:90,90

   Insn 777(l0): point = 0
   Insn 776(l0): point = 2
   Insn 1048(l0): point = 5
   Insn 6(l0): point = 7
   Insn 878(l0): point = 10
   Insn 877(l0): point = 12
   Insn 1034(l0): point = 15
   Insn 635(l0): point = 18
   Insn 634(l0): point = 20
   Insn 42(l0): point = 22
   Insn 633(l0): point = 24
   Insn 632(l0): point = 26
   Insn 631(l0): point = 28
   Insn 629(l0): point = 30
   Insn 627(l0): point = 32
   Insn 626(l0): point = 34
   Insn 625(l0): point = 36
   Insn 624(l0): point = 38
   Insn 623(l0): point = 40
   Insn 622(l0): point = 42
   Insn 621(l0): point = 44
   Insn 993(l0): point = 47
   Insn 216(l0): point = 49
   Insn 1052(l0): point = 52
   Insn 758(l0): point = 54
   Insn 214(l0): point = 57
   Insn 213(l0): point = 59
   Insn 602(l0): point = 61
   Insn 15(l0): point = 63
   Insn 221(l0): point = 65
   Insn 212(l0): point = 67
   Insn 199(l0): point = 70
   Insn 13(l0): point = 72
   Insn 176(l0): point = 75
   Insn 12(l0): point = 77
   Insn 163(l0): point = 79
   Insn 161(l0): point = 82
   Insn 160(l0): point = 84
   Insn 933(l0): point = 87
   Insn 7(l0): point = 89
   Insn 103(l0): point = 92
   Insn 102(l0): point = 94
   Insn 101(l0): point = 96
   Insn 100(l0): point = 98
   Insn 98(l0): point = 100
   Insn 96(l0): point = 102
   Insn 95(l0): point = 104
   Insn 94(l0): point = 106
   Insn 93(l0): point = 108
   Insn 988(l0): point = 111
   Insn 927(l0): point = 114
   Insn 856(l0): point = 116
   Insn 855(l0): point = 118
   Insn 58(l0): point = 121
   Insn 57(l0): point = 123
   Insn 56(l0): point = 125
   Insn 55(l0): point = 127
   Insn 54(l0): point = 129
   Insn 53(l0): point = 131
   Insn 3(l0): point = 133
   Insn 656(l14): point = 136
   Insn 655(l14): point = 138
   Insn 654(l14): point = 140
   Insn 653(l14): point = 142
   Insn 652(l14): point = 144
   Insn 649(l14): point = 146
   Insn 647(l14): point = 148
   Insn 646(l14): point = 150
   Insn 645(l14): point = 152
   Insn 644(l14): point = 154
   Insn 643(l14): point = 156
   Insn 899(l8): point = 159
   Insn 22(l8): point = 161
   Insn 21(l8): point = 163
   Insn 20(l8): point = 165
   Insn 17(l8): point = 168
   Insn 16(l8): point = 170
   Insn 225(l8): point = 173
   Insn 224(l8): point = 175
   Insn 895(l8): point = 177
   Insn 223(l8): point = 179
   Insn 616(l8): point = 183
   Insn 615(l8): point = 185
   Insn 612(l8): point = 187
   Insn 611(l8): point = 189
   Insn 905(l8): point = 192
   Insn 904(l8): point = 194
   Insn 607(l8): point = 196
   Insn 606(l8): point = 198
   Insn 605(l8): point = 200
   Insn 604(l8): point = 202
   Insn 603(l8): point = 204
   Insn 600(l8): point = 207
   Insn 599(l8): point = 209
   Insn 903(l8): point = 211
   Insn 1030(l8): point = 214
   Insn 902(l8): point = 216
   Insn 901(l8): point = 218
   Insn 594(l8): point = 220
   Insn 593(l8): point = 222
   Insn 592(l8): point = 224
   Insn 591(l8): point = 226
   Insn 590(l8): point = 228
   Insn 588(l8): point = 230
   Insn 587(l8): point = 232
   Insn 584(l8): point = 234
   Insn 582(l8): point = 237
   Insn 581(l8): point = 239
   Insn 580(l8): point = 241
   Insn 41(l8): point = 244
   Insn 278(l8): point = 247
   Insn 277(l8): point = 249
   Insn 18(l8): point = 252
   Insn 245(l8): point = 255
   Insn 244(l8): point = 257
   Insn 242(l8): point = 259
   Insn 911(l8): point = 261
   Insn 241(l8): point = 263
   Insn 240(l8): point = 265
   Insn 238(l8): point = 267
   Insn 236(l8): point = 269
   Insn 234(l8): point = 271
   Insn 232(l8): point = 273
   Insn 231(l8): point = 275
   Insn 230(l8): point = 277
   Insn 229(l8): point = 279
   Insn 228(l8): point = 281
   Insn 996(l8): point = 284
   Insn 888(l10): point = 287
   Insn 1054(l10): point = 290
   Insn 891(l10): point = 292
   Insn 889(l10): point = 295
   Insn 890(l10): point = 298
   Insn 301(l10): point = 301
   Insn 300(l10): point = 303
   Insn 864(l10): point = 305
   Insn 863(l10): point = 307
   Insn 296(l10): point = 309
   Insn 294(l10): point = 311
   Insn 293(l10): point = 313
   Insn 291(l10): point = 315
   Insn 289(l10): point = 317
   Insn 288(l10): point = 319
   Insn 287(l10): point = 321
   Insn 285(l10): point = 323
   Insn 283(l10): point = 325
   Insn 1028(l10): point = 328
   Insn 574(l10): point = 330
   Insn 571(l10): point = 333
   Insn 570(l10): point = 335
   Insn 569(l10): point = 337
   Insn 568(l10): point = 339
   Insn 567(l10): point = 341
   Insn 566(l10): point = 343
   Insn 1017(l10): point = 346
   Insn 564(l10): point = 349
   Insn 563(l10): point = 351
   Insn 40(l10): point = 354
   Insn 558(l10): point = 356
   Insn 557(l10): point = 358
   Insn 1046(l10): point = 361
   Insn 1022(l10): point = 364
   Insn 510(l10): point = 367
   Insn 1026(l10): point = 370
   Insn 553(l10): point = 372
   Insn 545(l10): point = 374
   Insn 544(l10): point = 376
   Insn 543(l10): point = 378
   Insn 542(l10): point = 380
   Insn 541(l10): point = 382
   Insn 540(l10): point = 384
   Insn 39(l10): point = 387
   Insn 534(l10): point = 390
   Insn 533(l10): point = 392
   Insn 530(l10): point = 395
   Insn 529(l10): point = 397
   Insn 869(l10): point = 399
   Insn 527(l10): point = 401
   Insn 525(l10): point = 404
   Insn 524(l10): point = 406
   Insn 521(l10): point = 409
   Insn 520(l10): point = 411
   Insn 743(l10): point = 414
   Insn 742(l10): point = 416
   Insn 876(l10): point = 418
   Insn 875(l10): point = 420
   Insn 737(l10): point = 422
   Insn 736(l10): point = 424
   Insn 735(l10): point = 426
   Insn 734(l10): point = 428
   Insn 733(l10): point = 430
   Insn 732(l10): point = 432
   Insn 731(l10): point = 434
   Insn 730(l10): point = 436
   Insn 729(l10): point = 438
   Insn 728(l10): point = 440
   Insn 727(l10): point = 442
   Insn 726(l10): point = 444
   Insn 885(l10): point = 447
   Insn 715(l10): point = 450
   Insn 714(l10): point = 452
   Insn 712(l10): point = 454
   Insn 478(l10): point = 457
   Insn 477(l10): point = 459
   Insn 34(l10): point = 462
   Insn 474(l10): point = 464
   Insn 473(l10): point = 466
   Insn 1042(l10): point = 469
   Insn 1014(l10): point = 472
   Insn 469(l10): point = 474
   Insn 461(l10): point = 476
   Insn 460(l10): point = 478
   Insn 459(l10): point = 480
   Insn 458(l10): point = 482
   Insn 457(l10): point = 484
   Insn 456(l10): point = 486
   Insn 33(l10): point = 489
   Insn 450(l10): point = 492
   Insn 449(l10): point = 494
   Insn 446(l10): point = 497
   Insn 445(l10): point = 499
   Insn 867(l10): point = 501
   Insn 443(l10): point = 503
   Insn 441(l10): point = 506
   Insn 440(l10): point = 508
   Insn 437(l10): point = 511
   Insn 436(l10): point = 513
   Insn 704(l10): point = 516
   Insn 703(l10): point = 518
   Insn 874(l10): point = 520
   Insn 873(l10): point = 522
   Insn 698(l10): point = 524
   Insn 697(l10): point = 526
   Insn 696(l10): point = 528
   Insn 695(l10): point = 530
   Insn 694(l10): point = 532
   Insn 693(l10): point = 534
   Insn 692(l10): point = 536
   Insn 691(l10): point = 538
   Insn 690(l10): point = 540
   Insn 689(l10): point = 542
   Insn 688(l10): point = 544
   Insn 886(l10): point = 547
   Insn 397(l10): point = 550
   Insn 396(l10): point = 552
   Insn 906(l10): point = 554
   Insn 395(l10): point = 556
   Insn 393(l10): point = 558
   Insn 391(l10): point = 560
   Insn 389(l10): point = 562
   Insn 388(l10): point = 564
   Insn 387(l10): point = 566
   Insn 386(l10): point = 568
   Insn 1012(l10): point = 571
   Insn 452(l10): point = 573
   Insn 448(l10): point = 576
   Insn 505(l10): point = 579
   Insn 504(l10): point = 581
   Insn 508(l10): point = 584
   Insn 507(l10): point = 586
   Insn 512(l10): point = 589
   Insn 511(l10): point = 591
   Insn 1024(l10): point = 594
   Insn 536(l10): point = 596
   Insn 532(l10): point = 599
   Insn 384(l10): point = 602
   Insn 383(l10): point = 604
   Insn 28(l10): point = 607
   Insn 378(l10): point = 609
   Insn 377(l10): point = 611
   Insn 1038(l10): point = 614
   Insn 1001(l10): point = 617
   Insn 330(l10): point = 620
   Insn 1005(l10): point = 623
   Insn 373(l10): point = 625
   Insn 365(l10): point = 627
   Insn 364(l10): point = 629
   Insn 363(l10): point = 631
   Insn 362(l10): point = 633
   Insn 361(l10): point = 635
   Insn 360(l10): point = 637
   Insn 27(l10): point = 640
   Insn 354(l10): point = 643
   Insn 353(l10): point = 645
   Insn 350(l10): point = 648
   Insn 349(l10): point = 650
   Insn 865(l10): point = 652
   Insn 347(l10): point = 654
   Insn 345(l10): point = 657
   Insn 344(l10): point = 659
   Insn 341(l10): point = 662
   Insn 340(l10): point = 664
   Insn 680(l10): point = 667
   Insn 679(l10): point = 669
   Insn 872(l10): point = 671
   Insn 871(l10): point = 673
   Insn 674(l10): point = 675
   Insn 673(l10): point = 677
   Insn 672(l10): point = 679
   Insn 671(l10): point = 681
   Insn 670(l10): point = 683
   Insn 669(l10): point = 685
   Insn 668(l10): point = 687
   Insn 667(l10): point = 689
   Insn 666(l10): point = 691
   Insn 665(l10): point = 693
   Insn 664(l10): point = 695
   Insn 663(l10): point = 697
   Insn 887(l10): point = 700
   Insn 325(l10): point = 703
   Insn 324(l10): point = 705
   Insn 328(l10): point = 708
   Insn 327(l10): point = 710
   Insn 332(l10): point = 713
   Insn 331(l10): point = 715
   Insn 1003(l10): point = 718
   Insn 356(l10): point = 720
   Insn 352(l10): point = 723
   Insn 1057(l10): point = 726
   Insn 771(l10): point = 729
   Insn 770(l10): point = 731
   Insn 426(l10): point = 734
   Insn 424(l10): point = 737
   Insn 423(l10): point = 739
   Insn 421(l10): point = 742
   Insn 420(l10): point = 744
   Insn 1010(l10): point = 747
   Insn 428(l10): point = 750
   Insn 427(l10): point = 752
   Insn 485(l13): point = 755
   Insn 484(l13): point = 757
   Insn 502(l13): point = 760
   Insn 501(l13): point = 762
   Insn 497(l13): point = 765
   Insn 1019(l13): point = 768
   Insn 37(l13): point = 770
   Insn 36(l13): point = 772
   Insn 489(l13): point = 775
   Insn 488(l13): point = 777
   Insn 487(l13): point = 780
   Insn 401(l12): point = 783
   Insn 400(l12): point = 785
   Insn 418(l12): point = 788
   Insn 417(l12): point = 790
   Insn 413(l12): point = 793
   Insn 1007(l12): point = 796
   Insn 31(l12): point = 798
   Insn 30(l12): point = 800
   Insn 405(l12): point = 803
   Insn 404(l12): point = 805
   Insn 403(l12): point = 808
   Insn 305(l11): point = 811
   Insn 304(l11): point = 813
   Insn 322(l11): point = 816
   Insn 321(l11): point = 818
   Insn 317(l11): point = 821
   Insn 998(l11): point = 824
   Insn 25(l11): point = 826
   Insn 24(l11): point = 828
   Insn 309(l11): point = 831
   Insn 308(l11): point = 833
   Insn 307(l11): point = 836
   Insn 252(l9): point = 839
   Insn 251(l9): point = 841
   Insn 248(l9): point = 843
   Insn 274(l9): point = 846
   Insn 273(l9): point = 848
   Insn 270(l9): point = 850
   Insn 268(l9): point = 852
   Insn 266(l9): point = 854
   Insn 265(l9): point = 856
   Insn 263(l9): point = 858
   Insn 259(l9): point = 861
   Insn 257(l9): point = 863
   Insn 256(l9): point = 865
   Insn 255(l9): point = 867
   Insn 254(l9): point = 869
   Insn 209(l7): point = 872
   Insn 208(l7): point = 874
   Insn 206(l7): point = 876
   Insn 205(l7): point = 878
   Insn 204(l7): point = 880
   Insn 202(l7): point = 882
   Insn 200(l7): point = 884
   Insn 195(l7): point = 886
   Insn 192(l7): point = 888
   Insn 191(l7): point = 890
   Insn 186(l6): point = 893
   Insn 185(l6): point = 895
   Insn 183(l6): point = 897
   Insn 182(l6): point = 899
   Insn 181(l6): point = 901
   Insn 179(l6): point = 903
   Insn 177(l6): point = 905
   Insn 172(l6): point = 907
   Insn 169(l6): point = 909
   Insn 168(l6): point = 911
   Insn 1050(l3): point = 914
   Insn 10(l3): point = 916
   Insn 880(l3): point = 919
   Insn 879(l3): point = 921
   Insn 991(l3): point = 924
   Insn 860(l3): point = 927
   Insn 859(l3): point = 929
   Insn 110(l3): point = 932
   Insn 109(l3): point = 934
   Insn 108(l3): point = 936
   Insn 107(l3): point = 938
   Insn 106(l3): point = 940
   Insn 105(l3): point = 942
   Insn 158(l3): point = 945
   Insn 157(l3): point = 947
   Insn 155(l3): point = 949
   Insn 154(l3): point = 951
   Insn 153(l3): point = 953
   Insn 151(l3): point = 955
   Insn 149(l3): point = 957
   Insn 148(l3): point = 959
   Insn 147(l3): point = 961
   Insn 146(l3): point = 963
   Insn 143(l5): point = 966
   Insn 142(l5): point = 968
   Insn 141(l5): point = 970
   Insn 139(l5): point = 972
   Insn 138(l5): point = 974
   Insn 137(l5): point = 976
   Insn 136(l5): point = 978
   Insn 135(l5): point = 980
   Insn 134(l5): point = 982
   Insn 133(l5): point = 984
   Insn 131(l5): point = 986
   Insn 130(l5): point = 988
   Insn 129(l5): point = 990
   Insn 124(l4): point = 993
   Insn 123(l4): point = 995
   Insn 122(l4): point = 997
   Insn 120(l4): point = 999
   Insn 119(l4): point = 1001
   Insn 118(l4): point = 1003
   Insn 937(l4): point = 1005
   Insn 935(l4): point = 1007
   Insn 934(l4): point = 1009
   Insn 932(l4): point = 1011
   Insn 91(l2): point = 1014
   Insn 90(l2): point = 1016
   Insn 89(l2): point = 1018
   Insn 87(l2): point = 1020
   Insn 86(l2): point = 1022
   Insn 85(l2): point = 1024
   Insn 84(l2): point = 1026
   Insn 83(l2): point = 1028
   Insn 82(l2): point = 1030
   Insn 81(l2): point = 1032
   Insn 79(l2): point = 1034
   Insn 78(l2): point = 1036
   Insn 77(l2): point = 1038
   Insn 72(l1): point = 1041
   Insn 71(l1): point = 1043
   Insn 70(l1): point = 1045
   Insn 68(l1): point = 1047
   Insn 67(l1): point = 1049
   Insn 66(l1): point = 1051
   Insn 931(l1): point = 1053
   Insn 929(l1): point = 1055
   Insn 928(l1): point = 1057
   Insn 926(l1): point = 1059
 a0(r159 [0]): [103..110] [5..7]
 a0(r159 [1]): [107..110] [5..7]
 a1(r151): [111..127] [5..14]
 a2(r429): [103..118] [5..12]
 a3(r430): [109..116] [5..10]
 a4(r412): [21..24]
 a5(r132): [18..22]
 a6(r409): [25..26]
 a7(r129): [18..30]
 a8(r410): [27..28]
 a9(r252): [57..65] [37..49]
 a10(r406): [39..40]
 a11(r403): [41..42]
 a12(r404): [43..44]
 a13(r449): [57..86]
 a14(r456): [57..61]
 a15(r125): [57..63]
 a16(r457): [70..70]
 a17(r101): [70..72]
 a18(r458): [75..75]
 a19(r94): [75..77]
 a20(r240): [75..79]
 a21(r460): [87..87]
 a22(r87): [87..89]
 a23(r85): [95..98]
 a24(r272 [0]): [97..102]
 a24(r272 [1]): [100..102]
 a25(r271): [101..104]
 a26(r270): [105..106]
 a27(r269): [105..108]
 a28(r461): [114..114]
 a29(r261): [124..125]
 a30(r149): [126..129]
 a31(r129): [157..158] [136..146]
 a32(r132): [136..158]
 a33(r420): [139..140]
 a34(r417): [141..142]
 a35(r418): [143..144]
 a36(r414): [155..156]
 a37(r125): [180..189]
 a38(r252): [237..241] [207..220] [173..196]
 a39(r449): [214..218] [207..211] [173..194]
 a40(r456): [159..286]
 a41(r451): [284..286] [237..263] [207..216] [190..192] [160..177]
 a42(r83): [235..244] [210..213] [159..163]
 a43(r397): [231..232]
 a44(r450): [159..159]
 a45(r123): [159..161]
 a46(r189): [159..165]
 a47(r106): [284..286] [247..261] [159..172]
 a48(r136 [0]): [284..286] [247..252] [159..168]
 a48(r136 [1]): [284..286] [247..252] [159..168]
 a49(r135 [0]): [168..170]
 a49(r135 [1]): [168..170]
 a50(r104 [0]): [255..259] [168..172]
 a50(r104 [1]): [255..259] [168..172]
 a51(r320): [280..281]
 a52(r317): [176..179]
 a53(r318): [179..180]
 a54(r83): [287..754]
 a55(r106): [314..337]
 a56(r123): [287..754]
 a57(r136 [0]): [287..754]
 a57(r136 [1]): [287..754]
 a58(r189): [298..330]
 a59(r450): [306..339]
 a60(r456): [287..754]
 a61(r451): [333..343]
 a62(r186): [732..754] [531..547] [295..295]
 a63(r112 [0]): [729..754] [602..725] [437..593] [367..369] [287..311]
 a63(r112 [1]): [729..754] [602..725] [437..593] [367..369] [287..311]
 a64(r448): [729..754] [550..556] [293..297]
 a65(r165): [450..454] [287..292]
 a66(r181): [579..601] [445..447] [359..438] [352..354] [287..287]
 a67(r433): [412..420] [355..363]
 a68(r434): [594..601] [383..418]
 a69(r254): [429..444]
 a70(r424): [431..432]
 a71(r209): [571..578] [467..540] [460..462]
 a72(r435): [514..522] [463..471]
 a73(r436): [571..578] [485..520]
 a74(r422): [533..534]
 a75(r117 [0]): [750..754] [734..746] [539..558] [295..297]
 a75(r117 [1]): [750..754] [734..746] [539..558] [295..297]
 a76(r113 [0]): [602..725] [559..570] [298..309]
 a76(r113 [1]): [602..725] [559..570] [298..309]
 a77(r203): [703..725] [698..700] [612..691] [605..607] [298..298]
 a78(r427): [602..725] [563..570] [298..307]
 a79(r428): [602..725] [569..570] [298..305]
 a80(r437): [665..673] [608..616]
 a81(r438): [718..725] [636..671]
 a82(r258): [682..697]
 a83(r421): [684..685]
 a84(r386): [377..378]
 a85(r229): [599..601] [594..596] [390..401] [379..387]
 a86(r445): [599..601] [393..399]
 a87(r374): [479..480]
 a88(r212): [576..578] [571..573] [492..503] [481..489]
 a89(r443): [576..578] [495..501]
 a90(r187): [550..554] [295..297]
 a91(r366 [0]): [559..562]
 a91(r366 [1]): [559..562]
 a92(r365): [561..564]
 a93(r364): [565..566]
 a94(r363): [565..568]
 a95(r356): [630..631]
 a96(r120): [723..725] [718..720] [643..654] [632..640]
 a97(r441): [723..725] [646..652]
 a98(r345 [0]): [312..317]
 a98(r345 [1]): [312..317]
 a99(r347 [0]): [312..313]
 a99(r347 [1]): [312..313]
 a100(r344): [316..319]
 a101(r339): [318..325]
 a102(r342): [320..321]
 a103(r340): [320..323]
 a104(r83): [755..782]
 a105(r112 [0]): [755..782]
 a105(r112 [1]): [755..782]
 a106(r123): [755..782]
 a107(r136 [0]): [755..782]
 a107(r136 [1]): [755..782]
 a108(r165): [755..782]
 a109(r181): [775..782] [755..772]
 a110(r456): [755..782]
 a111(r83): [783..810]
 a112(r112 [0]): [783..810]
 a112(r112 [1]): [783..810]
 a113(r117 [0]): [783..810]
 a113(r117 [1]): [783..810]
 a114(r123): [783..810]
 a115(r136 [0]): [783..810]
 a115(r136 [1]): [783..810]
 a116(r186): [803..810] [783..800]
 a117(r187): [783..810]
 a118(r448): [783..810]
 a119(r456): [783..810]
 a120(r83): [811..838]
 a121(r112 [0]): [811..838]
 a121(r112 [1]): [811..838]
 a122(r113 [0]): [811..838]
 a122(r113 [1]): [811..838]
 a123(r123): [811..838]
 a124(r136 [0]): [811..838]
 a124(r136 [1]): [811..838]
 a125(r189): [811..838]
 a126(r203): [831..838] [811..828]
 a127(r427): [811..838]
 a128(r428): [811..838]
 a129(r456): [811..838]
 a130(r104 [0]): [839..871]
 a130(r104 [1]): [839..871]
 a131(r106): [839..871]
 a132(r135 [0]): [839..871]
 a132(r135 [1]): [859..871] [839..854]
 a133(r136 [0]): [839..871]
 a133(r136 [1]): [870..871] [839..863]
 a134(r451): [839..871]
 a135(r456): [839..871]
 a136(r334): [853..856]
 a137(r332): [857..858]
 a138(r330): [862..865]
 a139(r329): [866..867]
 a140(r328): [866..869]
 a141(r439): [842..843]
 a142(r101): [872..892]
 a143(r449): [872..892]
 a144(r457): [872..892]
 a145(r315 [0]): [879..880]
 a145(r315 [1]): [879..880]
 a146(r312 [0]): [881..884]
 a146(r312 [1]): [881..884]
 a147(r304 [0]): [881..888]
 a147(r304 [1]): [881..888]
 a148(r307): [883..886]
 a149(r305): [889..890]
 a150(r94): [893..913]
 a151(r240): [893..913]
 a152(r449): [893..913]
 a153(r458): [893..913]
 a154(r301 [0]): [900..901]
 a154(r301 [1]): [900..901]
 a155(r298 [0]): [902..905]
 a155(r298 [1]): [902..905]
 a156(r290 [0]): [902..909]
 a156(r290 [1]): [902..909]
 a157(r293): [904..907]
 a158(r291): [910..911]
 a159(r87): [914..965]
 a160(r460): [914..965]
 a161(r449): [945..949]
 a162(r175 [0]): [958..965] [914..916]
 a162(r175 [1]): [962..965] [914..916]
 a163(r167): [914..938]
 a164(r431): [958..965] [924..929] [914..921]
 a165(r432): [964..965] [924..927] [914..919]
 a166(r286 [0]): [954..957]
 a166(r286 [1]): [955..957]
 a167(r285): [956..959]
 a168(r284): [960..961]
 a169(r283): [960..963]
 a170(r274): [935..936]
 a171(r84): [937..940]
 a172(r87): [966..992]
 a173(r167): [985..992] [966..972]
 a174(r175 [0]): [989..992] [966..978]
 a174(r175 [1]): [989..992] [966..978]
 a175(r431): [966..992]
 a176(r432): [966..992]
 a177(r460): [966..992]
 a178(r281): [969..970]
 a179(r176): [971..974]
 a180(r174 [0]): [979..980]
 a180(r174 [1]): [979..980]
 a181(r279 [0]): [981..982]
 a181(r279 [1]): [981..982]
 a182(r278 [0]): [981..986]
 a182(r278 [1]): [981..986]
 a183(r280): [983..984]
 a184(r277 [0]): [987..988]
 a184(r277 [1]): [987..988]
 a185(r276 [0]): [987..990]
 a185(r276 [1]): [987..990]
 a186(r87): [993..1013]
 a187(r167): [1008..1013] [993..999]
 a188(r431): [993..1013]
 a189(r432): [993..1013]
 a190(r460): [993..1013]
 a191(r275): [996..997]
 a192(r166): [998..1001]
 a193(r151): [1033..1040] [1014..1020]
 a194(r159 [0]): [1037..1040] [1014..1026]
 a194(r159 [1]): [1037..1040] [1014..1026]
 a195(r429): [1014..1040]
 a196(r430): [1014..1040]
 a197(r268): [1017..1018]
 a198(r160): [1019..1022]
 a199(r158 [0]): [1027..1028]
 a199(r158 [1]): [1027..1028]
 a200(r266 [0]): [1029..1030]
 a200(r266 [1]): [1029..1030]
 a201(r265 [0]): [1029..1034]
 a201(r265 [1]): [1029..1034]
 a202(r267): [1031..1032]
 a203(r264 [0]): [1035..1036]
 a203(r264 [1]): [1035..1036]
 a204(r263 [0]): [1035..1038]
 a204(r263 [1]): [1035..1038]
 a205(r151): [1056..1061] [1041..1047]
 a206(r429): [1041..1061]
 a207(r430): [1041..1061]
 a208(r461): [1041..1061]
 a209(r262): [1044..1045]
 a210(r150): [1046..1049]
Compressing live ranges: from 1062 to 280 - 26%
Ranges after the compression:
 a0(r159 [0]): [26..33] [0..1]
 a0(r159 [1]): [30..33] [0..1]
 a1(r151): [34..40] [0..1]
 a2(r429): [26..36] [0..1]
 a3(r430): [32..36] [0..1]
 a4(r412): [2..3]
 a5(r132): [2..3]
 a6(r409): [4..5]
 a7(r129): [2..7]
 a8(r410): [6..7]
 a9(r252): [8..15]
 a10(r406): [8..9]
 a11(r403): [10..11]
 a12(r404): [12..13]
 a13(r449): [14..19]
 a14(r456): [14..15]
 a15(r125): [14..15]
 a16(r457): [16..16]
 a17(r101): [16..17]
 a18(r458): [18..18]
 a19(r94): [18..19]
 a20(r240): [18..19]
 a21(r460): [20..20]
 a22(r87): [20..21]
 a23(r85): [22..23]
 a24(r272 [0]): [22..25]
 a24(r272 [1]): [24..25]
 a25(r271): [24..27]
 a26(r270): [28..29]
 a27(r269): [28..31]
 a28(r461): [35..35]
 a29(r261): [37..38]
 a30(r149): [39..40]
 a31(r129): [49..50] [41..46]
 a32(r132): [41..50]
 a33(r420): [41..42]
 a34(r417): [43..44]
 a35(r418): [45..46]
 a36(r414): [47..48]
 a37(r125): [59..60]
 a38(r252): [69..70] [56..66]
 a39(r449): [56..66]
 a40(r456): [51..78]
 a41(r451): [77..78] [69..74] [61..66] [52..57]
 a42(r83): [69..70] [63..64] [51..53]
 a43(r397): [67..68]
 a44(r450): [51..51]
 a45(r123): [51..53]
 a46(r189): [51..53]
 a47(r106): [77..78] [71..74] [51..55]
 a48(r136 [0]): [77..78] [71..72] [51..54]
 a48(r136 [1]): [77..78] [71..72] [51..54]
 a49(r135 [0]): [54..55]
 a49(r135 [1]): [54..55]
 a50(r104 [0]): [73..74] [54..55]
 a50(r104 [1]): [73..74] [54..55]
 a51(r320): [75..76]
 a52(r317): [56..58]
 a53(r318): [58..59]
 a54(r83): [79..179]
 a55(r106): [90..97]
 a56(r123): [79..179]
 a57(r136 [0]): [79..179]
 a57(r136 [1]): [79..179]
 a58(r189): [84..95]
 a59(r450): [86..97]
 a60(r456): [79..179]
 a61(r451): [96..97]
 a62(r186): [176..179] [132..135] [82..82]
 a63(r112 [0]): [156..179] [114..151] [102..103] [79..87]
 a63(r112 [1]): [156..179] [114..151] [102..103] [79..87]
 a64(r448): [176..179] [136..137] [81..83]
 a65(r165): [118..119] [79..80]
 a66(r181): [150..155] [98..117] [79..79]
 a67(r433): [110..111] [100..101]
 a68(r434): [152..155] [106..111]
 a69(r254): [112..115]
 a70(r424): [112..113]
 a71(r209): [146..149] [120..135]
 a72(r435): [130..131] [122..123]
 a73(r436): [146..149] [126..131]
 a74(r422): [132..133]
 a75(r117 [0]): [176..179] [134..137] [82..83]
 a75(r117 [1]): [176..179] [134..137] [82..83]
 a76(r113 [0]): [156..175] [138..145] [84..87]
 a76(r113 [1]): [156..175] [138..145] [84..87]
 a77(r203): [156..175] [84..84]
 a78(r427): [156..175] [140..145] [84..87]
 a79(r428): [156..175] [144..145] [84..85]
 a80(r437): [166..167] [158..159]
 a81(r438): [172..175] [162..167]
 a82(r258): [168..169]
 a83(r421): [168..169]
 a84(r386): [104..105]
 a85(r229): [152..155] [106..109]
 a86(r445): [154..155] [108..109]
 a87(r374): [124..125]
 a88(r212): [146..149] [126..129]
 a89(r443): [148..149] [128..129]
 a90(r187): [136..137] [82..83]
 a91(r366 [0]): [138..139]
 a91(r366 [1]): [138..139]
 a92(r365): [138..141]
 a93(r364): [142..143]
 a94(r363): [142..143]
 a95(r356): [160..161]
 a96(r120): [172..175] [162..165]
 a97(r441): [174..175] [164..165]
 a98(r345 [0]): [88..91]
 a98(r345 [1]): [88..91]
 a99(r347 [0]): [88..89]
 a99(r347 [1]): [88..89]
 a100(r344): [90..93]
 a101(r339): [92..95]
 a102(r342): [94..95]
 a103(r340): [94..95]
 a104(r83): [180..183]
 a105(r112 [0]): [180..183]
 a105(r112 [1]): [180..183]
 a106(r123): [180..183]
 a107(r136 [0]): [180..183]
 a107(r136 [1]): [180..183]
 a108(r165): [180..183]
 a109(r181): [180..183]
 a110(r456): [180..183]
 a111(r83): [184..187]
 a112(r112 [0]): [184..187]
 a112(r112 [1]): [184..187]
 a113(r117 [0]): [184..187]
 a113(r117 [1]): [184..187]
 a114(r123): [184..187]
 a115(r136 [0]): [184..187]
 a115(r136 [1]): [184..187]
 a116(r186): [184..187]
 a117(r187): [184..187]
 a118(r448): [184..187]
 a119(r456): [184..187]
 a120(r83): [188..191]
 a121(r112 [0]): [188..191]
 a121(r112 [1]): [188..191]
 a122(r113 [0]): [188..191]
 a122(r113 [1]): [188..191]
 a123(r123): [188..191]
 a124(r136 [0]): [188..191]
 a124(r136 [1]): [188..191]
 a125(r189): [188..191]
 a126(r203): [188..191]
 a127(r427): [188..191]
 a128(r428): [188..191]
 a129(r456): [188..191]
 a130(r104 [0]): [192..203]
 a130(r104 [1]): [192..203]
 a131(r106): [192..203]
 a132(r135 [0]): [192..203]
 a132(r135 [1]): [198..203] [192..195]
 a133(r136 [0]): [192..203]
 a133(r136 [1]): [202..203] [192..199]
 a134(r451): [192..203]
 a135(r456): [192..203]
 a136(r334): [194..195]
 a137(r332): [196..197]
 a138(r330): [198..199]
 a139(r329): [200..201]
 a140(r328): [200..201]
 a141(r439): [192..193]
 a142(r101): [204..209]
 a143(r449): [204..209]
 a144(r457): [204..209]
 a145(r315 [0]): [204..205]
 a145(r315 [1]): [204..205]
 a146(r312 [0]): [206..207]
 a146(r312 [1]): [206..207]
 a147(r304 [0]): [206..207]
 a147(r304 [1]): [206..207]
 a148(r307): [206..207]
 a149(r305): [208..209]
 a150(r94): [210..215]
 a151(r240): [210..215]
 a152(r449): [210..215]
 a153(r458): [210..215]
 a154(r301 [0]): [210..211]
 a154(r301 [1]): [210..211]
 a155(r298 [0]): [212..213]
 a155(r298 [1]): [212..213]
 a156(r290 [0]): [212..213]
 a156(r290 [1]): [212..213]
 a157(r293): [212..213]
 a158(r291): [214..215]
 a159(r87): [216..235]
 a160(r460): [216..235]
 a161(r449): [224..225]
 a162(r175 [0]): [228..235] [216..217]
 a162(r175 [1]): [232..235] [216..217]
 a163(r167): [216..223]
 a164(r431): [228..235] [216..219]
 a165(r432): [234..235] [216..219]
 a166(r286 [0]): [226..227]
 a166(r286 [1]): [226..227]
 a167(r285): [226..229]
 a168(r284): [230..231]
 a169(r283): [230..233]
 a170(r274): [220..221]
 a171(r84): [222..223]
 a172(r87): [236..251]
 a173(r167): [246..251] [236..239]
 a174(r175 [0]): [250..251] [236..239]
 a174(r175 [1]): [250..251] [236..239]
 a175(r431): [236..251]
 a176(r432): [236..251]
 a177(r460): [236..251]
 a178(r281): [236..237]
 a179(r176): [238..239]
 a180(r174 [0]): [240..241]
 a180(r174 [1]): [240..241]
 a181(r279 [0]): [242..243]
 a181(r279 [1]): [242..243]
 a182(r278 [0]): [242..247]
 a182(r278 [1]): [242..247]
 a183(r280): [244..245]
 a184(r277 [0]): [248..249]
 a184(r277 [1]): [248..249]
 a185(r276 [0]): [248..251]
 a185(r276 [1]): [248..251]
 a186(r87): [252..257]
 a187(r167): [252..257]
 a188(r431): [252..257]
 a189(r432): [252..257]
 a190(r460): [252..257]
 a191(r275): [252..253]
 a192(r166): [254..255]
 a193(r151): [268..273] [258..261]
 a194(r159 [0]): [272..273] [258..261]
 a194(r159 [1]): [272..273] [258..261]
 a195(r429): [258..273]
 a196(r430): [258..273]
 a197(r268): [258..259]
 a198(r160): [260..261]
 a199(r158 [0]): [262..263]
 a199(r158 [1]): [262..263]
 a200(r266 [0]): [264..265]
 a200(r266 [1]): [264..265]
 a201(r265 [0]): [264..269]
 a201(r265 [1]): [264..269]
 a202(r267): [266..267]
 a203(r264 [0]): [270..271]
 a203(r264 [1]): [270..271]
 a204(r263 [0]): [270..273]
 a204(r263 [1]): [270..273]
 a205(r151): [274..279]
 a206(r429): [274..279]
 a207(r430): [274..279]
 a208(r461): [274..279]
 a209(r262): [274..275]
 a210(r150): [276..277]
    Creating cap  a211(r420,l0: a33(r420,l14))
    Creating cap  a212(r417,l0: a34(r417,l14))
    Creating cap  a213(r418,l0: a35(r418,l14))
    Creating cap  a214(r414,l0: a36(r414,l14))
    Creating cap  a215(r451,l0: a41(r451,l8))
    Creating cap  a216(r83,l0: a42(r83,l8))
    Creating cap  a217(r397,l0: a43(r397,l8))
    Creating cap  a218(r450,l0: a44(r450,l8))
    Creating cap  a219(r123,l0: a45(r123,l8))
    Creating cap  a220(r189,l0: a46(r189,l8))
    Creating cap  a221(r106,l0: a47(r106,l8))
    Creating cap  a222(r136,l0: a48(r136,l8))
    Creating cap  a223(r135,l0: a49(r135,l8))
    Creating cap  a224(r104,l0: a50(r104,l8))
    Creating cap  a225(r320,l0: a51(r320,l8))
    Creating cap  a226(r317,l0: a52(r317,l8))
    Creating cap  a227(r318,l0: a53(r318,l8))
    Creating cap  a228(r186,l8: a62(r186,l10))
    Creating cap  a229(r112,l8: a63(r112,l10))
    Creating cap  a230(r448,l8: a64(r448,l10))
    Creating cap  a231(r165,l8: a65(r165,l10))
    Creating cap  a232(r181,l8: a66(r181,l10))
    Creating cap  a233(r433,l8: a67(r433,l10))
    Creating cap  a234(r434,l8: a68(r434,l10))
    Creating cap  a235(r254,l8: a69(r254,l10))
    Creating cap  a236(r424,l8: a70(r424,l10))
    Creating cap  a237(r209,l8: a71(r209,l10))
    Creating cap  a238(r435,l8: a72(r435,l10))
    Creating cap  a239(r436,l8: a73(r436,l10))
    Creating cap  a240(r422,l8: a74(r422,l10))
    Creating cap  a241(r117,l8: a75(r117,l10))
    Creating cap  a242(r113,l8: a76(r113,l10))
    Creating cap  a243(r203,l8: a77(r203,l10))
    Creating cap  a244(r427,l8: a78(r427,l10))
    Creating cap  a245(r428,l8: a79(r428,l10))
    Creating cap  a246(r437,l8: a80(r437,l10))
    Creating cap  a247(r438,l8: a81(r438,l10))
    Creating cap  a248(r258,l8: a82(r258,l10))
    Creating cap  a249(r421,l8: a83(r421,l10))
    Creating cap  a250(r386,l8: a84(r386,l10))
    Creating cap  a251(r229,l8: a85(r229,l10))
    Creating cap  a252(r445,l8: a86(r445,l10))
    Creating cap  a253(r374,l8: a87(r374,l10))
    Creating cap  a254(r212,l8: a88(r212,l10))
    Creating cap  a255(r443,l8: a89(r443,l10))
    Creating cap  a256(r187,l8: a90(r187,l10))
    Creating cap  a257(r366,l8: a91(r366,l10))
    Creating cap  a258(r365,l8: a92(r365,l10))
    Creating cap  a259(r364,l8: a93(r364,l10))
    Creating cap  a260(r363,l8: a94(r363,l10))
    Creating cap  a261(r356,l8: a95(r356,l10))
    Creating cap  a262(r120,l8: a96(r120,l10))
    Creating cap  a263(r441,l8: a97(r441,l10))
    Creating cap  a264(r345,l8: a98(r345,l10))
    Creating cap  a265(r347,l8: a99(r347,l10))
    Creating cap  a266(r344,l8: a100(r344,l10))
    Creating cap  a267(r339,l8: a101(r339,l10))
    Creating cap  a268(r342,l8: a102(r342,l10))
    Creating cap  a269(r340,l8: a103(r340,l10))
    Creating cap  a270(r334,l8: a136(r334,l9))
    Creating cap  a271(r332,l8: a137(r332,l9))
    Creating cap  a272(r330,l8: a138(r330,l9))
    Creating cap  a273(r329,l8: a139(r329,l9))
    Creating cap  a274(r328,l8: a140(r328,l9))
    Creating cap  a275(r439,l8: a141(r439,l9))
    Creating cap  a276(r315,l0: a145(r315,l7))
    Creating cap  a277(r312,l0: a146(r312,l7))
    Creating cap  a278(r304,l0: a147(r304,l7))
    Creating cap  a279(r307,l0: a148(r307,l7))
    Creating cap  a280(r305,l0: a149(r305,l7))
    Creating cap  a281(r301,l0: a154(r301,l6))
    Creating cap  a282(r298,l0: a155(r298,l6))
    Creating cap  a283(r290,l0: a156(r290,l6))
    Creating cap  a284(r293,l0: a157(r293,l6))
    Creating cap  a285(r291,l0: a158(r291,l6))
    Creating cap  a286(r175,l0: a162(r175,l3))
    Creating cap  a287(r167,l0: a163(r167,l3))
    Creating cap  a288(r431,l0: a164(r431,l3))
    Creating cap  a289(r432,l0: a165(r432,l3))
    Creating cap  a290(r286,l0: a166(r286,l3))
    Creating cap  a291(r285,l0: a167(r285,l3))
    Creating cap  a292(r284,l0: a168(r284,l3))
    Creating cap  a293(r283,l0: a169(r283,l3))
    Creating cap  a294(r274,l0: a170(r274,l3))
    Creating cap  a295(r84,l0: a171(r84,l3))
    Creating cap  a296(r281,l3: a178(r281,l5))
    Creating cap  a297(r176,l3: a179(r176,l5))
    Creating cap  a298(r174,l3: a180(r174,l5))
    Creating cap  a299(r279,l3: a181(r279,l5))
    Creating cap  a300(r278,l3: a182(r278,l5))
    Creating cap  a301(r280,l3: a183(r280,l5))
    Creating cap  a302(r277,l3: a184(r277,l5))
    Creating cap  a303(r276,l3: a185(r276,l5))
    Creating cap  a304(r275,l3: a191(r275,l4))
    Creating cap  a305(r166,l3: a192(r166,l4))
    Creating cap  a306(r268,l0: a197(r268,l2))
    Creating cap  a307(r160,l0: a198(r160,l2))
    Creating cap  a308(r158,l0: a199(r158,l2))
    Creating cap  a309(r266,l0: a200(r266,l2))
    Creating cap  a310(r265,l0: a201(r265,l2))
    Creating cap  a311(r267,l0: a202(r267,l2))
    Creating cap  a312(r264,l0: a203(r264,l2))
    Creating cap  a313(r263,l0: a204(r263,l2))
    Creating cap  a314(r262,l0: a209(r262,l1))
    Creating cap  a315(r150,l0: a210(r150,l1))
    Creating cap  a316(r186,l0: a228(r186,l8: a62(r186,l10)))
    Creating cap  a317(r112,l0: a229(r112,l8: a63(r112,l10)))
    Creating cap  a318(r448,l0: a230(r448,l8: a64(r448,l10)))
    Creating cap  a319(r165,l0: a231(r165,l8: a65(r165,l10)))
    Creating cap  a320(r181,l0: a232(r181,l8: a66(r181,l10)))
    Creating cap  a321(r433,l0: a233(r433,l8: a67(r433,l10)))
    Creating cap  a322(r434,l0: a234(r434,l8: a68(r434,l10)))
    Creating cap  a323(r254,l0: a235(r254,l8: a69(r254,l10)))
    Creating cap  a324(r424,l0: a236(r424,l8: a70(r424,l10)))
    Creating cap  a325(r209,l0: a237(r209,l8: a71(r209,l10)))
    Creating cap  a326(r435,l0: a238(r435,l8: a72(r435,l10)))
    Creating cap  a327(r436,l0: a239(r436,l8: a73(r436,l10)))
    Creating cap  a328(r422,l0: a240(r422,l8: a74(r422,l10)))
    Creating cap  a329(r117,l0: a241(r117,l8: a75(r117,l10)))
    Creating cap  a330(r113,l0: a242(r113,l8: a76(r113,l10)))
    Creating cap  a331(r203,l0: a243(r203,l8: a77(r203,l10)))
    Creating cap  a332(r427,l0: a244(r427,l8: a78(r427,l10)))
    Creating cap  a333(r428,l0: a245(r428,l8: a79(r428,l10)))
    Creating cap  a334(r437,l0: a246(r437,l8: a80(r437,l10)))
    Creating cap  a335(r438,l0: a247(r438,l8: a81(r438,l10)))
    Creating cap  a336(r258,l0: a248(r258,l8: a82(r258,l10)))
    Creating cap  a337(r421,l0: a249(r421,l8: a83(r421,l10)))
    Creating cap  a338(r386,l0: a250(r386,l8: a84(r386,l10)))
    Creating cap  a339(r229,l0: a251(r229,l8: a85(r229,l10)))
    Creating cap  a340(r445,l0: a252(r445,l8: a86(r445,l10)))
    Creating cap  a341(r374,l0: a253(r374,l8: a87(r374,l10)))
    Creating cap  a342(r212,l0: a254(r212,l8: a88(r212,l10)))
    Creating cap  a343(r443,l0: a255(r443,l8: a89(r443,l10)))
    Creating cap  a344(r187,l0: a256(r187,l8: a90(r187,l10)))
    Creating cap  a345(r366,l0: a257(r366,l8: a91(r366,l10)))
    Creating cap  a346(r365,l0: a258(r365,l8: a92(r365,l10)))
    Creating cap  a347(r364,l0: a259(r364,l8: a93(r364,l10)))
    Creating cap  a348(r363,l0: a260(r363,l8: a94(r363,l10)))
    Creating cap  a349(r356,l0: a261(r356,l8: a95(r356,l10)))
    Creating cap  a350(r120,l0: a262(r120,l8: a96(r120,l10)))
    Creating cap  a351(r441,l0: a263(r441,l8: a97(r441,l10)))
    Creating cap  a352(r345,l0: a264(r345,l8: a98(r345,l10)))
    Creating cap  a353(r347,l0: a265(r347,l8: a99(r347,l10)))
    Creating cap  a354(r344,l0: a266(r344,l8: a100(r344,l10)))
    Creating cap  a355(r339,l0: a267(r339,l8: a101(r339,l10)))
    Creating cap  a356(r342,l0: a268(r342,l8: a102(r342,l10)))
    Creating cap  a357(r340,l0: a269(r340,l8: a103(r340,l10)))
    Creating cap  a358(r334,l0: a270(r334,l8: a136(r334,l9)))
    Creating cap  a359(r332,l0: a271(r332,l8: a137(r332,l9)))
    Creating cap  a360(r330,l0: a272(r330,l8: a138(r330,l9)))
    Creating cap  a361(r329,l0: a273(r329,l8: a139(r329,l9)))
    Creating cap  a362(r328,l0: a274(r328,l8: a140(r328,l9)))
    Creating cap  a363(r439,l0: a275(r439,l8: a141(r439,l9)))
    Creating cap  a364(r281,l0: a296(r281,l3: a178(r281,l5)))
    Creating cap  a365(r176,l0: a297(r176,l3: a179(r176,l5)))
    Creating cap  a366(r174,l0: a298(r174,l3: a180(r174,l5)))
    Creating cap  a367(r279,l0: a299(r279,l3: a181(r279,l5)))
    Creating cap  a368(r278,l0: a300(r278,l3: a182(r278,l5)))
    Creating cap  a369(r280,l0: a301(r280,l3: a183(r280,l5)))
    Creating cap  a370(r277,l0: a302(r277,l3: a184(r277,l5)))
    Creating cap  a371(r276,l0: a303(r276,l3: a185(r276,l5)))
    Creating cap  a372(r275,l0: a304(r275,l3: a191(r275,l4)))
    Creating cap  a373(r166,l0: a305(r166,l3: a192(r166,l4)))
+++Allocating 18656 bytes for conflict table (uncompressed size 29120)
;; a0(r159,l0) conflicts:
;;   subobject 0: a1(r151,l0) a2(r429,l0) a3(r430,l0) a25(r271,l0) a26(r270,l0) a27(r269,l0) a306(r268,l0) a307(r160,l0) a313(r263,w0,l0) a313(r263,w1,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:


;;   subobject 1: a1(r151,l0) a2(r429,l0) a3(r430,l0) a27(r269,l0) a306(r268,l0) a307(r160,l0) a313(r263,w0,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a1(r151,l0) conflicts: a0(r159,w1,l0) a0(r159,w0,l0) a2(r429,l0) a3(r430,l0) a28(r461,l0) a29(r261,l0) a30(r149,l0) a306(r268,l0) a307(r160,l0) a310(r265,w0,l0) a310(r265,w1,l0) a312(r264,w1,l0) a312(r264,w0,l0) a313(r263,w0,l0) a313(r263,w1,l0) a314(r262,l0) a315(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r429,l0) conflicts: a0(r159,w1,l0) a0(r159,w0,l0) a1(r151,l0) a3(r430,l0) a25(r271,l0) a26(r270,l0) a27(r269,l0) a28(r461,l0) a306(r268,l0) a307(r160,l0) a308(r158,w1,l0) a308(r158,w0,l0) a309(r266,w1,l0) a309(r266,w0,l0) a310(r265,w0,l0) a310(r265,w1,l0) a311(r267,l0) a312(r264,w1,l0) a312(r264,w0,l0) a313(r263,w0,l0) a313(r263,w1,l0) a314(r262,l0) a315(r150,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a3(r430,l0) conflicts: a0(r159,w1,l0) a0(r159,w0,l0) a1(r151,l0) a2(r429,l0) a28(r461,l0) a306(r268,l0) a307(r160,l0) a308(r158,w1,l0) a308(r158,w0,l0) a309(r266,w1,l0) a309(r266,w0,l0) a310(r265,w0,l0) a310(r265,w1,l0) a311(r267,l0) a312(r264,w1,l0) a312(r264,w0,l0) a313(r263,w0,l0) a313(r263,w1,l0) a314(r262,l0) a315(r150,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a4(r412,l0) conflicts: a5(r132,l0) a7(r129,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r132,l0) conflicts: a4(r412,l0) a7(r129,l0) a211(r420,l0) a212(r417,l0) a214(r414,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a6(r409,l0) conflicts: a7(r129,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a7(r129,l0) conflicts: a4(r412,l0) a5(r132,l0) a6(r409,l0) a211(r420,l0) a212(r417,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a8(r410,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a9(r252,l0) conflicts: a10(r406,l0) a11(r403,l0) a12(r404,l0) a15(r125,l0) a14(r456,l0) a13(r449,l0) a216(r83,l0) a215(r451,l0) a226(r317,l0) a227(r318,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a10(r406,l0) conflicts: a9(r252,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a11(r403,l0) conflicts: a9(r252,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a12(r404,l0) conflicts: a9(r252,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r449,l0) conflicts: a9(r252,l0) a15(r125,l0) a14(r456,l0) a16(r457,l0) a17(r101,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0) a21(r460,l0) a22(r87,l0) a216(r83,l0) a215(r451,l0) a226(r317,l0) a227(r318,l0) a276(r315,w0,l0) a276(r315,w1,l0) a277(r312,w0,l0) a277(r312,w1,l0) a278(r304,w0,l0) a278(r304,w1,l0) a279(r307,l0) a280(r305,l0) a281(r301,w1,l0) a281(r301,w0,l0) a282(r298,w0,l0) a282(r298,w1,l0) a283(r290,w0,l0) a283(r290,w1,l0) a284(r293,l0) a285(r291,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs:

;; a14(r456,l0) conflicts: a9(r252,l0) a15(r125,l0) a13(r449,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0) a226(r317,l0) a227(r318,l0) a217(r397,l0) a225(r320,l0) a319(r165,l0) a320(r181,l0) a317(r112,w0,l0) a317(r112,w1,l0) a318(r448,l0) a316(r186,l0) a329(r117,w0,l0) a329(r117,w1,l0) a344(r187,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a353(r347,w0,l0) a353(r347,w1,l0) a352(r345,w0,l0) a352(r345,w1,l0) a354(r344,l0) a355(r339,l0) a356(r342,l0) a357(r340,l0) a321(r433,l0) a338(r386,l0) a322(r434,l0) a339(r229,l0) a340(r445,l0) a324(r424,l0) a323(r254,l0) a325(r209,l0) a326(r435,l0) a341(r374,l0) a327(r436,l0) a342(r212,l0) a343(r443,l0) a328(r422,l0) a345(r366,w0,l0) a345(r366,w1,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0) a363(r439,l0) a358(r334,l0) a359(r332,l0) a360(r330,l0) a361(r329,l0) a362(r328,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:

;; a15(r125,l0) conflicts: a9(r252,l0) a14(r456,l0) a13(r449,l0) a227(r318,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a16(r457,l0) conflicts: a13(r449,l0) a17(r101,l0) a276(r315,w0,l0) a276(r315,w1,l0) a277(r312,w0,l0) a277(r312,w1,l0) a278(r304,w0,l0) a278(r304,w1,l0) a279(r307,l0) a280(r305,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a17(r101,l0) conflicts: a13(r449,l0) a16(r457,l0) a276(r315,w0,l0) a276(r315,w1,l0) a277(r312,w0,l0) a277(r312,w1,l0) a278(r304,w0,l0) a278(r304,w1,l0) a279(r307,l0) a280(r305,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a18(r458,l0) conflicts: a13(r449,l0) a19(r94,l0) a20(r240,l0) a281(r301,w1,l0) a281(r301,w0,l0) a282(r298,w0,l0) a282(r298,w1,l0) a283(r290,w0,l0) a283(r290,w1,l0) a284(r293,l0) a285(r291,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a19(r94,l0) conflicts: a13(r449,l0) a18(r458,l0) a20(r240,l0) a281(r301,w1,l0) a281(r301,w0,l0) a282(r298,w0,l0) a282(r298,w1,l0) a283(r290,w0,l0) a283(r290,w1,l0) a284(r293,l0) a285(r291,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a20(r240,l0) conflicts: a13(r449,l0) a18(r458,l0) a19(r94,l0) a281(r301,w1,l0) a281(r301,w0,l0) a282(r298,w0,l0) a282(r298,w1,l0) a283(r290,w0,l0) a283(r290,w1,l0) a284(r293,l0) a285(r291,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a21(r460,l0) conflicts: a13(r449,l0) a22(r87,l0) a286(r175,w1,l0) a286(r175,w0,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a294(r274,l0) a295(r84,l0) a290(r286,w0,l0) a290(r286,w1,l0) a291(r285,l0) a292(r284,l0) a293(r283,l0) a364(r281,l0) a365(r176,l0) a366(r174,w1,l0) a366(r174,w0,l0) a367(r279,w1,l0) a367(r279,w0,l0) a368(r278,w0,l0) a368(r278,w1,l0) a369(r280,l0) a370(r277,w0,l0) a370(r277,w1,l0) a371(r276,w1,l0) a371(r276,w0,l0) a372(r275,l0) a373(r166,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a22(r87,l0) conflicts: a13(r449,l0) a21(r460,l0) a286(r175,w1,l0) a286(r175,w0,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a294(r274,l0) a295(r84,l0) a290(r286,w0,l0) a290(r286,w1,l0) a291(r285,l0) a292(r284,l0) a293(r283,l0) a364(r281,l0) a365(r176,l0) a366(r174,w1,l0) a366(r174,w0,l0) a367(r279,w1,l0) a367(r279,w0,l0) a368(r278,w0,l0) a368(r278,w1,l0) a369(r280,l0) a370(r277,w0,l0) a370(r277,w1,l0) a371(r276,w1,l0) a371(r276,w0,l0) a372(r275,l0) a373(r166,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a23(r85,l0) conflicts: a24(r272,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a24(r272,l0) conflicts:
;;   subobject 0: a23(r85,l0) a25(r271,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a25(r271,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a25(r271,l0) conflicts: a0(r159,w0,l0) a2(r429,l0) a24(r272,w0,l0) a24(r272,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a26(r270,l0) conflicts: a0(r159,w0,l0) a2(r429,l0) a27(r269,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a27(r269,l0) conflicts: a0(r159,w1,l0) a0(r159,w0,l0) a2(r429,l0) a26(r270,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a28(r461,l0) conflicts: a1(r151,l0) a2(r429,l0) a3(r430,l0) a314(r262,l0) a315(r150,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a29(r261,l0) conflicts: a1(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a30(r149,l0) conflicts: a1(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a31(r129,l14) conflicts: a33(r420,l14) a32(r132,l14) a34(r417,l14)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a32(r132,l14) conflicts: a33(r420,l14) a31(r129,l14) a34(r417,l14) a36(r414,l14)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a33(r420,l14) conflicts: a31(r129,l14) a32(r132,l14)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a34(r417,l14) conflicts: a31(r129,l14) a32(r132,l14)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a35(r418,l14) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a36(r414,l14) conflicts: a32(r132,l14)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a37(r125,l8) conflicts: a40(r456,l8) a39(r449,l8) a38(r252,l8) a53(r318,l8)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a38(r252,l8) conflicts: a42(r83,l8) a40(r456,l8) a41(r451,l8) a52(r317,l8) a39(r449,l8) a53(r318,l8) a37(r125,l8)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a39(r449,l8) conflicts: a42(r83,l8) a40(r456,l8) a41(r451,l8) a52(r317,l8) a38(r252,l8) a53(r318,l8) a37(r125,l8)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a40(r456,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8) a52(r317,l8) a39(r449,l8) a38(r252,l8) a53(r318,l8) a37(r125,l8) a43(r397,l8) a51(r320,l8) a231(r165,l8) a232(r181,l8) a229(r112,w0,l8) a229(r112,w1,l8) a230(r448,l8) a228(r186,l8) a241(r117,w1,l8) a241(r117,w0,l8) a256(r187,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a265(r347,w0,l8) a265(r347,w1,l8) a264(r345,w0,l8) a264(r345,w1,l8) a266(r344,l8) a267(r339,l8) a268(r342,l8) a269(r340,l8) a233(r433,l8) a250(r386,l8) a234(r434,l8) a251(r229,l8) a252(r445,l8) a236(r424,l8) a235(r254,l8) a237(r209,l8) a238(r435,l8) a253(r374,l8) a239(r436,l8) a254(r212,l8) a255(r443,l8) a240(r422,l8) a257(r366,w0,l8) a257(r366,w1,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8) a275(r439,l8) a270(r334,l8) a271(r332,l8) a272(r330,l8) a273(r329,l8) a274(r328,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a41(r451,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8) a52(r317,l8) a39(r449,l8) a38(r252,l8) a275(r439,l8) a270(r334,l8) a271(r332,l8) a272(r330,l8) a273(r329,l8) a274(r328,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a42(r83,l8) conflicts: a44(r450,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a39(r449,l8) a38(r252,l8) a231(r165,l8) a232(r181,l8) a229(r112,w0,l8) a229(r112,w1,l8) a230(r448,l8) a228(r186,l8) a241(r117,w1,l8) a241(r117,w0,l8) a256(r187,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a265(r347,w0,l8) a265(r347,w1,l8) a264(r345,w0,l8) a264(r345,w1,l8) a266(r344,l8) a267(r339,l8) a268(r342,l8) a269(r340,l8) a233(r433,l8) a250(r386,l8) a234(r434,l8) a251(r229,l8) a252(r445,l8) a236(r424,l8) a235(r254,l8) a237(r209,l8) a238(r435,l8) a253(r374,l8) a239(r436,l8) a254(r212,l8) a255(r443,l8) a240(r422,l8) a257(r366,w0,l8) a257(r366,w1,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:

;; a43(r397,l8) conflicts: a40(r456,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a44(r450,l8) conflicts: a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a244(r427,l8) a265(r347,w0,l8) a265(r347,w1,l8) a264(r345,w0,l8) a264(r345,w1,l8) a266(r344,l8) a267(r339,l8) a268(r342,l8) a269(r340,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a45(r123,l8) conflicts: a44(r450,l8) a42(r83,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a231(r165,l8) a232(r181,l8) a229(r112,w0,l8) a229(r112,w1,l8) a230(r448,l8) a228(r186,l8) a241(r117,w1,l8) a241(r117,w0,l8) a256(r187,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a265(r347,w0,l8) a265(r347,w1,l8) a264(r345,w0,l8) a264(r345,w1,l8) a266(r344,l8) a267(r339,l8) a268(r342,l8) a269(r340,l8) a233(r433,l8) a250(r386,l8) a234(r434,l8) a251(r229,l8) a252(r445,l8) a236(r424,l8) a235(r254,l8) a237(r209,l8) a238(r435,l8) a253(r374,l8) a239(r436,l8) a254(r212,l8) a255(r443,l8) a240(r422,l8) a257(r366,w0,l8) a257(r366,w1,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:

;; a46(r189,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a265(r347,w0,l8) a265(r347,w1,l8) a264(r345,w0,l8) a264(r345,w1,l8) a266(r344,l8) a267(r339,l8) a268(r342,l8) a269(r340,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a47(r106,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8) a264(r345,w0,l8) a264(r345,w1,l8) a266(r344,l8) a267(r339,l8) a268(r342,l8) a269(r340,l8) a275(r439,l8) a270(r334,l8) a271(r332,l8) a272(r330,l8) a273(r329,l8) a274(r328,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a48(r136,l8) conflicts:
;;   subobject 0: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8) a231(r165,l8) a232(r181,l8) a229(r112,w0,l8) a229(r112,w1,l8) a230(r448,l8) a228(r186,l8) a241(r117,w1,l8) a241(r117,w0,l8) a256(r187,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a265(r347,w0,l8) a265(r347,w1,l8) a264(r345,w0,l8) a264(r345,w1,l8) a266(r344,l8) a267(r339,l8) a268(r342,l8) a269(r340,l8) a233(r433,l8) a250(r386,l8) a234(r434,l8) a251(r229,l8) a252(r445,l8) a236(r424,l8) a235(r254,l8) a237(r209,l8) a238(r435,l8) a253(r374,l8) a239(r436,l8) a254(r212,l8) a255(r443,l8) a240(r422,l8) a257(r366,w0,l8) a257(r366,w1,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8) a275(r439,l8) a270(r334,l8) a271(r332,l8) a272(r330,l8) a273(r329,l8) a274(r328,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:


;;   subobject 1: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a41(r451,l8) a49(r135,w0,l8) a50(r104,w0,l8) a231(r165,l8) a232(r181,l8) a229(r112,w0,l8) a230(r448,l8) a228(r186,l8) a241(r117,w0,l8) a256(r187,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a265(r347,w0,l8) a264(r345,w0,l8) a266(r344,l8) a267(r339,l8) a268(r342,l8) a269(r340,l8) a233(r433,l8) a250(r386,l8) a234(r434,l8) a251(r229,l8) a252(r445,l8) a236(r424,l8) a235(r254,l8) a237(r209,l8) a238(r435,l8) a253(r374,l8) a239(r436,l8) a254(r212,l8) a255(r443,l8) a240(r422,l8) a257(r366,w0,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8) a275(r439,l8) a270(r334,l8) a271(r332,l8) a272(r330,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:

;; a49(r135,l8) conflicts:
;;   subobject 0: a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a50(r104,w1,l8) a50(r104,w0,l8) a275(r439,l8) a270(r334,l8) a271(r332,l8) a272(r330,l8) a273(r329,l8) a274(r328,l8)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a40(r456,l8) a47(r106,l8) a48(r136,w0,l8) a41(r451,l8) a50(r104,w0,l8) a275(r439,l8) a270(r334,l8) a272(r330,l8) a273(r329,l8) a274(r328,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a50(r104,l8) conflicts:
;;   subobject 0: a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a275(r439,l8) a270(r334,l8) a271(r332,l8) a272(r330,l8) a273(r329,l8) a274(r328,l8)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a40(r456,l8) a47(r106,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a275(r439,l8) a270(r334,l8) a271(r332,l8) a272(r330,l8) a273(r329,l8) a274(r328,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a51(r320,l8) conflicts: a40(r456,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a52(r317,l8) conflicts: a40(r456,l8) a41(r451,l8) a39(r449,l8) a38(r252,l8) a53(r318,l8)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a53(r318,l8) conflicts: a40(r456,l8) a52(r317,l8) a39(r449,l8) a38(r252,l8) a37(r125,l8)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a54(r83,l10) conflicts: a65(r165,l10) a66(r181,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a64(r448,l10) a62(r186,l10) a75(r117,w1,l10) a75(r117,w0,l10) a90(r187,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a99(r347,w1,l10) a99(r347,w0,l10) a98(r345,w0,l10) a98(r345,w1,l10) a100(r344,l10) a55(r106,l10) a101(r339,l10) a102(r342,l10) a103(r340,l10) a61(r451,l10) a67(r433,l10) a84(r386,l10) a68(r434,l10) a85(r229,l10) a86(r445,l10) a70(r424,l10) a69(r254,l10) a71(r209,l10) a72(r435,l10) a87(r374,l10) a73(r436,l10) a88(r212,l10) a89(r443,l10) a74(r422,l10) a91(r366,w1,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a55(r106,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a98(r345,w0,l10) a98(r345,w1,l10) a100(r344,l10) a101(r339,l10) a102(r342,l10) a103(r340,l10) a61(r451,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a56(r123,l10) conflicts: a65(r165,l10) a66(r181,l10) a54(r83,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a64(r448,l10) a62(r186,l10) a75(r117,w1,l10) a75(r117,w0,l10) a90(r187,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a99(r347,w1,l10) a99(r347,w0,l10) a98(r345,w0,l10) a98(r345,w1,l10) a100(r344,l10) a55(r106,l10) a101(r339,l10) a102(r342,l10) a103(r340,l10) a61(r451,l10) a67(r433,l10) a84(r386,l10) a68(r434,l10) a85(r229,l10) a86(r445,l10) a70(r424,l10) a69(r254,l10) a71(r209,l10) a72(r435,l10) a87(r374,l10) a73(r436,l10) a88(r212,l10) a89(r443,l10) a74(r422,l10) a91(r366,w1,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a57(r136,l10) conflicts:
;;   subobject 0: a65(r165,l10) a66(r181,l10) a54(r83,l10) a56(r123,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a64(r448,l10) a62(r186,l10) a75(r117,w1,l10) a75(r117,w0,l10) a90(r187,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a99(r347,w1,l10) a99(r347,w0,l10) a98(r345,w0,l10) a98(r345,w1,l10) a100(r344,l10) a55(r106,l10) a101(r339,l10) a102(r342,l10) a103(r340,l10) a61(r451,l10) a67(r433,l10) a84(r386,l10) a68(r434,l10) a85(r229,l10) a86(r445,l10) a70(r424,l10) a69(r254,l10) a71(r209,l10) a72(r435,l10) a87(r374,l10) a73(r436,l10) a88(r212,l10) a89(r443,l10) a74(r422,l10) a91(r366,w1,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2


;;   subobject 1: a65(r165,l10) a66(r181,l10) a54(r83,l10) a56(r123,l10) a60(r456,l10) a63(r112,w0,l10) a64(r448,l10) a62(r186,l10) a75(r117,w0,l10) a90(r187,l10) a58(r189,l10) a76(r113,w0,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a99(r347,w0,l10) a98(r345,w0,l10) a100(r344,l10) a55(r106,l10) a101(r339,l10) a102(r342,l10) a103(r340,l10) a61(r451,l10) a67(r433,l10) a84(r386,l10) a68(r434,l10) a85(r229,l10) a86(r445,l10) a70(r424,l10) a69(r254,l10) a71(r209,l10) a72(r435,l10) a87(r374,l10) a73(r436,l10) a88(r212,l10) a89(r443,l10) a74(r422,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a58(r189,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a99(r347,w1,l10) a99(r347,w0,l10) a98(r345,w0,l10) a98(r345,w1,l10) a100(r344,l10) a55(r106,l10) a101(r339,l10) a102(r342,l10) a103(r340,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a59(r450,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a78(r427,l10) a99(r347,w1,l10) a99(r347,w0,l10) a98(r345,w0,l10) a98(r345,w1,l10) a100(r344,l10) a55(r106,l10) a101(r339,l10) a102(r342,l10) a103(r340,l10) a61(r451,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a60(r456,l10) conflicts: a65(r165,l10) a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a63(r112,w1,l10) a63(r112,w0,l10) a64(r448,l10) a62(r186,l10) a75(r117,w1,l10) a75(r117,w0,l10) a90(r187,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a99(r347,w1,l10) a99(r347,w0,l10) a98(r345,w0,l10) a98(r345,w1,l10) a100(r344,l10) a55(r106,l10) a101(r339,l10) a102(r342,l10) a103(r340,l10) a61(r451,l10) a67(r433,l10) a84(r386,l10) a68(r434,l10) a85(r229,l10) a86(r445,l10) a70(r424,l10) a69(r254,l10) a71(r209,l10) a72(r435,l10) a87(r374,l10) a73(r436,l10) a88(r212,l10) a89(r443,l10) a74(r422,l10) a91(r366,w1,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a61(r451,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a59(r450,l10) a55(r106,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a62(r186,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a64(r448,l10) a75(r117,w1,l10) a75(r117,w0,l10) a90(r187,l10) a71(r209,l10) a74(r422,l10)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a63(r112,l10) conflicts:
;;   subobject 0: a65(r165,l10) a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a64(r448,l10) a62(r186,l10) a75(r117,w1,l10) a75(r117,w0,l10) a90(r187,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a69(r254,l10) a71(r209,l10) a72(r435,l10) a87(r374,l10) a73(r436,l10) a88(r212,l10) a89(r443,l10) a74(r422,l10) a91(r366,w1,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2


;;   subobject 1: a65(r165,l10) a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w0,l10) a60(r456,l10) a64(r448,l10) a62(r186,l10) a75(r117,w0,l10) a90(r187,l10) a58(r189,l10) a76(r113,w0,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a69(r254,l10) a71(r209,l10) a72(r435,l10) a87(r374,l10) a73(r436,l10) a88(r212,l10) a89(r443,l10) a74(r422,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a64(r448,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a62(r186,l10) a75(r117,w1,l10) a75(r117,w0,l10) a90(r187,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a65(r165,l10) conflicts: a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a66(r181,l10) conflicts: a65(r165,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a67(r433,l10) a84(r386,l10) a68(r434,l10) a85(r229,l10) a86(r445,l10) a70(r424,l10) a69(r254,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a67(r433,l10) conflicts: a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a68(r434,l10)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a68(r434,l10) conflicts: a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a67(r433,l10) a85(r229,l10) a86(r445,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a69(r254,l10) conflicts: a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a70(r424,l10)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a70(r424,l10) conflicts: a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a69(r254,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a71(r209,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a62(r186,l10) a75(r117,w1,l10) a75(r117,w0,l10) a72(r435,l10) a87(r374,l10) a73(r436,l10) a88(r212,l10) a89(r443,l10) a74(r422,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a72(r435,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a71(r209,l10) a73(r436,l10)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a73(r436,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a71(r209,l10) a72(r435,l10) a88(r212,l10) a89(r443,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a74(r422,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a62(r186,l10) a71(r209,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a75(r117,l10) conflicts:
;;   subobject 0: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a64(r448,l10) a62(r186,l10) a90(r187,l10) a71(r209,l10)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0


;;   subobject 1: a54(r83,l10) a56(r123,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w0,l10) a64(r448,l10) a62(r186,l10) a90(r187,l10) a71(r209,l10)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a76(r113,l10) conflicts:
;;   subobject 0: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a58(r189,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a91(r366,w1,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2


;;   subobject 1: a54(r83,l10) a56(r123,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w0,l10) a58(r189,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a59(r450,l10) a91(r366,w0,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a77(r203,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a78(r427,l10) a79(r428,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a78(r427,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a79(r428,l10) a59(r450,l10) a92(r365,l10) a93(r364,l10) a94(r363,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a79(r428,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a58(r189,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a80(r437,l10) a95(r356,l10) a81(r438,l10) a96(r120,l10) a97(r441,l10) a82(r258,l10) a83(r421,l10)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a80(r437,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a81(r438,l10)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a81(r438,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a80(r437,l10) a96(r120,l10) a97(r441,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a82(r258,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a83(r421,l10)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a83(r421,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a82(r258,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a84(r386,l10) conflicts: a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a85(r229,l10) conflicts: a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a68(r434,l10) a86(r445,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a86(r445,l10) conflicts: a66(r181,l10) a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a68(r434,l10) a85(r229,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a87(r374,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a71(r209,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a88(r212,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a71(r209,l10) a73(r436,l10) a89(r443,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a89(r443,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a71(r209,l10) a73(r436,l10) a88(r212,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a90(r187,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a64(r448,l10) a62(r186,l10) a75(r117,w1,l10) a75(r117,w0,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a91(r366,l10) conflicts:
;;   subobject 0: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a92(r365,l10)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a54(r83,l10) a56(r123,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w0,l10) a76(r113,w0,l10) a92(r365,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a92(r365,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a78(r427,l10) a91(r366,w1,l10) a91(r366,w0,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a93(r364,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a78(r427,l10) a94(r363,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a94(r363,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a78(r427,l10) a93(r364,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a95(r356,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a96(r120,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a81(r438,l10) a97(r441,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a97(r441,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a63(r112,w1,l10) a63(r112,w0,l10) a76(r113,w0,l10) a76(r113,w1,l10) a77(r203,l10) a78(r427,l10) a79(r428,l10) a81(r438,l10) a96(r120,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a98(r345,l10) conflicts:
;;   subobject 0: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a99(r347,w1,l10) a99(r347,w0,l10) a100(r344,l10) a55(r106,l10)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a54(r83,l10) a56(r123,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a99(r347,w0,l10) a100(r344,l10) a55(r106,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a99(r347,l10) conflicts:
;;   subobject 0: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a98(r345,w0,l10) a98(r345,w1,l10)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a54(r83,l10) a56(r123,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a98(r345,w0,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a100(r344,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a98(r345,w0,l10) a98(r345,w1,l10) a55(r106,l10) a101(r339,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a101(r339,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a100(r344,l10) a55(r106,l10) a102(r342,l10) a103(r340,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a102(r342,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a55(r106,l10) a101(r339,l10) a103(r340,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a103(r340,l10) conflicts: a54(r83,l10) a56(r123,l10) a57(r136,w1,l10) a57(r136,w0,l10) a60(r456,l10) a58(r189,l10) a59(r450,l10) a55(r106,l10) a101(r339,l10) a102(r342,l10)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a104(r83,l13) conflicts: a105(r112,w0,l13) a105(r112,w1,l13) a106(r123,l13) a107(r136,w1,l13) a107(r136,w0,l13) a108(r165,l13) a109(r181,l13) a110(r456,l13)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a105(r112,l13) conflicts:
;;   subobject 0: a104(r83,l13) a106(r123,l13) a107(r136,w1,l13) a107(r136,w0,l13) a108(r165,l13) a109(r181,l13) a110(r456,l13)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a104(r83,l13) a106(r123,l13) a107(r136,w0,l13) a108(r165,l13) a109(r181,l13) a110(r456,l13)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a106(r123,l13) conflicts: a104(r83,l13) a105(r112,w0,l13) a105(r112,w1,l13) a107(r136,w1,l13) a107(r136,w0,l13) a108(r165,l13) a109(r181,l13) a110(r456,l13)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a107(r136,l13) conflicts:
;;   subobject 0: a104(r83,l13) a105(r112,w0,l13) a105(r112,w1,l13) a106(r123,l13) a108(r165,l13) a109(r181,l13) a110(r456,l13)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a104(r83,l13) a105(r112,w0,l13) a106(r123,l13) a108(r165,l13) a109(r181,l13) a110(r456,l13)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a108(r165,l13) conflicts: a104(r83,l13) a105(r112,w0,l13) a105(r112,w1,l13) a106(r123,l13) a107(r136,w1,l13) a107(r136,w0,l13) a109(r181,l13) a110(r456,l13)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a109(r181,l13) conflicts: a104(r83,l13) a105(r112,w0,l13) a105(r112,w1,l13) a106(r123,l13) a107(r136,w1,l13) a107(r136,w0,l13) a108(r165,l13) a110(r456,l13)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a110(r456,l13) conflicts: a104(r83,l13) a105(r112,w0,l13) a105(r112,w1,l13) a106(r123,l13) a107(r136,w1,l13) a107(r136,w0,l13) a108(r165,l13) a109(r181,l13)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a111(r83,l12) conflicts: a112(r112,w1,l12) a112(r112,w0,l12) a113(r117,w1,l12) a113(r117,w0,l12) a114(r123,l12) a115(r136,w0,l12) a115(r136,w1,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a112(r112,l12) conflicts:
;;   subobject 0: a111(r83,l12) a113(r117,w1,l12) a113(r117,w0,l12) a114(r123,l12) a115(r136,w0,l12) a115(r136,w1,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a111(r83,l12) a113(r117,w0,l12) a114(r123,l12) a115(r136,w0,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a113(r117,l12) conflicts:
;;   subobject 0: a111(r83,l12) a112(r112,w1,l12) a112(r112,w0,l12) a114(r123,l12) a115(r136,w0,l12) a115(r136,w1,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a111(r83,l12) a112(r112,w0,l12) a114(r123,l12) a115(r136,w0,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a114(r123,l12) conflicts: a111(r83,l12) a112(r112,w1,l12) a112(r112,w0,l12) a113(r117,w1,l12) a113(r117,w0,l12) a115(r136,w0,l12) a115(r136,w1,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a115(r136,l12) conflicts:
;;   subobject 0: a111(r83,l12) a112(r112,w1,l12) a112(r112,w0,l12) a113(r117,w1,l12) a113(r117,w0,l12) a114(r123,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a111(r83,l12) a112(r112,w0,l12) a113(r117,w0,l12) a114(r123,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a116(r186,l12) conflicts: a111(r83,l12) a112(r112,w1,l12) a112(r112,w0,l12) a113(r117,w1,l12) a113(r117,w0,l12) a114(r123,l12) a115(r136,w0,l12) a115(r136,w1,l12) a117(r187,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a117(r187,l12) conflicts: a111(r83,l12) a112(r112,w1,l12) a112(r112,w0,l12) a113(r117,w1,l12) a113(r117,w0,l12) a114(r123,l12) a115(r136,w0,l12) a115(r136,w1,l12) a116(r186,l12) a118(r448,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a118(r448,l12) conflicts: a111(r83,l12) a112(r112,w1,l12) a112(r112,w0,l12) a113(r117,w1,l12) a113(r117,w0,l12) a114(r123,l12) a115(r136,w0,l12) a115(r136,w1,l12) a116(r186,l12) a117(r187,l12) a119(r456,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a119(r456,l12) conflicts: a111(r83,l12) a112(r112,w1,l12) a112(r112,w0,l12) a113(r117,w1,l12) a113(r117,w0,l12) a114(r123,l12) a115(r136,w0,l12) a115(r136,w1,l12) a116(r186,l12) a117(r187,l12) a118(r448,l12)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a120(r83,l11) conflicts: a121(r112,w1,l11) a121(r112,w0,l11) a122(r113,w0,l11) a122(r113,w1,l11) a123(r123,l11) a124(r136,w0,l11) a124(r136,w1,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a121(r112,l11) conflicts:
;;   subobject 0: a120(r83,l11) a122(r113,w0,l11) a122(r113,w1,l11) a123(r123,l11) a124(r136,w0,l11) a124(r136,w1,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a120(r83,l11) a122(r113,w0,l11) a123(r123,l11) a124(r136,w0,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a122(r113,l11) conflicts:
;;   subobject 0: a120(r83,l11) a121(r112,w1,l11) a121(r112,w0,l11) a123(r123,l11) a124(r136,w0,l11) a124(r136,w1,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a120(r83,l11) a121(r112,w0,l11) a123(r123,l11) a124(r136,w0,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a123(r123,l11) conflicts: a120(r83,l11) a121(r112,w1,l11) a121(r112,w0,l11) a122(r113,w0,l11) a122(r113,w1,l11) a124(r136,w0,l11) a124(r136,w1,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a124(r136,l11) conflicts:
;;   subobject 0: a120(r83,l11) a121(r112,w1,l11) a121(r112,w0,l11) a122(r113,w0,l11) a122(r113,w1,l11) a123(r123,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a120(r83,l11) a121(r112,w0,l11) a122(r113,w0,l11) a123(r123,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a125(r189,l11) conflicts: a120(r83,l11) a121(r112,w1,l11) a121(r112,w0,l11) a122(r113,w0,l11) a122(r113,w1,l11) a123(r123,l11) a124(r136,w0,l11) a124(r136,w1,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a126(r203,l11) conflicts: a120(r83,l11) a121(r112,w1,l11) a121(r112,w0,l11) a122(r113,w0,l11) a122(r113,w1,l11) a123(r123,l11) a124(r136,w0,l11) a124(r136,w1,l11) a125(r189,l11) a127(r427,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a127(r427,l11) conflicts: a120(r83,l11) a121(r112,w1,l11) a121(r112,w0,l11) a122(r113,w0,l11) a122(r113,w1,l11) a123(r123,l11) a124(r136,w0,l11) a124(r136,w1,l11) a125(r189,l11) a126(r203,l11) a128(r428,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a128(r428,l11) conflicts: a120(r83,l11) a121(r112,w1,l11) a121(r112,w0,l11) a122(r113,w0,l11) a122(r113,w1,l11) a123(r123,l11) a124(r136,w0,l11) a124(r136,w1,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a129(r456,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a129(r456,l11) conflicts: a120(r83,l11) a121(r112,w1,l11) a121(r112,w0,l11) a122(r113,w0,l11) a122(r113,w1,l11) a123(r123,l11) a124(r136,w0,l11) a124(r136,w1,l11) a125(r189,l11) a126(r203,l11) a127(r427,l11) a128(r428,l11)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a130(r104,l9) conflicts:
;;   subobject 0: a141(r439,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w1,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9) a136(r334,l9) a137(r332,l9) a138(r330,l9) a139(r329,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a141(r439,l9) a131(r106,l9) a132(r135,w0,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9) a136(r334,l9) a137(r332,l9) a138(r330,l9) a139(r329,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a131(r106,l9) conflicts: a141(r439,l9) a130(r104,w0,l9) a130(r104,w1,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w1,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9) a136(r334,l9) a137(r332,l9) a138(r330,l9) a139(r329,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a132(r135,l9) conflicts:
;;   subobject 0: a141(r439,l9) a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a133(r136,w1,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9) a136(r334,l9) a137(r332,l9) a138(r330,l9) a139(r329,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a141(r439,l9) a130(r104,w0,l9) a131(r106,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9) a136(r334,l9) a138(r330,l9) a139(r329,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a133(r136,l9) conflicts:
;;   subobject 0: a141(r439,l9) a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a134(r451,l9) a135(r456,l9) a136(r334,l9) a137(r332,l9) a138(r330,l9) a139(r329,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a141(r439,l9) a130(r104,w0,l9) a131(r106,l9) a132(r135,w0,l9) a134(r451,l9) a135(r456,l9) a136(r334,l9) a137(r332,l9) a138(r330,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a134(r451,l9) conflicts: a141(r439,l9) a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w1,l9) a133(r136,w0,l9) a135(r456,l9) a136(r334,l9) a137(r332,l9) a138(r330,l9) a139(r329,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a135(r456,l9) conflicts: a141(r439,l9) a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w1,l9) a133(r136,w0,l9) a134(r451,l9) a136(r334,l9) a137(r332,l9) a138(r330,l9) a139(r329,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a136(r334,l9) conflicts: a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w1,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a137(r332,l9) conflicts: a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w0,l9) a133(r136,w1,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a138(r330,l9) conflicts: a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w1,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a139(r329,l9) conflicts: a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9) a140(r328,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a140(r328,l9) conflicts: a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9) a139(r329,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a141(r439,l9) conflicts: a130(r104,w0,l9) a130(r104,w1,l9) a131(r106,l9) a132(r135,w1,l9) a132(r135,w0,l9) a133(r136,w1,l9) a133(r136,w0,l9) a134(r451,l9) a135(r456,l9)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a142(r101,l7) conflicts: a145(r315,w0,l7) a145(r315,w1,l7) a143(r449,l7) a144(r457,l7) a146(r312,w0,l7) a146(r312,w1,l7) a147(r304,w1,l7) a147(r304,w0,l7) a148(r307,l7) a149(r305,l7)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a143(r449,l7) conflicts: a145(r315,w0,l7) a145(r315,w1,l7) a142(r101,l7) a144(r457,l7) a146(r312,w0,l7) a146(r312,w1,l7) a147(r304,w1,l7) a147(r304,w0,l7) a148(r307,l7) a149(r305,l7)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a144(r457,l7) conflicts: a145(r315,w0,l7) a145(r315,w1,l7) a142(r101,l7) a143(r449,l7) a146(r312,w0,l7) a146(r312,w1,l7) a147(r304,w1,l7) a147(r304,w0,l7) a148(r307,l7) a149(r305,l7)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a145(r315,l7) conflicts:
;;   subobject 0: a142(r101,l7) a143(r449,l7) a144(r457,l7)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a142(r101,l7) a143(r449,l7) a144(r457,l7)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a146(r312,l7) conflicts:
;;   subobject 0: a142(r101,l7) a143(r449,l7) a144(r457,l7) a147(r304,w1,l7) a147(r304,w0,l7) a148(r307,l7)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a142(r101,l7) a143(r449,l7) a144(r457,l7) a147(r304,w0,l7) a148(r307,l7)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a147(r304,l7) conflicts:
;;   subobject 0: a142(r101,l7) a143(r449,l7) a144(r457,l7) a146(r312,w0,l7) a146(r312,w1,l7) a148(r307,l7)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a142(r101,l7) a143(r449,l7) a144(r457,l7) a146(r312,w0,l7) a148(r307,l7)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a148(r307,l7) conflicts: a142(r101,l7) a143(r449,l7) a144(r457,l7) a146(r312,w0,l7) a146(r312,w1,l7) a147(r304,w1,l7) a147(r304,w0,l7)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a149(r305,l7) conflicts: a142(r101,l7) a143(r449,l7) a144(r457,l7)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a150(r94,l6) conflicts: a154(r301,w0,l6) a154(r301,w1,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6) a155(r298,w0,l6) a155(r298,w1,l6) a156(r290,w1,l6) a156(r290,w0,l6) a157(r293,l6) a158(r291,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a151(r240,l6) conflicts: a154(r301,w0,l6) a154(r301,w1,l6) a150(r94,l6) a152(r449,l6) a153(r458,l6) a155(r298,w0,l6) a155(r298,w1,l6) a156(r290,w1,l6) a156(r290,w0,l6) a157(r293,l6) a158(r291,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a152(r449,l6) conflicts: a154(r301,w0,l6) a154(r301,w1,l6) a150(r94,l6) a151(r240,l6) a153(r458,l6) a155(r298,w0,l6) a155(r298,w1,l6) a156(r290,w1,l6) a156(r290,w0,l6) a157(r293,l6) a158(r291,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a153(r458,l6) conflicts: a154(r301,w0,l6) a154(r301,w1,l6) a150(r94,l6) a151(r240,l6) a152(r449,l6) a155(r298,w0,l6) a155(r298,w1,l6) a156(r290,w1,l6) a156(r290,w0,l6) a157(r293,l6) a158(r291,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a154(r301,l6) conflicts:
;;   subobject 0: a150(r94,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a150(r94,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a155(r298,l6) conflicts:
;;   subobject 0: a150(r94,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6) a156(r290,w1,l6) a156(r290,w0,l6) a157(r293,l6)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a150(r94,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6) a156(r290,w0,l6) a157(r293,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a156(r290,l6) conflicts:
;;   subobject 0: a150(r94,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6) a155(r298,w0,l6) a155(r298,w1,l6) a157(r293,l6)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a150(r94,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6) a155(r298,w0,l6) a157(r293,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a157(r293,l6) conflicts: a150(r94,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6) a155(r298,w0,l6) a155(r298,w1,l6) a156(r290,w1,l6) a156(r290,w0,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a158(r291,l6) conflicts: a150(r94,l6) a151(r240,l6) a152(r449,l6) a153(r458,l6)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a159(r87,l3) conflicts: a162(r175,w1,l3) a162(r175,w0,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a170(r274,l3) a171(r84,l3) a161(r449,l3) a166(r286,w1,l3) a166(r286,w0,l3) a167(r285,l3) a168(r284,l3) a169(r283,l3) a296(r281,l3) a297(r176,l3) a298(r174,w0,l3) a298(r174,w1,l3) a299(r279,w1,l3) a299(r279,w0,l3) a300(r278,w1,l3) a300(r278,w0,l3) a301(r280,l3) a302(r277,w0,l3) a302(r277,w1,l3) a303(r276,w1,l3) a303(r276,w0,l3) a304(r275,l3) a305(r166,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a160(r460,l3) conflicts: a162(r175,w1,l3) a162(r175,w0,l3) a159(r87,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a170(r274,l3) a171(r84,l3) a161(r449,l3) a166(r286,w1,l3) a166(r286,w0,l3) a167(r285,l3) a168(r284,l3) a169(r283,l3) a296(r281,l3) a297(r176,l3) a298(r174,w0,l3) a298(r174,w1,l3) a299(r279,w1,l3) a299(r279,w0,l3) a300(r278,w1,l3) a300(r278,w0,l3) a301(r280,l3) a302(r277,w0,l3) a302(r277,w1,l3) a303(r276,w1,l3) a303(r276,w0,l3) a304(r275,l3) a305(r166,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a161(r449,l3) conflicts: a159(r87,l3) a160(r460,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a162(r175,l3) conflicts:
;;   subobject 0: a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a167(r285,l3) a168(r284,l3) a169(r283,l3) a296(r281,l3) a297(r176,l3) a303(r276,w1,l3) a303(r276,w0,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs:


;;   subobject 1: a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a169(r283,l3) a296(r281,l3) a297(r176,l3) a303(r276,w0,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a163(r167,l3) conflicts: a162(r175,w1,l3) a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a164(r431,l3) a165(r432,l3) a170(r274,l3) a171(r84,l3) a296(r281,l3) a297(r176,l3) a300(r278,w1,l3) a300(r278,w0,l3) a302(r277,w0,l3) a302(r277,w1,l3) a303(r276,w1,l3) a303(r276,w0,l3) a304(r275,l3) a305(r166,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a164(r431,l3) conflicts: a162(r175,w1,l3) a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a163(r167,l3) a165(r432,l3) a167(r285,l3) a168(r284,l3) a169(r283,l3) a296(r281,l3) a297(r176,l3) a298(r174,w0,l3) a298(r174,w1,l3) a299(r279,w1,l3) a299(r279,w0,l3) a300(r278,w1,l3) a300(r278,w0,l3) a301(r280,l3) a302(r277,w0,l3) a302(r277,w1,l3) a303(r276,w1,l3) a303(r276,w0,l3) a304(r275,l3) a305(r166,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a165(r432,l3) conflicts: a162(r175,w1,l3) a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a296(r281,l3) a297(r176,l3) a298(r174,w0,l3) a298(r174,w1,l3) a299(r279,w1,l3) a299(r279,w0,l3) a300(r278,w1,l3) a300(r278,w0,l3) a301(r280,l3) a302(r277,w0,l3) a302(r277,w1,l3) a303(r276,w1,l3) a303(r276,w0,l3) a304(r275,l3) a305(r166,l3)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a166(r286,l3) conflicts:
;;   subobject 0: a159(r87,l3) a160(r460,l3) a167(r285,l3)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a159(r87,l3) a160(r460,l3) a167(r285,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a167(r285,l3) conflicts: a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a164(r431,l3) a166(r286,w1,l3) a166(r286,w0,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a168(r284,l3) conflicts: a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a164(r431,l3) a169(r283,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a169(r283,l3) conflicts: a162(r175,w1,l3) a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a164(r431,l3) a168(r284,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a170(r274,l3) conflicts: a159(r87,l3) a160(r460,l3) a163(r167,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a171(r84,l3) conflicts: a159(r87,l3) a160(r460,l3) a163(r167,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a172(r87,l5) conflicts: a178(r281,l5) a173(r167,l5) a174(r175,w0,l5) a174(r175,w1,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a179(r176,l5) a180(r174,w0,l5) a180(r174,w1,l5) a181(r279,w0,l5) a181(r279,w1,l5) a182(r278,w1,l5) a182(r278,w0,l5) a183(r280,l5) a184(r277,w0,l5) a184(r277,w1,l5) a185(r276,w0,l5) a185(r276,w1,l5)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a173(r167,l5) conflicts: a178(r281,l5) a172(r87,l5) a174(r175,w0,l5) a174(r175,w1,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a179(r176,l5) a182(r278,w1,l5) a182(r278,w0,l5) a184(r277,w0,l5) a184(r277,w1,l5) a185(r276,w0,l5) a185(r276,w1,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a174(r175,l5) conflicts:
;;   subobject 0: a178(r281,l5) a172(r87,l5) a173(r167,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a179(r176,l5) a185(r276,w0,l5) a185(r276,w1,l5)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0


;;   subobject 1: a178(r281,l5) a172(r87,l5) a173(r167,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a179(r176,l5) a185(r276,w0,l5)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a175(r431,l5) conflicts: a178(r281,l5) a172(r87,l5) a173(r167,l5) a174(r175,w0,l5) a174(r175,w1,l5) a176(r432,l5) a177(r460,l5) a179(r176,l5) a180(r174,w0,l5) a180(r174,w1,l5) a181(r279,w0,l5) a181(r279,w1,l5) a182(r278,w1,l5) a182(r278,w0,l5) a183(r280,l5) a184(r277,w0,l5) a184(r277,w1,l5) a185(r276,w0,l5) a185(r276,w1,l5)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a176(r432,l5) conflicts: a178(r281,l5) a172(r87,l5) a173(r167,l5) a174(r175,w0,l5) a174(r175,w1,l5) a175(r431,l5) a177(r460,l5) a179(r176,l5) a180(r174,w0,l5) a180(r174,w1,l5) a181(r279,w0,l5) a181(r279,w1,l5) a182(r278,w1,l5) a182(r278,w0,l5) a183(r280,l5) a184(r277,w0,l5) a184(r277,w1,l5) a185(r276,w0,l5) a185(r276,w1,l5)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a177(r460,l5) conflicts: a178(r281,l5) a172(r87,l5) a173(r167,l5) a174(r175,w0,l5) a174(r175,w1,l5) a175(r431,l5) a176(r432,l5) a179(r176,l5) a180(r174,w0,l5) a180(r174,w1,l5) a181(r279,w0,l5) a181(r279,w1,l5) a182(r278,w1,l5) a182(r278,w0,l5) a183(r280,l5) a184(r277,w0,l5) a184(r277,w1,l5) a185(r276,w0,l5) a185(r276,w1,l5)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a178(r281,l5) conflicts: a172(r87,l5) a173(r167,l5) a174(r175,w0,l5) a174(r175,w1,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a179(r176,l5) conflicts: a172(r87,l5) a173(r167,l5) a174(r175,w0,l5) a174(r175,w1,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a180(r174,l5) conflicts:
;;   subobject 0: a172(r87,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a172(r87,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a181(r279,l5) conflicts:
;;   subobject 0: a172(r87,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a182(r278,w1,l5) a182(r278,w0,l5)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a172(r87,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a182(r278,w0,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a182(r278,l5) conflicts:
;;   subobject 0: a172(r87,l5) a173(r167,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a181(r279,w0,l5) a181(r279,w1,l5) a183(r280,l5)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a172(r87,l5) a173(r167,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a181(r279,w0,l5) a183(r280,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a183(r280,l5) conflicts: a172(r87,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a182(r278,w1,l5) a182(r278,w0,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a184(r277,l5) conflicts:
;;   subobject 0: a172(r87,l5) a173(r167,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a185(r276,w0,l5) a185(r276,w1,l5)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a172(r87,l5) a173(r167,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a185(r276,w0,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a185(r276,l5) conflicts:
;;   subobject 0: a172(r87,l5) a173(r167,l5) a174(r175,w0,l5) a174(r175,w1,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a184(r277,w0,l5) a184(r277,w1,l5)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a172(r87,l5) a173(r167,l5) a174(r175,w0,l5) a175(r431,l5) a176(r432,l5) a177(r460,l5) a184(r277,w0,l5)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a186(r87,l4) conflicts: a191(r275,l4) a187(r167,l4) a188(r431,l4) a189(r432,l4) a190(r460,l4) a192(r166,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a187(r167,l4) conflicts: a191(r275,l4) a186(r87,l4) a188(r431,l4) a189(r432,l4) a190(r460,l4) a192(r166,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a188(r431,l4) conflicts: a191(r275,l4) a186(r87,l4) a187(r167,l4) a189(r432,l4) a190(r460,l4) a192(r166,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a189(r432,l4) conflicts: a191(r275,l4) a186(r87,l4) a187(r167,l4) a188(r431,l4) a190(r460,l4) a192(r166,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a190(r460,l4) conflicts: a191(r275,l4) a186(r87,l4) a187(r167,l4) a188(r431,l4) a189(r432,l4) a192(r166,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a191(r275,l4) conflicts: a186(r87,l4) a187(r167,l4) a188(r431,l4) a189(r432,l4) a190(r460,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a192(r166,l4) conflicts: a186(r87,l4) a187(r167,l4) a188(r431,l4) a189(r432,l4) a190(r460,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a193(r151,l2) conflicts: a197(r268,l2) a194(r159,w1,l2) a194(r159,w0,l2) a195(r429,l2) a196(r430,l2) a198(r160,l2) a201(r265,w0,l2) a201(r265,w1,l2) a203(r264,w1,l2) a203(r264,w0,l2) a204(r263,w0,l2) a204(r263,w1,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a194(r159,l2) conflicts:
;;   subobject 0: a197(r268,l2) a193(r151,l2) a195(r429,l2) a196(r430,l2) a198(r160,l2) a204(r263,w0,l2) a204(r263,w1,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0


;;   subobject 1: a197(r268,l2) a193(r151,l2) a195(r429,l2) a196(r430,l2) a198(r160,l2) a204(r263,w0,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a195(r429,l2) conflicts: a197(r268,l2) a193(r151,l2) a194(r159,w1,l2) a194(r159,w0,l2) a196(r430,l2) a198(r160,l2) a199(r158,w0,l2) a199(r158,w1,l2) a200(r266,w0,l2) a200(r266,w1,l2) a201(r265,w0,l2) a201(r265,w1,l2) a202(r267,l2) a203(r264,w1,l2) a203(r264,w0,l2) a204(r263,w0,l2) a204(r263,w1,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a196(r430,l2) conflicts: a197(r268,l2) a193(r151,l2) a194(r159,w1,l2) a194(r159,w0,l2) a195(r429,l2) a198(r160,l2) a199(r158,w0,l2) a199(r158,w1,l2) a200(r266,w0,l2) a200(r266,w1,l2) a201(r265,w0,l2) a201(r265,w1,l2) a202(r267,l2) a203(r264,w1,l2) a203(r264,w0,l2) a204(r263,w0,l2) a204(r263,w1,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a197(r268,l2) conflicts: a193(r151,l2) a194(r159,w1,l2) a194(r159,w0,l2) a195(r429,l2) a196(r430,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a198(r160,l2) conflicts: a193(r151,l2) a194(r159,w1,l2) a194(r159,w0,l2) a195(r429,l2) a196(r430,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a199(r158,l2) conflicts:
;;   subobject 0: a195(r429,l2) a196(r430,l2)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a195(r429,l2) a196(r430,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a200(r266,l2) conflicts:
;;   subobject 0: a195(r429,l2) a196(r430,l2) a201(r265,w0,l2) a201(r265,w1,l2)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a195(r429,l2) a196(r430,l2) a201(r265,w0,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a201(r265,l2) conflicts:
;;   subobject 0: a193(r151,l2) a195(r429,l2) a196(r430,l2) a200(r266,w0,l2) a200(r266,w1,l2) a202(r267,l2)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a193(r151,l2) a195(r429,l2) a196(r430,l2) a200(r266,w0,l2) a202(r267,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a202(r267,l2) conflicts: a195(r429,l2) a196(r430,l2) a201(r265,w0,l2) a201(r265,w1,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a203(r264,l2) conflicts:
;;   subobject 0: a193(r151,l2) a195(r429,l2) a196(r430,l2) a204(r263,w0,l2) a204(r263,w1,l2)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a193(r151,l2) a195(r429,l2) a196(r430,l2) a204(r263,w0,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a204(r263,l2) conflicts:
;;   subobject 0: a193(r151,l2) a194(r159,w1,l2) a194(r159,w0,l2) a195(r429,l2) a196(r430,l2) a203(r264,w1,l2) a203(r264,w0,l2)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a193(r151,l2) a194(r159,w0,l2) a195(r429,l2) a196(r430,l2) a203(r264,w0,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a205(r151,l1) conflicts: a209(r262,l1) a206(r429,l1) a207(r430,l1) a208(r461,l1) a210(r150,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a206(r429,l1) conflicts: a209(r262,l1) a205(r151,l1) a207(r430,l1) a208(r461,l1) a210(r150,l1)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a207(r430,l1) conflicts: a209(r262,l1) a205(r151,l1) a206(r429,l1) a208(r461,l1) a210(r150,l1)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a208(r461,l1) conflicts: a209(r262,l1) a205(r151,l1) a206(r429,l1) a207(r430,l1) a210(r150,l1)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a209(r262,l1) conflicts: a205(r151,l1) a206(r429,l1) a207(r430,l1) a208(r461,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a210(r150,l1) conflicts: a205(r151,l1) a206(r429,l1) a207(r430,l1) a208(r461,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a211(r420,l0) conflicts: a5(r132,l0) a7(r129,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a212(r417,l0) conflicts: a5(r132,l0) a7(r129,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a213(r418,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a214(r414,l0) conflicts: a5(r132,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a215(r451,l0) conflicts: a9(r252,l0) a14(r456,l0) a13(r449,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0) a226(r317,l0) a363(r439,l0) a358(r334,l0) a359(r332,l0) a360(r330,l0) a361(r329,l0) a362(r328,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a216(r83,l0) conflicts: a9(r252,l0) a14(r456,l0) a13(r449,l0) a218(r450,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a319(r165,l0) a320(r181,l0) a317(r112,w0,l0) a317(r112,w1,l0) a318(r448,l0) a316(r186,l0) a329(r117,w0,l0) a329(r117,w1,l0) a344(r187,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a353(r347,w0,l0) a353(r347,w1,l0) a352(r345,w0,l0) a352(r345,w1,l0) a354(r344,l0) a355(r339,l0) a356(r342,l0) a357(r340,l0) a321(r433,l0) a338(r386,l0) a322(r434,l0) a339(r229,l0) a340(r445,l0) a324(r424,l0) a323(r254,l0) a325(r209,l0) a326(r435,l0) a341(r374,l0) a327(r436,l0) a342(r212,l0) a343(r443,l0) a328(r422,l0) a345(r366,w0,l0) a345(r366,w1,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:

;; a217(r397,l0) conflicts: a14(r456,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a218(r450,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a332(r427,l0) a353(r347,w0,l0) a353(r347,w1,l0) a352(r345,w0,l0) a352(r345,w1,l0) a354(r344,l0) a355(r339,l0) a356(r342,l0) a357(r340,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a219(r123,l0) conflicts: a14(r456,l0) a218(r450,l0) a216(r83,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a319(r165,l0) a320(r181,l0) a317(r112,w0,l0) a317(r112,w1,l0) a318(r448,l0) a316(r186,l0) a329(r117,w0,l0) a329(r117,w1,l0) a344(r187,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a353(r347,w0,l0) a353(r347,w1,l0) a352(r345,w0,l0) a352(r345,w1,l0) a354(r344,l0) a355(r339,l0) a356(r342,l0) a357(r340,l0) a321(r433,l0) a338(r386,l0) a322(r434,l0) a339(r229,l0) a340(r445,l0) a324(r424,l0) a323(r254,l0) a325(r209,l0) a326(r435,l0) a341(r374,l0) a327(r436,l0) a342(r212,l0) a343(r443,l0) a328(r422,l0) a345(r366,w0,l0) a345(r366,w1,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:

;; a220(r189,l0) conflicts: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a353(r347,w0,l0) a353(r347,w1,l0) a352(r345,w0,l0) a352(r345,w1,l0) a354(r344,l0) a355(r339,l0) a356(r342,l0) a357(r340,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a221(r106,l0) conflicts: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0) a352(r345,w0,l0) a352(r345,w1,l0) a354(r344,l0) a355(r339,l0) a356(r342,l0) a357(r340,l0) a363(r439,l0) a358(r334,l0) a359(r332,l0) a360(r330,l0) a361(r329,l0) a362(r328,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a222(r136,l0) conflicts:
;;   subobject 0: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0) a319(r165,l0) a320(r181,l0) a317(r112,w0,l0) a317(r112,w1,l0) a318(r448,l0) a316(r186,l0) a329(r117,w0,l0) a329(r117,w1,l0) a344(r187,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a353(r347,w0,l0) a353(r347,w1,l0) a352(r345,w0,l0) a352(r345,w1,l0) a354(r344,l0) a355(r339,l0) a356(r342,l0) a357(r340,l0) a321(r433,l0) a338(r386,l0) a322(r434,l0) a339(r229,l0) a340(r445,l0) a324(r424,l0) a323(r254,l0) a325(r209,l0) a326(r435,l0) a341(r374,l0) a327(r436,l0) a342(r212,l0) a343(r443,l0) a328(r422,l0) a345(r366,w0,l0) a345(r366,w1,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0) a363(r439,l0) a358(r334,l0) a359(r332,l0) a360(r330,l0) a361(r329,l0) a362(r328,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:


;;   subobject 1: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a215(r451,l0) a223(r135,w0,l0) a224(r104,w0,l0) a319(r165,l0) a320(r181,l0) a317(r112,w0,l0) a318(r448,l0) a316(r186,l0) a329(r117,w0,l0) a344(r187,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a353(r347,w0,l0) a352(r345,w0,l0) a354(r344,l0) a355(r339,l0) a356(r342,l0) a357(r340,l0) a321(r433,l0) a338(r386,l0) a322(r434,l0) a339(r229,l0) a340(r445,l0) a324(r424,l0) a323(r254,l0) a325(r209,l0) a326(r435,l0) a341(r374,l0) a327(r436,l0) a342(r212,l0) a343(r443,l0) a328(r422,l0) a345(r366,w0,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0) a363(r439,l0) a358(r334,l0) a359(r332,l0) a360(r330,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs:

;; a223(r135,l0) conflicts:
;;   subobject 0: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a224(r104,w1,l0) a224(r104,w0,l0) a363(r439,l0) a358(r334,l0) a359(r332,l0) a360(r330,l0) a361(r329,l0) a362(r328,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a215(r451,l0) a224(r104,w0,l0) a363(r439,l0) a358(r334,l0) a360(r330,l0) a361(r329,l0) a362(r328,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a224(r104,l0) conflicts:
;;   subobject 0: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a363(r439,l0) a358(r334,l0) a359(r332,l0) a360(r330,l0) a361(r329,l0) a362(r328,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a215(r451,l0) a223(r135,w0,l0) a363(r439,l0) a358(r334,l0) a359(r332,l0) a360(r330,l0) a361(r329,l0) a362(r328,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a225(r320,l0) conflicts: a14(r456,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a226(r317,l0) conflicts: a9(r252,l0) a14(r456,l0) a13(r449,l0) a215(r451,l0) a227(r318,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a227(r318,l0) conflicts: a9(r252,l0) a15(r125,l0) a14(r456,l0) a13(r449,l0) a226(r317,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a228(r186,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a230(r448,l8) a241(r117,w1,l8) a241(r117,w0,l8) a256(r187,l8) a237(r209,l8) a240(r422,l8)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a229(r112,l8) conflicts:
;;   subobject 0: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a231(r165,l8) a232(r181,l8) a230(r448,l8) a228(r186,l8) a241(r117,w1,l8) a241(r117,w0,l8) a256(r187,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a235(r254,l8) a237(r209,l8) a238(r435,l8) a253(r374,l8) a239(r436,l8) a254(r212,l8) a255(r443,l8) a240(r422,l8) a257(r366,w0,l8) a257(r366,w1,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2


;;   subobject 1: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w0,l8) a231(r165,l8) a232(r181,l8) a230(r448,l8) a228(r186,l8) a241(r117,w0,l8) a256(r187,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a235(r254,l8) a237(r209,l8) a238(r435,l8) a253(r374,l8) a239(r436,l8) a254(r212,l8) a255(r443,l8) a240(r422,l8) a257(r366,w0,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a230(r448,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a228(r186,l8) a241(r117,w1,l8) a241(r117,w0,l8) a256(r187,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a231(r165,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a232(r181,l8) a229(r112,w0,l8) a229(r112,w1,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a232(r181,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a231(r165,l8) a229(r112,w0,l8) a229(r112,w1,l8) a233(r433,l8) a250(r386,l8) a234(r434,l8) a251(r229,l8) a252(r445,l8) a236(r424,l8) a235(r254,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a233(r433,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a232(r181,l8) a234(r434,l8)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a234(r434,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a232(r181,l8) a233(r433,l8) a251(r229,l8) a252(r445,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a235(r254,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a232(r181,l8) a229(r112,w0,l8) a229(r112,w1,l8) a236(r424,l8)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a236(r424,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a232(r181,l8) a235(r254,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a237(r209,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a228(r186,l8) a241(r117,w1,l8) a241(r117,w0,l8) a238(r435,l8) a253(r374,l8) a239(r436,l8) a254(r212,l8) a255(r443,l8) a240(r422,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a238(r435,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a237(r209,l8) a239(r436,l8)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a239(r436,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a237(r209,l8) a238(r435,l8) a254(r212,l8) a255(r443,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a240(r422,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a228(r186,l8) a237(r209,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a241(r117,l8) conflicts:
;;   subobject 0: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a230(r448,l8) a228(r186,l8) a256(r187,l8) a237(r209,l8)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0


;;   subobject 1: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w0,l8) a229(r112,w0,l8) a230(r448,l8) a228(r186,l8) a256(r187,l8) a237(r209,l8)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a242(r113,l8) conflicts:
;;   subobject 0: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a257(r366,w0,l8) a257(r366,w1,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2


;;   subobject 1: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w0,l8) a229(r112,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a257(r366,w0,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a243(r203,l8) conflicts: a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a244(r427,l8) a245(r428,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a244(r427,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a245(r428,l8) a258(r365,l8) a259(r364,l8) a260(r363,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a245(r428,l8) conflicts: a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a246(r437,l8) a261(r356,l8) a247(r438,l8) a262(r120,l8) a263(r441,l8) a248(r258,l8) a249(r421,l8)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a246(r437,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a247(r438,l8)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a247(r438,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a246(r437,l8) a262(r120,l8) a263(r441,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a248(r258,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a249(r421,l8)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a249(r421,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a248(r258,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a250(r386,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a232(r181,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a251(r229,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a232(r181,l8) a234(r434,l8) a252(r445,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a252(r445,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a232(r181,l8) a234(r434,l8) a251(r229,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a253(r374,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a237(r209,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a254(r212,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a237(r209,l8) a239(r436,l8) a255(r443,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a255(r443,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a237(r209,l8) a239(r436,l8) a254(r212,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a256(r187,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a230(r448,l8) a228(r186,l8) a241(r117,w1,l8) a241(r117,w0,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a257(r366,l8) conflicts:
;;   subobject 0: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a258(r365,l8)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w0,l8) a229(r112,w0,l8) a242(r113,w0,l8) a258(r365,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a258(r365,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a244(r427,l8) a257(r366,w0,l8) a257(r366,w1,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a259(r364,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a244(r427,l8) a260(r363,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a260(r363,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a244(r427,l8) a259(r364,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a261(r356,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a262(r120,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a247(r438,l8) a263(r441,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a263(r441,l8) conflicts: a42(r83,l8) a45(r123,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a229(r112,w0,l8) a229(r112,w1,l8) a242(r113,w1,l8) a242(r113,w0,l8) a243(r203,l8) a244(r427,l8) a245(r428,l8) a247(r438,l8) a262(r120,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a264(r345,l8) conflicts:
;;   subobject 0: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a265(r347,w0,l8) a265(r347,w1,l8) a266(r344,l8)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w0,l8) a265(r347,w0,l8) a266(r344,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a265(r347,l8) conflicts:
;;   subobject 0: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w1,l8) a48(r136,w0,l8) a264(r345,w0,l8) a264(r345,w1,l8)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a48(r136,w0,l8) a264(r345,w0,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a266(r344,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a264(r345,w0,l8) a264(r345,w1,l8) a267(r339,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a267(r339,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a266(r344,l8) a268(r342,l8) a269(r340,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a268(r342,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a267(r339,l8) a269(r340,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a269(r340,l8) conflicts: a44(r450,l8) a42(r83,l8) a45(r123,l8) a46(r189,l8) a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a267(r339,l8) a268(r342,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a270(r334,l8) conflicts: a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a271(r332,l8) conflicts: a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a50(r104,w1,l8) a50(r104,w0,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a272(r330,l8) conflicts: a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a273(r329,l8) conflicts: a40(r456,l8) a47(r106,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8) a274(r328,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a274(r328,l8) conflicts: a40(r456,l8) a47(r106,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8) a273(r329,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a275(r439,l8) conflicts: a40(r456,l8) a47(r106,l8) a48(r136,w1,l8) a48(r136,w0,l8) a41(r451,l8) a49(r135,w0,l8) a49(r135,w1,l8) a50(r104,w1,l8) a50(r104,w0,l8)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a276(r315,l0) conflicts:
;;   subobject 0: a13(r449,l0) a16(r457,l0) a17(r101,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a13(r449,l0) a16(r457,l0) a17(r101,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a277(r312,l0) conflicts:
;;   subobject 0: a13(r449,l0) a16(r457,l0) a17(r101,l0) a278(r304,w0,l0) a278(r304,w1,l0) a279(r307,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a13(r449,l0) a16(r457,l0) a17(r101,l0) a278(r304,w0,l0) a279(r307,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a278(r304,l0) conflicts:
;;   subobject 0: a13(r449,l0) a16(r457,l0) a17(r101,l0) a277(r312,w0,l0) a277(r312,w1,l0) a279(r307,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a13(r449,l0) a16(r457,l0) a17(r101,l0) a277(r312,w0,l0) a279(r307,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a279(r307,l0) conflicts: a13(r449,l0) a16(r457,l0) a17(r101,l0) a277(r312,w0,l0) a277(r312,w1,l0) a278(r304,w0,l0) a278(r304,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a280(r305,l0) conflicts: a13(r449,l0) a16(r457,l0) a17(r101,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a281(r301,l0) conflicts:
;;   subobject 0: a13(r449,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a13(r449,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a282(r298,l0) conflicts:
;;   subobject 0: a13(r449,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0) a283(r290,w0,l0) a283(r290,w1,l0) a284(r293,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a13(r449,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0) a283(r290,w0,l0) a284(r293,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a283(r290,l0) conflicts:
;;   subobject 0: a13(r449,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0) a282(r298,w0,l0) a282(r298,w1,l0) a284(r293,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a13(r449,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0) a282(r298,w0,l0) a284(r293,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a284(r293,l0) conflicts: a13(r449,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0) a282(r298,w0,l0) a282(r298,w1,l0) a283(r290,w0,l0) a283(r290,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a285(r291,l0) conflicts: a13(r449,l0) a18(r458,l0) a19(r94,l0) a20(r240,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a286(r175,l0) conflicts:
;;   subobject 0: a21(r460,l0) a22(r87,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a291(r285,l0) a292(r284,l0) a293(r283,l0) a364(r281,l0) a365(r176,l0) a371(r276,w1,l0) a371(r276,w0,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:


;;   subobject 1: a21(r460,l0) a22(r87,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a293(r283,l0) a364(r281,l0) a365(r176,l0) a371(r276,w0,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a287(r167,l0) conflicts: a21(r460,l0) a22(r87,l0) a286(r175,w1,l0) a286(r175,w0,l0) a288(r431,l0) a289(r432,l0) a294(r274,l0) a295(r84,l0) a364(r281,l0) a365(r176,l0) a368(r278,w0,l0) a368(r278,w1,l0) a370(r277,w0,l0) a370(r277,w1,l0) a371(r276,w1,l0) a371(r276,w0,l0) a372(r275,l0) a373(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a288(r431,l0) conflicts: a21(r460,l0) a22(r87,l0) a286(r175,w1,l0) a286(r175,w0,l0) a287(r167,l0) a289(r432,l0) a291(r285,l0) a292(r284,l0) a293(r283,l0) a364(r281,l0) a365(r176,l0) a366(r174,w1,l0) a366(r174,w0,l0) a367(r279,w1,l0) a367(r279,w0,l0) a368(r278,w0,l0) a368(r278,w1,l0) a369(r280,l0) a370(r277,w0,l0) a370(r277,w1,l0) a371(r276,w1,l0) a371(r276,w0,l0) a372(r275,l0) a373(r166,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a289(r432,l0) conflicts: a21(r460,l0) a22(r87,l0) a286(r175,w1,l0) a286(r175,w0,l0) a287(r167,l0) a288(r431,l0) a364(r281,l0) a365(r176,l0) a366(r174,w1,l0) a366(r174,w0,l0) a367(r279,w1,l0) a367(r279,w0,l0) a368(r278,w0,l0) a368(r278,w1,l0) a369(r280,l0) a370(r277,w0,l0) a370(r277,w1,l0) a371(r276,w1,l0) a371(r276,w0,l0) a372(r275,l0) a373(r166,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs:

;; a290(r286,l0) conflicts:
;;   subobject 0: a21(r460,l0) a22(r87,l0) a291(r285,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a21(r460,l0) a22(r87,l0) a291(r285,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a291(r285,l0) conflicts: a21(r460,l0) a22(r87,l0) a286(r175,w0,l0) a288(r431,l0) a290(r286,w0,l0) a290(r286,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a292(r284,l0) conflicts: a21(r460,l0) a22(r87,l0) a286(r175,w0,l0) a288(r431,l0) a293(r283,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a293(r283,l0) conflicts: a21(r460,l0) a22(r87,l0) a286(r175,w1,l0) a286(r175,w0,l0) a288(r431,l0) a292(r284,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a294(r274,l0) conflicts: a21(r460,l0) a22(r87,l0) a287(r167,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a295(r84,l0) conflicts: a21(r460,l0) a22(r87,l0) a287(r167,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a296(r281,l3) conflicts: a162(r175,w1,l3) a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a297(r176,l3) conflicts: a162(r175,w1,l3) a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a298(r174,l3) conflicts:
;;   subobject 0: a159(r87,l3) a160(r460,l3) a164(r431,l3) a165(r432,l3)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a159(r87,l3) a160(r460,l3) a164(r431,l3) a165(r432,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a299(r279,l3) conflicts:
;;   subobject 0: a159(r87,l3) a160(r460,l3) a164(r431,l3) a165(r432,l3) a300(r278,w1,l3) a300(r278,w0,l3)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a159(r87,l3) a160(r460,l3) a164(r431,l3) a165(r432,l3) a300(r278,w0,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a300(r278,l3) conflicts:
;;   subobject 0: a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a299(r279,w1,l3) a299(r279,w0,l3) a301(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a299(r279,w0,l3) a301(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a301(r280,l3) conflicts: a159(r87,l3) a160(r460,l3) a164(r431,l3) a165(r432,l3) a300(r278,w1,l3) a300(r278,w0,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a302(r277,l3) conflicts:
;;   subobject 0: a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a303(r276,w1,l3) a303(r276,w0,l3)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a303(r276,w0,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a303(r276,l3) conflicts:
;;   subobject 0: a162(r175,w1,l3) a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a302(r277,w0,l3) a302(r277,w1,l3)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a162(r175,w0,l3) a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3) a302(r277,w0,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a304(r275,l3) conflicts: a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a305(r166,l3) conflicts: a159(r87,l3) a160(r460,l3) a163(r167,l3) a164(r431,l3) a165(r432,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a306(r268,l0) conflicts: a0(r159,w1,l0) a0(r159,w0,l0) a1(r151,l0) a2(r429,l0) a3(r430,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a307(r160,l0) conflicts: a0(r159,w1,l0) a0(r159,w0,l0) a1(r151,l0) a2(r429,l0) a3(r430,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a308(r158,l0) conflicts:
;;   subobject 0: a2(r429,l0) a3(r430,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a2(r429,l0) a3(r430,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a309(r266,l0) conflicts:
;;   subobject 0: a2(r429,l0) a3(r430,l0) a310(r265,w0,l0) a310(r265,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a2(r429,l0) a3(r430,l0) a310(r265,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a310(r265,l0) conflicts:
;;   subobject 0: a1(r151,l0) a2(r429,l0) a3(r430,l0) a309(r266,w1,l0) a309(r266,w0,l0) a311(r267,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a1(r151,l0) a2(r429,l0) a3(r430,l0) a309(r266,w0,l0) a311(r267,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a311(r267,l0) conflicts: a2(r429,l0) a3(r430,l0) a310(r265,w0,l0) a310(r265,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a312(r264,l0) conflicts:
;;   subobject 0: a1(r151,l0) a2(r429,l0) a3(r430,l0) a313(r263,w0,l0) a313(r263,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a1(r151,l0) a2(r429,l0) a3(r430,l0) a313(r263,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a313(r263,l0) conflicts:
;;   subobject 0: a0(r159,w1,l0) a0(r159,w0,l0) a1(r151,l0) a2(r429,l0) a3(r430,l0) a312(r264,w1,l0) a312(r264,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a0(r159,w0,l0) a1(r151,l0) a2(r429,l0) a3(r430,l0) a312(r264,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a314(r262,l0) conflicts: a1(r151,l0) a2(r429,l0) a3(r430,l0) a28(r461,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a315(r150,l0) conflicts: a1(r151,l0) a2(r429,l0) a3(r430,l0) a28(r461,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a316(r186,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a318(r448,l0) a329(r117,w0,l0) a329(r117,w1,l0) a344(r187,l0) a325(r209,l0) a328(r422,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a317(r112,l0) conflicts:
;;   subobject 0: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a222(r136,w1,l0) a319(r165,l0) a320(r181,l0) a318(r448,l0) a316(r186,l0) a329(r117,w0,l0) a329(r117,w1,l0) a344(r187,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a323(r254,l0) a325(r209,l0) a326(r435,l0) a341(r374,l0) a327(r436,l0) a342(r212,l0) a343(r443,l0) a328(r422,l0) a345(r366,w0,l0) a345(r366,w1,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2


;;   subobject 1: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a319(r165,l0) a320(r181,l0) a318(r448,l0) a316(r186,l0) a329(r117,w0,l0) a344(r187,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a323(r254,l0) a325(r209,l0) a326(r435,l0) a341(r374,l0) a327(r436,l0) a342(r212,l0) a343(r443,l0) a328(r422,l0) a345(r366,w0,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a318(r448,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a316(r186,l0) a329(r117,w0,l0) a329(r117,w1,l0) a344(r187,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a319(r165,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a320(r181,l0) a317(r112,w0,l0) a317(r112,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a320(r181,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a319(r165,l0) a317(r112,w0,l0) a317(r112,w1,l0) a321(r433,l0) a338(r386,l0) a322(r434,l0) a339(r229,l0) a340(r445,l0) a324(r424,l0) a323(r254,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a321(r433,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a320(r181,l0) a322(r434,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a322(r434,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a320(r181,l0) a321(r433,l0) a339(r229,l0) a340(r445,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a323(r254,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a320(r181,l0) a317(r112,w0,l0) a317(r112,w1,l0) a324(r424,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a324(r424,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a320(r181,l0) a323(r254,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a325(r209,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a316(r186,l0) a329(r117,w0,l0) a329(r117,w1,l0) a326(r435,l0) a341(r374,l0) a327(r436,l0) a342(r212,l0) a343(r443,l0) a328(r422,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a326(r435,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a325(r209,l0) a327(r436,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a327(r436,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a325(r209,l0) a326(r435,l0) a342(r212,l0) a343(r443,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a328(r422,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a316(r186,l0) a325(r209,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a329(r117,l0) conflicts:
;;   subobject 0: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a318(r448,l0) a316(r186,l0) a344(r187,l0) a325(r209,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0


;;   subobject 1: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a317(r112,w0,l0) a318(r448,l0) a316(r186,l0) a344(r187,l0) a325(r209,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a330(r113,l0) conflicts:
;;   subobject 0: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a345(r366,w0,l0) a345(r366,w1,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2


;;   subobject 1: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a317(r112,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a345(r366,w0,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a331(r203,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a332(r427,l0) a333(r428,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a332(r427,l0) conflicts: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a333(r428,l0) a346(r365,l0) a347(r364,l0) a348(r363,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a333(r428,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a334(r437,l0) a349(r356,l0) a335(r438,l0) a350(r120,l0) a351(r441,l0) a336(r258,l0) a337(r421,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

;; a334(r437,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a335(r438,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a335(r438,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a334(r437,l0) a350(r120,l0) a351(r441,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a336(r258,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a337(r421,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a337(r421,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a336(r258,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a338(r386,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a320(r181,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a339(r229,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a320(r181,l0) a322(r434,l0) a340(r445,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a340(r445,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a320(r181,l0) a322(r434,l0) a339(r229,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a341(r374,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a325(r209,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a342(r212,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a325(r209,l0) a327(r436,l0) a343(r443,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a343(r443,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a325(r209,l0) a327(r436,l0) a342(r212,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a344(r187,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a318(r448,l0) a316(r186,l0) a329(r117,w0,l0) a329(r117,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a345(r366,l0) conflicts:
;;   subobject 0: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a346(r365,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a317(r112,w0,l0) a330(r113,w0,l0) a346(r365,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a346(r365,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a332(r427,l0) a345(r366,w0,l0) a345(r366,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a347(r364,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a332(r427,l0) a348(r363,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a348(r363,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a332(r427,l0) a347(r364,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a349(r356,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a350(r120,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a335(r438,l0) a351(r441,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a351(r441,l0) conflicts: a14(r456,l0) a216(r83,l0) a219(r123,l0) a222(r136,w0,l0) a222(r136,w1,l0) a317(r112,w0,l0) a317(r112,w1,l0) a330(r113,w1,l0) a330(r113,w0,l0) a331(r203,l0) a332(r427,l0) a333(r428,l0) a335(r438,l0) a350(r120,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a352(r345,l0) conflicts:
;;   subobject 0: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a353(r347,w0,l0) a353(r347,w1,l0) a354(r344,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a353(r347,w0,l0) a354(r344,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a353(r347,l0) conflicts:
;;   subobject 0: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a222(r136,w1,l0) a352(r345,w0,l0) a352(r345,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a222(r136,w0,l0) a352(r345,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a354(r344,l0) conflicts: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a352(r345,w0,l0) a352(r345,w1,l0) a355(r339,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a355(r339,l0) conflicts: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a354(r344,l0) a356(r342,l0) a357(r340,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a356(r342,l0) conflicts: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a355(r339,l0) a357(r340,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a357(r340,l0) conflicts: a14(r456,l0) a218(r450,l0) a216(r83,l0) a219(r123,l0) a220(r189,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a355(r339,l0) a356(r342,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a358(r334,l0) conflicts: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a359(r332,l0) conflicts: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a223(r135,w0,l0) a224(r104,w1,l0) a224(r104,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a360(r330,l0) conflicts: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a361(r329,l0) conflicts: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0) a362(r328,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a362(r328,l0) conflicts: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0) a361(r329,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a363(r439,l0) conflicts: a14(r456,l0) a221(r106,l0) a222(r136,w0,l0) a222(r136,w1,l0) a215(r451,l0) a223(r135,w0,l0) a223(r135,w1,l0) a224(r104,w1,l0) a224(r104,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a364(r281,l0) conflicts: a21(r460,l0) a22(r87,l0) a286(r175,w1,l0) a286(r175,w0,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a365(r176,l0) conflicts: a21(r460,l0) a22(r87,l0) a286(r175,w1,l0) a286(r175,w0,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a366(r174,l0) conflicts:
;;   subobject 0: a21(r460,l0) a22(r87,l0) a288(r431,l0) a289(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a21(r460,l0) a22(r87,l0) a288(r431,l0) a289(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a367(r279,l0) conflicts:
;;   subobject 0: a21(r460,l0) a22(r87,l0) a288(r431,l0) a289(r432,l0) a368(r278,w0,l0) a368(r278,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a21(r460,l0) a22(r87,l0) a288(r431,l0) a289(r432,l0) a368(r278,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a368(r278,l0) conflicts:
;;   subobject 0: a21(r460,l0) a22(r87,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a367(r279,w1,l0) a367(r279,w0,l0) a369(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a21(r460,l0) a22(r87,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a367(r279,w0,l0) a369(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a369(r280,l0) conflicts: a21(r460,l0) a22(r87,l0) a288(r431,l0) a289(r432,l0) a368(r278,w0,l0) a368(r278,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a370(r277,l0) conflicts:
;;   subobject 0: a21(r460,l0) a22(r87,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a371(r276,w1,l0) a371(r276,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a21(r460,l0) a22(r87,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a371(r276,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a371(r276,l0) conflicts:
;;   subobject 0: a21(r460,l0) a22(r87,l0) a286(r175,w1,l0) a286(r175,w0,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a370(r277,w0,l0) a370(r277,w1,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


;;   subobject 1: a21(r460,l0) a22(r87,l0) a286(r175,w0,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0) a370(r277,w0,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a372(r275,l0) conflicts: a21(r460,l0) a22(r87,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a373(r166,l0) conflicts: a21(r460,l0) a22(r87,l0) a287(r167,l0) a288(r431,l0) a289(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a11(r403)<->a12(r404)@1:constraint
  cp1:a10(r406)<->a11(r403)@1:constraint
  cp2:a6(r409)<->a8(r410)@1:constraint
  cp3:a4(r412)<->a6(r409)@1:constraint
  cp4:a3(r430)<->a27(r269)@1:shuffle
  cp5:a25(r271)<->a26(r270)@1:shuffle
  cp6:a25(r271)<->a27(r269)@1:shuffle
  cp7:a2(r429)<->a24(r272)@1:shuffle
  cp8:a0(r159)<->a24(r272)@1:shuffle
  cp9:a29(r261)<->a30(r149)@1:shuffle
  cp10:a34(r417)<->a35(r418)@9:constraint
  cp11:a33(r420)<->a34(r417)@9:constraint
  cp12:a37(r125)<->a41(r451)@1:shuffle
  cp13:a64(r448)<->a65(r165)@1:move
  cp14:a84(r386)<->a85(r229)@1:shuffle
  cp15:a87(r374)<->a88(r212)@1:shuffle
  cp16:a79(r428)<->a94(r363)@1:shuffle
  cp17:a92(r365)<->a93(r364)@1:shuffle
  cp18:a92(r365)<->a94(r363)@1:shuffle
  cp19:a78(r427)<->a91(r366)@1:shuffle
  cp20:a75(r117)<->a76(r113)@7:constraint
  cp21:a95(r356)<->a96(r120)@1:shuffle
  cp22:a100(r344)<->a102(r342)@3:shuffle
  cp23:a100(r344)<->a103(r340)@3:shuffle
  cp24:a63(r112)<->a99(r347)@27:constraint
  cp25:a136(r334)<->a137(r332)@3:shuffle
  cp26:a138(r330)<->a139(r329)@1:shuffle
  cp27:a138(r330)<->a140(r328)@1:shuffle
  cp28:a147(r304)<->a149(r305)@11:shuffle
  cp29:a145(r315)<->a146(r312)@90:constraint
  cp30:a145(r315)<->a147(r304)@90:constraint
  cp31:a156(r290)<->a158(r291)@11:shuffle
  cp32:a154(r301)<->a155(r298)@90:constraint
  cp33:a154(r301)<->a156(r290)@90:constraint
  cp34:a165(r432)<->a169(r283)@10:shuffle
  cp35:a167(r285)<->a168(r284)@10:shuffle
  cp36:a167(r285)<->a169(r283)@10:shuffle
  cp37:a164(r431)<->a166(r286)@10:shuffle
  cp38:a162(r175)<->a166(r286)@10:shuffle
  cp39:a170(r274)<->a171(r84)@11:shuffle
  cp40:a174(r175)<->a184(r277)@113:shuffle
  cp41:a182(r278)<->a184(r277)@910:constraint
  cp42:a182(r278)<->a185(r276)@910:constraint
  cp43:a173(r167)<->a183(r280)@113:shuffle
  cp44:a181(r279)<->a183(r280)@113:shuffle
  cp45:a180(r174)<->a181(r279)@910:constraint
  cp46:a180(r174)<->a182(r278)@910:constraint
  cp47:a174(r175)<->a180(r174)@910:constraint
  cp48:a178(r281)<->a179(r176)@113:shuffle
  cp49:a191(r275)<->a192(r166)@113:shuffle
  cp50:a194(r159)<->a203(r264)@1:shuffle
  cp51:a201(r265)<->a203(r264)@9:constraint
  cp52:a201(r265)<->a204(r263)@9:constraint
  cp53:a193(r151)<->a202(r267)@1:shuffle
  cp54:a200(r266)<->a202(r267)@1:shuffle
  cp55:a199(r158)<->a200(r266)@9:constraint
  cp56:a199(r158)<->a201(r265)@9:constraint
  cp57:a194(r159)<->a199(r158)@9:constraint
  cp58:a197(r268)<->a198(r160)@1:shuffle
  cp59:a209(r262)<->a210(r150)@1:shuffle
  cp60:a212(r417)<->a213(r418)@9:constraint
  cp61:a211(r420)<->a212(r417)@9:constraint
  cp62:a15(r125)<->a215(r451)@1:shuffle
  cp63:a230(r448)<->a231(r165)@1:move
  cp64:a250(r386)<->a251(r229)@1:shuffle
  cp65:a253(r374)<->a254(r212)@1:shuffle
  cp66:a245(r428)<->a260(r363)@1:shuffle
  cp67:a258(r365)<->a259(r364)@1:shuffle
  cp68:a258(r365)<->a260(r363)@1:shuffle
  cp69:a244(r427)<->a257(r366)@1:shuffle
  cp70:a241(r117)<->a242(r113)@7:constraint
  cp71:a261(r356)<->a262(r120)@1:shuffle
  cp72:a266(r344)<->a268(r342)@3:shuffle
  cp73:a266(r344)<->a269(r340)@3:shuffle
  cp74:a229(r112)<->a265(r347)@27:constraint
  cp75:a270(r334)<->a271(r332)@3:shuffle
  cp76:a272(r330)<->a273(r329)@1:shuffle
  cp77:a272(r330)<->a274(r328)@1:shuffle
  cp78:a278(r304)<->a280(r305)@11:shuffle
  cp79:a276(r315)<->a277(r312)@90:constraint
  cp80:a276(r315)<->a278(r304)@90:constraint
  cp81:a283(r290)<->a285(r291)@11:shuffle
  cp82:a281(r301)<->a282(r298)@90:constraint
  cp83:a281(r301)<->a283(r290)@90:constraint
  cp84:a289(r432)<->a293(r283)@10:shuffle
  cp85:a291(r285)<->a292(r284)@10:shuffle
  cp86:a291(r285)<->a293(r283)@10:shuffle
  cp87:a288(r431)<->a290(r286)@10:shuffle
  cp88:a286(r175)<->a290(r286)@10:shuffle
  cp89:a294(r274)<->a295(r84)@11:shuffle
  cp90:a162(r175)<->a302(r277)@113:shuffle
  cp91:a300(r278)<->a302(r277)@910:constraint
  cp92:a300(r278)<->a303(r276)@910:constraint
  cp93:a163(r167)<->a301(r280)@113:shuffle
  cp94:a299(r279)<->a301(r280)@113:shuffle
  cp95:a298(r174)<->a299(r279)@910:constraint
  cp96:a298(r174)<->a300(r278)@910:constraint
  cp97:a162(r175)<->a298(r174)@910:constraint
  cp98:a296(r281)<->a297(r176)@113:shuffle
  cp99:a304(r275)<->a305(r166)@113:shuffle
  cp100:a0(r159)<->a312(r264)@1:shuffle
  cp101:a310(r265)<->a312(r264)@9:constraint
  cp102:a310(r265)<->a313(r263)@9:constraint
  cp103:a1(r151)<->a311(r267)@1:shuffle
  cp104:a309(r266)<->a311(r267)@1:shuffle
  cp105:a308(r158)<->a309(r266)@9:constraint
  cp106:a308(r158)<->a310(r265)@9:constraint
  cp107:a0(r159)<->a308(r158)@9:constraint
  cp108:a306(r268)<->a307(r160)@1:shuffle
  cp109:a314(r262)<->a315(r150)@1:shuffle
  cp110:a318(r448)<->a319(r165)@1:move
  cp111:a338(r386)<->a339(r229)@1:shuffle
  cp112:a341(r374)<->a342(r212)@1:shuffle
  cp113:a333(r428)<->a348(r363)@1:shuffle
  cp114:a346(r365)<->a347(r364)@1:shuffle
  cp115:a346(r365)<->a348(r363)@1:shuffle
  cp116:a332(r427)<->a345(r366)@1:shuffle
  cp117:a329(r117)<->a330(r113)@7:constraint
  cp118:a349(r356)<->a350(r120)@1:shuffle
  cp119:a354(r344)<->a356(r342)@3:shuffle
  cp120:a354(r344)<->a357(r340)@3:shuffle
  cp121:a317(r112)<->a353(r347)@27:constraint
  cp122:a358(r334)<->a359(r332)@3:shuffle
  cp123:a360(r330)<->a361(r329)@1:shuffle
  cp124:a360(r330)<->a362(r328)@1:shuffle
  cp125:a286(r175)<->a370(r277)@113:shuffle
  cp126:a368(r278)<->a370(r277)@910:constraint
  cp127:a368(r278)<->a371(r276)@910:constraint
  cp128:a287(r167)<->a369(r280)@113:shuffle
  cp129:a367(r279)<->a369(r280)@113:shuffle
  cp130:a366(r174)<->a367(r279)@910:constraint
  cp131:a366(r174)<->a368(r278)@910:constraint
  cp132:a286(r175)<->a366(r174)@910:constraint
  cp133:a364(r281)<->a365(r176)@113:shuffle
  cp134:a372(r275)<->a373(r166)@113:shuffle
  pref0:a39(r449)<-hr0@9
  pref1:a81(r438)<-hr1@22
  pref2:a80(r437)<-hr0@22
  pref3:a73(r436)<-hr1@6
  pref4:a72(r435)<-hr0@6
  pref5:a68(r434)<-hr1@6
  pref6:a67(r433)<-hr0@6
  pref7:a91(r366)<-hr0@7
  pref8:a98(r345)<-hr0@27
  pref9:a53(r318)<-hr1@9
  pref10:a52(r317)<-hr0@9
  pref11:a146(r312)<-hr0@90
  pref12:a155(r298)<-hr0@90
  pref13:a166(r286)<-hr0@81
  pref14:a24(r272)<-hr0@1
  pref15:a71(r209)<-hr0@6
  pref16:a77(r203)<-hr0@22
  pref17:a66(r181)<-hr0@6
  pref18:a179(r176)<-hr0@1365
  pref19:a192(r166)<-hr0@1365
  pref20:a198(r160)<-hr0@13
  pref21:a210(r150)<-hr0@13
  pref22:a133(r136)<-hr0@26
  pref23:a57(r136)<-hr0@27
  pref24:a132(r135)<-hr0@27
  pref25:a171(r84)<-hr0@135
  pref26:a30(r149)<-hr0@1
  regions=15, blocks=131, points=280
    allocnos=374 (big 81), copies=135, conflicts=2199, ranges=326

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 130 126 123(->6:l2) 122 111 109(->110:l14) 21 20(->22:l8) 18(->19:l7) 16(->17:l6) 15 8(->9:l3) 7 5 3(->4:l1) 2
    all: 0r159 1r151 2r429 3r430 4r412 5r132 6r409 7r129 8r410 9r252 10r406 11r403 12r404 13r449 14r456 15r125 16r457 17r101 18r458 19r94 20r240 21r460 22r87 23r85 24r272 25r271 26r270 27r269 28r461 29r261 30r149 211r420 212r417 213r418 214r414 215r451 216r83 217r397 218r450 219r123 220r189 221r106 222r136 223r135 224r104 225r320 226r317 227r318 276r315 277r312 278r304 279r307 280r305 281r301 282r298 283r290 284r293 285r291 286r175 287r167 288r431 289r432 290r286 291r285 292r284 293r283 294r274 295r84 306r268 307r160 308r158 309r266 310r265 311r267 312r264 313r263 314r262 315r150 316r186 317r112 318r448 319r165 320r181 321r433 322r434 323r254 324r424 325r209 326r435 327r436 328r422 329r117 330r113 331r203 332r427 333r428 334r437 335r438 336r258 337r421 338r386 339r229 340r445 341r374 342r212 343r443 344r187 345r366 346r365 347r364 348r363 349r356 350r120 351r441 352r345 353r347 354r344 355r339 356r342 357r340 358r334 359r332 360r330 361r329 362r328 363r439 364r281 365r176 366r174 367r279 368r278 369r280 370r277 371r276 372r275 373r166
    modified regnos
    border:
    Pressure: GENERAL_REGS=15
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@316264
          2:( 1-5)@49522
            3:( 2-5)@1658
              4:( 3-5)@55906
      Spill a8(r410,l0)
      Spill a213(r418,l0: a35(r418,l14))
      Spill a222(r136,l0: a48(r136,l8))
      Allocno a0r159 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 obj 0 (confl regs =  0 6-75),  obj 1 (confl regs =  0 6-75)
      Allocno a1r151 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a2r429 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a3r430 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a4r412 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a5r132 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a6r409 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a7r129 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a9r252 of GENERAL_REGS(7) has 4 avail. regs  2-5, node:  2-5 (confl regs =  0 1 6-75)
      Allocno a10r406 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a11r403 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a12r404 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a13r449 of GENERAL_REGS(7) has 4 avail. regs  2-5, node:  2-5 (confl regs =  0 1 6-75)
      Allocno a14r456 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a15r125 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a16r457 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a17r101 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a18r458 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a19r94 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a20r240 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a21r460 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a22r87 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a23r85 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a24r272 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a25r271 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a26r270 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a27r269 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a28r461 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a29r261 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a30r149 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a211r420 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a212r417 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a214r414 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a215r451 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a216r83 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a217r397 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a218r450 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a219r123 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a220r189 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a221r106 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a223r135 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a224r104 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a225r320 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a226r317 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a227r318 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a276r315 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a277r312 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a278r304 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a279r307 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a280r305 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a281r301 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a282r298 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a283r290 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a284r293 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a285r291 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a286r175 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 obj 0 (confl regs =  0 6-75),  obj 1 (confl regs =  0 6-75)
      Allocno a287r167 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a288r431 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a289r432 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a290r286 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a291r285 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a292r284 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a293r283 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a294r274 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a295r84 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a306r268 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a307r160 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a308r158 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a309r266 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a310r265 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a311r267 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a312r264 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a313r263 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a314r262 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a315r150 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a316r186 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a317r112 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 obj 0 (confl regs =  0-2 6-75),  obj 1 (confl regs =  0-2 6-75)
      Allocno a318r448 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a319r165 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a320r181 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a321r433 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a322r434 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a323r254 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a324r424 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a325r209 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a326r435 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a327r436 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a328r422 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a329r117 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 obj 0 (confl regs =  0 6-75),  obj 1 (confl regs =  0 6-75)
      Allocno a330r113 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 obj 0 (confl regs =  0-2 6-75),  obj 1 (confl regs =  0-2 6-75)
      Allocno a331r203 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a332r427 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a333r428 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a334r437 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a335r438 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a336r258 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a337r421 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a338r386 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a339r229 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a340r445 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a341r374 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a342r212 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a343r443 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a344r187 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a345r366 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a346r365 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a347r364 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a348r363 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a349r356 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a350r120 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a351r441 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a352r345 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a353r347 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a354r344 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a355r339 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a356r342 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a357r340 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a358r334 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a359r332 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a360r330 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a361r329 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a362r328 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a363r439 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a364r281 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a365r176 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a366r174 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a367r279 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a368r278 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a369r280 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a370r277 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a371r276 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a372r275 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a373r166 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 130:a366r174-a367r279 (freq=910):
        Result (freq=3640): a366r174(1820) a367r279(1820)
      Forming thread by copy 131:a366r174-a368r278 (freq=910):
        Result (freq=5460): a366r174(1820) a368r278(1820) a367r279(1820)
      Forming thread by copy 134:a372r275-a373r166 (freq=113):
        Result (freq=4550): a372r275(1820) a373r166(2730)
      Forming thread by copy 89:a294r274-a295r84 (freq=11):
        Result (freq=450): a294r274(180) a295r84(270)
      Forming thread by copy 60:a212r417-a213r418 (freq=9):
        Result (freq=36): a212r417(18) a213r418(18)
      Forming thread by copy 61:a211r420-a212r417 (freq=9):
        Result (freq=54): a211r420(18) a212r417(18) a213r418(18)
      Forming thread by copy 105:a308r158-a309r266 (freq=9):
        Result (freq=36): a308r158(18) a309r266(18)
      Forming thread by copy 106:a308r158-a310r265 (freq=9):
        Result (freq=54): a308r158(18) a310r265(18) a309r266(18)
      Forming thread by copy 0:a11r403-a12r404 (freq=1):
        Result (freq=4): a11r403(2) a12r404(2)
      Forming thread by copy 1:a10r406-a11r403 (freq=1):
        Result (freq=6): a10r406(2) a11r403(2) a12r404(2)
      Forming thread by copy 2:a6r409-a8r410 (freq=1):
        Result (freq=4): a6r409(2) a8r410(2)
      Forming thread by copy 3:a4r412-a6r409 (freq=1):
        Result (freq=6): a4r412(2) a6r409(2) a8r410(2)
      Forming thread by copy 5:a25r271-a26r270 (freq=1):
        Result (freq=4): a25r271(2) a26r270(2)
      Forming thread by copy 9:a29r261-a30r149 (freq=1):
        Result (freq=5): a29r261(2) a30r149(3)
      Forming thread by copy 62:a15r125-a215r451 (freq=1):
        Result (freq=159): a15r125(46) a215r451(113)
      Forming thread by copy 108:a306r268-a307r160 (freq=1):
        Result (freq=45): a306r268(18) a307r160(27)
      Forming thread by copy 109:a314r262-a315r150 (freq=1):
        Result (freq=45): a314r262(18) a315r150(27)
      Forming thread by copy 111:a338r386-a339r229 (freq=1):
        Result (freq=9): a338r386(4) a339r229(5)
      Forming thread by copy 112:a341r374-a342r212 (freq=1):
        Result (freq=9): a341r374(4) a342r212(5)
      Forming thread by copy 114:a346r365-a347r364 (freq=1):
        Result (freq=28): a346r365(14) a347r364(14)
      Forming thread by copy 115:a346r365-a348r363 (freq=1):
        Result (freq=42): a346r365(14) a348r363(14) a347r364(14)
      Forming thread by copy 118:a349r356-a350r120 (freq=1):
        Result (freq=27): a349r356(16) a350r120(11)
      Pushing a351(r441,l0: a263(r441,l8: a97(r441,l10)))(cost 0)
        Making a335(r438,l0: a247(r438,l8: a81(r438,l10))) colorable
      Pushing a343(r443,l0: a255(r443,l8: a89(r443,l10)))(cost 0)
        Making a327(r436,l0: a239(r436,l8: a73(r436,l10))) colorable
      Pushing a340(r445,l0: a252(r445,l8: a86(r445,l10)))(cost 0)
        Making a322(r434,l0: a234(r434,l8: a68(r434,l10))) colorable
      Pushing a217(r397,l0: a43(r397,l8))(cost 0)
      Pushing a27(r269,l0)(cost 0)
      Pushing a23(r85,l0)(cost 0)
      Pushing a225(r320,l0: a51(r320,l8))(cost 0)
      Pushing a26(r270,l0)(cost 0)
      Pushing a25(r271,l0)(cost 0)
        Making a24(r272,l0) colorable
      Pushing a29(r261,l0)(cost 0)
      Pushing a30(r149,l0)(cost 0)
      Pushing a24(r272,l0)(cost 21)
      Pushing a326(r435,l0: a238(r435,l8: a72(r435,l10)))(cost 0)
      Pushing a321(r433,l0: a233(r433,l8: a67(r433,l10)))(cost 0)
      Pushing a12(r404,l0)(cost 0)
      Pushing a11(r403,l0)(cost 0)
      Pushing a10(r406,l0)(cost 0)
      Pushing a6(r409,l0)(cost 0)
      Pushing a4(r412,l0)(cost 0)
        Making a5(r132,l0) colorable
      Pushing a328(r422,l0: a240(r422,l8: a74(r422,l10)))(cost 0)
      Pushing a324(r424,l0: a236(r424,l8: a70(r424,l10)))(cost 0)
      Pushing a323(r254,l0: a235(r254,l8: a69(r254,l10)))(cost 0)
      Pushing a341(r374,l0: a253(r374,l8: a87(r374,l10)))(cost 0)
      Pushing a342(r212,l0: a254(r212,l8: a88(r212,l10)))(cost 0)
      Pushing a338(r386,l0: a250(r386,l8: a84(r386,l10)))(cost 0)
      Pushing a339(r229,l0: a251(r229,l8: a85(r229,l10)))(cost 0)
      Pushing a327(r436,l0: a239(r436,l8: a73(r436,l10)))(cost 63)
      Pushing a322(r434,l0: a234(r434,l8: a68(r434,l10)))(cost 63)
      Pushing a334(r437,l0: a246(r437,l8: a80(r437,l10)))(cost 0)
      Pushing a311(r267,l0: a202(r267,l2))(cost 0)
      Pushing a214(r414,l0: a36(r414,l14))(cost 0)
      Pushing a350(r120,l0: a262(r120,l8: a96(r120,l10)))(cost 0)
      Pushing a349(r356,l0: a261(r356,l8: a95(r356,l10)))(cost 0)
      Pushing a7(r129,l0)(cost 0)
      Pushing a337(r421,l0: a249(r421,l8: a83(r421,l10)))(cost 0)
      Pushing a336(r258,l0: a248(r258,l8: a82(r258,l10)))(cost 0)
      Pushing a5(r132,l0)(cost 157)
      Pushing a335(r438,l0: a247(r438,l8: a81(r438,l10)))(cost 208)
      Pushing a348(r363,l0: a260(r363,l8: a94(r363,l10)))(cost 0)
      Pushing a347(r364,l0: a259(r364,l8: a93(r364,l10)))(cost 0)
      Pushing a346(r365,l0: a258(r365,l8: a92(r365,l10)))(cost 0)
        Making a345(r366,l0: a257(r366,l8: a91(r366,l10))) colorable
      Pushing a345(r366,l0: a257(r366,l8: a91(r366,l10)))(cost 147)
      Pushing a314(r262,l0: a209(r262,l1))(cost 0)
      Pushing a315(r150,l0: a210(r150,l1))(cost 0)
      Pushing a306(r268,l0: a197(r268,l2))(cost 0)
      Pushing a307(r160,l0: a198(r160,l2))(cost 0)
      Pushing a308(r158,l0: a199(r158,l2))(cost 0)
      Pushing a212(r417,l0: a34(r417,l14))(cost 0)
      Pushing a211(r420,l0: a33(r420,l14))(cost 0)
      Pushing a15(r125,l0)(cost 0)
        Making a227(r318,l0: a53(r318,l8)) colorable
      Pushing a227(r318,l0: a53(r318,l8))(cost 36)
        Making a226(r317,l0: a52(r317,l8)) colorable
      Pushing a226(r317,l0: a52(r317,l8))(cost 63)
      Pushing a292(r284,l0: a168(r284,l3))(cost 0)
        Making a293(r283,l0: a169(r283,l3)) colorable
      Pushing a293(r283,l0: a169(r283,l3))(cost 567)
      Pushing a285(r291,l0: a158(r291,l6))(cost 0)
      Pushing a280(r305,l0: a149(r305,l7))(cost 0)
      Pushing a319(r165,l0: a231(r165,l8: a65(r165,l10)))(cost 0)
      Pushing a294(r274,l0: a170(r274,l3))(cost 0)
      Pushing a295(r84,l0: a171(r84,l3))(cost 0)
      Pushing a369(r280,l0: a301(r280,l3: a183(r280,l5)))(cost 0)
      Pushing a372(r275,l0: a304(r275,l3: a191(r275,l4)))(cost 0)
      Pushing a373(r166,l0: a305(r166,l3: a192(r166,l4)))(cost 0)
      Pushing a366(r174,l0: a298(r174,l3: a180(r174,l5)))(cost 0)
      Pushing a14(r456,l0)(potential spill: pri=0, cost=12)
        Making a9(r252,l0) colorable
        Making a359(r332,l0: a271(r332,l8: a137(r332,l9))) colorable
      Pushing a9(r252,l0)(cost 64)
      Pushing a359(r332,l0: a271(r332,l8: a137(r332,l9)))(cost 189)
      Pushing a20(r240,l0)(potential spill: pri=54, cost=274)
      Pushing a28(r461,l0)(potential spill: pri=58, cost=58)
      Pushing a216(r83,l0: a42(r83,l8))(potential spill: pri=67, cost=67)
      Pushing a18(r458,l0)(potential spill: pri=72, cost=364)
        Making a281(r301,l0: a154(r301,l6)) colorable
      Forming thread by copy 82:a281r301-a282r298 (freq=90):
        Result (freq=540): a281r301(180) a282r298(360)
      Forming thread by copy 83:a281r301-a283r290 (freq=90):
        Result (freq=720): a281r301(180) a283r290(180) a282r298(360)
      Pushing a281(r301,l0: a154(r301,l6))(cost 1440)
      Pushing a360(r330,l0: a272(r330,l8: a138(r330,l9)))(potential spill: pri=78, cost=78)
      Pushing a318(r448,l0: a230(r448,l8: a64(r448,l10)))(potential spill: pri=80, cost=80)
        Making a344(r187,l0: a256(r187,l8: a90(r187,l10))) colorable
      Pushing a344(r187,l0: a256(r187,l8: a90(r187,l10)))(cost 1477)
      Pushing a3(r430,l0)(potential spill: pri=84, cost=84)
      Pushing a2(r429,l0)(potential spill: pri=86, cost=86)
      Forming thread by copy 104:a309r266-a311r267 (freq=1):
        Result (freq=72): a308r158(18) a311r267(18) a310r265(18) a309r266(18)
        Making a309(r266,l0: a200(r266,l2)) colorable
      Pushing a309(r266,l0: a200(r266,l2))(cost 135)
        Making a310(r265,l0: a201(r265,l2)) colorable
      Pushing a310(r265,l0: a201(r265,l2))(cost 135)
      Pushing a13(r449,l0)(potential spill: pri=93, cost=657)
        Making a19(r94,l0) colorable
        Making a276(r315,l0: a145(r315,l7)) colorable
        Making a284(r293,l0: a157(r293,l6)) colorable
      Forming thread by copy 79:a276r315-a277r312 (freq=90):
        Result (freq=540): a276r315(180) a277r312(360)
      Forming thread by copy 80:a276r315-a278r304 (freq=90):
        Result (freq=720): a276r315(180) a278r304(180) a277r312(360)
      Pushing a284(r293,l0: a157(r293,l6))(cost 630)
      Pushing a19(r94,l0)(cost 2614)
      Forming thread by copy 81:a283r290-a285r291 (freq=11):
        Result (freq=900): a281r301(180) a285r291(180) a283r290(180) a282r298(360)
        Making a283(r290,l0: a156(r290,l6)) colorable
      Pushing a276(r315,l0: a145(r315,l7))(cost 1440)
      Pushing a283(r290,l0: a156(r290,l6))(cost 1350)
        Making a282(r298,l0: a155(r298,l6)) colorable
      Pushing a282(r298,l0: a155(r298,l6))(cost 1890)
      Pushing a22(r87,l0)(potential spill: pri=96, cost=1057)
      Forming thread by copy 85:a291r285-a292r284 (freq=10):
        Result (freq=324): a291r285(162) a292r284(162)
      Forming thread by copy 86:a291r285-a293r283 (freq=10):
        Result (freq=486): a291r285(162) a293r283(162) a292r284(162)
        Making a291(r285,l0: a167(r285,l3)) colorable
      Pushing a291(r285,l0: a167(r285,l3))(cost 486)
        Making a290(r286,l0: a166(r286,l3)) colorable
      Pushing a290(r286,l0: a166(r286,l3))(cost 1458)
      Pushing a325(r209,l0: a237(r209,l8: a71(r209,l10)))(potential spill: pri=100, cost=100)
      Pushing a16(r457,l0)(potential spill: pri=121, cost=364)
        Making a17(r101,l0) colorable
        Making a279(r307,l0: a148(r307,l7)) colorable
      Pushing a279(r307,l0: a148(r307,l7))(cost 630)
      Pushing a17(r101,l0)(cost 2704)
      Forming thread by copy 78:a278r304-a280r305 (freq=11):
        Result (freq=900): a276r315(180) a280r305(180) a278r304(180) a277r312(360)
        Making a278(r304,l0: a147(r304,l7)) colorable
      Pushing a278(r304,l0: a147(r304,l7))(cost 1350)
        Making a277(r312,l0: a146(r312,l7)) colorable
      Pushing a277(r312,l0: a146(r312,l7))(cost 1890)
      Pushing a313(r263,l0: a204(r263,l2))(potential spill: pri=135, cost=135)
      Forming thread by copy 107:a0r159-a308r158 (freq=9):
        Result (freq=103): a0r159(31) a308r158(18) a311r267(18) a310r265(18) a309r266(18)
      Forming thread by copy 8:a0r159-a24r272 (freq=1):
        Result (freq=108): a0r159(31) a24r272(5) a308r158(18) a311r267(18) a310r265(18) a309r266(18)
        Making a0(r159,l0) colorable
        Making a1(r151,l0) colorable
      Forming thread by copy 101:a310r265-a312r264 (freq=9):
        Result (freq=126): a0r159(31) a312r264(18) a24r272(5) a308r158(18) a311r267(18) a310r265(18) a309r266(18)
        Making a312(r264,l0: a203(r264,l2)) colorable
      Pushing a1(r151,l0)(cost 157)
      Pushing a312(r264,l0: a203(r264,l2))(cost 135)
      Pushing a0(r159,l0)(cost 233)
      Pushing a333(r428,l0: a245(r428,l8: a79(r428,l10)))(potential spill: pri=136, cost=136)
      Pushing a332(r427,l0: a244(r427,l8: a78(r427,l10)))(potential spill: pri=143, cost=143)
      Pushing a354(r344,l0: a266(r344,l8: a100(r344,l10)))(potential spill: pri=162, cost=162)
      Pushing a358(r334,l0: a270(r334,l8: a136(r334,l9)))(potential spill: pri=162, cost=162)
      Pushing a363(r439,l0: a275(r439,l8: a141(r439,l9)))(potential spill: pri=189, cost=189)
      Pushing a316(r186,l0: a228(r186,l8: a62(r186,l10)))(potential spill: pri=265, cost=265)
        Making a329(r117,l0: a241(r117,l8: a75(r117,l10))) colorable
      Forming thread by copy 117:a329r117-a330r113 (freq=7):
        Result (freq=150): a329r117(116) a330r113(34)
      Pushing a329(r117,l0: a241(r117,l8: a75(r117,l10)))(cost 508)
      Pushing a330(r113,l0: a242(r113,l8: a76(r113,l10)))(potential spill: pri=272, cost=272)
      Pushing a221(r106,l0: a47(r106,l8))(potential spill: pri=332, cost=332)
        Making a355(r339,l0: a267(r339,l8: a101(r339,l10))) colorable
        Making a356(r342,l0: a268(r342,l8: a102(r342,l10))) colorable
        Making a357(r340,l0: a269(r340,l8: a103(r340,l10))) colorable
      Pushing a357(r340,l0: a269(r340,l8: a103(r340,l10)))(cost 189)
      Pushing a356(r342,l0: a268(r342,l8: a102(r342,l10)))(cost 189)
      Pushing a355(r339,l0: a267(r339,l8: a101(r339,l10)))(cost 432)
      Pushing a320(r181,l0: a232(r181,l8: a66(r181,l10)))(potential spill: pri=365, cost=365)
      Pushing a215(r451,l0: a41(r451,l8))(potential spill: pri=412, cost=412)
        Making a361(r329,l0: a273(r329,l8: a139(r329,l9))) colorable
        Making a362(r328,l0: a274(r328,l8: a140(r328,l9))) colorable
      Pushing a362(r328,l0: a274(r328,l8: a140(r328,l9)))(cost 91)
      Pushing a361(r329,l0: a273(r329,l8: a139(r329,l9)))(cost 91)
        Making a224(r104,l0: a50(r104,l8)) colorable
      Pushing a224(r104,l0: a50(r104,l8))(cost 697)
        Making a223(r135,l0: a49(r135,l8)) colorable
      Pushing a223(r135,l0: a49(r135,l8))(cost 835)
      Pushing a353(r347,l0: a265(r347,l8: a99(r347,l10)))(potential spill: pri=432, cost=432)
      Pushing a218(r450,l0: a44(r450,l8))(potential spill: pri=440, cost=440)
        Making a220(r189,l0: a46(r189,l8)) colorable
      Pushing a220(r189,l0: a46(r189,l8))(cost 5244)
        Making a352(r345,l0: a264(r345,l8: a98(r345,l10))) colorable
      Pushing a352(r345,l0: a264(r345,l8: a98(r345,l10)))(cost 567)
      Pushing a219(r123,l0: a45(r123,l8))(potential spill: pri=494, cost=494)
        Making a331(r203,l0: a243(r203,l8: a77(r203,l10))) colorable
      Pushing a331(r203,l0: a243(r203,l8: a77(r203,l10)))(cost 1277)
        Making a317(r112,l0: a229(r112,l8: a63(r112,l10))) colorable
      Pushing a317(r112,l0: a229(r112,l8: a63(r112,l10)))(cost 2256)
      Pushing a21(r460,l0)(potential spill: pri=496, cost=5464)
        Making a364(r281,l0: a296(r281,l3: a178(r281,l5))) colorable
      Forming thread by copy 133:a364r281-a365r176 (freq=113):
        Result (freq=4550): a364r281(1820) a365r176(2730)
        Making a365(r176,l0: a297(r176,l3: a179(r176,l5))) colorable
      Pushing a364(r281,l0: a296(r281,l3: a178(r281,l5)))(cost 5460)
      Pushing a365(r176,l0: a297(r176,l3: a179(r176,l5)))(cost 11830)
      Pushing a289(r432,l0: a165(r432,l3))(potential spill: pri=7960, cost=7960)
      Pushing a288(r431,l0: a164(r431,l3))(potential spill: pri=8122, cost=8122)
      Forming thread by copy 129:a367r279-a369r280 (freq=113):
        Result (freq=7280): a366r174(1820) a369r280(1820) a368r278(1820) a367r279(1820)
        Making a367(r279,l0: a299(r279,l3: a181(r279,l5))) colorable
      Pushing a367(r279,l0: a299(r279,l3: a181(r279,l5)))(cost 13650)
        Making a368(r278,l0: a300(r278,l3: a182(r278,l5))) colorable
      Pushing a368(r278,l0: a300(r278,l3: a182(r278,l5)))(cost 13650)
      Pushing a371(r276,l0: a303(r276,l3: a185(r276,l5)))(potential spill: pri=13650, cost=13650)
      Forming thread by copy 132:a286r175-a366r174 (freq=910):
        Result (freq=10343): a286r175(3063) a366r174(1820) a369r280(1820) a368r278(1820) a367r279(1820)
      Forming thread by copy 88:a286r175-a290r286 (freq=10):
        Result (freq=10667): a286r175(3063) a290r286(324) a366r174(1820) a369r280(1820) a368r278(1820) a367r279(1820)
        Making a286(r175,l0: a162(r175,l3)) colorable
      Forming thread by copy 128:a287r167-a369r280 (freq=113):
        Result (freq=15307): a287r167(4640) a286r175(3063) a290r286(324) a366r174(1820) a369r280(1820) a368r278(1820) a367r279(1820)
        Making a287(r167,l0: a163(r167,l3)) colorable
      Forming thread by copy 126:a368r278-a370r277 (freq=910):
        Result (freq=17127): a287r167(4640) a370r277(1820) a286r175(3063) a290r286(324) a366r174(1820) a369r280(1820) a368r278(1820) a367r279(1820)
        Making a370(r277,l0: a302(r277,l3: a184(r277,l5))) colorable
      Pushing a287(r167,l0: a163(r167,l3))(cost 15830)
      Pushing a370(r277,l0: a302(r277,l3: a184(r277,l5)))(cost 13650)
      Pushing a286(r175,l0: a162(r175,l3))(cost 23289)
      Popping a286(r175,l0: a162(r175,l3))  -- assign reg 4
      Popping a370(r277,l0: a302(r277,l3: a184(r277,l5)))  -- assign reg 4
      Popping a287(r167,l0: a163(r167,l3))  -- assign reg 1
      Popping a371(r276,l0: a303(r276,l3: a185(r276,l5)))  -- assign reg 2
      Popping a368(r278,l0: a300(r278,l3: a182(r278,l5)))  -- assign reg 4
      Popping a367(r279,l0: a299(r279,l3: a181(r279,l5)))  -- assign reg 2
      Popping a288(r431,l0: a164(r431,l3))  -- spill
      Popping a289(r432,l0: a165(r432,l3))  -- spill
      Popping a365(r176,l0: a297(r176,l3: a179(r176,l5)))  -- assign reg 0
      Popping a364(r281,l0: a296(r281,l3: a178(r281,l5)))  -- assign reg 0
      Popping a21(r460,l0)  -- spill
      Popping a317(r112,l0: a229(r112,l8: a63(r112,l10)))  -- assign reg 4
      Popping a331(r203,l0: a243(r203,l8: a77(r203,l10)))  -- assign reg 3
      Popping a219(r123,l0: a45(r123,l8))  -- spill
      Popping a352(r345,l0: a264(r345,l8: a98(r345,l10)))  -- assign reg 0
      Popping a220(r189,l0: a46(r189,l8))  -- assign reg 2
      Popping a218(r450,l0: a44(r450,l8))  -- assign reg 3
      Popping a353(r347,l0: a265(r347,l8: a99(r347,l10)))  -- assign reg 4
      Popping a223(r135,l0: a49(r135,l8))  -- assign reg 0
      Popping a224(r104,l0: a50(r104,l8))  -- assign reg 2
      Popping a361(r329,l0: a273(r329,l8: a139(r329,l9)))  -- assign reg 4
      Popping a362(r328,l0: a274(r328,l8: a140(r328,l9)))  -- assign reg 5
      Popping a215(r451,l0: a41(r451,l8))  -- spill
      Popping a320(r181,l0: a232(r181,l8: a66(r181,l10)))  -- assign reg 3
      Popping a355(r339,l0: a267(r339,l8: a101(r339,l10)))  -- assign reg 0
      Popping a356(r342,l0: a268(r342,l8: a102(r342,l10)))  -- assign reg 1
      Popping a357(r340,l0: a269(r340,l8: a103(r340,l10)))  -- assign reg 4
      Popping a221(r106,l0: a47(r106,l8))  -- spill
      Popping a330(r113,l0: a242(r113,l8: a76(r113,l10)))  -- spill
      Popping a329(r117,l0: a241(r117,l8: a75(r117,l10)))  -- assign reg 2
      Popping a316(r186,l0: a228(r186,l8: a62(r186,l10)))  -- assign reg 1
      Popping a363(r439,l0: a275(r439,l8: a141(r439,l9)))  -- assign reg 4
      Popping a358(r334,l0: a270(r334,l8: a136(r334,l9)))  -- assign reg 4
      Popping a354(r344,l0: a266(r344,l8: a100(r344,l10)))  -- assign reg 4
      Popping a332(r427,l0: a244(r427,l8: a78(r427,l10)))  -- spill
      Popping a333(r428,l0: a245(r428,l8: a79(r428,l10)))  -- spill
      Popping a0(r159,l0)  -- assign reg 4
      Popping a312(r264,l0: a203(r264,l2))  -- assign reg 4
      Popping a1(r151,l0)  -- assign reg 1
      Popping a313(r263,l0: a204(r263,l2))  -- assign reg 2
      Popping a277(r312,l0: a146(r312,l7))  -- assign reg 0
      Popping a278(r304,l0: a147(r304,l7))  -- assign reg 2
      Popping a17(r101,l0)  -- assign reg 4
      Popping a279(r307,l0: a148(r307,l7))  -- assign reg 5
      Popping a16(r457,l0)  -- spill
      Popping a325(r209,l0: a237(r209,l8: a71(r209,l10)))  -- spill
      Popping a290(r286,l0: a166(r286,l3))  -- assign reg 0
      Popping a291(r285,l0: a167(r285,l3))  -- assign reg 2
      Popping a22(r87,l0)  -- spill
      Popping a282(r298,l0: a155(r298,l6))  -- assign reg 0
      Popping a283(r290,l0: a156(r290,l6))  -- assign reg 2
      Popping a276(r315,l0: a145(r315,l7))  -- assign reg 0
      Popping a19(r94,l0)  -- assign reg 4
      Popping a284(r293,l0: a157(r293,l6))  -- assign reg 5
      Popping a13(r449,l0)  -- spill
      Popping a310(r265,l0: a201(r265,l2))  -- assign reg 4
      Popping a309(r266,l0: a200(r266,l2))  -- assign reg 2
      Popping a2(r429,l0)  -- spill
      Popping a3(r430,l0)  -- spill
      Popping a344(r187,l0: a256(r187,l8: a90(r187,l10)))  -- assign reg 0
      Popping a318(r448,l0: a230(r448,l8: a64(r448,l10)))  -- spill
      Popping a360(r330,l0: a272(r330,l8: a138(r330,l9)))  -- assign reg 4
      Popping a281(r301,l0: a154(r301,l6))  -- assign reg 0
      Popping a18(r458,l0)  -- spill
      Popping a216(r83,l0: a42(r83,l8))  -- spill
      Popping a28(r461,l0)  -- assign reg 3
      Popping a20(r240,l0)  -- spill
      Popping a359(r332,l0: a271(r332,l8: a137(r332,l9)))  -- assign reg 4
      Popping a9(r252,l0)  -- assign reg 2
      Popping a14(r456,l0)  -- spill
      Popping a366(r174,l0: a298(r174,l3: a180(r174,l5)))  -- assign reg 4
      Popping a373(r166,l0: a305(r166,l3: a192(r166,l4)))  -- assign reg 0
      Popping a372(r275,l0: a304(r275,l3: a191(r275,l4)))  -- assign reg 0
      Popping a369(r280,l0: a301(r280,l3: a183(r280,l5)))  -- assign reg 2
      Popping a295(r84,l0: a171(r84,l3))  -- assign reg 0
      Popping a294(r274,l0: a170(r274,l3))  -- assign reg 0
      Popping a319(r165,l0: a231(r165,l8: a65(r165,l10)))  -- assign reg 0
      Popping a280(r305,l0: a149(r305,l7))  -- assign reg 2
      Popping a285(r291,l0: a158(r291,l6))  -- assign reg 2
      Popping a293(r283,l0: a169(r283,l3))  -- assign reg 0
      Popping a292(r284,l0: a168(r284,l3))  -- assign reg 2
      Popping a226(r317,l0: a52(r317,l8))  -- assign reg 0
      Popping a227(r318,l0: a53(r318,l8))  -- assign reg 1
      Popping a15(r125,l0)  -- assign reg 3
      Popping a211(r420,l0: a33(r420,l14))  -- assign reg 0
      Popping a212(r417,l0: a34(r417,l14))  -- assign reg 0
      Popping a308(r158,l0: a199(r158,l2))  -- assign reg 4
      Popping a307(r160,l0: a198(r160,l2))  -- assign reg 0
      Popping a306(r268,l0: a197(r268,l2))  -- assign reg 0
      Popping a315(r150,l0: a210(r150,l1))  -- assign reg 0
      Popping a314(r262,l0: a209(r262,l1))  -- assign reg 0
      Popping a345(r366,l0: a257(r366,l8: a91(r366,l10)))  -- assign reg 0
      Popping a346(r365,l0: a258(r365,l8: a92(r365,l10)))  -- assign reg 2
      Popping a347(r364,l0: a259(r364,l8: a93(r364,l10)))  -- assign reg 0
      Popping a348(r363,l0: a260(r363,l8: a94(r363,l10)))  -- assign reg 2
      Popping a335(r438,l0: a247(r438,l8: a81(r438,l10)))  -- assign reg 1
      Popping a5(r132,l0)  -- assign reg 3
      Popping a336(r258,l0: a248(r258,l8: a82(r258,l10)))  -- assign reg 1
      Popping a337(r421,l0: a249(r421,l8: a83(r421,l10)))  -- assign reg 0
      Popping a7(r129,l0)  -- assign reg 1
      Popping a349(r356,l0: a261(r356,l8: a95(r356,l10)))  -- assign reg 0
      Popping a350(r120,l0: a262(r120,l8: a96(r120,l10)))  -- assign reg 0
      Popping a214(r414,l0: a36(r414,l14))  -- assign reg 0
      Popping a311(r267,l0: a202(r267,l2))  -- assign reg 2
      Popping a334(r437,l0: a246(r437,l8: a80(r437,l10)))  -- assign reg 0
      Popping a322(r434,l0: a234(r434,l8: a68(r434,l10)))  -- assign reg 1
      Popping a327(r436,l0: a239(r436,l8: a73(r436,l10)))  -- assign reg 1
      Popping a339(r229,l0: a251(r229,l8: a85(r229,l10)))  -- assign reg 0
      Popping a338(r386,l0: a250(r386,l8: a84(r386,l10)))  -- assign reg 0
      Popping a342(r212,l0: a254(r212,l8: a88(r212,l10)))  -- assign reg 0
      Popping a341(r374,l0: a253(r374,l8: a87(r374,l10)))  -- assign reg 0
      Popping a323(r254,l0: a235(r254,l8: a69(r254,l10)))  -- assign reg 1
      Popping a324(r424,l0: a236(r424,l8: a70(r424,l10)))  -- assign reg 0
      Popping a328(r422,l0: a240(r422,l8: a74(r422,l10)))  -- assign reg 0
      Popping a4(r412,l0)  -- assign reg 0
      Popping a6(r409,l0)  -- assign reg 0
      Popping a10(r406,l0)  -- assign reg 0
      Popping a11(r403,l0)  -- assign reg 0
      Popping a12(r404,l0)  -- assign reg 0
      Popping a321(r433,l0: a233(r433,l8: a67(r433,l10)))  -- assign reg 0
      Popping a326(r435,l0: a238(r435,l8: a72(r435,l10)))  -- assign reg 0
      Popping a24(r272,l0)  -- assign reg 0
      Popping a30(r149,l0)  -- assign reg 0
      Popping a29(r261,l0)  -- assign reg 0
      Popping a25(r271,l0)  -- assign reg 2
      Popping a26(r270,l0)  -- assign reg 0
      Popping a225(r320,l0: a51(r320,l8))  -- assign reg 0
      Popping a23(r85,l0)  -- assign reg 1
      Popping a27(r269,l0)  -- assign reg 2
      Popping a217(r397,l0: a43(r397,l8))  -- assign reg 0
      Popping a340(r445,l0: a252(r445,l8: a86(r445,l10)))  -- assign reg 2
      Popping a343(r443,l0: a255(r443,l8: a89(r443,l10)))  -- assign reg 2
      Popping a351(r441,l0: a263(r441,l8: a97(r441,l10)))  -- assign reg 2
Spilling a362r328 for a215r451
Assigning 5 to a215r451
       a362(r328,l0: a274(r328,l8: a140(r328,l9)))  -- assign memory

  Loop 14 (parent 0, header bb110, depth 1)
    bbs: 110(->111:l0)
    all: 31r129 32r132 33r420 34r417 35r418 36r414
    modified regnos: 129 132 414 417 418 420
    border: 31r129 32r132
    Pressure: GENERAL_REGS=3
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@486
          2:( 1-5)@306
      Allocno a31r129 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a32r132 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a33r420 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a34r417 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a36r414 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 10:a34r417-a35r418 (freq=9):
        Result (freq=36): a34r417(18) a35r418(18)
      Forming thread by copy 11:a33r420-a34r417 (freq=9):
        Result (freq=54): a33r420(18) a34r417(18) a35r418(18)
      Pushing a36(r414,l14)(cost 0)
      Pushing a31(r129,l14)(cost 0)
      Pushing a32(r132,l14)(cost 0)
      Pushing a34(r417,l14)(cost 0)
      Pushing a33(r420,l14)(cost 0)
      Popping a33(r420,l14)  -- assign reg 0
      Popping a34(r417,l14)  -- assign reg 0
      Popping a32(r132,l14)  -- assign reg 3
      Popping a31(r129,l14)  -- assign reg 1
      Popping a36(r414,l14)  -- assign reg 0

  Loop 8 (parent 0, header bb22, depth 1)
    bbs: 108(->109:l0) 107 106 105 104 103 31(->32:l10) 30 29 28 24(->25:l9) 23 22
    all: 37r125 38r252 39r449 40r456 41r451 42r83 43r397 44r450 45r123 46r189 47r106 48r136 49r135 50r104 51r320 52r317 53r318 228r186 229r112 230r448 231r165 232r181 233r433 234r434 235r254 236r424 237r209 238r435 239r436 240r422 241r117 242r113 243r203 244r427 245r428 246r437 247r438 248r258 249r421 250r386 251r229 252r445 253r374 254r212 255r443 256r187 257r366 258r365 259r364 260r363 261r356 262r120 263r441 264r345 265r347 266r344 267r339 268r342 269r340 270r334 271r332 272r330 273r329 274r328 275r439
    modified regnos: 83 104 106 112 113 117 120 123 125 135 136 165 181 186 187 189 203 209 212 229 252 254 258 317 318 320 328 329 330 332 334 339 340 342 344 345 347 356 363 364 365 366 374 386 397 421 422 424 427 428 433 434 435 436 437 438 439 441 443 445 448 449 450 451
    border: 37r125 38r252 39r449 40r456
    Pressure: GENERAL_REGS=15
 Removing pref0:hr0@9
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@26426
          2:( 2-5)@1205
            3:( 3-5)@10220
          4:( 0 1)@3098
      Spill a48(r136,l8)
      Allocno a37r125 of GENERAL_REGS(7) has 5 avail. regs  1-5, ^node:  0-5 (confl regs =  0 6-75)
      Allocno a38r252 of GENERAL_REGS(7) has 4 avail. regs  2-5, node:  2-5 (confl regs =  0 1 6-75)
      Allocno a39r449 of GENERAL_REGS(7) has 4 avail. regs  2-5, node:  2-5 (confl regs =  0 1 6-75)
      Allocno a41r451 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a42r83 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a43r397 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a44r450 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a45r123 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a46r189 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a47r106 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a49r135 of GENERAL_REGS(7) has 2 avail. regs  0 1, node:  0 1 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a50r104 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a51r320 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a52r317 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a53r318 of GENERAL_REGS(7) has 5 avail. regs  1-5, ^node:  0-5 (confl regs =  0 6-75)
      Allocno a228r186 of GENERAL_REGS(7) has 5 avail. regs  1-5, ^node:  0-5 (confl regs =  0 6-75)
      Allocno a229r112 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 obj 0 (confl regs =  0-2 6-75),  obj 1 (confl regs =  0-2 6-75)
      Allocno a230r448 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a231r165 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a232r181 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a233r433 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a234r434 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a235r254 of GENERAL_REGS(7) has 5 avail. regs  1-5, ^node:  0-5 (confl regs =  0 6-75)
      Allocno a236r424 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a237r209 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a238r435 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a239r436 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a240r422 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a241r117 of GENERAL_REGS(7) has 5 avail. regs  1-5, ^node:  0-5 obj 0 (confl regs =  0 6-75),  obj 1 (confl regs =  0 6-75)
      Allocno a242r113 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 obj 0 (confl regs =  0-2 6-75),  obj 1 (confl regs =  0-2 6-75)
      Allocno a243r203 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a244r427 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a245r428 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a246r437 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a247r438 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a248r258 of GENERAL_REGS(7) has 5 avail. regs  1-5, ^node:  0-5 (confl regs =  0 6-75)
      Allocno a249r421 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a250r386 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a251r229 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a252r445 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a253r374 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a254r212 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a255r443 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a256r187 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a257r366 of GENERAL_REGS(7) has 2 avail. regs  0 1, node:  0 1 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a258r365 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a259r364 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a260r363 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a261r356 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a262r120 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a263r441 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a264r345 of GENERAL_REGS(7) has 2 avail. regs  0 1, node:  0 1 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a265r347 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a266r344 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a267r339 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a268r342 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a269r340 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a270r334 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a271r332 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a272r330 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a273r329 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a274r328 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a275r439 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 12:a37r125-a41r451 (freq=1):
        Result (freq=158): a37r125(45) a41r451(113)
      Forming thread by copy 64:a250r386-a251r229 (freq=1):
        Result (freq=9): a250r386(4) a251r229(5)
      Forming thread by copy 65:a253r374-a254r212 (freq=1):
        Result (freq=9): a253r374(4) a254r212(5)
      Forming thread by copy 67:a258r365-a259r364 (freq=1):
        Result (freq=28): a258r365(14) a259r364(14)
      Forming thread by copy 68:a258r365-a260r363 (freq=1):
        Result (freq=42): a258r365(14) a260r363(14) a259r364(14)
      Forming thread by copy 71:a261r356-a262r120 (freq=1):
        Result (freq=27): a261r356(16) a262r120(11)
      Pushing a263(r441,l8: a97(r441,l10))(cost 0)
        Making a247(r438,l8: a81(r438,l10)) colorable
      Pushing a255(r443,l8: a89(r443,l10))(cost 0)
        Making a239(r436,l8: a73(r436,l10)) colorable
      Pushing a252(r445,l8: a86(r445,l10))(cost 0)
        Making a234(r434,l8: a68(r434,l10)) colorable
      Pushing a43(r397,l8)(cost 0)
      Pushing a51(r320,l8)(cost 0)
      Pushing a238(r435,l8: a72(r435,l10))(cost 0)
      Pushing a233(r433,l8: a67(r433,l10))(cost 0)
      Pushing a240(r422,l8: a74(r422,l10))(cost 0)
      Pushing a236(r424,l8: a70(r424,l10))(cost 0)
      Pushing a235(r254,l8: a69(r254,l10))(cost 0)
      Pushing a253(r374,l8: a87(r374,l10))(cost 0)
      Pushing a254(r212,l8: a88(r212,l10))(cost 0)
      Pushing a250(r386,l8: a84(r386,l10))(cost 0)
      Pushing a251(r229,l8: a85(r229,l10))(cost 0)
      Pushing a53(r318,l8)(cost 0)
      Pushing a239(r436,l8: a73(r436,l10))(cost 63)
      Pushing a234(r434,l8: a68(r434,l10))(cost 63)
      Pushing a246(r437,l8: a80(r437,l10))(cost 0)
      Pushing a52(r317,l8)(cost 0)
      Pushing a262(r120,l8: a96(r120,l10))(cost 0)
      Pushing a261(r356,l8: a95(r356,l10))(cost 0)
      Pushing a249(r421,l8: a83(r421,l10))(cost 0)
      Pushing a248(r258,l8: a82(r258,l10))(cost 0)
      Pushing a247(r438,l8: a81(r438,l10))(cost 208)
      Pushing a260(r363,l8: a94(r363,l10))(cost 0)
      Pushing a259(r364,l8: a93(r364,l10))(cost 0)
      Pushing a258(r365,l8: a92(r365,l10))(cost 0)
        Making a257(r366,l8: a91(r366,l10)) colorable
      Pushing a257(r366,l8: a91(r366,l10))(cost 147)
      Pushing a271(r332,l8: a137(r332,l9))(cost 0)
      Pushing a37(r125,l8)(cost 0)
        Making a39(r449,l8) colorable
        Making a38(r252,l8) colorable
      Pushing a38(r252,l8)(cost 68)
      Pushing a39(r449,l8)(cost 59)
      Pushing a231(r165,l8: a65(r165,l10))(cost 0)
      Pushing a42(r83,l8)(potential spill: pri=0, cost=67)
      Pushing a45(r123,l8)(potential spill: pri=1, cost=494)
        Making a232(r181,l8: a66(r181,l10)) colorable
        Making a268(r342,l8: a102(r342,l10)) colorable
        Making a269(r340,l8: a103(r340,l10)) colorable
      Pushing a269(r340,l8: a103(r340,l10))(cost 189)
        Making a267(r339,l8: a101(r339,l10)) colorable
      Pushing a268(r342,l8: a102(r342,l10))(cost 189)
      Pushing a232(r181,l8: a66(r181,l10))(cost 365)
      Pushing a267(r339,l8: a101(r339,l10))(cost 432)
      Forming thread by copy 72:a266r344-a268r342 (freq=3):
        Result (freq=108): a266r344(54) a268r342(54)
      Forming thread by copy 73:a266r344-a269r340 (freq=3):
        Result (freq=162): a266r344(54) a269r340(54) a268r342(54)
        Making a266(r344,l8: a100(r344,l10)) colorable
      Pushing a266(r344,l8: a100(r344,l10))(cost 162)
      Pushing a47(r106,l8)(potential spill: pri=5, cost=332)
        Making a275(r439,l8: a141(r439,l9)) colorable
      Forming thread by copy 75:a270r334-a271r332 (freq=3):
        Result (freq=108): a270r334(54) a271r332(54)
        Making a270(r334,l8: a136(r334,l9)) colorable
        Making a272(r330,l8: a138(r330,l9)) colorable
      Forming thread by copy 76:a272r330-a273r329 (freq=1):
        Result (freq=52): a272r330(26) a273r329(26)
      Forming thread by copy 77:a272r330-a274r328 (freq=1):
        Result (freq=78): a272r330(26) a274r328(26) a273r329(26)
      Pushing a275(r439,l8: a141(r439,l9))(cost 189)
      Pushing a272(r330,l8: a138(r330,l9))(cost 78)
      Pushing a270(r334,l8: a136(r334,l9))(cost 162)
      Pushing a50(r104,l8)(potential spill: pri=5, cost=697)
        Making a273(r329,l8: a139(r329,l9)) colorable
        Making a274(r328,l8: a140(r328,l9)) colorable
      Pushing a274(r328,l8: a140(r328,l9))(cost 91)
        Making a41(r451,l8) colorable
      Pushing a273(r329,l8: a139(r329,l9))(cost 91)
      Pushing a41(r451,l8)(cost 412)
        Making a49(r135,l8) colorable
      Pushing a49(r135,l8)(cost 835)
      Pushing a44(r450,l8)(potential spill: pri=13, cost=440)
        Making a265(r347,l8: a99(r347,l10)) colorable
      Pushing a265(r347,l8: a99(r347,l10))(cost 432)
        Making a46(r189,l8) colorable
      Pushing a46(r189,l8)(cost 5244)
        Making a264(r345,l8: a98(r345,l10)) colorable
      Pushing a264(r345,l8: a98(r345,l10))(cost 567)
      Pushing a230(r448,l8: a64(r448,l10))(potential spill: pri=80, cost=80)
        Making a256(r187,l8: a90(r187,l10)) colorable
      Pushing a256(r187,l8: a90(r187,l10))(cost 1477)
      Pushing a237(r209,l8: a71(r209,l10))(potential spill: pri=100, cost=100)
        Making a228(r186,l8: a62(r186,l10)) colorable
      Pushing a228(r186,l8: a62(r186,l10))(cost 265)
        Making a241(r117,l8: a75(r117,l10)) colorable
      Pushing a241(r117,l8: a75(r117,l10))(cost 508)
      Pushing a245(r428,l8: a79(r428,l10))(potential spill: pri=136, cost=136)
      Pushing a244(r427,l8: a78(r427,l10))(potential spill: pri=143, cost=143)
      Pushing a242(r113,l8: a76(r113,l10))(potential spill: pri=272, cost=272)
        Making a243(r203,l8: a77(r203,l10)) colorable
      Pushing a243(r203,l8: a77(r203,l10))(cost 1277)
      Forming thread by copy 74:a229r112-a265r347 (freq=27):
        Result (freq=572): a229r112(518) a265r347(54)
        Making a229(r112,l8: a63(r112,l10)) colorable
      Pushing a229(r112,l8: a63(r112,l10))(cost 2256)
      Popping a229(r112,l8: a63(r112,l10))  -- assign reg 4
      Popping a243(r203,l8: a77(r203,l10))  -- assign reg 3
      Popping a242(r113,l8: a76(r113,l10))  -- spill
      Popping a244(r427,l8: a78(r427,l10))  -- spill
      Popping a245(r428,l8: a79(r428,l10))  -- spill
      Popping a241(r117,l8: a75(r117,l10))  -- assign reg 2
      Popping a228(r186,l8: a62(r186,l10))  -- assign reg 1
      Popping a237(r209,l8: a71(r209,l10))  -- spill
      Popping a256(r187,l8: a90(r187,l10))  -- assign reg 0
      Popping a230(r448,l8: a64(r448,l10))  -- spill
      Popping a264(r345,l8: a98(r345,l10))  -- assign reg 0
      Popping a46(r189,l8)  -- assign reg 2
      Popping a265(r347,l8: a99(r347,l10))  -- assign reg 4
      Popping a44(r450,l8)  -- assign reg 3
      Popping a49(r135,l8)  -- assign reg 0
      Popping a41(r451,l8)  -- assign reg 4
      Popping a273(r329,l8: a139(r329,l9))  -- assign reg 2
      Popping a274(r328,l8: a140(r328,l9))  -- assign reg 3
      Popping a50(r104,l8)  -- (memory is more profitable 755 vs 2147483647) spill
      Popping a270(r334,l8: a136(r334,l9))  -- assign reg 2
      Popping a272(r330,l8: a138(r330,l9))  -- assign reg 2
      Popping a275(r439,l8: a141(r439,l9))  -- assign reg 2
      Popping a47(r106,l8)  -- assign reg 5
      Popping a266(r344,l8: a100(r344,l10))  -- assign reg 4
      Popping a267(r339,l8: a101(r339,l10))  -- assign reg 0
      Popping a232(r181,l8: a66(r181,l10))  -- assign reg 3
      Popping a268(r342,l8: a102(r342,l10))  -- assign reg 1
      Popping a269(r340,l8: a103(r340,l10))  -- assign reg 4
      Popping a45(r123,l8)  -- spill
      Popping a42(r83,l8)  -- spill
      Popping a231(r165,l8: a65(r165,l10))  -- assign reg 0
      Popping a39(r449,l8)  -- assign reg 5
      Popping a38(r252,l8)  -- assign reg 2
      Popping a37(r125,l8)  -- assign reg 3
      Popping a271(r332,l8: a137(r332,l9))  -- assign reg 2
      Popping a257(r366,l8: a91(r366,l10))  -- assign reg 0
      Popping a258(r365,l8: a92(r365,l10))  -- assign reg 2
      Popping a259(r364,l8: a93(r364,l10))  -- assign reg 0
      Popping a260(r363,l8: a94(r363,l10))  -- assign reg 2
      Popping a247(r438,l8: a81(r438,l10))  -- assign reg 1
      Popping a248(r258,l8: a82(r258,l10))  -- assign reg 1
      Popping a249(r421,l8: a83(r421,l10))  -- assign reg 0
      Popping a261(r356,l8: a95(r356,l10))  -- assign reg 0
      Popping a262(r120,l8: a96(r120,l10))  -- assign reg 0
      Popping a52(r317,l8)  -- assign reg 0
      Popping a246(r437,l8: a80(r437,l10))  -- assign reg 0
      Popping a234(r434,l8: a68(r434,l10))  -- assign reg 1
      Popping a239(r436,l8: a73(r436,l10))  -- assign reg 1
      Popping a53(r318,l8)  -- assign reg 1
      Popping a251(r229,l8: a85(r229,l10))  -- assign reg 0
      Popping a250(r386,l8: a84(r386,l10))  -- assign reg 0
      Popping a254(r212,l8: a88(r212,l10))  -- assign reg 0
      Popping a253(r374,l8: a87(r374,l10))  -- assign reg 0
      Popping a235(r254,l8: a69(r254,l10))  -- assign reg 1
      Popping a236(r424,l8: a70(r424,l10))  -- assign reg 0
      Popping a240(r422,l8: a74(r422,l10))  -- assign reg 0
      Popping a233(r433,l8: a67(r433,l10))  -- assign reg 0
      Popping a238(r435,l8: a72(r435,l10))  -- assign reg 0
      Popping a51(r320,l8)  -- assign reg 0
      Popping a43(r397,l8)  -- assign reg 0
      Popping a252(r445,l8: a86(r445,l10))  -- assign reg 2
      Popping a255(r443,l8: a89(r443,l10))  -- assign reg 2
      Popping a263(r441,l8: a97(r441,l10))  -- assign reg 2
Spilling a41r451 for a50r104
Spilling a274r328 for a50r104
Assigning 3 to a50r104
       a274(r328,l8: a140(r328,l9))  -- assign memory
       a41(r451,l8)  -- assign memory

  Loop 10 (parent 8, header bb32, depth 2)
    bbs: 129 128 127 121 120 119 118 117 116 115 114 113 112 102 101(->104:l8) 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 79(->80:l13) 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 56(->57:l12) 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 33(->34:l11) 32
    all: 54r83 55r106 56r123 57r136 58r189 59r450 60r456 61r451 62r186 63r112 64r448 65r165 66r181 67r433 68r434 69r254 70r424 71r209 72r435 73r436 74r422 75r117 76r113 77r203 78r427 79r428 80r437 81r438 82r258 83r421 84r386 85r229 86r445 87r374 88r212 89r443 90r187 91r366 92r365 93r364 94r363 95r356 96r120 97r441 98r345 99r347 100r344 101r339 102r342 103r340
    modified regnos: 83 106 112 113 117 120 123 165 181 186 187 189 203 209 212 229 254 258 339 340 342 344 345 347 356 363 364 365 366 374 386 421 422 424 427 428 433 434 435 436 437 438 441 443 445 448 450 451
    border: 54r83 55r106 56r123 57r136 58r189 59r450 60r456 61r451
    Pressure: GENERAL_REGS=15
 Removing pref23:hr0@27
 Removing pref17:hr0@6
 Removing pref15:hr0@6
 Removing pref16:hr0@22
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@23154
          2:( 1-5)@1850
            3:( 3-5)@10820
      Allocno a54r83 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a55r106 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a56r123 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a57r136 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 obj 0 (confl regs =  0-2 6-75),  obj 1 (confl regs =  0-2 6-75)
      Allocno a58r189 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a59r450 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a61r451 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a62r186 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a63r112 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 obj 0 (confl regs =  0-2 6-75),  obj 1 (confl regs =  0-2 6-75)
      Allocno a64r448 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a65r165 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a66r181 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a67r433 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a68r434 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a69r254 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a70r424 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a71r209 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a72r435 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a73r436 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a74r422 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a75r117 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 obj 0 (confl regs =  0 6-75),  obj 1 (confl regs =  0 6-75)
      Allocno a76r113 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 obj 0 (confl regs =  0-2 6-75),  obj 1 (confl regs =  0-2 6-75)
      Allocno a77r203 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a78r427 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a79r428 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0-2 6-75)
      Allocno a80r437 of GENERAL_REGS(7) has 5 avail. regs  0 2-5, ^node:  0-5 (confl regs =  1 6-75)
      Allocno a81r438 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a82r258 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 (confl regs =  0 6-75)
      Allocno a83r421 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a84r386 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a85r229 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a86r445 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a87r374 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a88r212 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a89r443 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a90r187 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a91r366 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a92r365 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a93r364 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a94r363 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a95r356 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a96r120 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a97r441 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a98r345 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a99r347 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a100r344 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a101r339 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a102r342 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a103r340 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 14:a84r386-a85r229 (freq=1):
        Result (freq=9): a84r386(4) a85r229(5)
      Forming thread by copy 15:a87r374-a88r212 (freq=1):
        Result (freq=9): a87r374(4) a88r212(5)
      Forming thread by copy 17:a92r365-a93r364 (freq=1):
        Result (freq=28): a92r365(14) a93r364(14)
      Forming thread by copy 21:a95r356-a96r120 (freq=1):
        Result (freq=27): a95r356(16) a96r120(11)
      Pushing a97(r441,l10)(cost 0)
        Making a81(r438,l10) colorable
      Pushing a89(r443,l10)(cost 0)
        Making a73(r436,l10) colorable
      Pushing a86(r445,l10)(cost 0)
        Making a68(r434,l10) colorable
      Pushing a72(r435,l10)(cost 0)
      Pushing a67(r433,l10)(cost 0)
      Pushing a74(r422,l10)(cost 0)
      Pushing a70(r424,l10)(cost 0)
      Pushing a69(r254,l10)(cost 0)
      Pushing a87(r374,l10)(cost 0)
      Pushing a88(r212,l10)(cost 0)
      Pushing a84(r386,l10)(cost 0)
      Pushing a85(r229,l10)(cost 0)
      Pushing a73(r436,l10)(cost 63)
      Pushing a68(r434,l10)(cost 63)
      Pushing a94(r363,l10)(cost 0)
      Pushing a80(r437,l10)(cost 0)
      Pushing a96(r120,l10)(cost 0)
      Pushing a95(r356,l10)(cost 0)
      Pushing a93(r364,l10)(cost 0)
      Pushing a92(r365,l10)(cost 0)
        Making a91(r366,l10) colorable
      Pushing a91(r366,l10)(cost 147)
      Pushing a83(r421,l10)(cost 0)
      Pushing a82(r258,l10)(cost 0)
      Pushing a81(r438,l10)(cost 208)
      Pushing a61(r451,l10)(cost 0)
      Pushing a65(r165,l10)(cost 0)
      Pushing a54(r83,l10)(potential spill: pri=0, cost=10)
      Pushing a79(r428,l10)(potential spill: pri=0, cost=136)
      Pushing a78(r427,l10)(potential spill: pri=0, cost=143)
      Pushing a76(r113,l10)(potential spill: pri=0, cost=272)
      Pushing a57(r136,l10)(potential spill: pri=0, cost=285)
      Pushing a56(r123,l10)(potential spill: pri=0, cost=462)
        Making a66(r181,l10) colorable
        Making a102(r342,l10) colorable
        Making a103(r340,l10) colorable
      Pushing a103(r340,l10)(cost 189)
        Making a101(r339,l10) colorable
      Pushing a102(r342,l10)(cost 189)
      Pushing a66(r181,l10)(cost 365)
      Pushing a101(r339,l10)(cost 432)
      Forming thread by copy 22:a100r344-a102r342 (freq=3):
        Result (freq=108): a100r344(54) a102r342(54)
        Making a100(r344,l10) colorable
        Making a55(r106,l10) colorable
      Pushing a55(r106,l10)(cost 348)
      Pushing a100(r344,l10)(cost 162)
      Pushing a64(r448,l10)(potential spill: pri=1, cost=80)
        Making a90(r187,l10) colorable
      Pushing a90(r187,l10)(cost 1477)
      Pushing a71(r209,l10)(potential spill: pri=1, cost=100)
        Making a62(r186,l10) colorable
      Pushing a62(r186,l10)(cost 265)
        Making a75(r117,l10) colorable
      Pushing a75(r117,l10)(cost 508)
      Pushing a63(r112,l10)(potential spill: pri=1, cost=2256)
        Making a77(r203,l10) colorable
        Making a59(r450,l10) colorable
      Pushing a59(r450,l10)(cost 456)
        Making a58(r189,l10) colorable
      Pushing a77(r203,l10)(cost 1277)
      Pushing a58(r189,l10)(cost 5260)
        Making a99(r347,l10) colorable
      Pushing a99(r347,l10)(cost 432)
        Making a98(r345,l10) colorable
      Pushing a98(r345,l10)(cost 567)
      Popping a98(r345,l10)  -- assign reg 0
      Popping a99(r347,l10)  -- assign reg 4
      Popping a58(r189,l10)  -- assign reg 2
      Popping a77(r203,l10)  -- assign reg 3
      Popping a59(r450,l10)  -- assign reg 3
      Popping a63(r112,l10)  -- assign reg 4
      Popping a75(r117,l10)  -- assign reg 2
      Popping a62(r186,l10)  -- assign reg 1
      Popping a71(r209,l10)  -- spill
      Popping a90(r187,l10)  -- assign reg 0
      Popping a64(r448,l10)  -- spill
      Popping a100(r344,l10)  -- assign reg 4
      Popping a55(r106,l10)  -- assign reg 5
      Popping a101(r339,l10)  -- assign reg 0
      Popping a66(r181,l10)  -- assign reg 3
      Popping a102(r342,l10)  -- assign reg 1
      Popping a103(r340,l10)  -- assign reg 4
      Popping a56(r123,l10)  -- spill
      Popping a57(r136,l10)  -- spill
      Popping a76(r113,l10)  -- spill
      Popping a78(r427,l10)  -- spill
      Popping a79(r428,l10)  -- spill
      Popping a54(r83,l10)  -- spill
      Popping a65(r165,l10)  -- assign reg 0
      Popping a61(r451,l10)  -- assign reg 0
      Popping a81(r438,l10)  -- assign reg 1
      Popping a82(r258,l10)  -- assign reg 1
      Popping a83(r421,l10)  -- assign reg 0
      Popping a91(r366,l10)  -- assign reg 0
      Popping a92(r365,l10)  -- assign reg 2
      Popping a93(r364,l10)  -- assign reg 0
      Popping a95(r356,l10)  -- assign reg 0
      Popping a96(r120,l10)  -- assign reg 0
      Popping a80(r437,l10)  -- assign reg 0
      Popping a94(r363,l10)  -- assign reg 2
      Popping a68(r434,l10)  -- assign reg 1
      Popping a73(r436,l10)  -- assign reg 1
      Popping a85(r229,l10)  -- assign reg 0
      Popping a84(r386,l10)  -- assign reg 0
      Popping a88(r212,l10)  -- assign reg 0
      Popping a87(r374,l10)  -- assign reg 0
      Popping a69(r254,l10)  -- assign reg 1
      Popping a70(r424,l10)  -- assign reg 0
      Popping a74(r422,l10)  -- assign reg 0
      Popping a67(r433,l10)  -- assign reg 0
      Popping a72(r435,l10)  -- assign reg 0
      Popping a86(r445,l10)  -- assign reg 2
      Popping a89(r443,l10)  -- assign reg 2
      Popping a97(r441,l10)  -- assign reg 2

  Loop 13 (parent 10, header bb80, depth 3)
    bbs: 85(->86:l10) 84 83 82 81 80
    all: 104r83 105r112 106r123 107r136 108r165 109r181 110r456
    modified regnos: 165 181
    border: 104r83 105r112 106r123 107r136 108r165 109r181 110r456
    Pressure: GENERAL_REGS=9
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@3994
      Spill a104(r83,l13)
      Spill a106(r123,l13)
      Spill a107(r136,l13)
      Allocno a105r112 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a108r165 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a109r181 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Pushing a109(r181,l13)(cost 0)
      Pushing a105(r112,l13)(cost 0)
      Pushing a108(r165,l13)(cost 0)
      Popping a108(r165,l13)  -- assign reg 0
      Popping a105(r112,l13)  -- assign reg 4
      Popping a109(r181,l13)  -- assign reg 3

  Loop 12 (parent 10, header bb57, depth 3)
    bbs: 62(->63:l10) 61 60 59 58 57
    all: 111r83 112r112 113r117 114r123 115r136 116r186 117r187 118r448 119r456
    modified regnos: 186 187
    border: 111r83 112r112 113r117 114r123 115r136 116r186 117r187 118r448 119r456
    Pressure: GENERAL_REGS=12
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@3994
      Spill a111(r83,l12)
      Spill a114(r123,l12)
      Spill a115(r136,l12)
      Spill a118(r448,l12)
      Allocno a112r112 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a113r117 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a116r186 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a117r187 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Pushing a116(r186,l12)(cost 0)
      Pushing a117(r187,l12)(cost 0)
        Making a112(r112,l12) colorable
        Making a113(r117,l12) colorable
      Pushing a112(r112,l12)(cost 224)
      Pushing a113(r117,l12)(cost 616)
      Popping a113(r117,l12)  -- assign reg 2
      Popping a112(r112,l12)  -- assign reg 4
      Popping a117(r187,l12)  -- assign reg 0
      Popping a116(r186,l12)  -- assign reg 1

  Loop 11 (parent 10, header bb34, depth 3)
    bbs: 39(->40:l10) 38 37 36 35 34
    all: 120r83 121r112 122r113 123r123 124r136 125r189 126r203 127r427 128r428 129r456
    modified regnos: 189 203
    border: 120r83 121r112 122r113 123r123 124r136 125r189 126r203 127r427 128r428 129r456
    Pressure: GENERAL_REGS=13
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@13872
      Spill a120(r83,l11)
      Spill a122(r113,l11)
      Spill a123(r123,l11)
      Spill a124(r136,l11)
      Spill a127(r427,l11)
      Spill a128(r428,l11)
      Allocno a121r112 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a125r189 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a126r203 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Pushing a126(r203,l11)(cost 0)
      Pushing a121(r112,l11)(cost 0)
      Pushing a125(r189,l11)(cost 0)
      Popping a125(r189,l11)  -- assign reg 2
      Popping a121(r112,l11)  -- assign reg 4
      Popping a126(r203,l11)  -- assign reg 3

  Loop 9 (parent 8, header bb25, depth 2)
    bbs: 27(->28:l8) 26 25
    all: 130r104 131r106 132r135 133r136 134r451 135r456 136r334 137r332 138r330 139r329 140r328 141r439
    modified regnos: 104 135 136 328 329 330 332 334 439
    border: 130r104 131r106 132r135 133r136 134r451 135r456
    Pressure: GENERAL_REGS=10
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@2950
          2:( 0 1)@2262
      Spill a134(r451,l9)
      Allocno a130r104 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a131r106 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a132r135 of GENERAL_REGS(7) has 2 avail. regs  0 1, node:  0 1 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a133r136 of GENERAL_REGS(7) has 2 avail. regs  0 1, node:  0 1 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a136r334 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a137r332 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a138r330 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a139r329 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a140r328 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a141r439 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 25:a136r334-a137r332 (freq=3):
        Result (freq=108): a136r334(54) a137r332(54)
      Forming thread by copy 26:a138r330-a139r329 (freq=1):
        Result (freq=52): a138r330(26) a139r329(26)
      Pushing a138(r330,l9)(cost 0)
      Pushing a141(r439,l9)(cost 0)
      Pushing a137(r332,l9)(cost 0)
      Pushing a136(r334,l9)(cost 0)
      Pushing a131(r106,l9)(potential spill: pri=0, cost=32)
        Making a139(r329,l9) colorable
        Making a140(r328,l9) colorable
      Pushing a140(r328,l9)(cost 91)
        Making a130(r104,l9) colorable
      Pushing a139(r329,l9)(cost 91)
      Pushing a130(r104,l9)(cost 717)
      Pushing a133(r136,l9)(potential spill: pri=1, cost=248)
        Making a132(r135,l9) colorable
      Pushing a132(r135,l9)(cost 867)
      Popping a132(r135,l9)  -- assign reg 0
      Popping a133(r136,l9)  -- spill
      Popping a130(r104,l9)  -- assign reg 2
      Popping a139(r329,l9)  -- assign reg 4
      Popping a140(r328,l9)  -- assign reg 5
      Popping a131(r106,l9)  -- spill
      Popping a136(r334,l9)  -- assign reg 4
      Popping a137(r332,l9)  -- assign reg 4
      Popping a141(r439,l9)  -- assign reg 4
      Popping a138(r330,l9)  -- assign reg 4

  Loop 7 (parent 0, header bb19, depth 1)
    bbs: 19(->20:l0)
    all: 142r101 143r449 144r457 145r315 146r312 147r304 148r307 149r305
    modified regnos: 101 304 305 307 312 315
    border: 142r101 143r449 144r457
    Pressure: GENERAL_REGS=8
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@12240
          2:( 0 1)@3780
      Spill a143(r449,l7)
      Allocno a142r101 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a145r315 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a146r312 of GENERAL_REGS(7) has 2 avail. regs  0 1, node:  0 1 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a147r304 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a148r307 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a149r305 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 29:a145r315-a146r312 (freq=90):
        Result (freq=540): a145r315(180) a146r312(360)
      Pushing a149(r305,l7)(cost 0)
      Pushing a148(r307,l7)(cost 0)
      Forming thread by copy 28:a147r304-a149r305 (freq=11):
        Result (freq=360): a147r304(180) a149r305(180)
        Making a147(r304,l7) colorable
      Pushing a147(r304,l7)(cost 1350)
        Making a142(r101,l7) colorable
      Pushing a145(r315,l7)(cost 0)
      Pushing a142(r101,l7)(cost 2716)
        Making a146(r312,l7) colorable
      Pushing a146(r312,l7)(cost 1890)
      Popping a146(r312,l7)  -- assign reg 1
      Popping a142(r101,l7)  -- assign reg 4
      Popping a145(r315,l7)  -- assign reg 1
      Popping a147(r304,l7)  -- (memory is more profitable 1350 vs 2147483647) spill!
      Popping a148(r307,l7)  -- assign reg 0
      Popping a149(r305,l7)  -- assign reg 1
Assigning 0 to a145r315

  Loop 6 (parent 0, header bb17, depth 1)
    bbs: 17(->18:l0)
    all: 150r94 151r240 152r449 153r458 154r301 155r298 156r290 157r293 158r291
    modified regnos: 94 290 291 293 298 301
    border: 150r94 151r240 152r449 153r458
    Pressure: GENERAL_REGS=9
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@12600
          2:( 0 1)@3780
      Spill a152(r449,l6)
      Allocno a150r94 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a151r240 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a154r301 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a155r298 of GENERAL_REGS(7) has 2 avail. regs  0 1, node:  0 1 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a156r290 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a157r293 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a158r291 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 32:a154r301-a155r298 (freq=90):
        Result (freq=540): a154r301(180) a155r298(360)
      Pushing a158(r291,l6)(cost 0)
      Pushing a154(r301,l6)(cost 0)
      Pushing a151(r240,l6)(potential spill: pri=50, cost=254)
        Making a150(r94,l6) colorable
        Making a157(r293,l6) colorable
      Pushing a157(r293,l6)(cost 630)
      Forming thread by copy 31:a156r290-a158r291 (freq=11):
        Result (freq=360): a156r290(180) a158r291(180)
        Making a156(r290,l6) colorable
      Pushing a156(r290,l6)(cost 1350)
      Pushing a150(r94,l6)(cost 2626)
        Making a155(r298,l6) colorable
      Pushing a155(r298,l6)(cost 1890)
      Popping a155(r298,l6)  -- assign reg 1
      Popping a150(r94,l6)  -- assign reg 4
      Popping a156(r290,l6)  -- (memory is more profitable 1350 vs 2147483647) spill!
      Popping a157(r293,l6)  -- assign reg 0
      Popping a151(r240,l6)  -- assign reg 3
      Popping a154(r301,l6)  -- assign reg 1
      Popping a158(r291,l6)  -- assign reg 1
Assigning 0 to a154r301

  Loop 3 (parent 0, header bb9, depth 1)
    bbs: 125(->13:l5) 124 14(->15:l0) 12 10(->11:l4) 9
    all: 159r87 160r460 161r449 162r175 163r167 164r431 165r432 166r286 167r285 168r284 169r283 170r274 171r84 296r281 297r176 298r174 299r279 300r278 301r280 302r277 303r276 304r275 305r166
    modified regnos: 84 87 166 167 174 175 176 274 275 276 277 278 279 280 281 283 284 285 286 431 432 449
    border: 159r87 160r460 161r449
    Pressure: GENERAL_REGS=9
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@261494
          2:( 1-5)@46578
            3:( 3-5)@34270
      Allocno a159r87 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a161r449 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a162r175 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 obj 0 (confl regs =  0 6-75),  obj 1 (confl regs =  0 6-75)
      Allocno a163r167 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a164r431 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a165r432 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a166r286 of GENERAL_REGS(7) has 2 avail. regs  0 1, ^node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a167r285 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a168r284 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a169r283 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a170r274 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a171r84 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a296r281 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a297r176 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a298r174 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a299r279 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a300r278 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a301r280 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a302r277 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a303r276 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a304r275 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a305r166 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 95:a298r174-a299r279 (freq=910):
        Result (freq=3640): a298r174(1820) a299r279(1820)
      Forming thread by copy 96:a298r174-a300r278 (freq=910):
        Result (freq=5460): a298r174(1820) a300r278(1820) a299r279(1820)
      Forming thread by copy 99:a304r275-a305r166 (freq=113):
        Result (freq=4550): a304r275(1820) a305r166(2730)
      Forming thread by copy 39:a170r274-a171r84 (freq=11):
        Result (freq=450): a170r274(180) a171r84(270)
      Forming thread by copy 35:a167r285-a168r284 (freq=10):
        Result (freq=324): a167r285(162) a168r284(162)
      Pushing a169(r283,l3)(cost 0)
      Pushing a161(r449,l3)(cost 0)
      Pushing a168(r284,l3)(cost 0)
      Pushing a167(r285,l3)(cost 0)
        Making a166(r286,l3) colorable
      Pushing a166(r286,l3)(cost 1458)
      Pushing a170(r274,l3)(cost 0)
      Pushing a171(r84,l3)(cost 0)
      Pushing a301(r280,l3: a183(r280,l5))(cost 0)
      Pushing a304(r275,l3: a191(r275,l4))(cost 0)
      Pushing a305(r166,l3: a192(r166,l4))(cost 0)
      Pushing a298(r174,l3: a180(r174,l5))(cost 0)
      Pushing a159(r87,l3)(potential spill: pri=94, cost=1037)
        Making a296(r281,l3: a178(r281,l5)) colorable
      Forming thread by copy 98:a296r281-a297r176 (freq=113):
        Result (freq=4550): a296r281(1820) a297r176(2730)
        Making a297(r176,l3: a179(r176,l5)) colorable
      Pushing a296(r281,l3: a178(r281,l5))(cost 5460)
      Pushing a297(r176,l3: a179(r176,l5))(cost 11830)
      Pushing a165(r432,l3)(potential spill: pri=723, cost=7960)
      Pushing a164(r431,l3)(potential spill: pri=738, cost=8122)
      Forming thread by copy 94:a299r279-a301r280 (freq=113):
        Result (freq=7280): a298r174(1820) a301r280(1820) a300r278(1820) a299r279(1820)
        Making a299(r279,l3: a181(r279,l5)) colorable
      Pushing a299(r279,l3: a181(r279,l5))(cost 13650)
        Making a300(r278,l3: a182(r278,l5)) colorable
      Pushing a300(r278,l3: a182(r278,l5))(cost 13650)
      Pushing a162(r175,l3)(potential spill: pri=931, cost=23289)
      Forming thread by copy 93:a163r167-a301r280 (freq=113):
        Result (freq=11920): a163r167(4640) a298r174(1820) a301r280(1820) a300r278(1820) a299r279(1820)
        Making a163(r167,l3) colorable
      Pushing a163(r167,l3)(cost 15830)
      Forming thread by copy 91:a300r278-a302r277 (freq=910):
        Result (freq=13740): a163r167(4640) a302r277(1820) a298r174(1820) a301r280(1820) a300r278(1820) a299r279(1820)
        Making a302(r277,l3: a184(r277,l5)) colorable
      Forming thread by copy 92:a300r278-a303r276 (freq=910):
        Result (freq=15560): a163r167(4640) a303r276(1820) a302r277(1820) a298r174(1820) a301r280(1820) a300r278(1820) a299r279(1820)
        Making a303(r276,l3: a185(r276,l5)) colorable
      Pushing a303(r276,l3: a185(r276,l5))(cost 13650)
      Pushing a302(r277,l3: a184(r277,l5))(cost 13650)
      Popping a302(r277,l3: a184(r277,l5))  -- assign reg 0
      Popping a303(r276,l3: a185(r276,l5))  -- assign reg 2
      Popping a163(r167,l3)  -- assign reg 4
      Popping a162(r175,l3)  -- (memory is more profitable 25271 vs 2147483647) spill
      Popping a300(r278,l3: a182(r278,l5))  -- assign reg 0
      Popping a299(r279,l3: a181(r279,l5))  -- assign reg 2
      Popping a164(r431,l3)  -- assign reg 5
      Popping a165(r432,l3)  -- spill
      Popping a297(r176,l3: a179(r176,l5))  -- assign reg 0
      Popping a296(r281,l3: a178(r281,l5))  -- assign reg 0
      Popping a159(r87,l3)  -- spill
      Popping a298(r174,l3: a180(r174,l5))  -- assign reg 0
      Popping a305(r166,l3: a192(r166,l4))  -- assign reg 0
      Popping a304(r275,l3: a191(r275,l4))  -- assign reg 0
      Popping a301(r280,l3: a183(r280,l5))  -- assign reg 2
      Popping a171(r84,l3)  -- assign reg 0
      Popping a170(r274,l3)  -- assign reg 0
      Popping a166(r286,l3)  -- assign reg 0
      Popping a167(r285,l3)  -- assign reg 2
      Popping a168(r284,l3)  -- assign reg 0
      Popping a161(r449,l3)  -- assign reg 0
      Popping a169(r283,l3)  -- assign reg 2
Spilling a163r167 for a162r175
Spilling a164r431 for a162r175
Assigning 4 to a162r175
Spilling a303r276 for a163r167
Assigning 2 to a163r167
       a164(r431,l3)  -- assign memory
       a303(r276,l3: a185(r276,l5))  -- (memory is more profitable 15470 vs 2147483647) assign memory
       a163(r167,l3)  -- assign hard reg 2

  Loop 5 (parent 3, header bb13, depth 2)
    bbs: 13(->14:l3)
    all: 172r87 173r167 174r175 175r431 176r432 177r460 178r281 179r176 180r174 181r279 182r278 183r280 184r277 185r276
    modified regnos: 167 174 175 176 276 277 278 279 280 281
    border: 172r87 173r167 174r175 175r431 176r432 177r460
    Pressure: GENERAL_REGS=9
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@200200
          2:( 1-5)@43680
      Spill a172(r87,l5)
      Spill a175(r431,l5)
      Spill a176(r432,l5)
      Allocno a173r167 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a174r175 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 obj 0 (confl regs =  0 6-75),  obj 1 (confl regs =  0 6-75)
      Allocno a178r281 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a179r176 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a180r174 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a181r279 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a182r278 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a183r280 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a184r277 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a185r276 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Forming thread by copy 45:a180r174-a181r279 (freq=910):
        Result (freq=3640): a180r174(1820) a181r279(1820)
      Forming thread by copy 44:a181r279-a183r280 (freq=113):
        Result (freq=5460): a180r174(1820) a183r280(1820) a181r279(1820)
      Forming thread by copy 48:a178r281-a179r176 (freq=113):
        Result (freq=4550): a178r281(1820) a179r176(2730)
      Pushing a178(r281,l5)(cost 0)
      Pushing a179(r176,l5)(cost 0)
      Pushing a183(r280,l5)(cost 0)
      Pushing a181(r279,l5)(cost 0)
        Making a182(r278,l5) colorable
      Pushing a182(r278,l5)(cost 13650)
      Pushing a180(r174,l5)(cost 0)
      Pushing a185(r276,l5)(potential spill: pri=802, cost=13650)
      Forming thread by copy 43:a173r167-a183r280 (freq=113):
        Result (freq=7280): a173r167(1820) a180r174(1820) a183r280(1820) a181r279(1820)
        Making a173(r167,l5) colorable
        Making a174(r175,l5) colorable
      Forming thread by copy 41:a182r278-a184r277 (freq=910):
        Result (freq=3640): a182r278(1820) a184r277(1820)
      Forming thread by copy 40:a174r175-a184r277 (freq=113):
        Result (freq=6370): a174r175(2730) a182r278(1820) a184r277(1820)
        Making a184(r277,l5) colorable
      Pushing a184(r277,l5)(cost 13650)
      Pushing a174(r175,l5)(cost 24576)
      Pushing a173(r167,l5)(cost 7818)
      Popping a173(r167,l5)  -- assign reg 2
      Popping a174(r175,l5)  -- assign reg 4
      Popping a184(r277,l5)  -- assign reg 4
      Popping a185(r276,l5)  -- assign reg 0
      Popping a180(r174,l5)  -- assign reg 4
      Popping a182(r278,l5)  -- assign reg 4
      Popping a181(r279,l5)  -- assign reg 0
      Popping a183(r280,l5)  -- assign reg 0
      Popping a179(r176,l5)  -- assign reg 0
      Popping a178(r281,l5)  -- assign reg 0

  Loop 4 (parent 3, header bb11, depth 2)
    bbs: 11(->12:l3)
    all: 186r87 187r167 188r431 189r432 190r460 191r275 192r166
    modified regnos: 166 167 275 431 432
    border: 186r87 187r167 188r431 189r432 190r460
    Pressure: GENERAL_REGS=6
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@52780
          2:( 3-5)@29120
      Spill a186(r87,l4)
      Allocno a187r167 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a188r431 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a189r432 of GENERAL_REGS(7) has 3 avail. regs  3-5, node:  3-5 (confl regs =  0 6-75)
      Allocno a191r275 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a192r166 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Forming thread by copy 49:a191r275-a192r166 (freq=113):
        Result (freq=4550): a191r275(1820) a192r166(2730)
      Pushing a187(r167,l4)(cost 0)
      Pushing a191(r275,l4)(cost 0)
        Making a188(r431,l4) colorable
        Making a189(r432,l4) colorable
      Pushing a189(r432,l4)(cost 5984)
      Pushing a188(r431,l4)(cost 5984)
      Pushing a192(r166,l4)(cost 0)
      Popping a192(r166,l4)  -- assign reg 0
      Popping a188(r431,l4)  -- assign reg 3
      Popping a189(r432,l4)  -- assign reg 4
      Popping a191(r275,l4)  -- assign reg 0
      Popping a187(r167,l4)  -- assign reg 2

  Loop 2 (parent 0, header bb6, depth 1)
    bbs: 6(->7:l0)
    all: 193r151 194r159 195r429 196r430 197r268 198r160 199r158 200r266 201r265 202r267 203r264 204r263
    modified regnos: 151 158 159 160 263 264 265 266 267 268
    border: 193r151 194r159 195r429 196r430
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-5)@1980
          2:( 1-5)@432
      Spill a195(r429,l2)
      Spill a196(r430,l2)
      Allocno a193r151 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a194r159 of GENERAL_REGS(7) has 5 avail. regs  1-5, node:  1-5 obj 0 (confl regs =  0 6-75),  obj 1 (confl regs =  0 6-75)
      Allocno a197r268 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a198r160 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a199r158 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a200r266 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a201r265 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a202r267 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 (confl regs =  6-75)
      Allocno a203r264 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Allocno a204r263 of GENERAL_REGS(7) has 6 avail. regs  0-5, node:  0-5 obj 0 (confl regs =  6-75),  obj 1 (confl regs =  6-75)
      Forming thread by copy 55:a199r158-a200r266 (freq=9):
        Result (freq=36): a199r158(18) a200r266(18)
      Forming thread by copy 54:a200r266-a202r267 (freq=1):
        Result (freq=54): a199r158(18) a202r267(18) a200r266(18)
      Forming thread by copy 58:a197r268-a198r160 (freq=1):
        Result (freq=45): a197r268(18) a198r160(27)
      Pushing a197(r268,l2)(cost 0)
      Pushing a198(r160,l2)(cost 0)
      Pushing a202(r267,l2)(cost 0)
      Pushing a200(r266,l2)(cost 0)
        Making a201(r265,l2) colorable
      Pushing a201(r265,l2)(cost 135)
      Pushing a199(r158,l2)(cost 0)
      Pushing a193(r151,l2)(potential spill: pri=87, cost=87)
      Forming thread by copy 57:a194r159-a199r158 (freq=9):
        Result (freq=81): a194r159(27) a199r158(18) a202r267(18) a200r266(18)
        Making a194(r159,l2) colorable
      Forming thread by copy 51:a201r265-a203r264 (freq=9):
        Result (freq=36): a201r265(18) a203r264(18)
        Making a203(r264,l2) colorable
      Pushing a203(r264,l2)(cost 135)
        Making a204(r263,l2) colorable
      Pushing a204(r263,l2)(cost 135)
      Pushing a194(r159,l2)(cost 248)
      Popping a194(r159,l2)  -- assign reg 4
      Popping a204(r263,l2)  -- assign reg 0
      Popping a203(r264,l2)  -- assign reg 4
      Popping a193(r151,l2)  -- assign reg 2
      Popping a199(r158,l2)  -- assign reg 4
      Popping a201(r265,l2)  -- assign reg 4
      Popping a200(r266,l2)  -- assign reg 0
      Popping a202(r267,l2)  -- assign reg 0
      Popping a198(r160,l2)  -- assign reg 0
      Popping a197(r268,l2)  -- assign reg 0

  Loop 1 (parent 0, header bb4, depth 1)
    bbs: 4(->5:l0)
    all: 205r151 206r429 207r430 208r461 209r262 210r150
    modified regnos: 150 151 262 429 430
    border: 205r151 206r429 207r430 208r461
    Pressure: GENERAL_REGS=5
    Hard reg set forest:
      0:( 0-5 8-15 21-36)@0
        1:( 0-2 4 5)@522
          2:( 4 5)@288
      Allocno a205r151 of GENERAL_REGS(7) has 5 avail. regs  0-2 4 5, node:  0-2 4 5 (confl regs =  6-75)
      Allocno a206r429 of GENERAL_REGS(7) has 2 avail. regs  4 5, node:  4 5 (confl regs =  0 6-75)
      Allocno a207r430 of GENERAL_REGS(7) has 2 avail. regs  4 5, node:  4 5 (confl regs =  0 6-75)
      Allocno a209r262 of GENERAL_REGS(7) has 5 avail. regs  0-2 4 5, node:  0-2 4 5 (confl regs =  6-75)
      Allocno a210r150 of GENERAL_REGS(7) has 5 avail. regs  0-2 4 5, node:  0-2 4 5 (confl regs =  6-75)
      Forming thread by copy 59:a209r262-a210r150 (freq=1):
        Result (freq=45): a209r262(18) a210r150(27)
      Pushing a205(r151,l1)(cost 0)
      Pushing a209(r262,l1)(cost 0)
      Pushing a210(r150,l1)(cost 0)
        Making a206(r429,l1) colorable
        Making a207(r430,l1) colorable
      Pushing a207(r430,l1)(cost 56)
      Pushing a206(r429,l1)(cost 56)
      Popping a206(r429,l1)  -- assign reg 4
      Popping a207(r430,l1)  -- assign reg 5
      Popping a210(r150,l1)  -- assign reg 0
      Popping a209(r262,l1)  -- assign reg 0
      Popping a205(r151,l1)  -- assign reg 1
Disposition:
  120:r83  l11  mem  111:r83  l12  mem  104:r83  l13  mem   54:r83  l10  mem
   42:r83  l8   mem  171:r84  l3     0   23:r85  l0     1  186:r87  l4   mem
  172:r87  l5   mem  159:r87  l3   mem   22:r87  l0   mem  150:r94  l6     4
   19:r94  l0     4  142:r101 l7     4   17:r101 l0     4  130:r104 l9     2
   50:r104 l8     3  131:r106 l9   mem   55:r106 l10    5   47:r106 l8     5
  121:r112 l11    4  112:r112 l12    4  105:r112 l13    4   63:r112 l10    4
  122:r113 l11  mem   76:r113 l10  mem  113:r117 l12    2   75:r117 l10    2
   96:r120 l10    0  123:r123 l11  mem  114:r123 l12  mem  106:r123 l13  mem
   56:r123 l10  mem   45:r123 l8   mem   37:r125 l8     3   15:r125 l0     3
   31:r129 l14    1    7:r129 l0     1   32:r132 l14    3    5:r132 l0     3
  132:r135 l9     0   49:r135 l8     0  133:r136 l9   mem  124:r136 l11  mem
  115:r136 l12  mem  107:r136 l13  mem   57:r136 l10  mem   48:r136 l8   mem
   30:r149 l0     0  210:r150 l1     0  205:r151 l1     1  193:r151 l2     2
    1:r151 l0     1  199:r158 l2     4  194:r159 l2     4    0:r159 l0     4
  198:r160 l2     0  108:r165 l13    0   65:r165 l10    0  192:r166 l4     0
  187:r167 l4     2  173:r167 l5     2  163:r167 l3     2  180:r174 l5     4
  174:r175 l5     4  162:r175 l3     4  179:r176 l5     0  109:r181 l13    3
   66:r181 l10    3  116:r186 l12    1   62:r186 l10    1  117:r187 l12    0
   90:r187 l10    0  125:r189 l11    2   58:r189 l10    2   46:r189 l8     2
  126:r203 l11    3   77:r203 l10    3   71:r209 l10  mem   88:r212 l10    0
   85:r229 l10    0  151:r240 l6     3   20:r240 l0   mem   38:r252 l8     2
    9:r252 l0     2   69:r254 l10    1   82:r258 l10    1   29:r261 l0     0
  209:r262 l1     0  204:r263 l2     0  203:r264 l2     4  201:r265 l2     4
  200:r266 l2     0  202:r267 l2     0  197:r268 l2     0   27:r269 l0     2
   26:r270 l0     0   25:r271 l0     2   24:r272 l0     0  170:r274 l3     0
  191:r275 l4     0  185:r276 l5     0  184:r277 l5     4  182:r278 l5     4
  181:r279 l5     0  183:r280 l5     0  178:r281 l5     0  169:r283 l3     2
  168:r284 l3     0  167:r285 l3     2  166:r286 l3     0  156:r290 l6   mem
  158:r291 l6     1  157:r293 l6     0  155:r298 l6     1  154:r301 l6     0
  147:r304 l7   mem  149:r305 l7     1  148:r307 l7     0  146:r312 l7     1
  145:r315 l7     0   52:r317 l8     0   53:r318 l8     1   51:r320 l8     0
  140:r328 l9     5  139:r329 l9     4  138:r330 l9     4  137:r332 l9     4
  136:r334 l9     4  101:r339 l10    0  103:r340 l10    4  102:r342 l10    1
  100:r344 l10    4   98:r345 l10    0   99:r347 l10    4   95:r356 l10    0
   94:r363 l10    2   93:r364 l10    0   92:r365 l10    2   91:r366 l10    0
   87:r374 l10    0   84:r386 l10    0   43:r397 l8     0   11:r403 l0     0
   12:r404 l0     0   10:r406 l0     0    6:r409 l0     0    8:r410 l0   mem
    4:r412 l0     0   36:r414 l14    0   34:r417 l14    0   35:r418 l14  mem
   33:r420 l14    0   83:r421 l10    0   74:r422 l10    0   70:r424 l10    0
  127:r427 l11  mem   78:r427 l10  mem  128:r428 l11  mem   79:r428 l10  mem
  206:r429 l1     4  195:r429 l2   mem    2:r429 l0   mem  207:r430 l1     5
  196:r430 l2   mem    3:r430 l0   mem  188:r431 l4     3  175:r431 l5   mem
  164:r431 l3   mem  189:r432 l4     4  176:r432 l5   mem  165:r432 l3   mem
   67:r433 l10    0   68:r434 l10    1   72:r435 l10    0   73:r436 l10    1
   80:r437 l10    0   81:r438 l10    1  141:r439 l9     4   97:r441 l10    2
   89:r443 l10    2   86:r445 l10    2  118:r448 l12  mem   64:r448 l10  mem
  161:r449 l3     0  152:r449 l6   mem  143:r449 l7   mem   39:r449 l8     5
   13:r449 l0   mem   59:r450 l10    3   44:r450 l8     3  134:r451 l9   mem
   61:r451 l10    0   41:r451 l8   mem  135:r456 l9   mem  129:r456 l11  mem
  119:r456 l12  mem  110:r456 l13  mem   60:r456 l10  mem   40:r456 l8   mem
   14:r456 l0   mem  144:r457 l7   mem   16:r457 l0   mem  153:r458 l6   mem
   18:r458 l0   mem  190:r460 l4   mem  177:r460 l5   mem  160:r460 l3   mem
   21:r460 l0   mem  208:r461 l1     3   28:r461 l0     3
New iteration of spill/restore move
      Changing RTL for loop 14 (header bb110)
  1 vs parent 1:      Creating newreg=462 from oldreg=129
  3 vs parent 3:      Creating newreg=463 from oldreg=132
rescanning insn with uid = 643.
rescanning insn with uid = 647.
rescanning insn with uid = 649.
rescanning insn with uid = 653.
rescanning insn with uid = 655.
      Changing RTL for loop 8 (header bb22)
  3 vs parent 3:      Creating newreg=464 from oldreg=125
  2 vs parent 2:      Creating newreg=465 from oldreg=252
  5 vs parent -1:      Creating newreg=466 from oldreg=449
rescanning insn with uid = 611.
rescanning insn with uid = 612.
rescanning insn with uid = 615.
rescanning insn with uid = 607.
rescanning insn with uid = 904.
rescanning insn with uid = 903.
rescanning insn with uid = 599.
rescanning insn with uid = 594.
rescanning insn with uid = 901.
rescanning insn with uid = 580.
rescanning insn with uid = 581.
rescanning insn with uid = 223.
rescanning insn with uid = 224.
      Changing RTL for loop 10 (header bb32)
  5 vs parent 5:      Creating newreg=467 from oldreg=106
  2 vs parent 2:      Creating newreg=468 from oldreg=189
  3 vs parent 3:      Creating newreg=469 from oldreg=450
  0 vs parent -1:      Creating newreg=470 from oldreg=451
rescanning insn with uid = 574.
rescanning insn with uid = 566.
rescanning insn with uid = 567.
rescanning insn with uid = 568.
rescanning insn with uid = 569.
rescanning insn with uid = 570.
rescanning insn with uid = 293.
rescanning insn with uid = 863.
rescanning insn with uid = 864.
rescanning insn with uid = 300.
      Changing RTL for loop 13 (header bb80)
  4 vs parent 4:      Creating newreg=471 from oldreg=112
  0 vs parent 0:      Creating newreg=472 from oldreg=165
  3 vs parent 3:      Creating newreg=473 from oldreg=181
rescanning insn with uid = 501.
rescanning insn with uid = 497.
rescanning insn with uid = 36.
rescanning insn with uid = 37.
rescanning insn with uid = 488.
rescanning insn with uid = 484.
      Changing RTL for loop 12 (header bb57)
  4 vs parent 4:      Creating newreg=474 from oldreg=112
  2 vs parent 2:      Creating newreg=475 from oldreg=117
  1 vs parent 1:      Creating newreg=476 from oldreg=186
  0 vs parent 0:      Creating newreg=477 from oldreg=187
rescanning insn with uid = 417.
rescanning insn with uid = 413.
rescanning insn with uid = 30.
rescanning insn with uid = 31.
rescanning insn with uid = 404.
rescanning insn with uid = 400.
      Changing RTL for loop 11 (header bb34)
  4 vs parent 4:      Creating newreg=478 from oldreg=112
  2 vs parent 2:      Creating newreg=479 from oldreg=468
  3 vs parent 3:      Creating newreg=480 from oldreg=203
rescanning insn with uid = 321.
rescanning insn with uid = 317.
rescanning insn with uid = 24.
rescanning insn with uid = 25.
rescanning insn with uid = 308.
rescanning insn with uid = 304.
      Changing RTL for loop 9 (header bb25)
  2 vs parent 3:      Creating newreg=481 from oldreg=104
  -1 vs parent 5:      Creating newreg=482 from oldreg=106
  0 vs parent 0:      Creating newreg=483 from oldreg=135
rescanning insn with uid = 263.
rescanning insn with uid = 266.
rescanning insn with uid = 268.
rescanning insn with uid = 270.
rescanning insn with uid = 273.
rescanning insn with uid = 254.
rescanning insn with uid = 255.
rescanning insn with uid = 257.
rescanning insn with uid = 248.
      Changing RTL for loop 7 (header bb19)
  4 vs parent 4:      Creating newreg=484 from oldreg=101
rescanning insn with uid = 191.
rescanning insn with uid = 195.
rescanning insn with uid = 200.
rescanning insn with uid = 204.
rescanning insn with uid = 205.
rescanning insn with uid = 206.
rescanning insn with uid = 208.
      Changing RTL for loop 6 (header bb17)
  4 vs parent 4:      Creating newreg=485 from oldreg=94
  3 vs parent -1:      Creating newreg=486 from oldreg=240
rescanning insn with uid = 168.
rescanning insn with uid = 172.
rescanning insn with uid = 177.
rescanning insn with uid = 181.
rescanning insn with uid = 182.
rescanning insn with uid = 183.
rescanning insn with uid = 185.
      Changing RTL for loop 3 (header bb9)
  0 vs parent -1:      Creating newreg=487 from oldreg=449
rescanning insn with uid = 155.
rescanning insn with uid = 157.
      Changing RTL for loop 5 (header bb13)
  2 vs parent 2:      Creating newreg=488 from oldreg=167
  4 vs parent 4:      Creating newreg=489 from oldreg=175
rescanning insn with uid = 129.
rescanning insn with uid = 130.
rescanning insn with uid = 133.
rescanning insn with uid = 136.
rescanning insn with uid = 139.
      Changing RTL for loop 4 (header bb11)
  2 vs parent 2:      Creating newreg=490 from oldreg=167
  3 vs parent -1:      Creating newreg=491 from oldreg=431
  4 vs parent -1:      Creating newreg=492 from oldreg=432
rescanning insn with uid = 932.
rescanning insn with uid = 934.
rescanning insn with uid = 935.
rescanning insn with uid = 937.
rescanning insn with uid = 120.
      Changing RTL for loop 2 (header bb6)
  2 vs parent 1:      Creating newreg=493 from oldreg=151
  4 vs parent 4:      Creating newreg=494 from oldreg=159
rescanning insn with uid = 77.
rescanning insn with uid = 78.
rescanning insn with uid = 81.
rescanning insn with uid = 84.
rescanning insn with uid = 87.
      Changing RTL for loop 1 (header bb4)
  1 vs parent 1:      Creating newreg=495 from oldreg=151
  4 vs parent -1:      Creating newreg=496 from oldreg=429
  5 vs parent -1:      Creating newreg=497 from oldreg=430
rescanning insn with uid = 926.
rescanning insn with uid = 928.
rescanning insn with uid = 929.
rescanning insn with uid = 931.
rescanning insn with uid = 68.
scanning new insn with uid = 1059.
scanning new insn with uid = 1060.
scanning new insn with uid = 1061.
scanning new insn with uid = 1062.
scanning new insn with uid = 1063.
scanning new insn with uid = 1064.
scanning new insn with uid = 1065.
scanning new insn with uid = 1066.
scanning new insn with uid = 1067.
scanning new insn with uid = 1068.
scanning new insn with uid = 1069.
scanning new insn with uid = 1070.
scanning new insn with uid = 1071.
scanning new insn with uid = 1072.
scanning new insn with uid = 1073.
scanning new insn with uid = 1074.
scanning new insn with uid = 1075.
scanning new insn with uid = 1076.
scanning new insn with uid = 1080.
scanning new insn with uid = 1081.
scanning new insn with uid = 1082.
scanning new insn with uid = 1083.
scanning new insn with uid = 1084.
scanning new insn with uid = 1085.
scanning new insn with uid = 1086.
scanning new insn with uid = 1087.
scanning new insn with uid = 1088.
scanning new insn with uid = 1089.
scanning new insn with uid = 1090.
scanning new insn with uid = 1091.
scanning new insn with uid = 1092.
scanning new insn with uid = 1093.
scanning new insn with uid = 1094.
scanning new insn with uid = 1095.
scanning new insn with uid = 1096.
scanning new insn with uid = 1097.
scanning new insn with uid = 1098.
scanning new insn with uid = 1099.
scanning new insn with uid = 1100.
scanning new insn with uid = 1101.
scanning new insn with uid = 1102.
scanning new insn with uid = 1103.
    Adding cp135:a1r151-a205r495
    Adding range [281..281] to allocno a1r151
    Adding cp136:a2r429-a206r496
    Adding range [281..283] to allocno a2r429
    Adding cp137:a3r430-a207r497
    Adding range [281..285] to allocno a3r430
    Adding range [282..286] to allocno a205r495
    Adding range [284..286] to allocno a206r496
    Adding range [286..286] to allocno a207r497
    Adding range [281..286] to live through  allocno a28r461
    Adding cp138:a1r151-a205r495
    Adding range [288..288] to allocno a205r495
    Adding cp139:a2r429-a206r496
    Adding range [288..290] to allocno a206r496
    Adding cp140:a3r430-a207r497
    Adding range [288..292] to allocno a207r497
    Adding range [289..293] to allocno a1r151
    Adding range [291..293] to allocno a2r429
    Adding range [293..293] to allocno a3r430
    Adding cp141:a0r159-a194r494
    Adding range [295..295] to allocno a194r494
    Adding range [295..295] to allocno a194r494
    Adding range [296..296] to allocno a0r159
    Adding range [296..296] to allocno a0r159
    Adding range [295..296] to live through  allocno a2r429
    Adding range [295..296] to live through  allocno a3r430
    Adding cp142:a163r167-a187r490
    Adding range [298..298] to allocno a163r167
    Adding cp143:a164r431-a188r491
    Adding range [298..300] to allocno a164r431
    Adding cp144:a165r432-a189r492
    Adding range [298..302] to allocno a165r432
    Adding range [299..303] to allocno a187r490
    Adding range [301..303] to allocno a188r491
    Adding range [303..303] to allocno a189r492
    Adding range [298..303] to live through  allocno a159r87
    Adding range [298..303] to live through  allocno a160r460
    Adding cp145:a163r167-a187r490
    Adding range [305..305] to allocno a187r490
    Adding cp146:a164r431-a188r491
    Adding range [305..307] to allocno a188r491
    Adding cp147:a165r432-a189r492
    Adding range [305..309] to allocno a189r492
    Adding range [306..310] to allocno a163r167
    Adding range [308..310] to allocno a164r431
    Adding range [310..310] to allocno a165r432
    Adding range [305..310] to live through  allocno a159r87
    Adding range [305..310] to live through  allocno a160r460
    Adding cp148:a162r175-a174r489
    Adding range [312..312] to allocno a174r489
    Adding range [312..312] to allocno a174r489
    Adding range [313..313] to allocno a162r175
    Adding range [313..313] to allocno a162r175
    Adding range [312..313] to live through  allocno a159r87
    Adding range [312..313] to live through  allocno a164r431
    Adding range [312..313] to live through  allocno a165r432
    Adding range [312..313] to live through  allocno a160r460
    Adding cp149:a13r449-a161r487
    Adding range [315..315] to allocno a161r487
    Adding range [316..316] to allocno a13r449
    Adding cp150:a19r94-a150r485
    Adding range [318..318] to allocno a19r94
    Adding cp151:a20r240-a151r486
    Adding range [318..320] to allocno a20r240
    Adding range [319..321] to allocno a150r485
    Adding range [321..321] to allocno a151r486
    Adding range [318..321] to live through  allocno a13r449
    Adding range [318..321] to live through  allocno a18r458
    Adding cp152:a17r101-a142r484
    Adding range [323..323] to allocno a17r101
    Adding range [324..324] to allocno a142r484
    Adding range [323..324] to live through  allocno a13r449
    Adding range [323..324] to live through  allocno a16r457
    Adding cp153:a15r125-a37r464
    Adding range [326..326] to allocno a15r125
    Adding cp154:a9r252-a38r465
    Adding range [326..328] to allocno a9r252
    Adding cp155:a13r449-a39r466
    Adding range [326..330] to allocno a13r449
    Adding range [327..331] to allocno a37r464
    Adding range [329..331] to allocno a38r465
    Adding range [331..331] to allocno a39r466
    Adding range [326..331] to live through  allocno a14r456
    Adding cp156:a50r104-a130r481
    Adding range [333..333] to allocno a50r104
    Adding range [333..333] to allocno a50r104
    Adding cp157:a47r106-a131r482
    Adding range [333..335] to allocno a47r106
    Adding cp158:a49r135-a132r483
    Adding range [333..337] to allocno a49r135
    Adding range [333..337] to allocno a49r135
    Adding range [334..338] to allocno a130r481
    Adding range [334..338] to allocno a130r481
    Adding range [336..338] to allocno a131r482
    Adding range [338..338] to allocno a132r483
    Adding range [338..338] to allocno a132r483
    Adding range [333..338] to live through  allocno a48r136
    Adding range [333..338] to live through  allocno a41r451
    Adding range [333..338] to live through  allocno a40r456
    Adding cp159:a47r106-a131r482
    Adding range [340..340] to allocno a131r482
    Adding range [341..341] to allocno a47r106
    Adding range [340..341] to live through  allocno a48r136
    Adding range [340..341] to live through  allocno a41r451
    Adding range [340..341] to live through  allocno a40r456
    Adding cp160:a47r106-a55r467
    Adding range [343..343] to allocno a47r106
    Adding cp161:a46r189-a58r468
    Adding range [343..345] to allocno a46r189
    Adding cp162:a44r450-a59r469
    Adding range [343..347] to allocno a44r450
    Adding range [344..348] to allocno a55r467
    Adding range [346..348] to allocno a58r468
    Adding range [348..348] to allocno a59r469
    Adding range [343..348] to live through  allocno a42r83
    Adding range [343..348] to live through  allocno a45r123
    Adding range [343..348] to live through  allocno a48r136
    Adding range [343..348] to live through  allocno a40r456
    Adding cp163:a63r112-a121r478
    Adding range [350..350] to allocno a63r112
    Adding range [350..350] to allocno a63r112
    Adding cp164:a58r468-a125r479
    Adding range [350..352] to allocno a58r468
    Adding cp165:a77r203-a126r480
    Adding range [350..354] to allocno a77r203
    Adding range [351..355] to allocno a121r478
    Adding range [351..355] to allocno a121r478
    Adding range [353..355] to allocno a125r479
    Adding range [355..355] to allocno a126r480
    Adding range [350..355] to live through  allocno a54r83
    Adding range [350..355] to live through  allocno a76r113
    Adding range [350..355] to live through  allocno a56r123
    Adding range [350..355] to live through  allocno a57r136
    Adding range [350..355] to live through  allocno a78r427
    Adding range [350..355] to live through  allocno a79r428
    Adding range [350..355] to live through  allocno a60r456
    Adding cp166:a63r112-a121r478
    Adding range [357..357] to allocno a121r478
    Adding range [357..357] to allocno a121r478
    Adding cp167:a77r203-a126r480
    Adding range [357..359] to allocno a126r480
    Adding range [358..360] to allocno a63r112
    Adding range [358..360] to allocno a63r112
    Adding range [360..360] to allocno a77r203
    Adding range [357..360] to live through  allocno a54r83
    Adding range [357..360] to live through  allocno a76r113
    Adding range [357..360] to live through  allocno a56r123
    Adding range [357..360] to live through  allocno a57r136
    Adding range [357..360] to live through  allocno a78r427
    Adding range [357..360] to live through  allocno a79r428
    Adding range [357..360] to live through  allocno a60r456
    Adding cp168:a63r112-a112r474
    Adding range [362..362] to allocno a63r112
    Adding range [362..362] to allocno a63r112
    Adding cp169:a75r117-a113r475
    Adding range [362..364] to allocno a75r117
    Adding range [362..364] to allocno a75r117
    Adding cp170:a62r186-a116r476
    Adding range [362..366] to allocno a62r186
    Adding cp171:a90r187-a117r477
    Adding range [362..368] to allocno a90r187
    Adding range [363..369] to allocno a112r474
    Adding range [363..369] to allocno a112r474
    Adding range [365..369] to allocno a113r475
    Adding range [365..369] to allocno a113r475
    Adding range [367..369] to allocno a116r476
    Adding range [369..369] to allocno a117r477
    Adding range [362..369] to live through  allocno a54r83
    Adding range [362..369] to live through  allocno a56r123
    Adding range [362..369] to live through  allocno a57r136
    Adding range [362..369] to live through  allocno a64r448
    Adding range [362..369] to live through  allocno a60r456
    Adding cp172:a63r112-a112r474
    Adding range [371..371] to allocno a112r474
    Adding range [371..371] to allocno a112r474
    Adding cp173:a75r117-a113r475
    Adding range [371..373] to allocno a113r475
    Adding range [371..373] to allocno a113r475
    Adding cp174:a62r186-a116r476
    Adding range [371..375] to allocno a116r476
    Adding range [372..376] to allocno a63r112
    Adding range [372..376] to allocno a63r112
    Adding range [374..376] to allocno a75r117
    Adding range [374..376] to allocno a75r117
    Adding range [376..376] to allocno a62r186
    Adding range [371..376] to live through  allocno a54r83
    Adding range [371..376] to live through  allocno a56r123
    Adding range [371..376] to live through  allocno a57r136
    Adding range [371..376] to live through  allocno a64r448
    Adding range [371..376] to live through  allocno a60r456
    Adding cp175:a63r112-a105r471
    Adding range [378..378] to allocno a63r112
    Adding range [378..378] to allocno a63r112
    Adding cp176:a65r165-a108r472
    Adding range [378..380] to allocno a65r165
    Adding cp177:a66r181-a109r473
    Adding range [378..382] to allocno a66r181
    Adding range [379..383] to allocno a105r471
    Adding range [379..383] to allocno a105r471
    Adding range [381..383] to allocno a108r472
    Adding range [383..383] to allocno a109r473
    Adding range [378..383] to live through  allocno a54r83
    Adding range [378..383] to live through  allocno a56r123
    Adding range [378..383] to live through  allocno a57r136
    Adding range [378..383] to live through  allocno a60r456
    Adding cp178:a63r112-a105r471
    Adding range [385..385] to allocno a105r471
    Adding range [385..385] to allocno a105r471
    Adding cp179:a66r181-a109r473
    Adding range [385..387] to allocno a109r473
    Adding range [386..388] to allocno a63r112
    Adding range [386..388] to allocno a63r112
    Adding range [388..388] to allocno a66r181
    Adding range [385..388] to live through  allocno a54r83
    Adding range [385..388] to live through  allocno a56r123
    Adding range [385..388] to live through  allocno a57r136
    Adding range [385..388] to live through  allocno a60r456
    Adding cp180:a41r451-a61r470
    Adding range [390..390] to allocno a61r470
    Adding range [391..391] to allocno a41r451
    Adding range [390..391] to live through  allocno a54r83
    Adding range [390..391] to live through  allocno a60r456
    Adding cp181:a9r252-a38r465
    Adding range [393..393] to allocno a38r465
    Adding range [394..394] to allocno a9r252
    Adding cp182:a7r129-a31r462
    Adding range [396..396] to allocno a7r129
    Adding cp183:a5r132-a32r463
    Adding range [396..398] to allocno a5r132
    Adding range [397..399] to allocno a31r462
    Adding range [399..399] to allocno a32r463
    Adding cp184:a1r151-a193r493
    Adding range [401..401] to allocno a1r151
    Adding cp185:a0r159-a194r494
    Adding range [401..403] to allocno a0r159
    Adding range [401..403] to allocno a0r159
    Adding range [402..404] to allocno a193r493
    Adding range [404..404] to allocno a194r494
    Adding range [404..404] to allocno a194r494
    Adding range [401..404] to live through  allocno a2r429
    Adding range [401..404] to live through  allocno a3r430
    Adding cp186:a163r167-a173r488
    Adding range [406..406] to allocno a163r167
    Adding cp187:a162r175-a174r489
    Adding range [406..408] to allocno a162r175
    Adding range [406..408] to allocno a162r175
    Adding range [407..409] to allocno a173r488
    Adding range [409..409] to allocno a174r489
    Adding range [409..409] to allocno a174r489
    Adding range [406..409] to live through  allocno a159r87
    Adding range [406..409] to live through  allocno a164r431
    Adding range [406..409] to live through  allocno a165r432
    Adding range [406..409] to live through  allocno a160r460
changing bb of uid 1112
  unscanned insn
verify found no changes in insn with uid = 214.
Edge 20->22 redirected to 131
scanning new insn with uid = 1077.
scanning new insn with uid = 1078.
scanning new insn with uid = 1079.
scanning new insn with uid = 1114.
changing bb of uid 1116
  unscanned insn
verify found no changes in insn with uid = 571.
Edge 101->104 redirected to 132
scanning new insn with uid = 1104.
changing bb of uid 1118
  unscanned insn
scanning new insn with uid = 1105.
changing bb of uid 1119
  unscanned insn
scanning new insn with uid = 1106.
scanning new insn with uid = 1107.
scanning new insn with uid = 1108.
scanning new insn with uid = 1109.
scanning new insn with uid = 1110.
scanning new insn with uid = 1111.
    New r462: setting preferred GENERAL_REGS, alternative NO_REGS
    New r463: setting preferred GENERAL_REGS, alternative NO_REGS
    New r464: setting preferred GENERAL_REGS, alternative NO_REGS
    New r465: setting preferred GENERAL_REGS, alternative NO_REGS
    New r466: setting preferred AREG, alternative GENERAL_REGS
    New r467: setting preferred GENERAL_REGS, alternative NO_REGS
    New r468: setting preferred GENERAL_REGS, alternative NO_REGS
    New r469: setting preferred GENERAL_REGS, alternative NO_REGS
    New r470: setting preferred GENERAL_REGS, alternative NO_REGS
    New r471: setting preferred GENERAL_REGS, alternative NO_REGS
    New r472: setting preferred GENERAL_REGS, alternative NO_REGS
    New r473: setting preferred AREG, alternative GENERAL_REGS
    New r474: setting preferred GENERAL_REGS, alternative NO_REGS
    New r475: setting preferred GENERAL_REGS, alternative NO_REGS
    New r476: setting preferred GENERAL_REGS, alternative NO_REGS
    New r477: setting preferred GENERAL_REGS, alternative NO_REGS
    New r478: setting preferred GENERAL_REGS, alternative NO_REGS
    New r479: setting preferred GENERAL_REGS, alternative NO_REGS
    New r480: setting preferred AREG, alternative GENERAL_REGS
    New r481: setting preferred GENERAL_REGS, alternative NO_REGS
    New r482: setting preferred GENERAL_REGS, alternative NO_REGS
    New r483: setting preferred AD_REGS, alternative GENERAL_REGS
    New r484: setting preferred GENERAL_REGS, alternative NO_REGS
    New r485: setting preferred GENERAL_REGS, alternative NO_REGS
    New r486: setting preferred GENERAL_REGS, alternative NO_REGS
    New r487: setting preferred AREG, alternative GENERAL_REGS
    New r488: setting preferred Q_REGS, alternative GENERAL_REGS
    New r489: setting preferred GENERAL_REGS, alternative NO_REGS
    New r490: setting preferred Q_REGS, alternative GENERAL_REGS
    New r491: setting preferred GENERAL_REGS, alternative NO_REGS
    New r492: setting preferred GENERAL_REGS, alternative NO_REGS
    New r493: setting preferred Q_REGS, alternative GENERAL_REGS
    New r494: setting preferred GENERAL_REGS, alternative NO_REGS
    New r495: setting preferred Q_REGS, alternative GENERAL_REGS
    New r496: setting preferred GENERAL_REGS, alternative NO_REGS
    New r497: setting preferred GENERAL_REGS, alternative NO_REGS
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 135 n_edges 205 count 158 (  1.2)
;; 15 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 131 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 132 104 105 106 107 108 133 109 134 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130
;;
;; Loop 14
;;  header 110, latch 110
;;  depth 1, outer 0
;;  nodes: 110
;;
;; Loop 8
;;  header 22, latch 108
;;  depth 1, outer 0
;;  nodes: 22 108 107 106 105 104 132 103 30 29 28 27 25 26 24 23 101 78 100 54 129 128 65 67 66 64 63 62 61 60 59 58 57 56 55 53 44 42 52 51 49 47 50 48 46 45 113 112 40 41 43 39 38 37 36 35 34 33 32 31 102 114 99 90 88 98 97 95 93 96 94 92 91 120 119 86 87 89 85 84 83 82 81 80 79 118 127 77 76 75 74 72 70 73 71 69 68 116 115 117 121
;;
;; Loop 10
;;  header 32, latch 102
;;  depth 2, outer 8
;;  nodes: 32 102 101 78 100 54 129 128 65 67 66 64 63 62 61 60 59 58 57 56 55 53 44 42 52 51 49 47 50 48 46 45 113 112 40 41 43 39 38 37 36 35 34 33 114 99 90 88 98 97 95 93 96 94 92 91 120 119 86 87 89 85 84 83 82 81 80 79 118 127 77 76 75 74 72 70 73 71 69 68 116 115 117 121
;;
;; Loop 13
;;  header 80, latch 85
;;  depth 3, outer 10
;;  nodes: 80 85 84 83 82 81
;;
;; Loop 12
;;  header 57, latch 62
;;  depth 3, outer 10
;;  nodes: 57 62 61 60 59 58
;;
;; Loop 11
;;  header 34, latch 39
;;  depth 3, outer 10
;;  nodes: 34 39 38 37 36 35
;;
;; Loop 9
;;  header 25, latch 27
;;  depth 2, outer 8
;;  nodes: 25 27 26
;;
;; Loop 7
;;  header 19, latch 19
;;  depth 1, outer 0
;;  nodes: 19
;;
;; Loop 6
;;  header 17, latch 17
;;  depth 1, outer 0
;;  nodes: 17
;;
;; Loop 3
;;  header 9, latch 14
;;  depth 1, outer 0
;;  nodes: 9 14 13 125 124 12 11 10
;;
;; Loop 5
;;  header 13, latch 13
;;  depth 2, outer 3
;;  nodes: 13
;;
;; Loop 4
;;  header 11, latch 11
;;  depth 2, outer 3
;;  nodes: 11
;;
;; Loop 2
;;  header 6, latch 6
;;  depth 1, outer 0
;;  nodes: 6
;;
;; Loop 1
;;  header 4, latch 4
;;  depth 1, outer 0
;;  nodes: 4
;; 2 succs { 3 122 }
;; 3 succs { 4 }
;; 4 succs { 4 5 }
;; 5 succs { 123 }
;; 6 succs { 6 7 }
;; 7 succs { 8 126 }
;; 8 succs { 9 }
;; 9 succs { 10 124 }
;; 10 succs { 11 }
;; 11 succs { 11 12 }
;; 12 succs { 125 }
;; 13 succs { 13 14 }
;; 14 succs { 9 15 }
;; 15 succs { 16 20 }
;; 16 succs { 17 }
;; 17 succs { 17 18 }
;; 18 succs { 19 }
;; 19 succs { 19 20 }
;; 20 succs { 131 21 }
;; 21 succs { 109 }
;; 131 succs { 22 }
;; 22 succs { 108 23 }
;; 23 succs { 24 29 }
;; 24 succs { 25 }
;; 25 succs { 26 27 }
;; 26 succs { 27 }
;; 27 succs { 25 28 }
;; 28 succs { 30 }
;; 29 succs { 30 }
;; 30 succs { 31 103 }
;; 31 succs { 32 }
;; 32 succs { 33 112 }
;; 33 succs { 34 }
;; 34 succs { 38 35 }
;; 35 succs { 37 36 }
;; 36 succs { 38 37 }
;; 37 succs { 39 }
;; 38 succs { 39 }
;; 39 succs { 34 40 }
;; 40 succs { 113 41 }
;; 41 succs { 113 42 }
;; 42 succs { 54 43 }
;; 43 succs { 113 44 }
;; 44 succs { 54 }
;; 45 succs { 51 46 }
;; 46 succs { 51 47 }
;; 47 succs { 52 48 }
;; 48 succs { 50 49 }
;; 49 succs { 52 50 }
;; 50 succs { 52 }
;; 51 succs { 52 }
;; 52 succs { 54 }
;; 53 succs { 54 }
;; 54 succs { 55 101 }
;; 55 succs { 56 115 }
;; 56 succs { 57 }
;; 57 succs { 61 58 }
;; 58 succs { 60 59 }
;; 59 succs { 61 60 }
;; 60 succs { 62 }
;; 61 succs { 62 }
;; 62 succs { 57 63 }
;; 63 succs { 116 64 }
;; 64 succs { 116 65 }
;; 65 succs { 128 66 }
;; 66 succs { 116 67 }
;; 67 succs { 128 }
;; 68 succs { 74 69 }
;; 69 succs { 74 70 }
;; 70 succs { 75 71 }
;; 71 succs { 73 72 }
;; 72 succs { 75 73 }
;; 73 succs { 75 }
;; 74 succs { 75 }
;; 75 succs { 77 }
;; 76 succs { 77 }
;; 77 succs { 118 78 }
;; 78 succs { 101 }
;; 79 succs { 80 }
;; 80 succs { 84 81 }
;; 81 succs { 83 82 }
;; 82 succs { 84 83 }
;; 83 succs { 85 }
;; 84 succs { 85 }
;; 85 succs { 80 86 }
;; 86 succs { 120 87 }
;; 87 succs { 120 88 }
;; 88 succs { 100 89 }
;; 89 succs { 120 90 }
;; 90 succs { 100 }
;; 91 succs { 97 92 }
;; 92 succs { 97 93 }
;; 93 succs { 98 94 }
;; 94 succs { 96 95 }
;; 95 succs { 98 96 }
;; 96 succs { 98 }
;; 97 succs { 98 }
;; 98 succs { 100 }
;; 99 succs { 100 }
;; 100 succs { 101 }
;; 101 succs { 102 132 }
;; 102 succs { 32 }
;; 103 succs { 104 }
;; 132 succs { 104 }
;; 104 succs { 105 106 }
;; 105 succs { 108 }
;; 106 succs { 107 108 }
;; 107 succs { 108 }
;; 108 succs { 22 133 }
;; 133 succs { 109 }
;; 109 succs { 134 130 }
;; 134 succs { 110 }
;; 110 succs { 110 111 }
;; 111 succs { 130 }
;; 112 succs { 113 }
;; 113 succs { 45 114 }
;; 114 succs { 53 }
;; 115 succs { 116 }
;; 116 succs { 68 117 }
;; 117 succs { 76 }
;; 118 succs { 79 119 }
;; 119 succs { 120 }
;; 120 succs { 91 121 }
;; 121 succs { 99 }
;; 122 succs { 123 }
;; 123 succs { 6 }
;; 124 succs { 125 }
;; 125 succs { 13 }
;; 126 succs { 21 }
;; 127 succs { 79 }
;; 128 succs { 127 129 }
;; 129 succs { 101 }
;; 130 succs { 1 }
+++Costs: overall 82280, reg -3296, mem 85576, ld 672, st 676, move 1298
+++       move loops 0, new jumps 4


int main()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={26d,14u} r1={28d,3u} r2={31d,6u} r6={1d,134u} r7={13d,246u,8e} r8={24d} r9={24d} r10={24d} r11={24d} r12={24d} r13={24d} r14={24d} r15={24d} r16={1d,133u} r17={183d,75u} r18={24d} r19={24d} r20={1d,143u,4e} r21={25d} r22={25d} r23={25d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={25d} r30={25d} r31={25d} r32={24d} r33={24d} r34={24d} r35={24d} r36={24d} r37={24d} r38={24d} r39={24d} r40={24d} r41={24d} r42={24d} r43={24d} r44={24d} r45={24d} r46={24d} r47={24d} r48={24d} r49={24d} r50={24d} r51={24d} r52={24d} r53={24d} r54={24d} r55={24d} r56={24d} r57={24d} r58={24d} r59={24d} r60={24d} r61={24d} r62={24d} r63={24d} r64={24d} r65={24d} r66={24d} r67={24d} r68={24d} r69={24d} r70={24d} r71={24d} r72={24d} r73={24d} r74={24d} r75={24d} r76={24d} r83={3d,4u} r84={1d,2u} r85={1d,1u} r87={2d,3u} r94={1d,1u} r101={1d,1u} r104={1d,2u} r106={2d,2u} r112={4d,9u} r113={1d,1u} r117={2d,4u} r120={3d,1u} r123={2d,4u} r125={1d,1u} r129={1d,2u} r132={1d,1u} r135={1d,1u} r136={4d,11u} r149={1d,2u} r150={1d,2u} r151={2d,2u} r158={1d,1u} r159={2d,4u} r160={1d,2u} r165={2d,2u} r166={1d,2u} r167={2d,2u} r174={1d,1u} r175={2d,4u} r176={1d,2u} r181={5d,13u} r186={3d,6u} r187={1d,1u} r189={1d,1u} r203={5d,13u} r209={2d,8u} r212={3d,1u} r229={3d,1u} r240={1d,1u} r252={3d,2u} r254={1d,1u} r258={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={2d,4u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={2d,3u} r290={1d,1u} r291={1d,1u} r293={1d,1u} r298={2d,3u} r301={1d,1u} r304={1d,1u} r305={1d,1u} r307={1d,1u} r312={2d,3u} r315={1d,1u} r317={1d,1u} r318={1d} r320={1d,1u} r328={1d,1u} r329={1d,1u} r330={1d,1u} r332={1d,1u} r334={1d,1u} r339={1d,3u} r340={1d,1u} r342={1d,1u} r344={1d,1u} r345={2d,3u} r347={1d,1u} r356={1d,1u} r363={1d,1u} r364={1d,1u} r365={1d,1u} r366={2d,3u} r374={1d,1u} r386={1d,1u} r397={1d,1u} r403={1d,1u,1e} r404={1d,1u} r406={1d,1u} r409={1d,1u,1e} r410={1d,1u} r412={1d,1u} r414={1d,1u} r417={1d,1u,1e} r418={1d,1u} r420={1d,1u} r421={1d,1u} r422={1d,1u} r424={1d,1u} r427={1d,2u} r428={1d,1u} r429={3d,3u} r430={3d,2u} r431={3d,3u} r432={3d,2u} r433={1d,2u} r434={1d,5u} r435={1d,2u} r436={1d,5u} r437={1d,2u} r438={1d,5u} r439={1d,1u} r441={1d,1u} r443={1d,1u} r445={1d,1u} r448={1d,3u} r449={1d,5u} r450={1d,1u} r451={5d,6u} r456={1d,2u} r457={1d,1u} r458={1d,1u} r460={1d,2u} r461={1d,2u} r462={2d,2u} r463={2d,3u} r464={2d,4u} r465={4d,4u} r466={4d,3u} r467={2d,2u} r468={2d,2u} r469={2d,3u} r470={1d,3u} r471={1d,3u} r472={3d,6u} r473={2d,1u} r474={1d,1u} r475={1d,3u} r476={2d,1u} r477={3d,6u} r478={1d,3u} r479={3d,6u} r480={2d,1u} r481={2d,4u} r482={1d,1u} r483={3d,9u} r484={2d,6u,3e} r485={2d,6u,3e} r486={1d,1u} r487={1d,2u} r488={2d,1u} r489={2d,3u} r490={2d,3u} r491={2d,2u} r492={2d,2u} r493={2d,1u} r494={2d,3u} r495={2d,3u} r496={2d,2u} r497={2d,2u} 
;;    total ref usage 3289{2136d,1132u,21e} in 520{496 regular + 24 call} insns.
(note 1 0 51 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 149 151 261
(note 51 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 51 3 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 3 2 53 2 (call (mem:QI (symbol_ref:SI ("__main") [flags 0x43]) [0  S1 A8])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:32 641 {*call}
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (nil))
(call_insn 53 3 54 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:11 648 {*call_value}
     (nil)
    (nil))
(insn 54 53 55 2 (set (reg:SI 149 [ D.83218 ])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 55 54 56 2 (set (reg/v:QI 151 [ ch ])
        (subreg:QI (reg:SI 149 [ D.83218 ]) 0)) D:\LHX\7.5 contest\t1.cpp:11 93 {*movqi_internal}
     (nil))
(insn 56 55 57 2 (parallel [
            (set (reg:QI 261 [ D.83228 ])
                (plus:QI (subreg:QI (reg:SI 149 [ D.83218 ]) 0)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:12 224 {*addqi_1}
     (expr_list:REG_DEAD (reg:SI 149 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 57 56 58 2 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 261 [ D.83228 ])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:12 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 261 [ D.83228 ])
        (nil)))
(jump_insn 58 57 59 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 780)
            (pc))) D:\LHX\7.5 contest\t1.cpp:12 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 780)
;;  succ:       3 [91.0%]  (FALLTHRU)
;;              122 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151

;; basic block 3, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [91.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(6){ }u12(7){ }u13(16){ }u14(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  def 	 429 430 461 495 496 497
(note 59 58 855 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 855 59 856 3 (set (reg:SI 429 [ flag ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 856 855 927 3 (set (reg:SI 430 [ flag+4 ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 927 856 1059 3 (set (reg:SI 461)
        (const_int -1 [0xffffffffffffffff])) D:\LHX\7.5 contest\t1.cpp:13 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))
(insn 1059 927 1060 3 (set (reg/v:QI 495 [orig:151 ch ] [151])
        (reg/v:QI 151 [ ch ])) D:\LHX\7.5 contest\t1.cpp:13 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:QI 151 [ ch ])
        (nil)))
(insn 1060 1059 1061 3 (set (reg:SI 496 [orig:429 flag ] [429])
        (reg:SI 429 [ flag ])) D:\LHX\7.5 contest\t1.cpp:13 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 429 [ flag ])
        (nil)))
(insn 1061 1060 69 3 (set (reg:SI 497 [orig:430 flag+4 ] [430])
        (reg:SI 430 [ flag+4 ])) D:\LHX\7.5 contest\t1.cpp:13 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 430 [ flag+4 ])
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 461 495 496 497

;; basic block 4, loop depth 1, count 0, freq 92, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU)
;;              4 [91.0%]  (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u15(6){ }u16(7){ }u17(16){ }u18(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 461 495 496 497
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 461 495 496 497
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 150 262 495 496 497
(code_label 69 1061 60 4 117 "" [1 uses])
(note 60 69 926 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 926 60 928 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 495 [orig:151 ch ] [151])
            (const_int 45 [0x2d]))) D:\LHX\7.5 contest\t1.cpp:13 5 {*cmpqi_1}
     (nil))
(insn 928 926 929 4 (set (reg:SI 496 [orig:429 flag ] [429])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 496 [orig:429 flag ] [429])
            (reg:SI 461))) D:\LHX\7.5 contest\t1.cpp:13 927 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 929 928 931 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 495 [orig:151 ch ] [151])
            (const_int 45 [0x2d]))) D:\LHX\7.5 contest\t1.cpp:13 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg/v:QI 495 [orig:151 ch ] [151])
        (nil)))
(insn 931 929 66 4 (set (reg:SI 497 [orig:430 flag+4 ] [430])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 497 [orig:430 flag+4 ] [430])
            (reg:SI 461))) D:\LHX\7.5 contest\t1.cpp:13 927 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(call_insn 66 931 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:14 648 {*call_value}
     (nil)
    (nil))
(insn 67 66 68 4 (set (reg:SI 150 [ D.83218 ])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:14 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 68 67 70 4 (set (reg/v:QI 495 [orig:151 ch ] [151])
        (subreg:QI (reg:SI 150 [ D.83218 ]) 0)) D:\LHX\7.5 contest\t1.cpp:14 93 {*movqi_internal}
     (nil))
(insn 70 68 71 4 (parallel [
            (set (reg:QI 262 [ D.83228 ])
                (plus:QI (subreg:QI (reg:SI 150 [ D.83218 ]) 0)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:12 224 {*addqi_1}
     (expr_list:REG_DEAD (reg:SI 150 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 71 70 72 4 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 262 [ D.83228 ])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:12 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 262 [ D.83228 ])
        (nil)))
(jump_insn 72 71 987 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 69)
            (pc))) D:\LHX\7.5 contest\t1.cpp:12 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 69)
;;  succ:       4 [91.0%]  (DFS_BACK)
;;              5 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 461 495 496 497

;; basic block 5, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 4, next block 6, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 [9.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 495 496 497
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 495 496 497
;; lr  def 	 151 429 430
(note 987 72 1062 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 1062 987 1063 5 (set (reg/v:QI 151 [ ch ])
        (reg/v:QI 495 [orig:151 ch ] [151])) 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:QI 495 [orig:151 ch ] [151])
        (nil)))
(insn 1063 1062 1064 5 (set (reg:SI 429 [ flag ])
        (reg:SI 496 [orig:429 flag ] [429])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 496 [orig:429 flag ] [429])
        (nil)))
(insn 1064 1063 988 5 (set (reg:SI 430 [ flag+4 ])
        (reg:SI 497 [orig:430 flag+4 ] [430])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 497 [orig:430 flag+4 ] [430])
        (nil)))
(jump_insn 988 1064 989 5 (set (pc)
        (label_ref 748)) 636 {jump}
     (nil)
 -> 748)
;;  succ:       123 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151 429 430

(barrier 989 988 88)
;; basic block 6, loop depth 1, count 0, freq 92, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       6 [91.0%]  (DFS_BACK)
;;              123 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u37(6){ }u38(7){ }u39(16){ }u40(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 429 430 493 494
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 493 494
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 158 160 263 264 265 266 267 268 493 494
(code_label 88 989 76 6 118 "" [2 uses])
(note 76 88 77 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 6 (parallel [
            (set (reg:DI 263 [ D.83229 ])
                (ashift:DI (reg/v:DI 494 [orig:159 re ] [159])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 488 {*ashldi3_doubleword}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 78 77 79 6 (parallel [
            (set (reg:DI 264 [ D.83229 ])
                (ashift:DI (reg/v:DI 494 [orig:159 re ] [159])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 488 {*ashldi3_doubleword}
     (expr_list:REG_DEAD (reg/v:DI 494 [orig:159 re ] [159])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 79 78 81 6 (parallel [
            (set (reg:DI 265 [ D.83229 ])
                (plus:DI (reg:DI 263 [ D.83229 ])
                    (reg:DI 264 [ D.83229 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 264 [ D.83229 ])
        (expr_list:REG_DEAD (reg:DI 263 [ D.83229 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 81 79 82 6 (set (reg:SI 267 [ ch ])
        (sign_extend:SI (reg/v:QI 493 [orig:151 ch ] [151]))) D:\LHX\7.5 contest\t1.cpp:16 148 {extendqisi2}
     (expr_list:REG_DEAD (reg/v:QI 493 [orig:151 ch ] [151])
        (nil)))
(insn 82 81 83 6 (parallel [
            (set (reg:DI 266 [ D.83229 ])
                (sign_extend:DI (reg:SI 267 [ ch ])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:16 143 {extendsidi2_1}
     (expr_list:REG_DEAD (reg:SI 267 [ ch ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 83 82 84 6 (parallel [
            (set (reg:DI 158 [ D.83229 ])
                (plus:DI (reg:DI 265 [ D.83229 ])
                    (reg:DI 266 [ D.83229 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 266 [ D.83229 ])
        (expr_list:REG_DEAD (reg:DI 265 [ D.83229 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 84 83 85 6 (parallel [
            (set (reg/v:DI 494 [orig:159 re ] [159])
                (plus:DI (reg:DI 158 [ D.83229 ])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 158 [ D.83229 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(call_insn 85 84 86 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:16 648 {*call_value}
     (nil)
    (nil))
(insn 86 85 87 6 (set (reg:SI 160 [ D.83218 ])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:16 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 87 86 89 6 (set (reg/v:QI 493 [orig:151 ch ] [151])
        (subreg:QI (reg:SI 160 [ D.83218 ]) 0)) D:\LHX\7.5 contest\t1.cpp:16 93 {*movqi_internal}
     (nil))
(insn 89 87 90 6 (parallel [
            (set (reg:QI 268 [ D.83228 ])
                (plus:QI (subreg:QI (reg:SI 160 [ D.83218 ]) 0)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 224 {*addqi_1}
     (expr_list:REG_DEAD (reg:SI 160 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 90 89 91 6 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 268 [ D.83228 ])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:16 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 268 [ D.83228 ])
        (nil)))
(jump_insn 91 90 92 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 88)
            (pc))) D:\LHX\7.5 contest\t1.cpp:16 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 88)
;;  succ:       6 [91.0%]  (DFS_BACK)
;;              7 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 429 430 493 494

;; basic block 7, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u56(6){ }u57(7){ }u58(16){ }u59(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 429 430 494
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 429 430 494
;; lr  def 	 17 [flags] 85 159 269 270 271 272
(note 92 91 1065 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 1065 92 93 7 (set (reg/v:DI 159 [ re ])
        (reg/v:DI 494 [orig:159 re ] [159])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 494 [orig:159 re ] [159])
        (nil)))
(insn 93 1065 94 7 (parallel [
            (set (reg:SI 269)
                (mult:SI (reg:SI 430 [ flag+4 ])
                    (subreg:SI (reg/v:DI 159 [ re ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 306 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 430 [ flag+4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 94 93 95 7 (parallel [
            (set (reg:SI 270)
                (mult:SI (subreg:SI (reg/v:DI 159 [ re ]) 4)
                    (reg:SI 429 [ flag ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 95 94 96 7 (parallel [
            (set (reg:SI 271)
                (plus:SI (reg:SI 269)
                    (reg:SI 270)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 270)
        (expr_list:REG_DEAD (reg:SI 269)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 96 95 97 7 (parallel [
            (set (reg:DI 272 [ D.83229 ])
                (mult:DI (zero_extend:DI (reg:SI 429 [ flag ]))
                    (zero_extend:DI (subreg:SI (reg/v:DI 159 [ re ]) 0))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 323 {*umulsidi3_1}
     (expr_list:REG_DEAD (reg:SI 429 [ flag ])
        (expr_list:REG_DEAD (reg/v:DI 159 [ re ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(note 97 96 98 7 NOTE_INSN_DELETED)
(insn 98 97 100 7 (parallel [
            (set (subreg:SI (reg:DI 272 [ D.83229 ]) 4)
                (plus:SI (reg:SI 271)
                    (subreg:SI (reg:DI 272 [ D.83229 ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 271)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 100 98 101 7 (set (reg:SI 85 [ D.83218 ])
        (subreg:SI (reg:DI 272 [ D.83229 ]) 0)) D:\LHX\7.5 contest\t1.cpp:37 90 {*movsi_internal}
     (nil))
(insn 101 100 102 7 (set (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])
        (subreg:SI (reg:DI 272 [ D.83229 ]) 0)) D:\LHX\7.5 contest\t1.cpp:37 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 272 [ D.83229 ])
        (nil)))
(insn 102 101 103 7 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 85 [ D.83218 ])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:38 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 85 [ D.83218 ])
        (nil)))
(jump_insn 103 102 781 7 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 756)
            (pc))) D:\LHX\7.5 contest\t1.cpp:38 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (int_list:REG_BR_PROB 100 (nil)))
 -> 756)
;;  succ:       8 [99.0%]  (FALLTHRU)
;;              126 [1.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [99.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u76(6){ }u77(7){ }u78(16){ }u79(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 460
(note 781 103 7 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 7 781 933 8 (set (reg/v:SI 87 [ i ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 933 7 156 8 (set (reg:SI 460)
        (const_int -1 [0xffffffffffffffff])) D:\LHX\7.5 contest\t1.cpp:13 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 460

;; basic block 9, loop depth 1, count 0, freq 900, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              14 [99.0%]  (DFS_BACK)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u80(6){ }u81(7){ }u82(16){ }u83(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 460
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 167 274
(code_label 156 933 104 9 124 "" [1 uses])
(note 104 156 105 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 105 104 106 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:11 648 {*call_value}
     (nil)
    (nil))
(insn 106 105 107 9 (set (reg:SI 84 [ D.83218 ])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 107 106 108 9 (set (reg/v:QI 167 [ ch ])
        (subreg:QI (reg:SI 84 [ D.83218 ]) 0)) D:\LHX\7.5 contest\t1.cpp:11 93 {*movqi_internal}
     (nil))
(insn 108 107 109 9 (parallel [
            (set (reg:QI 274 [ D.83228 ])
                (plus:QI (subreg:QI (reg:SI 84 [ D.83218 ]) 0)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:12 224 {*addqi_1}
     (expr_list:REG_DEAD (reg:SI 84 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 109 108 110 9 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 274 [ D.83228 ])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:12 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 274 [ D.83228 ])
        (nil)))
(jump_insn 110 109 111 9 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 783)
            (pc))) D:\LHX\7.5 contest\t1.cpp:12 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 783)
;;  succ:       10 [91.0%]  (FALLTHRU)
;;              124 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 167 460

;; basic block 10, loop depth 1, count 0, freq 819, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [91.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u90(6){ }u91(7){ }u92(16){ }u93(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 167 460
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 167
;; lr  def 	 431 432 490 491 492
(note 111 110 859 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 859 111 860 10 (set (reg:SI 431 [ flag ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 860 859 1066 10 (set (reg:SI 432 [ flag+4 ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 1066 860 1067 10 (set (reg/v:QI 490 [orig:167 ch ] [167])
        (reg/v:QI 167 [ ch ])) D:\LHX\7.5 contest\t1.cpp:12 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:QI 167 [ ch ])
        (nil)))
(insn 1067 1066 1068 10 (set (reg:SI 491 [orig:431 flag ] [431])
        (reg:SI 431 [ flag ])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 431 [ flag ])
        (nil)))
(insn 1068 1067 121 10 (set (reg:SI 492 [orig:432 flag+4 ] [432])
        (reg:SI 432 [ flag+4 ])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 432 [ flag+4 ])
        (nil)))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 460 490 491 492

;; basic block 11, loop depth 2, count 0, freq 9100, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              11 [91.0%]  (DFS_BACK)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u94(6){ }u95(7){ }u96(16){ }u97(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 460 490 491 492
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 460 490 491 492
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 166 275 490 491 492
(code_label 121 1068 112 11 122 "" [1 uses])
(note 112 121 932 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 932 112 934 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 490 [orig:167 ch ] [167])
            (const_int 45 [0x2d]))) D:\LHX\7.5 contest\t1.cpp:13 5 {*cmpqi_1}
     (nil))
(insn 934 932 935 11 (set (reg:SI 491 [orig:431 flag ] [431])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 491 [orig:431 flag ] [431])
            (reg:SI 460))) D:\LHX\7.5 contest\t1.cpp:13 927 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 935 934 937 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 490 [orig:167 ch ] [167])
            (const_int 45 [0x2d]))) D:\LHX\7.5 contest\t1.cpp:13 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg/v:QI 490 [orig:167 ch ] [167])
        (nil)))
(insn 937 935 118 11 (set (reg:SI 492 [orig:432 flag+4 ] [432])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 492 [orig:432 flag+4 ] [432])
            (reg:SI 460))) D:\LHX\7.5 contest\t1.cpp:13 927 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(call_insn 118 937 119 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:14 648 {*call_value}
     (nil)
    (nil))
(insn 119 118 120 11 (set (reg:SI 166 [ D.83218 ])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:14 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 120 119 122 11 (set (reg/v:QI 490 [orig:167 ch ] [167])
        (subreg:QI (reg:SI 166 [ D.83218 ]) 0)) D:\LHX\7.5 contest\t1.cpp:14 93 {*movqi_internal}
     (nil))
(insn 122 120 123 11 (parallel [
            (set (reg:QI 275 [ D.83228 ])
                (plus:QI (subreg:QI (reg:SI 166 [ D.83218 ]) 0)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:12 224 {*addqi_1}
     (expr_list:REG_DEAD (reg:SI 166 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 123 122 124 11 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 275 [ D.83228 ])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:12 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 275 [ D.83228 ])
        (nil)))
(jump_insn 124 123 990 11 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 121)
            (pc))) D:\LHX\7.5 contest\t1.cpp:12 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 121)
;;  succ:       11 [91.0%]  (DFS_BACK)
;;              12 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 460 490 491 492

;; basic block 12, loop depth 1, count 0, freq 819, maybe hot
;;  prev block 11, next block 13, flags: (NEW, RTL, MODIFIED)
;;  pred:       11 [9.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 460 490 491 492
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 490 491 492
;; lr  def 	 167 431 432
(note 990 124 1069 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 1069 990 1070 12 (set (reg/v:QI 167 [ ch ])
        (reg/v:QI 490 [orig:167 ch ] [167])) 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:QI 490 [orig:167 ch ] [167])
        (nil)))
(insn 1070 1069 1071 12 (set (reg:SI 431 [ flag ])
        (reg:SI 491 [orig:431 flag ] [431])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 491 [orig:431 flag ] [431])
        (nil)))
(insn 1071 1070 991 12 (set (reg:SI 432 [ flag+4 ])
        (reg:SI 492 [orig:432 flag+4 ] [432])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 492 [orig:432 flag+4 ] [432])
        (nil)))
(jump_insn 991 1071 992 12 (set (pc)
        (label_ref 752)) 636 {jump}
     (nil)
 -> 752)
;;  succ:       125 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 167 431 432 460

(barrier 992 991 140)
;; basic block 13, loop depth 2, count 0, freq 9100, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       13 [91.0%]  (DFS_BACK)
;;              125 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u116(6){ }u117(7){ }u118(16){ }u119(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 431 432 460 488 489
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 488 489
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 174 176 276 277 278 279 280 281 488 489
(code_label 140 992 128 13 123 "" [2 uses])
(note 128 140 129 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 13 (parallel [
            (set (reg:DI 276 [ D.83229 ])
                (ashift:DI (reg/v:DI 489 [orig:175 re ] [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 488 {*ashldi3_doubleword}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 130 129 131 13 (parallel [
            (set (reg:DI 277 [ D.83229 ])
                (ashift:DI (reg/v:DI 489 [orig:175 re ] [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 488 {*ashldi3_doubleword}
     (expr_list:REG_DEAD (reg/v:DI 489 [orig:175 re ] [175])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 131 130 133 13 (parallel [
            (set (reg:DI 278 [ D.83229 ])
                (plus:DI (reg:DI 276 [ D.83229 ])
                    (reg:DI 277 [ D.83229 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 277 [ D.83229 ])
        (expr_list:REG_DEAD (reg:DI 276 [ D.83229 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 133 131 134 13 (set (reg:SI 280 [ ch ])
        (sign_extend:SI (reg/v:QI 488 [orig:167 ch ] [167]))) D:\LHX\7.5 contest\t1.cpp:16 148 {extendqisi2}
     (expr_list:REG_DEAD (reg/v:QI 488 [orig:167 ch ] [167])
        (nil)))
(insn 134 133 135 13 (parallel [
            (set (reg:DI 279 [ D.83229 ])
                (sign_extend:DI (reg:SI 280 [ ch ])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:16 143 {extendsidi2_1}
     (expr_list:REG_DEAD (reg:SI 280 [ ch ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 135 134 136 13 (parallel [
            (set (reg:DI 174 [ D.83229 ])
                (plus:DI (reg:DI 278 [ D.83229 ])
                    (reg:DI 279 [ D.83229 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 279 [ D.83229 ])
        (expr_list:REG_DEAD (reg:DI 278 [ D.83229 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 136 135 137 13 (parallel [
            (set (reg/v:DI 489 [orig:175 re ] [175])
                (plus:DI (reg:DI 174 [ D.83229 ])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 174 [ D.83229 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(call_insn 137 136 138 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:16 648 {*call_value}
     (nil)
    (nil))
(insn 138 137 139 13 (set (reg:SI 176 [ D.83218 ])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:16 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 139 138 141 13 (set (reg/v:QI 488 [orig:167 ch ] [167])
        (subreg:QI (reg:SI 176 [ D.83218 ]) 0)) D:\LHX\7.5 contest\t1.cpp:16 93 {*movqi_internal}
     (nil))
(insn 141 139 142 13 (parallel [
            (set (reg:QI 281 [ D.83228 ])
                (plus:QI (subreg:QI (reg:SI 176 [ D.83218 ]) 0)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 224 {*addqi_1}
     (expr_list:REG_DEAD (reg:SI 176 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 142 141 143 13 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 281 [ D.83228 ])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:16 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 281 [ D.83228 ])
        (nil)))
(jump_insn 143 142 144 13 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 140)
            (pc))) D:\LHX\7.5 contest\t1.cpp:16 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 140)
;;  succ:       13 [91.0%]  (DFS_BACK)
;;              14 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 431 432 460 488 489

;; basic block 14, loop depth 1, count 0, freq 819, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u135(6){ }u136(7){ }u137(16){ }u138(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 431 432 460 489
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 431 432 489
;; lr  def 	 17 [flags] 87 175 283 284 285 286 487
(note 144 143 1072 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 1072 144 146 14 (set (reg/v:DI 175 [ re ])
        (reg/v:DI 489 [orig:175 re ] [175])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 489 [orig:175 re ] [175])
        (nil)))
(insn 146 1072 147 14 (parallel [
            (set (reg:SI 283)
                (mult:SI (reg:SI 432 [ flag+4 ])
                    (subreg:SI (reg/v:DI 175 [ re ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 306 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 432 [ flag+4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 147 146 148 14 (parallel [
            (set (reg:SI 284)
                (mult:SI (subreg:SI (reg/v:DI 175 [ re ]) 4)
                    (reg:SI 431 [ flag ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 148 147 149 14 (parallel [
            (set (reg:SI 285)
                (plus:SI (reg:SI 283)
                    (reg:SI 284)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 284)
        (expr_list:REG_DEAD (reg:SI 283)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 149 148 150 14 (parallel [
            (set (reg:DI 286 [ D.83229 ])
                (mult:DI (zero_extend:DI (reg:SI 431 [ flag ]))
                    (zero_extend:DI (subreg:SI (reg/v:DI 175 [ re ]) 0))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 323 {*umulsidi3_1}
     (expr_list:REG_DEAD (reg:SI 431 [ flag ])
        (expr_list:REG_DEAD (reg/v:DI 175 [ re ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(note 150 149 151 14 NOTE_INSN_DELETED)
(insn 151 150 153 14 (parallel [
            (set (subreg:SI (reg:DI 286 [ D.83229 ]) 4)
                (plus:SI (reg:SI 285)
                    (subreg:SI (reg:DI 286 [ D.83229 ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 285)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 153 151 154 14 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 87 [ i ])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _30, step: 4, offset: 0B]+0 S4 A32])
        (subreg:SI (reg:DI 286 [ D.83229 ]) 0)) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 286 [ D.83229 ])
        (nil)))
(insn 154 153 155 14 (parallel [
            (set (reg/v:SI 87 [ i ])
                (plus:SI (reg/v:SI 87 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:38 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 155 154 157 14 (set (reg:SI 487 [orig:449 D.83218 ] [449])
        (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (nil))
(insn 157 155 158 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 487 [orig:449 D.83218 ] [449])
            (reg/v:SI 87 [ i ]))) D:\LHX\7.5 contest\t1.cpp:38 7 {*cmpsi_1}
     (nil))
(jump_insn 158 157 159 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 156)
            (pc))) D:\LHX\7.5 contest\t1.cpp:38 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 9900 (nil)))
 -> 156)
;;  succ:       9 [99.0%]  (DFS_BACK)
;;              15 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 460 487

;; basic block 15, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u157(6){ }u158(7){ }u159(16){ }u160(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 487
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 487
;; lr  def 	 17 [flags] 449
(note 159 158 1073 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 1073 159 160 15 (set (reg:SI 449 [ D.83218 ])
        (reg:SI 487 [orig:449 D.83218 ] [449])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 487 [orig:449 D.83218 ] [449])
        (nil)))
(insn 160 1073 161 15 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 449 [ D.83218 ])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:39 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 161 160 162 15 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) D:\LHX\7.5 contest\t1.cpp:39 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (int_list:REG_BR_PROB 100 (nil)))
 -> 210)
;;  succ:       16 [99.0%]  (FALLTHRU)
;;              20 [1.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449

;; basic block 16, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [99.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u163(6){ }u164(7){ }u165(16){ }u166(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449
;; lr  def 	 17 [flags] 94 240 458 485 486
(note 162 161 163 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 12 16 (parallel [
            (set (reg:SI 240 [ D.83218 ])
                (plus:SI (reg:SI 449 [ D.83218 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 12 163 176 16 (set (reg/v:SI 94 [ i ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:39 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 176 12 1074 16 (set (reg:SI 458)
        (const_int 19260817 [0x125e591])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 19260817 [0x125e591])
        (nil)))
(insn 1074 176 1075 16 (set (reg/v:SI 485 [orig:94 i ] [94])
        (reg/v:SI 94 [ i ])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 94 [ i ])
        (nil)))
(insn 1075 1074 184 16 (set (reg:SI 486 [orig:240 D.83218 ] [240])
        (reg:SI 240 [ D.83218 ])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 240 [ D.83218 ])
        (nil)))
;;  succ:       17 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449 458 485 486

;; basic block 17, loop depth 1, count 0, freq 900, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU)
;;              17 [99.0%]  (DFS_BACK)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u168(6){ }u169(7){ }u170(16){ }u171(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449 458 485 486
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 458 485 486
;; lr  def 	 17 [flags] 290 291 293 298 301 485
(code_label 184 1075 164 17 126 "" [1 uses])
(note 164 184 168 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 168 164 169 17 (set (reg:SI 291 [ MEM[symbol: a, index: _39, step: 4, offset: 0B] ])
        (mem:SI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _39, step: 4, offset: 0B]+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _39, step: 4, offset: 0B]+0 S4 A32])
        (nil)))
(insn 169 168 171 17 (parallel [
            (set (reg:DI 290 [ D.83220 ])
                (sign_extend:DI (reg:SI 291 [ MEM[symbol: a, index: _39, step: 4, offset: 0B] ])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:40 143 {extendsidi2_1}
     (expr_list:REG_DEAD (reg:SI 291 [ MEM[symbol: a, index: _39, step: 4, offset: 0B] ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 171 169 172 17 NOTE_INSN_DELETED)
(insn 172 171 177 17 (parallel [
            (set (reg:SI 293)
                (mult:SI (mem:SI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                                (const_int 8 [0x8]))
                            (const:SI (plus:SI (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)
                                    (const_int -4 [0xfffffffffffffffc])))) [34 MEM[symbol: pre, index: _39, step: 8, offset: 4294967288B]+4 S4 A32])
                    (const_int 19260817 [0x125e591])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:40 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 177 172 178 17 (parallel [
            (set (reg:DI 298 [ D.83220 ])
                (mult:DI (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                                    (const_int 8 [0x8]))
                                (const:SI (plus:SI (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)
                                        (const_int -8 [0xfffffffffffffff8])))) [34 MEM[symbol: pre, index: _39, step: 8, offset: 4294967288B]+0 S4 A64]))
                    (zero_extend:DI (reg:SI 458))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:40 323 {*umulsidi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (mult:DI (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                                (const_int 8 [0x8]))
                            (const:SI (plus:SI (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)
                                    (const_int -8 [0xfffffffffffffff8])))) [34 MEM[symbol: pre, index: _39, step: 8, offset: 4294967288B]+0 S4 A64]))
                (const_int 19260817 [0x125e591]))
            (nil))))
(note 178 177 179 17 NOTE_INSN_DELETED)
(insn 179 178 181 17 (parallel [
            (set (subreg:SI (reg:DI 298 [ D.83220 ]) 4)
                (plus:SI (reg:SI 293)
                    (subreg:SI (reg:DI 298 [ D.83220 ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:40 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 293)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 181 179 182 17 (parallel [
            (set (reg:DI 301)
                (plus:DI (reg:DI 290 [ D.83220 ])
                    (reg:DI 298 [ D.83220 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:40 215 {*adddi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 298 [ D.83220 ])
        (expr_list:REG_DEAD (reg:DI 290 [ D.83220 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUIV (mem:DI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                                (const_int 8 [0x8]))
                            (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 MEM[symbol: pre, index: _39, step: 8, offset: 0B]+0 S8 A64])
                    (nil))))))
(insn 182 181 183 17 (set (mem:DI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 MEM[symbol: pre, index: _39, step: 8, offset: 0B]+0 S8 A64])
        (reg:DI 301)) D:\LHX\7.5 contest\t1.cpp:40 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 301)
        (nil)))
(insn 183 182 185 17 (parallel [
            (set (reg/v:SI 485 [orig:94 i ] [94])
                (plus:SI (reg/v:SI 485 [orig:94 i ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:39 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 185 183 186 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 485 [orig:94 i ] [94])
            (reg:SI 486 [orig:240 D.83218 ] [240]))) D:\LHX\7.5 contest\t1.cpp:39 7 {*cmpsi_1}
     (nil))
(jump_insn 186 185 784 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 184)
            (pc))) D:\LHX\7.5 contest\t1.cpp:39 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9900 (nil)))
 -> 184)
;;  succ:       17 [99.0%]  (DFS_BACK)
;;              18 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449 458 485 486

;; basic block 18, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u191(6){ }u192(7){ }u193(16){ }u194(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449
;; lr  def 	 101 457 484
(note 784 186 13 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 13 784 199 18 (set (reg/v:SI 101 [ i ])
        (reg:SI 449 [ D.83218 ])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (nil))
(insn 199 13 1076 18 (set (reg:SI 457)
        (const_int 19260817 [0x125e591])) D:\LHX\7.5 contest\t1.cpp:43 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 19260817 [0x125e591])
        (nil)))
(insn 1076 199 207 18 (set (reg/v:SI 484 [orig:101 i ] [101])
        (reg/v:SI 101 [ i ])) D:\LHX\7.5 contest\t1.cpp:43 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 101 [ i ])
        (nil)))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449 457 484

;; basic block 19, loop depth 1, count 0, freq 900, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              19 [99.0%]  (DFS_BACK)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u196(6){ }u197(7){ }u198(16){ }u199(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449 457 484
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 457 484
;; lr  def 	 17 [flags] 304 305 307 312 315 484
(code_label 207 1076 187 19 127 "" [1 uses])
(note 187 207 191 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 191 187 192 19 (set (reg:SI 305 [ MEM[symbol: a, index: _411, step: 4, offset: 0B] ])
        (mem:SI (plus:SI (mult:SI (reg/v:SI 484 [orig:101 i ] [101])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _411, step: 4, offset: 0B]+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:43 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (mult:SI (reg/v:SI 484 [orig:101 i ] [101])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _411, step: 4, offset: 0B]+0 S4 A32])
        (nil)))
(insn 192 191 194 19 (parallel [
            (set (reg:DI 304 [ D.83220 ])
                (sign_extend:DI (reg:SI 305 [ MEM[symbol: a, index: _411, step: 4, offset: 0B] ])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:43 143 {extendsidi2_1}
     (expr_list:REG_DEAD (reg:SI 305 [ MEM[symbol: a, index: _411, step: 4, offset: 0B] ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 194 192 195 19 NOTE_INSN_DELETED)
(insn 195 194 200 19 (parallel [
            (set (reg:SI 307)
                (mult:SI (mem:SI (plus:SI (mult:SI (reg/v:SI 484 [orig:101 i ] [101])
                                (const_int 8 [0x8]))
                            (const:SI (plus:SI (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)
                                    (const_int 12 [0xc])))) [34 MEM[symbol: suf, index: _411, step: 8, offset: 8B]+4 S4 A32])
                    (const_int 19260817 [0x125e591])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:43 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 200 195 201 19 (parallel [
            (set (reg:DI 312 [ D.83220 ])
                (mult:DI (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg/v:SI 484 [orig:101 i ] [101])
                                    (const_int 8 [0x8]))
                                (const:SI (plus:SI (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)
                                        (const_int 8 [0x8])))) [34 MEM[symbol: suf, index: _411, step: 8, offset: 8B]+0 S4 A64]))
                    (zero_extend:DI (reg:SI 457))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:43 323 {*umulsidi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (mult:DI (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg/v:SI 484 [orig:101 i ] [101])
                                (const_int 8 [0x8]))
                            (const:SI (plus:SI (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)
                                    (const_int 8 [0x8])))) [34 MEM[symbol: suf, index: _411, step: 8, offset: 8B]+0 S4 A64]))
                (const_int 19260817 [0x125e591]))
            (nil))))
(note 201 200 202 19 NOTE_INSN_DELETED)
(insn 202 201 204 19 (parallel [
            (set (subreg:SI (reg:DI 312 [ D.83220 ]) 4)
                (plus:SI (reg:SI 307)
                    (subreg:SI (reg:DI 312 [ D.83220 ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:43 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 307)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 204 202 205 19 (parallel [
            (set (reg:DI 315)
                (plus:DI (reg:DI 304 [ D.83220 ])
                    (reg:DI 312 [ D.83220 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:43 215 {*adddi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 312 [ D.83220 ])
        (expr_list:REG_DEAD (reg:DI 304 [ D.83220 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUIV (mem:DI (plus:SI (mult:SI (reg/v:SI 484 [orig:101 i ] [101])
                                (const_int 8 [0x8]))
                            (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)) [34 MEM[symbol: suf, index: _411, step: 8, offset: 0B]+0 S8 A64])
                    (nil))))))
(insn 205 204 206 19 (set (mem:DI (plus:SI (mult:SI (reg/v:SI 484 [orig:101 i ] [101])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)) [34 MEM[symbol: suf, index: _411, step: 8, offset: 0B]+0 S8 A64])
        (reg:DI 315)) D:\LHX\7.5 contest\t1.cpp:43 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 315)
        (nil)))
(insn 206 205 208 19 (parallel [
            (set (reg/v:SI 484 [orig:101 i ] [101])
                (plus:SI (reg/v:SI 484 [orig:101 i ] [101])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:42 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 208 206 209 19 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 484 [orig:101 i ] [101])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:42 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 209 208 210 19 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 207)
            (pc))) D:\LHX\7.5 contest\t1.cpp:42 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (int_list:REG_BR_PROB 9900 (nil)))
 -> 207)
;;  succ:       19 [99.0%]  (DFS_BACK)
;;              20 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449 457 484

;; basic block 20, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [1.0%]  (FALLTHRU,LOOP_EXIT)
;;              15 [1.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u218(6){ }u219(7){ }u220(16){ }u221(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 449
;; lr  def 	 17 [flags] 125 252 456
(code_label 210 209 211 20 125 "" [1 uses])
(note 211 210 212 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 221 20 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (nil))
(insn 221 212 15 20 (set (reg:SI 252 [ D.83218 ])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 15 221 602 20 (set (reg:SI 125 [ D.83218 ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 602 15 213 20 (parallel [
            (set (reg/f:SI 456)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:60 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc]))
            (nil))))
(insn 213 602 214 20 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 449 [ D.83218 ])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:45 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 214 213 759 20 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 1113)
            (pc))) D:\LHX\7.5 contest\t1.cpp:45 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 1113)
;;  succ:       131 [91.0%] 
;;              21 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 252 449 456

;; basic block 21, loop depth 0, count 0, freq 1
;;  prev block 20, next block 131, flags: (RTL, MODIFIED)
;;  pred:       20 [9.0%]  (FALLTHRU)
;;              126 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u225(6){ }u226(7){ }u227(16){ }u228(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 252
(code_label 759 214 215 21 184 "" [1 uses])
(note 215 759 216 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 993 21 (set (reg:SI 252 [ D.83218 ])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(jump_insn 993 216 994 21 (set (pc)
        (label_ref 617)) 636 {jump}
     (nil)
 -> 617)
;;  succ:       109 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 252

(barrier 994 993 1113)
;; basic block 131, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 21, next block 22, flags: (NEW, RTL, MODIFIED)
;;  pred:       20 [91.0%] 
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 252 449 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 252 449
;; lr  def 	 464 465 466
(code_label 1113 994 1112 131 231 "" [1 uses])
(note 1112 1113 1077 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn 1077 1112 1078 131 (set (reg:SI 464 [orig:125 D.83218 ] [125])
        (reg:SI 125 [ D.83218 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 125 [ D.83218 ])
        (nil)))
(insn 1078 1077 1079 131 (set (reg:SI 465 [orig:252 D.83218 ] [252])
        (reg:SI 252 [ D.83218 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 252 [ D.83218 ])
        (nil)))
(insn 1079 1078 941 131 (set (reg:SI 466 [orig:449 D.83218 ] [449])
        (reg:SI 449 [ D.83218 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 449 [ D.83218 ])
        (nil)))
;;  succ:       22 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 456 464 465 466

;; basic block 22, loop depth 1, count 0, freq 92, maybe hot
;;  prev block 131, next block 23, flags: (RTL, MODIFIED)
;;  pred:       131 [100.0%]  (FALLTHRU)
;;              108 [91.0%]  (DFS_BACK)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u234(6){ }u235(7){ }u236(16){ }u237(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 456 464 465 466
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 464 465 466
;; lr  def 	 17 [flags] 317 318 451
(code_label 941 1079 940 22 209 "" [1 uses])
(note 940 941 223 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 223 940 895 22 (parallel [
            (set (reg:SI 317 [ D.83218 ])
                (div:SI (reg:SI 466 [orig:449 D.83218 ] [449])
                    (reg:SI 464 [orig:125 D.83218 ] [125])))
            (set (reg:SI 318)
                (mod:SI (reg:SI 466 [orig:449 D.83218 ] [449])
                    (reg:SI 464 [orig:125 D.83218 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:46 338 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 464 [orig:125 D.83218 ] [125])
        (expr_list:REG_UNUSED (reg:SI 318)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 895 223 224 22 (set (reg:SI 451 [ j ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 224 895 225 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 317 [ D.83218 ])
            (reg:SI 465 [orig:252 D.83218 ] [252]))) D:\LHX\7.5 contest\t1.cpp:46 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 317 [ D.83218 ])
        (nil)))
(jump_insn 225 224 226 22 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 608)
            (pc))) D:\LHX\7.5 contest\t1.cpp:46 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 608)
;;  succ:       108 [71.0%] 
;;              23 [29.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 451 456 465 466

;; basic block 23, loop depth 1, count 0, freq 27, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 [29.0%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u246(6){ }u247(7){ }u248(16){ }u249(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 104 106 320 451
(note 226 225 228 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 228 226 229 23 (set (reg/f:SI 320 [ MEM[(struct _Rb_tree_node_base * *)&s + 8B] ])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])
        (nil)))
(insn 229 228 230 23 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 320 [ MEM[(struct _Rb_tree_node_base * *)&s + 8B] ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 320 [ MEM[(struct _Rb_tree_node_base * *)&s + 8B] ])
        (nil)))
(insn 230 229 231 23 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 90 {*movsi_internal}
     (nil))
(call_insn 231 230 232 23 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E") [flags 0x3]  <function_decl 06e20200 _M_erase>) [0 _M_erase S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 646 {*call_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 232 231 234 23 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 234 232 236 23 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 12 [0xc]))) [6 MEM[(struct _Rb_tree_node_base * &)&s + 12]+0 S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:909 90 {*movsi_internal}
     (nil))
(insn 236 234 238 23 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * &)&s + 8]+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:910 90 {*movsi_internal}
     (nil))
(insn 238 236 240 23 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 16 [0x10]))) [6 MEM[(struct _Rb_tree_node_base * &)&s + 16]+0 S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:911 90 {*movsi_internal}
     (nil))
(insn 240 238 241 23 (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:912 90 {*movsi_internal}
     (nil))
(insn 241 240 911 23 (set (reg:SI 451 [ j ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 911 241 242 23 (set (reg:SI 106 [ D.83218 ])
        (reg:SI 451 [ j ])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 242 911 243 23 (parallel [
            (set (reg/v:DI 104 [ b ])
                (sign_extend:DI (reg:SI 451 [ j ])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:47 143 {extendsidi2_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 243 242 244 23 NOTE_INSN_DELETED)
(insn 244 243 245 23 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ior:SI (reg:SI 451 [ j ])
                        (subreg:SI (reg/v:DI 104 [ b ]) 4))
                    (const_int 0 [0])))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:26 425 {*iorsi_3}
     (nil))
(jump_insn 245 244 246 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 789)
            (pc))) D:\LHX\7.5 contest\t1.cpp:26 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 789)
;;  succ:       24 [91.0%]  (FALLTHRU)
;;              29 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 106 451 456

;; basic block 24, loop depth 1, count 0, freq 24, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 [91.0%]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u266(6){ }u267(7){ }u268(16){ }u269(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 106 451 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 106
;; lr  def 	 135 136 481 482 483
(note 246 245 16 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 16 246 17 24 (set (reg/v:DI 135 [ a ])
        (const_int 19260817 [0x125e591])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 19260817 [0x125e591])
        (nil)))
(insn 17 16 1080 24 (set (reg/v:DI 136 [ tmod ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 1080 17 1081 24 (set (reg/v:DI 481 [orig:104 b ] [104])
        (reg/v:DI 104 [ b ])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 104 [ b ])
        (nil)))
(insn 1081 1080 1082 24 (set (reg:SI 482 [orig:106 D.83218 ] [106])
        (reg:SI 106 [ D.83218 ])) D:\LHX\7.5 contest\t1.cpp:26 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106 [ D.83218 ])
        (nil)))
(insn 1082 1081 271 24 (set (reg/v:DI 483 [orig:135 a ] [135])
        (reg/v:DI 135 [ a ])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 135 [ a ])
        (nil)))
;;  succ:       25 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 451 456 481 482 483

;; basic block 25, loop depth 2, count 0, freq 270, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 [100.0%]  (FALLTHRU)
;;              27 [91.0%]  (DFS_BACK)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u270(6){ }u271(7){ }u272(16){ }u273(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 451 456 481 482 483
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 481
;; lr  def 	 17 [flags] 439
(code_label 271 1082 247 25 133 "" [1 uses])
(note 247 271 248 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 251 25 (parallel [
            (set (reg:SI 439 [ D.83220 ])
                (and:SI (subreg:SI (reg/v:DI 481 [orig:104 b ] [104]) 0)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 370 {*andsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 251 248 252 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 439 [ D.83220 ])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:27 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 439 [ D.83220 ])
        (nil)))
(jump_insn 252 251 253 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 261)
            (pc))) D:\LHX\7.5 contest\t1.cpp:27 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 261)
;;  succ:       26 [50.0%]  (FALLTHRU)
;;              27 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 451 456 481 482 483

;; basic block 26, loop depth 2, count 0, freq 135, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 [50.0%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u277(6){ }u278(7){ }u279(16){ }u280(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 451 456 481 482 483
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 483
;; lr  def 	 17 [flags] 136 328 329 330
(note 253 252 254 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 26 (parallel [
            (set (reg:SI 328)
                (mult:SI (subreg:SI (reg/v:DI 136 [ tmod ]) 4)
                    (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 255 254 256 26 (parallel [
            (set (reg:SI 329)
                (mult:SI (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 4)
                    (subreg:SI (reg/v:DI 136 [ tmod ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 256 255 257 26 (parallel [
            (set (reg:SI 330)
                (plus:SI (reg:SI 328)
                    (reg:SI 329)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 329)
        (expr_list:REG_DEAD (reg:SI 328)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 257 256 258 26 (parallel [
            (set (reg/v:DI 136 [ tmod ])
                (mult:DI (zero_extend:DI (subreg:SI (reg/v:DI 136 [ tmod ]) 0))
                    (zero_extend:DI (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 0))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 323 {*umulsidi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 258 257 259 26 NOTE_INSN_DELETED)
(insn 259 258 261 26 (parallel [
            (set (subreg:SI (reg/v:DI 136 [ tmod ]) 4)
                (plus:SI (reg:SI 330)
                    (subreg:SI (reg/v:DI 136 [ tmod ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 330)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
;;  succ:       27 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 451 456 481 482 483

;; basic block 27, loop depth 2, count 0, freq 270, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       25 [50.0%] 
;;              26 [100.0%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u293(6){ }u294(7){ }u295(16){ }u296(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 451 456 481 482 483
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 481 483
;; lr  def 	 17 [flags] 332 334 481 483
(code_label 261 259 262 27 132 "" [1 uses])
(note 262 261 263 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 265 27 (parallel [
            (set (reg:SI 332)
                (mult:SI (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 4)
                    (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 265 263 266 27 (parallel [
            (set (reg:SI 334)
                (ashift:SI (reg:SI 332)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 496 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 332)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 266 265 267 27 (parallel [
            (set (reg/v:DI 483 [orig:135 a ] [135])
                (mult:DI (zero_extend:DI (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 0))
                    (zero_extend:DI (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 0))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 323 {*umulsidi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 267 266 268 27 NOTE_INSN_DELETED)
(insn 268 267 270 27 (parallel [
            (set (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 4)
                (plus:SI (reg:SI 334)
                    (subreg:SI (reg/v:DI 483 [orig:135 a ] [135]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 334)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 270 268 272 27 (parallel [
            (set (reg/v:DI 481 [orig:104 b ] [104])
                (lshiftrt:DI (reg/v:DI 481 [orig:104 b ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 516 {*lshrdi3_doubleword}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 272 270 273 27 NOTE_INSN_DELETED)
(insn 273 272 274 27 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ior:SI (subreg:SI (reg/v:DI 481 [orig:104 b ] [104]) 4)
                        (subreg:SI (reg/v:DI 481 [orig:104 b ] [104]) 0))
                    (const_int 0 [0])))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:26 425 {*iorsi_3}
     (nil))
(jump_insn 274 273 995 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 271)
            (pc))) D:\LHX\7.5 contest\t1.cpp:26 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 271)
;;  succ:       25 [91.0%]  (DFS_BACK)
;;              28 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 451 456 481 482 483

;; basic block 28, loop depth 1, count 0, freq 24, maybe hot
;;  prev block 27, next block 29, flags: (NEW, RTL, MODIFIED)
;;  pred:       27 [9.0%]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 136 451 456 482
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 482
;; lr  def 	 106
(note 995 274 1083 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 1083 995 996 28 (set (reg:SI 106 [ D.83218 ])
        (reg:SI 482 [orig:106 D.83218 ] [106])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 482 [orig:106 D.83218 ] [106])
        (nil)))
(jump_insn 996 1083 997 28 (set (pc)
        (label_ref 275)) 636 {jump}
     (nil)
 -> 275)
;;  succ:       30 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 136 451 456

(barrier 997 996 789)
;; basic block 29, loop depth 1, count 0, freq 2
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       23 [9.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u311(6){ }u312(7){ }u313(16){ }u314(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 451 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 136
(code_label 789 997 788 29 188 "" [1 uses])
(note 788 789 18 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 18 788 275 29 (set (reg/v:DI 136 [ tmod ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:25 89 {*movdi_internal}
     (nil))
;;  succ:       30 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 136 451 456

;; basic block 30, loop depth 1, count 0, freq 27, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       29 [100.0%]  (FALLTHRU)
;;              28 [100.0%]  (LOOP_EXIT)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u315(6){ }u316(7){ }u317(16){ }u318(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 136 451 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 451
;; lr  def 	 17 [flags]
(code_label 275 18 276 30 131 "" [1 uses])
(note 276 275 277 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 277 276 278 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 451 [ j ])
            (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32]))) D:\LHX\7.5 contest\t1.cpp:49 7 {*cmpsi_1}
     (nil))
(jump_insn 278 277 279 30 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 791)
            (pc))) D:\LHX\7.5 contest\t1.cpp:49 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 791)
;;  succ:       31 [91.0%]  (FALLTHRU)
;;              103 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 136 451 456

;; basic block 31, loop depth 1, count 0, freq 24, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 [91.0%]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u321(6){ }u322(7){ }u323(16){ }u324(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 136 451 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 451
;; lr  def 	 83 123 189 450 467 468 469
(note 279 278 20 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 20 279 21 31 (set (reg/f:SI 189 [ __i$_M_node ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 21 20 22 31 (set (reg/v:SI 83 [ tmp ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 22 21 899 31 (set (reg/v:SI 123 [ i ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 899 22 1084 31 (set (reg:SI 450)
        (plus:SI (reg:SI 451 [ j ])
            (const_int 1 [0x1]))) 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 451 [ j ])
        (nil)))
(insn 1084 899 1085 31 (set (reg:SI 467 [orig:106 D.83218 ] [106])
        (reg:SI 106 [ D.83218 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106 [ D.83218 ])
        (nil)))
(insn 1085 1084 1086 31 (set (reg/f:SI 468 [orig:189 __i$_M_node ] [189])
        (reg/f:SI 189 [ __i$_M_node ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 189 [ __i$_M_node ])
        (nil)))
(insn 1086 1085 575 31 (set (reg:SI 469 [450])
        (reg:SI 450)) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 450)
        (nil)))
;;  succ:       32 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 467 468 469

;; basic block 32, loop depth 2, count 0, freq 270, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 [100.0%]  (FALLTHRU)
;;              102 [100.0%]  (DFS_BACK)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u326(6){ }u327(7){ }u328(16){ }u329(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 467 468 469
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 136 467 468 469
;; lr  def 	 17 [flags] 112 113 339 340 342 344 345 347 427 428
(code_label 575 1086 280 32 170 "" [1 uses])
(note 280 575 283 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 283 280 284 32 (parallel [
            (set (reg:SI 339)
                (plus:SI (reg/v:SI 123 [ i ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 284 283 285 32 NOTE_INSN_DELETED)
(insn 285 284 286 32 (parallel [
            (set (reg:SI 340)
                (mult:SI (mem:SI (plus:SI (mult:SI (reg:SI 339)
                                (const_int 8 [0x8]))
                            (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 pre S4 A64])
                    (subreg:SI (reg/v:DI 136 [ tmod ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 286 285 287 32 NOTE_INSN_DELETED)
(insn 287 286 288 32 (parallel [
            (set (reg:SI 342)
                (mult:SI (mem:SI (plus:SI (mult:SI (reg:SI 339)
                                (const_int 8 [0x8]))
                            (const:SI (plus:SI (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)
                                    (const_int 4 [0x4])))) [34 pre S4 A32])
                    (subreg:SI (reg/v:DI 136 [ tmod ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 288 287 289 32 (parallel [
            (set (reg:SI 344)
                (plus:SI (reg:SI 340)
                    (reg:SI 342)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 342)
        (expr_list:REG_DEAD (reg:SI 340)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 289 288 290 32 (parallel [
            (set (reg:DI 345 [ D.83220 ])
                (mult:DI (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg:SI 339)
                                    (const_int 8 [0x8]))
                                (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 pre S4 A64]))
                    (zero_extend:DI (subreg:SI (reg/v:DI 136 [ tmod ]) 0))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 323 {*umulsidi3_1}
     (expr_list:REG_DEAD (reg:SI 339)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 290 289 291 32 NOTE_INSN_DELETED)
(insn 291 290 293 32 (parallel [
            (set (subreg:SI (reg:DI 345 [ D.83220 ]) 4)
                (plus:SI (reg:SI 344)
                    (subreg:SI (reg:DI 345 [ D.83220 ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 344)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 293 291 294 32 (set (reg:DI 347)
        (mem:DI (plus:SI (mult:SI (reg:SI 467 [orig:106 D.83218 ] [106])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 pre S8 A64])) D:\LHX\7.5 contest\t1.cpp:50 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:SI 467 [orig:106 D.83218 ] [106])
        (nil)))
(insn 294 293 296 32 (parallel [
            (set (reg/v:DI 112 [ t1 ])
                (minus:DI (reg:DI 347)
                    (reg:DI 345 [ D.83220 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 259 {*subdi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 347)
        (expr_list:REG_DEAD (reg:DI 345 [ D.83220 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 296 294 863 32 (set (reg:DI 113 [ D.83220 ])
        (mem:DI (plus:SI (mult:SI (reg/v:SI 123 [ i ])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)) [34 suf S8 A64])) D:\LHX\7.5 contest\t1.cpp:51 89 {*movdi_internal}
     (nil))
(insn 863 296 864 32 (set (reg:SI 427 [ D.83220 ])
        (mem:SI (plus:SI (mult:SI (reg:SI 469 [450])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)) [34 suf S4 A64])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 864 863 300 32 (set (reg:SI 428 [ D.83220+4 ])
        (mem:SI (plus:SI (mult:SI (reg:SI 469 [450])
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)
                        (const_int 4 [0x4])))) [34 suf S4 A32])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 469 [450])
        (nil)))
(insn 300 864 301 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 468 [orig:189 __i$_M_node ] [189])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 301 300 302 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 793)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 793)
;;  succ:       33 [91.0%]  (FALLTHRU)
;;              112 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 427 428 456 468

;; basic block 33, loop depth 2, count 0, freq 245, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 [91.0%]  (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u353(6){ }u354(7){ }u355(16){ }u356(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 427 428 456 468
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 468
;; lr  def 	 203 478 479 480
(note 302 301 890 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 890 302 1087 33 (set (reg/f:SI 203 [ __i$_M_node ])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))
        (nil)))
(insn 1087 890 1088 33 (set (reg/v:DI 478 [orig:112 t1 ] [112])
        (reg/v:DI 112 [ t1 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 112 [ t1 ])
        (nil)))
(insn 1088 1087 1089 33 (set (reg/f:SI 479 [orig:189 __i$_M_node ] [189])
        (reg/f:SI 468 [orig:189 __i$_M_node ] [189])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 468 [orig:189 __i$_M_node ] [189])
        (nil)))
(insn 1089 1088 320 33 (set (reg/f:SI 480 [orig:203 __i$_M_node ] [203])
        (reg/f:SI 203 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 203 [ __i$_M_node ])
        (nil)))
;;  succ:       34 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480

;; basic block 34, loop depth 3, count 0, freq 2725, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 [100.0%]  (FALLTHRU)
;;              39 [91.0%]  (DFS_BACK)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u357(6){ }u358(7){ }u359(16){ }u360(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 478 479
;; lr  def 	 17 [flags]
(code_label 320 1089 303 34 139 "" [1 uses])
(note 303 320 304 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 34 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 478 [orig:112 t1 ] [112]) 4)
            (mem:SI (plus:SI (reg/f:SI 479 [orig:189 __i$_M_node ] [189])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_423 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 305 304 818 34 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 315)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 315)
;;  succ:       38 [50.0%] 
;;              35 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 113 123 136 427 428 456 478 479 480

;; basic block 35, loop depth 3, count 0, freq 1363, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       34 [50.0%]  (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u364(6){ }u365(7){ }u366(16){ }u367(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 113 123 136 427 428 456 478 479 480
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 818 305 307 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(jump_insn 307 818 819 35 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 852)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 852)
;;  succ:       37 [50.0%] 
;;              36 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480

;; basic block 36, loop depth 3, count 0, freq 682, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 [50.0%]  (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u369(6){ }u370(7){ }u371(16){ }u372(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 478 479
;; lr  def 	 17 [flags]
(note 819 307 308 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 308 819 309 36 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 478 [orig:112 t1 ] [112]) 0)
            (mem:SI (plus:SI (reg/f:SI 479 [orig:189 __i$_M_node ] [189])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_423 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 309 308 852 36 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 315)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 315)
;;  succ:       38 [50.0%] 
;;              37 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480

;; basic block 37, loop depth 3, count 0, freq 1363, maybe hot
;; Invalid sum of incoming frequencies 1023, should be 1363
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 [50.0%]  (FALLTHRU)
;;              35 [50.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u376(6){ }u377(7){ }u378(16){ }u379(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 479
;; lr  def 	 479 480
(code_label 852 309 311 37 198 "" [1 uses])
(note 311 852 312 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(note 312 311 24 37 NOTE_INSN_DELETED)
(insn 24 312 25 37 (set (reg/f:SI 480 [orig:203 __i$_M_node ] [203])
        (reg/f:SI 479 [orig:189 __i$_M_node ] [189])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 90 {*movsi_internal}
     (nil))
(insn 25 24 998 37 (set (reg/f:SI 479 [orig:189 __i$_M_node ] [189])
        (mem/f:SI (plus:SI (reg/f:SI 479 [orig:189 __i$_M_node ] [189])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_423 + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1262 90 {*movsi_internal}
     (nil))
(jump_insn 998 25 999 37 (set (pc)
        (label_ref 318)) 636 {jump}
     (nil)
 -> 318)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480

(barrier 999 998 315)
;; basic block 38, loop depth 3, count 0, freq 1363, maybe hot
;; Invalid sum of incoming frequencies 1704, should be 1363
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       34 [50.0%] 
;;              36 [50.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u383(6){ }u384(7){ }u385(16){ }u386(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 479
;; lr  def 	 479
(code_label 315 999 316 38 136 "" [2 uses])
(note 316 315 317 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 317 316 318 38 (set (reg/f:SI 479 [orig:189 __i$_M_node ] [189])
        (mem/f:SI (plus:SI (reg/f:SI 479 [orig:189 __i$_M_node ] [189])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_423 + 12B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       39 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480

;; basic block 39, loop depth 3, count 0, freq 2725, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 [100.0%]  (FALLTHRU)
;;              37 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u388(6){ }u389(7){ }u390(16){ }u391(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 479
;; lr  def 	 17 [flags]
(code_label 318 317 319 39 138 "" [1 uses])
(note 319 318 321 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 321 319 322 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 479 [orig:189 __i$_M_node ] [189])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 322 321 323 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 320)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 320)
;;  succ:       34 [91.0%]  (DFS_BACK)
;;              40 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 479 480

;; basic block 40, loop depth 2, count 0, freq 245, maybe hot
;;  prev block 39, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u394(6){ }u395(7){ }u396(16){ }u397(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 113 123 136 427 428 456 478 480
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 478 480
;; lr  def 	 17 [flags] 112 203
(note 323 322 1090 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 1090 323 1091 40 (set (reg/v:DI 112 [ t1 ])
        (reg/v:DI 478 [orig:112 t1 ] [112])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 478 [orig:112 t1 ] [112])
        (nil)))
(insn 1091 1090 324 40 (set (reg/f:SI 203 [ __i$_M_node ])
        (reg/f:SI 480 [orig:203 __i$_M_node ] [203])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 480 [orig:203 __i$_M_node ] [203])
        (nil)))
(insn 324 1091 325 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 203 [ __i$_M_node ])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 325 324 326 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 661)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 671 (nil)))
 -> 661)
;;  succ:       113 [6.7%] 
;;              41 [93.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456

;; basic block 41, loop depth 2, count 0, freq 229, maybe hot
;;  prev block 40, next block 42, flags: (RTL)
;;  pred:       40 [93.3%]  (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u400(6){ }u401(7){ }u402(16){ }u403(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 203
;; lr  def 	 17 [flags]
(note 326 325 327 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 327 326 328 41 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 112 [ t1 ]) 4)
            (mem:SI (plus:SI (reg/f:SI 203 [ __i$_M_node ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_446 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 328 327 821 41 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 661)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 661)
;;  succ:       113 [50.0%] 
;;              42 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 113 123 136 203 427 428 456

;; basic block 42, loop depth 2, count 0, freq 115, maybe hot
;;  prev block 41, next block 43, flags: (RTL)
;;  pred:       41 [50.0%]  (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u407(6){ }u408(7){ }u409(16){ }u410(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 113 123 136 203 427 428 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 821 328 330 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(jump_insn 330 821 822 42 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 381)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 381)
;;  succ:       54 [50.0%] 
;;              43 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456

;; basic block 43, loop depth 2, count 0, freq 58, maybe hot
;;  prev block 42, next block 44, flags: (RTL)
;;  pred:       42 [50.0%]  (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u412(6){ }u413(7){ }u414(16){ }u415(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 203
;; lr  def 	 17 [flags]
(note 822 330 331 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 331 822 332 43 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 112 [ t1 ]) 0)
            (mem:SI (plus:SI (reg/f:SI 203 [ __i$_M_node ])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_446 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 332 331 1000 43 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 661)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 661)
;;  succ:       113 [50.0%] 
;;              44 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456

;; basic block 44, loop depth 2, count 0, freq 29, maybe hot
;;  prev block 43, next block 45, flags: (NEW, RTL, MODIFIED)
;;  pred:       43 [50.0%]  (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1000 332 1001 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1001 1000 1002 44 (set (pc)
        (label_ref 381)) 636 {jump}
     (nil)
 -> 381)
;;  succ:       54 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456

(barrier 1002 1001 678)
;; basic block 45, loop depth 2, count 0, freq 18, maybe hot
;; Invalid sum of incoming frequencies 122, should be 18
;;  prev block 44, next block 46, flags: (RTL, MODIFIED)
;;  pred:       113 [78.4%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u419(6){ }u420(7){ }u421(16){ }u422(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 437 438 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 437
;; lr  def 	 17 [flags]
(code_label 678 1002 337 45 176 "" [1 uses])
(note 337 678 338 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(note 338 337 339 45 NOTE_INSN_DELETED)
(note 339 338 340 45 NOTE_INSN_DELETED)
(insn 340 339 341 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 437 [ __res ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 437 [ __res ])
        (nil)))
(jump_insn 341 340 824 45 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 801)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 507 (nil)))
 -> 801)
;;  succ:       51 [5.1%] 
;;              46 [94.9%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 438 456

;; basic block 46, loop depth 2, count 0, freq 17, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       45 [94.9%]  (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u427(6){ }u428(7){ }u429(16){ }u430(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 438 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 438
;; lr  def 	 17 [flags]
(note 824 341 342 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(note 342 824 343 46 NOTE_INSN_DELETED)
(note 343 342 344 46 NOTE_INSN_DELETED)
(insn 344 343 345 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 438 [ __res+4 ])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 345 344 346 46 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 801)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 534 (nil)))
 -> 801)
;;  succ:       51 [5.3%] 
;;              47 [94.7%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 438 456

;; basic block 47, loop depth 2, count 0, freq 16, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       46 [94.7%]  (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u435(6){ }u436(7){ }u437(16){ }u438(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 438 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 203 438
;; lr  def 	 17 [flags] 120 441
(note 346 345 347 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 865 47 (set (reg/v:QI 120 [ __insert_left ])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 865 347 866 47 (set (reg:SI 441 [ MEM[(const long long unsigned int &)__i$_M_node_205 + 16] ])
        (mem:SI (plus:SI (reg/f:SI 203 [ __i$_M_node ])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_205 + 16]+0 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(note 866 865 349 47 NOTE_INSN_DELETED)
(insn 349 866 350 47 (set (reg:CC 17 flags)
        (compare:CC (mem:SI (plus:SI (reg/f:SI 203 [ __i$_M_node ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_205 + 16]+4 S4 A32])
            (mem:SI (plus:SI (reg:SI 438 [ __res+4 ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__res$second_203 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 350 349 825 47 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 358)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 358)
;;  succ:       52 [50.0%] 
;;              48 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 113 120 123 136 203 427 428 438 441 456

;; basic block 48, loop depth 2, count 0, freq 8, maybe hot
;;  prev block 47, next block 49, flags: (RTL)
;;  pred:       47 [50.0%]  (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u444(6){ }u445(7){ }u446(16){ }u447(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 113 120 123 136 203 427 428 438 441 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 825 350 352 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(jump_insn 352 825 826 48 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 355)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 355)
;;  succ:       50 [50.0%] 
;;              49 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 120 123 136 203 427 428 438 441 456

;; basic block 49, loop depth 2, count 0, freq 4
;;  prev block 48, next block 50, flags: (RTL)
;;  pred:       48 [50.0%]  (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u449(6){ }u450(7){ }u451(16){ }u452(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 120 123 136 203 427 428 438 441 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 438 441
;; lr  def 	 17 [flags]
(note 826 352 353 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 353 826 354 49 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 441 [ MEM[(const long long unsigned int &)__i$_M_node_205 + 16] ])
            (mem:SI (plus:SI (reg:SI 438 [ __res+4 ])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__res$second_203 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 441 [ MEM[(const long long unsigned int &)__i$_M_node_205 + 16] ])
        (nil)))
(jump_insn 354 353 355 49 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 358)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 358)
;;  succ:       52 [50.0%] 
;;              50 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 120 123 136 203 427 428 438 456

;; basic block 50, loop depth 2, count 0, freq 6, maybe hot
;;  prev block 49, next block 51, flags: (RTL, MODIFIED)
;;  pred:       48 [50.0%] 
;;              49 [50.0%]  (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u456(6){ }u457(7){ }u458(16){ }u459(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 438 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 120
(code_label 355 354 827 50 144 "" [1 uses])
(note 827 355 356 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 356 827 1003 50 (set (reg/v:QI 120 [ __insert_left ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 1003 356 1004 50 (set (pc)
        (label_ref 358)) 636 {jump}
     (nil)
 -> 358)
;;  succ:       52 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 120 123 136 203 427 428 438 456

(barrier 1004 1003 801)
;; basic block 51, loop depth 2, count 0, freq 2
;;  prev block 50, next block 52, flags: (RTL)
;;  pred:       46 [5.3%] 
;;              45 [5.1%] 
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u460(6){ }u461(7){ }u462(16){ }u463(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 438 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 120
(code_label 801 1004 800 51 192 "" [2 uses])
(note 800 801 27 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 27 800 358 51 (set (reg/v:QI 120 [ __insert_left ])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       52 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 120 123 136 203 427 428 438 456

;; basic block 52, loop depth 2, count 0, freq 82, maybe hot
;;  prev block 51, next block 53, flags: (RTL, MODIFIED)
;;  pred:       51 [100.0%]  (FALLTHRU)
;;              49 [50.0%] 
;;              47 [50.0%] 
;;              50 [100.0%] 
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u464(6){ }u465(7){ }u466(16){ }u467(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 120 123 136 203 427 428 438 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 203 438
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 356
(code_label 358 27 359 52 142 "" [3 uses])
(note 359 358 360 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 361 52 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0  S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 361 360 362 52 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 438 [ __res+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 438 [ __res+4 ])
        (nil)))
(insn 362 361 363 52 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 203 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 363 362 364 52 (set (reg:SI 356 [ __insert_left ])
        (zero_extend:SI (reg/v:QI 120 [ __insert_left ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg/v:QI 120 [ __insert_left ])
        (expr_list:REG_EQUIV (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
            (nil))))
(insn 364 363 365 52 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 356 [ __insert_left ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 356 [ __insert_left ])
        (nil)))
(call_insn 365 364 371 52 (call (mem:QI (symbol_ref:SI ("_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_") [flags 0x43]  <function_decl 06b77200 _Rb_tree_insert_and_rebalance>) [0 _Rb_tree_insert_and_rebalance S1 A8])
        (const_int 16 [0x10])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 12 [0xc])) [0  S4 A32]))
                    (nil))))))
(note 371 365 372 52 NOTE_INSN_DELETED)
(note 372 371 373 52 NOTE_INSN_DELETED)
(insn 373 372 1005 52 (parallel [
            (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                            (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                (plus:SI (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                                (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1698 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1005 373 1006 52 (set (pc)
        (label_ref 381)) 636 {jump}
     (nil)
 -> 381)
;;  succ:       54 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456

(barrier 1006 1005 1037)
;; basic block 53, loop depth 2, count 0, freq 23, maybe hot
;;  prev block 52, next block 54, flags: (RTL)
;;  pred:       114 [100.0%] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u483(6){ }u484(7){ }u485(16){ }u486(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 437 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 203 437
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 203
(code_label 1037 1006 376 53 228 "" [1 uses])
(note 376 1037 377 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 53 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 203 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 203 [ __i$_M_node ])
        (nil)))
(call_insn 378 377 28 53 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 28 378 381 53 (set (reg/f:SI 203 [ __i$_M_node ])
        (reg:SI 437 [ __res ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 437 [ __res ])
        (nil)))
;;  succ:       54 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456

;; basic block 54, loop depth 2, count 0, freq 270, maybe hot
;;  prev block 53, next block 55, flags: (RTL)
;;  pred:       53 [100.0%]  (FALLTHRU)
;;              44 [100.0%] 
;;              42 [50.0%] 
;;              52 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u492(6){ }u493(7){ }u494(16){ }u495(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 203
;; lr  def 	 17 [flags]
(code_label 381 28 382 54 141 "" [3 uses])
(note 382 381 383 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 384 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg/f:SI 203 [ __i$_M_node ])
                    (const_int 24 [0x18])) [21 MEM[(mapped_type &)__i$_M_node_351 + 24]+0 S4 A32])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:53 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg/f:SI 203 [ __i$_M_node ])
        (nil)))
(jump_insn 384 383 385 54 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 721)
            (pc))) D:\LHX\7.5 contest\t1.cpp:53 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 721)
;;  succ:       55 [29.0%]  (FALLTHRU)
;;              101 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 427 428 456

;; basic block 55, loop depth 2, count 0, freq 78, maybe hot
;;  prev block 54, next block 56, flags: (RTL, MODIFIED)
;;  pred:       54 [29.0%]  (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u498(6){ }u499(7){ }u500(16){ }u501(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 427 428 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 136 427 428
;; lr  def 	 17 [flags] 117 187 363 364 365 366 448
(note 385 384 386 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 387 55 (parallel [
            (set (reg:SI 363)
                (mult:SI (reg:SI 428 [ D.83220+4 ])
                    (subreg:SI (reg/v:DI 136 [ tmod ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 306 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 428 [ D.83220+4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 387 386 388 55 (parallel [
            (set (reg:SI 364)
                (mult:SI (subreg:SI (reg/v:DI 136 [ tmod ]) 4)
                    (reg:SI 427 [ D.83220 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 306 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 388 387 389 55 (parallel [
            (set (reg:SI 365)
                (plus:SI (reg:SI 363)
                    (reg:SI 364)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 364)
        (expr_list:REG_DEAD (reg:SI 363)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 389 388 390 55 (parallel [
            (set (reg:DI 366 [ D.83220 ])
                (mult:DI (zero_extend:DI (reg:SI 427 [ D.83220 ]))
                    (zero_extend:DI (subreg:SI (reg/v:DI 136 [ tmod ]) 0))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 323 {*umulsidi3_1}
     (expr_list:REG_DEAD (reg:SI 427 [ D.83220 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 390 389 391 55 NOTE_INSN_DELETED)
(insn 391 390 393 55 (parallel [
            (set (subreg:SI (reg:DI 366 [ D.83220 ]) 4)
                (plus:SI (reg:SI 365)
                    (subreg:SI (reg:DI 366 [ D.83220 ]) 4)))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 365)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 393 391 395 55 (parallel [
            (set (reg/v:DI 117 [ t2 ])
                (minus:DI (reg:DI 113 [ D.83220 ])
                    (reg:DI 366 [ D.83220 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 259 {*subdi3_doubleword}
     (expr_list:REG_DEAD (reg:DI 366 [ D.83220 ])
        (expr_list:REG_DEAD (reg:DI 113 [ D.83220 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 395 393 906 55 (set (reg/f:SI 448 [ __i$_M_node ])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 906 395 396 55 (set (reg/f:SI 187 [ __i$_M_node ])
        (reg/f:SI 448 [ __i$_M_node ])) 90 {*movsi_internal}
     (nil))
(insn 396 906 397 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 448 [ __i$_M_node ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 397 396 398 55 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 803)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 803)
;;  succ:       56 [91.0%]  (FALLTHRU)
;;              115 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 187 448 456

;; basic block 56, loop depth 2, count 0, freq 71, maybe hot
;;  prev block 55, next block 57, flags: (RTL, MODIFIED)
;;  pred:       55 [91.0%]  (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u519(6){ }u520(7){ }u521(16){ }u522(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 187 448 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 117 187
;; lr  def 	 186 474 475 476 477
(note 398 397 889 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 889 398 1092 56 (set (reg/f:SI 186 [ __i$_M_node ])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))
        (nil)))
(insn 1092 889 1093 56 (set (reg/v:DI 474 [orig:112 t1 ] [112])
        (reg/v:DI 112 [ t1 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 112 [ t1 ])
        (nil)))
(insn 1093 1092 1094 56 (set (reg/v:DI 475 [orig:117 t2 ] [117])
        (reg/v:DI 117 [ t2 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 117 [ t2 ])
        (nil)))
(insn 1094 1093 1095 56 (set (reg/f:SI 476 [orig:186 __i$_M_node ] [186])
        (reg/f:SI 186 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 186 [ __i$_M_node ])
        (nil)))
(insn 1095 1094 416 56 (set (reg/f:SI 477 [orig:187 __i$_M_node ] [187])
        (reg/f:SI 187 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 187 [ __i$_M_node ])
        (nil)))
;;  succ:       57 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477

;; basic block 57, loop depth 3, count 0, freq 790, maybe hot
;;  prev block 56, next block 58, flags: (RTL, MODIFIED)
;;  pred:       56 [100.0%]  (FALLTHRU)
;;              62 [91.0%]  (DFS_BACK)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u523(6){ }u524(7){ }u525(16){ }u526(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 475 477
;; lr  def 	 17 [flags]
(code_label 416 1095 399 57 151 "" [1 uses])
(note 399 416 400 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 400 399 401 57 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 475 [orig:117 t2 ] [117]) 4)
            (mem:SI (plus:SI (reg/f:SI 477 [orig:187 __i$_M_node ] [187])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_425 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 401 400 829 57 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 411)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 411)
;;  succ:       61 [50.0%] 
;;              58 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 123 136 448 456 474 475 476 477

;; basic block 58, loop depth 3, count 0, freq 395, maybe hot
;;  prev block 57, next block 59, flags: (RTL)
;;  pred:       57 [50.0%]  (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u530(6){ }u531(7){ }u532(16){ }u533(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 123 136 448 456 474 475 476 477
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 829 401 403 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(jump_insn 403 829 830 58 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 853)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 853)
;;  succ:       60 [50.0%] 
;;              59 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477

;; basic block 59, loop depth 3, count 0, freq 198, maybe hot
;;  prev block 58, next block 60, flags: (RTL, MODIFIED)
;;  pred:       58 [50.0%]  (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u535(6){ }u536(7){ }u537(16){ }u538(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 475 477
;; lr  def 	 17 [flags]
(note 830 403 404 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 404 830 405 59 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 475 [orig:117 t2 ] [117]) 0)
            (mem:SI (plus:SI (reg/f:SI 477 [orig:187 __i$_M_node ] [187])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_425 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 405 404 853 59 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 411)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 411)
;;  succ:       61 [50.0%] 
;;              60 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477

;; basic block 60, loop depth 3, count 0, freq 395, maybe hot
;;  prev block 59, next block 61, flags: (RTL, MODIFIED)
;;  pred:       59 [50.0%]  (FALLTHRU)
;;              58 [50.0%] 
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u542(6){ }u543(7){ }u544(16){ }u545(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 477
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 477
;; lr  def 	 476 477
(code_label 853 405 407 60 199 "" [1 uses])
(note 407 853 408 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(note 408 407 30 60 NOTE_INSN_DELETED)
(insn 30 408 31 60 (set (reg/f:SI 476 [orig:186 __i$_M_node ] [186])
        (reg/f:SI 477 [orig:187 __i$_M_node ] [187])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 90 {*movsi_internal}
     (nil))
(insn 31 30 1007 60 (set (reg/f:SI 477 [orig:187 __i$_M_node ] [187])
        (mem/f:SI (plus:SI (reg/f:SI 477 [orig:187 __i$_M_node ] [187])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_425 + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1262 90 {*movsi_internal}
     (nil))
(jump_insn 1007 31 1008 60 (set (pc)
        (label_ref 414)) 636 {jump}
     (nil)
 -> 414)
;;  succ:       62 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477

(barrier 1008 1007 411)
;; basic block 61, loop depth 3, count 0, freq 395, maybe hot
;;  prev block 60, next block 62, flags: (RTL, MODIFIED)
;;  pred:       57 [50.0%] 
;;              59 [50.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u549(6){ }u550(7){ }u551(16){ }u552(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 477
;; lr  def 	 477
(code_label 411 1008 412 61 148 "" [2 uses])
(note 412 411 413 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 413 412 414 61 (set (reg/f:SI 477 [orig:187 __i$_M_node ] [187])
        (mem/f:SI (plus:SI (reg/f:SI 477 [orig:187 __i$_M_node ] [187])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_425 + 12B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       62 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477

;; basic block 62, loop depth 3, count 0, freq 790, maybe hot
;;  prev block 61, next block 63, flags: (RTL, MODIFIED)
;;  pred:       61 [100.0%]  (FALLTHRU)
;;              60 [100.0%] 
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u554(6){ }u555(7){ }u556(16){ }u557(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 477
;; lr  def 	 17 [flags]
(code_label 414 413 415 62 150 "" [1 uses])
(note 415 414 417 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 417 415 418 62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 477 [orig:187 __i$_M_node ] [187])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 418 417 419 62 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 416)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 416)
;;  succ:       57 [91.0%]  (DFS_BACK)
;;              63 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476 477

;; basic block 63, loop depth 2, count 0, freq 71, maybe hot
;;  prev block 62, next block 64, flags: (RTL, MODIFIED)
;;  pred:       62 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u560(6){ }u561(7){ }u562(16){ }u563(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 448 456 474 475 476
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 474 475 476
;; lr  def 	 17 [flags] 112 117 186
(note 419 418 1096 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 1096 419 1097 63 (set (reg/v:DI 112 [ t1 ])
        (reg/v:DI 474 [orig:112 t1 ] [112])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 474 [orig:112 t1 ] [112])
        (nil)))
(insn 1097 1096 1098 63 (set (reg/v:DI 117 [ t2 ])
        (reg/v:DI 475 [orig:117 t2 ] [117])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 475 [orig:117 t2 ] [117])
        (nil)))
(insn 1098 1097 420 63 (set (reg/f:SI 186 [ __i$_M_node ])
        (reg/f:SI 476 [orig:186 __i$_M_node ] [186])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 476 [orig:186 __i$_M_node ] [186])
        (nil)))
(insn 420 1098 421 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 186 [ __i$_M_node ])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 421 420 422 63 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 685)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 662 (nil)))
 -> 685)
;;  succ:       116 [6.6%] 
;;              64 [93.4%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 186 448 456

;; basic block 64, loop depth 2, count 0, freq 66, maybe hot
;;  prev block 63, next block 65, flags: (RTL)
;;  pred:       63 [93.4%]  (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u566(6){ }u567(7){ }u568(16){ }u569(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 186 448 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 117 186
;; lr  def 	 17 [flags]
(note 422 421 423 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 64 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 117 [ t2 ]) 4)
            (mem:SI (plus:SI (reg/f:SI 186 [ __i$_M_node ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_447 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 424 423 832 64 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 685)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 685)
;;  succ:       116 [50.0%] 
;;              65 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 117 123 136 186 448 456

;; basic block 65, loop depth 2, count 0, freq 33, maybe hot
;;  prev block 64, next block 66, flags: (RTL)
;;  pred:       64 [50.0%]  (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u573(6){ }u574(7){ }u575(16){ }u576(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 117 123 136 186 448 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 832 424 426 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(jump_insn 426 832 833 65 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 767)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 767)
;;  succ:       128 [50.0%] 
;;              66 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 186 448 456

;; basic block 66, loop depth 2, count 0, freq 17, maybe hot
;;  prev block 65, next block 67, flags: (RTL)
;;  pred:       65 [50.0%]  (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u578(6){ }u579(7){ }u580(16){ }u581(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 186 448 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 117 186
;; lr  def 	 17 [flags]
(note 833 426 427 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 427 833 428 66 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 117 [ t2 ]) 0)
            (mem:SI (plus:SI (reg/f:SI 186 [ __i$_M_node ])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_447 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 428 427 1009 66 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 685)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 685)
;;  succ:       116 [50.0%] 
;;              67 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 186 448 456

;; basic block 67, loop depth 2, count 0, freq 9, maybe hot
;;  prev block 66, next block 68, flags: (NEW, RTL, MODIFIED)
;;  pred:       66 [50.0%]  (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 186 448 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1009 428 1010 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1010 1009 1011 67 (set (pc)
        (label_ref 767)) 636 {jump}
     (nil)
 -> 767)
;;  succ:       128 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 186 448 456

(barrier 1011 1010 702)
;; basic block 68, loop depth 2, count 0, freq 5
;;  prev block 67, next block 69, flags: (RTL, MODIFIED)
;;  pred:       116 [78.4%] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u585(6){ }u586(7){ }u587(16){ }u588(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 435 436 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 435
;; lr  def 	 17 [flags]
(code_label 702 1011 433 68 178 "" [1 uses])
(note 433 702 434 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(note 434 433 435 68 NOTE_INSN_DELETED)
(note 435 434 436 68 NOTE_INSN_DELETED)
(insn 436 435 437 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 435 [ __res ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 435 [ __res ])
        (nil)))
(jump_insn 437 436 835 68 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 811)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 507 (nil)))
 -> 811)
;;  succ:       74 [5.1%] 
;;              69 [94.9%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 436 456

;; basic block 69, loop depth 2, count 0, freq 5
;;  prev block 68, next block 70, flags: (RTL, MODIFIED)
;;  pred:       68 [94.9%]  (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u593(6){ }u594(7){ }u595(16){ }u596(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 436 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 436
;; lr  def 	 17 [flags]
(note 835 437 438 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(note 438 835 439 69 NOTE_INSN_DELETED)
(note 439 438 440 69 NOTE_INSN_DELETED)
(insn 440 439 441 69 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 436 [ __res+4 ])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 441 440 442 69 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 811)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 534 (nil)))
 -> 811)
;;  succ:       74 [5.3%] 
;;              70 [94.7%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 436 456

;; basic block 70, loop depth 2, count 0, freq 5
;;  prev block 69, next block 71, flags: (RTL, MODIFIED)
;;  pred:       69 [94.7%]  (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u601(6){ }u602(7){ }u603(16){ }u604(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 436 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 209 436
;; lr  def 	 17 [flags] 212 443
(note 442 441 443 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 443 442 867 70 (set (reg/v:QI 212 [ __insert_left ])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 867 443 868 70 (set (reg:SI 443 [ MEM[(const long long unsigned int &)__i$_M_node_241 + 16] ])
        (mem:SI (plus:SI (reg/f:SI 209 [ __i$_M_node ])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_241 + 16]+0 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(note 868 867 445 70 NOTE_INSN_DELETED)
(insn 445 868 446 70 (set (reg:CC 17 flags)
        (compare:CC (mem:SI (plus:SI (reg/f:SI 209 [ __i$_M_node ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_241 + 16]+4 S4 A32])
            (mem:SI (plus:SI (reg:SI 436 [ __res+4 ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__res$second_239 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 446 445 836 70 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 454)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 454)
;;  succ:       75 [50.0%] 
;;              71 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 123 136 209 212 436 443 456

;; basic block 71, loop depth 2, count 0, freq 3
;;  prev block 70, next block 72, flags: (RTL)
;;  pred:       70 [50.0%]  (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u610(6){ }u611(7){ }u612(16){ }u613(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 123 136 209 212 436 443 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 836 446 448 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(jump_insn 448 836 837 71 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 451)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 451)
;;  succ:       73 [50.0%] 
;;              72 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 212 436 443 456

;; basic block 72, loop depth 2, count 0, freq 2
;;  prev block 71, next block 73, flags: (RTL)
;;  pred:       71 [50.0%]  (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u615(6){ }u616(7){ }u617(16){ }u618(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 212 436 443 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 436 443
;; lr  def 	 17 [flags]
(note 837 448 449 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 449 837 450 72 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 443 [ MEM[(const long long unsigned int &)__i$_M_node_241 + 16] ])
            (mem:SI (plus:SI (reg:SI 436 [ __res+4 ])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__res$second_239 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 443 [ MEM[(const long long unsigned int &)__i$_M_node_241 + 16] ])
        (nil)))
(jump_insn 450 449 451 72 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 454)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 454)
;;  succ:       75 [50.0%] 
;;              73 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 212 436 456

;; basic block 73, loop depth 2, count 0, freq 3
;;  prev block 72, next block 74, flags: (RTL, MODIFIED)
;;  pred:       71 [50.0%] 
;;              72 [50.0%]  (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u622(6){ }u623(7){ }u624(16){ }u625(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 436 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 212
(code_label 451 450 838 73 156 "" [1 uses])
(note 838 451 452 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 452 838 1012 73 (set (reg/v:QI 212 [ __insert_left ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 1012 452 1013 73 (set (pc)
        (label_ref 454)) 636 {jump}
     (nil)
 -> 454)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 212 436 456

(barrier 1013 1012 811)
;; basic block 74, loop depth 2, count 0, freq 1
;;  prev block 73, next block 75, flags: (RTL)
;;  pred:       69 [5.3%] 
;;              68 [5.1%] 
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u626(6){ }u627(7){ }u628(16){ }u629(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 436 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 212
(code_label 811 1013 810 74 195 "" [2 uses])
(note 810 811 33 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 33 810 454 74 (set (reg/v:QI 212 [ __insert_left ])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       75 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 212 436 456

;; basic block 75, loop depth 2, count 0, freq 24, maybe hot
;;  prev block 74, next block 76, flags: (RTL, MODIFIED)
;;  pred:       74 [100.0%]  (FALLTHRU)
;;              72 [50.0%] 
;;              70 [50.0%] 
;;              73 [100.0%] 
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u630(6){ }u631(7){ }u632(16){ }u633(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 212 436 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 209 212 436
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 374
(code_label 454 33 455 75 154 "" [3 uses])
(note 455 454 456 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 456 455 457 75 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0  S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 457 456 458 75 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 436 [ __res+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 436 [ __res+4 ])
        (nil)))
(insn 458 457 459 75 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 209 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 459 458 460 75 (set (reg:SI 374 [ __insert_left ])
        (zero_extend:SI (reg/v:QI 212 [ __insert_left ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg/v:QI 212 [ __insert_left ])
        (expr_list:REG_EQUIV (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
            (nil))))
(insn 460 459 461 75 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 374 [ __insert_left ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 374 [ __insert_left ])
        (nil)))
(call_insn 461 460 467 75 (call (mem:QI (symbol_ref:SI ("_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_") [flags 0x43]  <function_decl 06b77200 _Rb_tree_insert_and_rebalance>) [0 _Rb_tree_insert_and_rebalance S1 A8])
        (const_int 16 [0x10])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 12 [0xc])) [0  S4 A32]))
                    (nil))))))
(note 467 461 468 75 NOTE_INSN_DELETED)
(note 468 467 469 75 NOTE_INSN_DELETED)
(insn 469 468 1014 75 (parallel [
            (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                            (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                (plus:SI (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                                (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1698 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1014 469 1015 75 (set (pc)
        (label_ref 475)) 636 {jump}
     (nil)
 -> 475)
;;  succ:       77 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 456

(barrier 1015 1014 1041)
;; basic block 76, loop depth 2, count 0, freq 7, maybe hot
;;  prev block 75, next block 77, flags: (RTL)
;;  pred:       117 [100.0%] 
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u649(6){ }u650(7){ }u651(16){ }u652(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 435 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 209 435
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 209
(code_label 1041 1015 472 76 229 "" [1 uses])
(note 472 1041 473 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 473 472 474 76 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 209 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 209 [ __i$_M_node ])
        (nil)))
(call_insn 474 473 34 76 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 34 474 475 76 (set (reg/f:SI 209 [ __i$_M_node ])
        (reg:SI 435 [ __res ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 435 [ __res ])
        (nil)))
;;  succ:       77 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 456

;; basic block 77, loop depth 2, count 0, freq 30, maybe hot
;;  prev block 76, next block 78, flags: (RTL)
;;  pred:       76 [100.0%]  (FALLTHRU)
;;              75 [100.0%] 
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u658(6){ }u659(7){ }u660(16){ }u661(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 209
;; lr  def 	 17 [flags]
(code_label 475 34 476 77 157 "" [1 uses])
(note 476 475 477 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 477 476 478 77 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg/f:SI 209 [ __i$_M_node ])
                    (const_int 24 [0x18])) [21 MEM[(mapped_type &)__i$_M_node_368 + 24]+0 S4 A32])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:53 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg/f:SI 209 [ __i$_M_node ])
        (nil)))
(jump_insn 478 477 1016 77 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 709)
            (pc))) D:\LHX\7.5 contest\t1.cpp:53 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 709)
;;  succ:       118 [50.0%] 
;;              78 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 456

;; basic block 78, loop depth 2, count 0, freq 15, maybe hot
;;  prev block 77, next block 79, flags: (NEW, RTL, MODIFIED)
;;  pred:       77 [50.0%]  (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1016 478 1017 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1017 1016 1018 78 (set (pc)
        (label_ref 721)) 636 {jump}
     (nil)
 -> 721)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456

(barrier 1018 1017 713)
;; basic block 79, loop depth 2, count 0, freq 71, maybe hot
;;  prev block 78, next block 80, flags: (RTL, MODIFIED)
;;  pred:       118 [91.0%] 
;;              127 [100.0%] 
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u664(6){ }u665(7){ }u666(16){ }u667(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 165 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 165
;; lr  def 	 181 471 472 473
(code_label 713 1018 482 79 180 "" [2 uses])
(note 482 713 888 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 888 482 1099 79 (set (reg/f:SI 181 [ __i$_M_node ])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))
        (nil)))
(insn 1099 888 1100 79 (set (reg/v:DI 471 [orig:112 t1 ] [112])
        (reg/v:DI 112 [ t1 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 112 [ t1 ])
        (nil)))
(insn 1100 1099 1101 79 (set (reg/f:SI 472 [orig:165 __i$_M_node ] [165])
        (reg/f:SI 165 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 165 [ __i$_M_node ])
        (nil)))
(insn 1101 1100 500 79 (set (reg/f:SI 473 [orig:181 __i$_M_node ] [181])
        (reg/f:SI 181 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 181 [ __i$_M_node ])
        (nil)))
;;  succ:       80 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473

;; basic block 80, loop depth 3, count 0, freq 790, maybe hot
;;  prev block 79, next block 81, flags: (RTL, MODIFIED)
;;  pred:       79 [100.0%]  (FALLTHRU)
;;              85 [91.0%]  (DFS_BACK)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u668(6){ }u669(7){ }u670(16){ }u671(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 471 472
;; lr  def 	 17 [flags]
(code_label 500 1101 483 80 162 "" [1 uses])
(note 483 500 484 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 484 483 485 80 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 471 [orig:112 t1 ] [112]) 4)
            (mem:SI (plus:SI (reg/f:SI 472 [orig:165 __i$_M_node ] [165])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_427 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 485 484 840 80 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 495)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 495)
;;  succ:       84 [50.0%] 
;;              81 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 123 136 456 471 472 473

;; basic block 81, loop depth 3, count 0, freq 395, maybe hot
;;  prev block 80, next block 82, flags: (RTL)
;;  pred:       80 [50.0%]  (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u675(6){ }u676(7){ }u677(16){ }u678(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 123 136 456 471 472 473
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 840 485 487 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(jump_insn 487 840 841 81 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 854)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 854)
;;  succ:       83 [50.0%] 
;;              82 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473

;; basic block 82, loop depth 3, count 0, freq 198, maybe hot
;;  prev block 81, next block 83, flags: (RTL, MODIFIED)
;;  pred:       81 [50.0%]  (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u680(6){ }u681(7){ }u682(16){ }u683(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 471 472
;; lr  def 	 17 [flags]
(note 841 487 488 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 488 841 489 82 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 471 [orig:112 t1 ] [112]) 0)
            (mem:SI (plus:SI (reg/f:SI 472 [orig:165 __i$_M_node ] [165])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_427 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 489 488 854 82 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 495)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 495)
;;  succ:       84 [50.0%] 
;;              83 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473

;; basic block 83, loop depth 3, count 0, freq 395, maybe hot
;;  prev block 82, next block 84, flags: (RTL, MODIFIED)
;;  pred:       82 [50.0%]  (FALLTHRU)
;;              81 [50.0%] 
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u687(6){ }u688(7){ }u689(16){ }u690(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 472
;; lr  def 	 472 473
(code_label 854 489 491 83 200 "" [1 uses])
(note 491 854 492 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(note 492 491 36 83 NOTE_INSN_DELETED)
(insn 36 492 37 83 (set (reg/f:SI 473 [orig:181 __i$_M_node ] [181])
        (reg/f:SI 472 [orig:165 __i$_M_node ] [165])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 90 {*movsi_internal}
     (nil))
(insn 37 36 1019 83 (set (reg/f:SI 472 [orig:165 __i$_M_node ] [165])
        (mem/f:SI (plus:SI (reg/f:SI 472 [orig:165 __i$_M_node ] [165])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_427 + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1262 90 {*movsi_internal}
     (nil))
(jump_insn 1019 37 1020 83 (set (pc)
        (label_ref 498)) 636 {jump}
     (nil)
 -> 498)
;;  succ:       85 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473

(barrier 1020 1019 495)
;; basic block 84, loop depth 3, count 0, freq 395, maybe hot
;;  prev block 83, next block 85, flags: (RTL, MODIFIED)
;;  pred:       80 [50.0%] 
;;              82 [50.0%] 
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u694(6){ }u695(7){ }u696(16){ }u697(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 472
;; lr  def 	 472
(code_label 495 1020 496 84 159 "" [2 uses])
(note 496 495 497 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 497 496 498 84 (set (reg/f:SI 472 [orig:165 __i$_M_node ] [165])
        (mem/f:SI (plus:SI (reg/f:SI 472 [orig:165 __i$_M_node ] [165])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_427 + 12B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       85 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473

;; basic block 85, loop depth 3, count 0, freq 790, maybe hot
;;  prev block 84, next block 86, flags: (RTL, MODIFIED)
;;  pred:       84 [100.0%]  (FALLTHRU)
;;              83 [100.0%] 
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u699(6){ }u700(7){ }u701(16){ }u702(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 472
;; lr  def 	 17 [flags]
(code_label 498 497 499 85 161 "" [1 uses])
(note 499 498 501 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 501 499 502 85 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 472 [orig:165 __i$_M_node ] [165])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 502 501 503 85 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 500)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 500)
;;  succ:       80 [91.0%]  (DFS_BACK)
;;              86 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 472 473

;; basic block 86, loop depth 2, count 0, freq 71, maybe hot
;;  prev block 85, next block 87, flags: (RTL, MODIFIED)
;;  pred:       85 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u705(6){ }u706(7){ }u707(16){ }u708(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 471 473
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 471 473
;; lr  def 	 17 [flags] 112 181
(note 503 502 1102 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 1102 503 1103 86 (set (reg/v:DI 112 [ t1 ])
        (reg/v:DI 471 [orig:112 t1 ] [112])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 471 [orig:112 t1 ] [112])
        (nil)))
(insn 1103 1102 504 86 (set (reg/f:SI 181 [ __i$_M_node ])
        (reg/f:SI 473 [orig:181 __i$_M_node ] [181])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 473 [orig:181 __i$_M_node ] [181])
        (nil)))
(insn 504 1103 505 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 181 [ __i$_M_node ])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 505 504 506 86 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 724)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1040 (nil)))
 -> 724)
;;  succ:       120 [10.4%] 
;;              87 [89.6%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 181 456

;; basic block 87, loop depth 2, count 0, freq 66, maybe hot
;;  prev block 86, next block 88, flags: (RTL)
;;  pred:       86 [89.6%]  (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u711(6){ }u712(7){ }u713(16){ }u714(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 181 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 181
;; lr  def 	 17 [flags]
(note 506 505 507 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 507 506 508 87 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 112 [ t1 ]) 4)
            (mem:SI (plus:SI (reg/f:SI 181 [ __i$_M_node ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_448 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 508 507 843 87 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 724)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 724)
;;  succ:       120 [50.0%] 
;;              88 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 123 136 181 456

;; basic block 88, loop depth 2, count 0, freq 33, maybe hot
;;  prev block 87, next block 89, flags: (RTL)
;;  pred:       87 [50.0%]  (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u718(6){ }u719(7){ }u720(16){ }u721(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 112 123 136 181 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 843 508 510 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(jump_insn 510 843 844 88 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 561)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 561)
;;  succ:       100 [50.0%] 
;;              89 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 181 456

;; basic block 89, loop depth 2, count 0, freq 17, maybe hot
;;  prev block 88, next block 90, flags: (RTL)
;;  pred:       88 [50.0%]  (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u723(6){ }u724(7){ }u725(16){ }u726(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 181 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 181
;; lr  def 	 17 [flags]
(note 844 510 511 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 511 844 512 89 (set (reg:CC 17 flags)
        (compare:CC (subreg:SI (reg/v:DI 112 [ t1 ]) 0)
            (mem:SI (plus:SI (reg/f:SI 181 [ __i$_M_node ])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_448 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 512 511 1021 89 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 724)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 724)
;;  succ:       120 [50.0%] 
;;              90 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 181 456

;; basic block 90, loop depth 2, count 0, freq 9, maybe hot
;;  prev block 89, next block 91, flags: (NEW, RTL, MODIFIED)
;;  pred:       89 [50.0%]  (FALLTHRU)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1021 512 1022 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1022 1021 1023 90 (set (pc)
        (label_ref 561)) 636 {jump}
     (nil)
 -> 561)
;;  succ:       100 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 456

(barrier 1023 1022 741)
;; basic block 91, loop depth 2, count 0, freq 5
;;  prev block 90, next block 92, flags: (RTL, MODIFIED)
;;  pred:       120 [78.4%] 
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u730(6){ }u731(7){ }u732(16){ }u733(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 433 434 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 433
;; lr  def 	 17 [flags]
(code_label 741 1023 517 91 182 "" [1 uses])
(note 517 741 518 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(note 518 517 519 91 NOTE_INSN_DELETED)
(note 519 518 520 91 NOTE_INSN_DELETED)
(insn 520 519 521 91 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 433 [ __res ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 433 [ __res ])
        (nil)))
(jump_insn 521 520 846 91 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 817)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 507 (nil)))
 -> 817)
;;  succ:       97 [5.1%] 
;;              92 [94.9%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 434 456

;; basic block 92, loop depth 2, count 0, freq 5
;;  prev block 91, next block 93, flags: (RTL, MODIFIED)
;;  pred:       91 [94.9%]  (FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u738(6){ }u739(7){ }u740(16){ }u741(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 434 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 434
;; lr  def 	 17 [flags]
(note 846 521 522 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(note 522 846 523 92 NOTE_INSN_DELETED)
(note 523 522 524 92 NOTE_INSN_DELETED)
(insn 524 523 525 92 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 434 [ __res+4 ])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 525 524 526 92 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 817)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 534 (nil)))
 -> 817)
;;  succ:       97 [5.3%] 
;;              93 [94.7%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 434 456

;; basic block 93, loop depth 2, count 0, freq 5
;;  prev block 92, next block 94, flags: (RTL, MODIFIED)
;;  pred:       92 [94.7%]  (FALLTHRU)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u746(6){ }u747(7){ }u748(16){ }u749(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 434 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181 434
;; lr  def 	 17 [flags] 229 445
(note 526 525 527 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 869 93 (set (reg/v:QI 229 [ __insert_left ])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 869 527 870 93 (set (reg:SI 445 [ MEM[(const long long unsigned int &)__i$_M_node_277 + 16] ])
        (mem:SI (plus:SI (reg/f:SI 181 [ __i$_M_node ])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_277 + 16]+0 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(note 870 869 529 93 NOTE_INSN_DELETED)
(insn 529 870 530 93 (set (reg:CC 17 flags)
        (compare:CC (mem:SI (plus:SI (reg/f:SI 181 [ __i$_M_node ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_277 + 16]+4 S4 A32])
            (mem:SI (plus:SI (reg:SI 434 [ __res+4 ])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__res$second_275 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 530 529 847 93 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 538)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 538)
;;  succ:       98 [50.0%] 
;;              94 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 123 136 181 229 434 445 456

;; basic block 94, loop depth 2, count 0, freq 3
;;  prev block 93, next block 95, flags: (RTL)
;;  pred:       93 [50.0%]  (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u755(6){ }u756(7){ }u757(16){ }u758(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame] 83 123 136 181 229 434 445 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 17 [flags] 20 [frame]
;; lr  def 	
(note 847 530 532 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(jump_insn 532 847 848 94 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 535)
;;  succ:       96 [50.0%] 
;;              95 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 229 434 445 456

;; basic block 95, loop depth 2, count 0, freq 2
;;  prev block 94, next block 96, flags: (RTL)
;;  pred:       94 [50.0%]  (FALLTHRU)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u760(6){ }u761(7){ }u762(16){ }u763(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 229 434 445 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 434 445
;; lr  def 	 17 [flags]
(note 848 532 533 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 533 848 534 95 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 445 [ MEM[(const long long unsigned int &)__i$_M_node_277 + 16] ])
            (mem:SI (plus:SI (reg:SI 434 [ __res+4 ])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__res$second_275 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 445 [ MEM[(const long long unsigned int &)__i$_M_node_277 + 16] ])
        (nil)))
(jump_insn 534 533 535 95 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 538)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 538)
;;  succ:       98 [50.0%] 
;;              96 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 229 434 456

;; basic block 96, loop depth 2, count 0, freq 3
;;  prev block 95, next block 97, flags: (RTL, MODIFIED)
;;  pred:       94 [50.0%] 
;;              95 [50.0%]  (FALLTHRU)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u767(6){ }u768(7){ }u769(16){ }u770(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 434 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 229
(code_label 535 534 849 96 168 "" [1 uses])
(note 849 535 536 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 536 849 1024 96 (set (reg/v:QI 229 [ __insert_left ])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 1024 536 1025 96 (set (pc)
        (label_ref 538)) 636 {jump}
     (nil)
 -> 538)
;;  succ:       98 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 229 434 456

(barrier 1025 1024 817)
;; basic block 97, loop depth 2, count 0, freq 1
;;  prev block 96, next block 98, flags: (RTL)
;;  pred:       92 [5.3%] 
;;              91 [5.1%] 
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u771(6){ }u772(7){ }u773(16){ }u774(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 434 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 229
(code_label 817 1025 816 97 197 "" [2 uses])
(note 816 817 39 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 39 816 538 97 (set (reg/v:QI 229 [ __insert_left ])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       98 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 229 434 456

;; basic block 98, loop depth 2, count 0, freq 24, maybe hot
;;  prev block 97, next block 99, flags: (RTL, MODIFIED)
;;  pred:       97 [100.0%]  (FALLTHRU)
;;              95 [50.0%] 
;;              93 [50.0%] 
;;              96 [100.0%] 
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u775(6){ }u776(7){ }u777(16){ }u778(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 229 434 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181 229 434
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 386
(code_label 538 39 539 98 166 "" [3 uses])
(note 539 538 540 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 98 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0  S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 541 540 542 98 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 434 [ __res+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 434 [ __res+4 ])
        (nil)))
(insn 542 541 543 98 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 181 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 543 542 544 98 (set (reg:SI 386 [ __insert_left ])
        (zero_extend:SI (reg/v:QI 229 [ __insert_left ]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 138 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg/v:QI 229 [ __insert_left ])
        (expr_list:REG_EQUIV (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
            (nil))))
(insn 544 543 545 98 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 386 [ __insert_left ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 386 [ __insert_left ])
        (nil)))
(call_insn 545 544 551 98 (call (mem:QI (symbol_ref:SI ("_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_") [flags 0x43]  <function_decl 06b77200 _Rb_tree_insert_and_rebalance>) [0 _Rb_tree_insert_and_rebalance S1 A8])
        (const_int 16 [0x10])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 12 [0xc])) [0  S4 A32]))
                    (nil))))))
(note 551 545 552 98 NOTE_INSN_DELETED)
(note 552 551 553 98 NOTE_INSN_DELETED)
(insn 553 552 1026 98 (parallel [
            (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                            (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                (plus:SI (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                                (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1698 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1026 553 1027 98 (set (pc)
        (label_ref 561)) 636 {jump}
     (nil)
 -> 561)
;;  succ:       100 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 456

(barrier 1027 1026 1045)
;; basic block 99, loop depth 2, count 0, freq 7, maybe hot
;;  prev block 98, next block 100, flags: (RTL)
;;  pred:       121 [100.0%] 
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u794(6){ }u795(7){ }u796(16){ }u797(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 433 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181 433
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 181
(code_label 1045 1027 556 99 230 "" [1 uses])
(note 556 1045 557 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 557 556 558 99 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 181 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 181 [ __i$_M_node ])
        (nil)))
(call_insn 558 557 40 99 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 40 558 561 99 (set (reg/f:SI 181 [ __i$_M_node ])
        (reg:SI 433 [ __res ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 433 [ __res ])
        (nil)))
;;  succ:       100 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 456

;; basic block 100, loop depth 2, count 0, freq 78, maybe hot
;;  prev block 99, next block 101, flags: (RTL)
;;  pred:       99 [100.0%]  (FALLTHRU)
;;              90 [100.0%] 
;;              88 [50.0%] 
;;              98 [100.0%] 
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u803(6){ }u804(7){ }u805(16){ }u806(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 181
;; lr  def 	 17 [flags] 83
(code_label 561 40 562 100 165 "" [3 uses])
(note 562 561 563 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 563 562 564 100 (set (mem:SI (plus:SI (reg/f:SI 181 [ __i$_M_node ])
                (const_int 24 [0x18])) [21 MEM[(mapped_type &)__i$_M_node_365 + 24]+0 S4 A32])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:53 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 181 [ __i$_M_node ])
        (nil)))
(insn 564 563 721 100 (parallel [
            (set (reg/v:SI 83 [ tmp ])
                (plus:SI (reg/v:SI 83 [ tmp ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:53 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       101 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456

;; basic block 101, loop depth 2, count 0, freq 270, maybe hot
;;  prev block 100, next block 102, flags: (RTL, MODIFIED)
;;  pred:       78 [100.0%] 
;;              100 [100.0%]  (FALLTHRU)
;;              54 [71.0%] 
;;              129 [100.0%] 
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u809(6){ }u810(7){ }u811(16){ }u812(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123
;; lr  def 	 17 [flags] 123 467 469 470
(code_label 721 564 565 101 181 "" [3 uses])
(note 565 721 566 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 566 565 567 101 (set (reg:SI 470 [orig:451 j ] [451])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (nil))
(insn 567 566 568 101 (parallel [
            (set (reg/v:SI 123 [ i ])
                (plus:SI (reg/v:SI 123 [ i ])
                    (reg:SI 470 [orig:451 j ] [451])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:49 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 568 567 569 101 (parallel [
            (set (reg:SI 469 [450])
                (plus:SI (reg:SI 470 [orig:451 j ] [451])
                    (reg/v:SI 123 [ i ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:49 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 569 568 570 101 (parallel [
            (set (reg:SI 467 [orig:106 D.83218 ] [106])
                (plus:SI (reg:SI 469 [450])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:49 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 570 569 571 101 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 467 [orig:106 D.83218 ] [106])
            (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32]))) D:\LHX\7.5 contest\t1.cpp:49 7 {*cmpsi_1}
     (nil))
(jump_insn 571 570 572 101 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 1117)
            (pc))) D:\LHX\7.5 contest\t1.cpp:49 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 1117)
;;  succ:       102 [91.0%]  (FALLTHRU)
;;              132 [9.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 467 469 470

;; basic block 102, loop depth 2, count 0, freq 246, maybe hot
;;  prev block 101, next block 103, flags: (RTL, MODIFIED)
;;  pred:       101 [91.0%]  (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u821(6){ }u822(7){ }u823(16){ }u824(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 467 469
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 468
(note 572 571 574 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 574 572 1028 102 (set (reg/f:SI 468 [orig:189 __i$_M_node ] [189])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(jump_insn 1028 574 1029 102 (set (pc)
        (label_ref 575)) 636 {jump}
     (nil)
 -> 575)
;;  succ:       32 [100.0%]  (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456 467 468 469

(barrier 1029 1028 791)
;; basic block 103, loop depth 1, count 0, freq 2
;;  prev block 102, next block 132, flags: (RTL, MODIFIED)
;;  pred:       30 [9.0%] 
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u825(6){ }u826(7){ }u827(16){ }u828(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 451 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 791 1029 790 103 189 "" [1 uses])
(note 790 791 41 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 41 790 1114 103 (set (reg/v:SI 83 [ tmp ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(jump_insn 1114 41 1115 103 (set (pc)
        (label_ref 578)) 636 {jump}
     (nil)
 -> 578)
;;  succ:       104 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 451 456

(barrier 1115 1114 1117)
;; basic block 132, loop depth 1, count 0, freq 24, maybe hot
;;  prev block 103, next block 104, flags: (NEW, RTL, MODIFIED)
;;  pred:       101 [9.0%]  (LOOP_EXIT)
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 456 470
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 470
;; lr  def 	 451
(code_label 1117 1115 1116 132 232 "" [1 uses])
(note 1116 1117 1104 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn 1104 1116 578 132 (set (reg:SI 451 [ j ])
        (reg:SI 470 [orig:451 j ] [451])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 470 [orig:451 j ] [451])
        (nil)))
;;  succ:       104 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 451 456

;; basic block 104, loop depth 1, count 0, freq 27, maybe hot
;;  prev block 132, next block 105, flags: (RTL, MODIFIED)
;;  pred:       132 [100.0%]  (FALLTHRU)
;;              103 [100.0%] 
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u829(6){ }u830(7){ }u831(16){ }u832(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 451 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 17 [flags] 465
(code_label 578 1104 579 104 134 "" [1 uses])
(note 579 578 580 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 104 (set (reg:SI 465 [orig:252 D.83218 ] [252])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:56 90 {*movsi_internal}
     (nil))
(insn 581 580 582 104 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 465 [orig:252 D.83218 ] [252])
            (reg/v:SI 83 [ tmp ]))) D:\LHX\7.5 contest\t1.cpp:56 7 {*cmpsi_1}
     (nil))
(jump_insn 582 581 583 104 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 597)
            (pc))) D:\LHX\7.5 contest\t1.cpp:56 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 597)
;;  succ:       105 [29.0%]  (FALLTHRU)
;;              106 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 451 456 465

;; basic block 105, loop depth 1, count 0, freq 8, maybe hot
;;  prev block 104, next block 106, flags: (RTL, MODIFIED)
;;  pred:       104 [29.0%]  (FALLTHRU)
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u836(6){ }u837(7){ }u838(16){ }u839(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 456
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 397 451 465 466
(note 583 582 584 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 584 583 587 105 (set (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])
        (reg/v:SI 83 [ tmp ])) D:\LHX\7.5 contest\t1.cpp:57 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 83 [ tmp ])
        (nil)))
(insn 587 584 588 105 (set (reg/f:SI 397 [ num.D.72607._M_impl._M_start ])
        (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 num.D.72607._M_impl._M_start+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1439 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 num.D.72607._M_impl._M_start+0 S4 A32])
        (nil)))
(insn 588 587 590 105 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])
        (reg/f:SI 397 [ num.D.72607._M_impl._M_start ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1439 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 397 [ num.D.72607._M_impl._M_start ])
        (nil)))
(insn 590 588 591 105 (set (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 456)) D:\LHX\7.5 contest\t1.cpp:58 90 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 591 590 592 105 (set (reg:SI 2 cx)
        (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)) D:\LHX\7.5 contest\t1.cpp:58 90 {*movsi_internal}
     (nil))
(call_insn 592 591 593 105 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt6vectorIiSaIiEE9push_backERKi") [flags 0x3]  <function_decl 06ec8400 push_back>) [0 push_back S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:\LHX\7.5 contest\t1.cpp:58 646 {*call_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 593 592 594 105 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:58 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 594 593 901 105 (set (reg:SI 465 [orig:252 D.83218 ] [252])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 901 594 902 105 (set (reg:SI 466 [orig:449 D.83218 ] [449])
        (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 902 901 1030 105 (set (reg:SI 451 [ j ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(jump_insn 1030 902 1031 105 (set (pc)
        (label_ref 608)) 636 {jump}
     (nil)
 -> 608)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 451 456 465 466

(barrier 1031 1030 597)
;; basic block 106, loop depth 1, count 0, freq 19, maybe hot
;;  prev block 105, next block 107, flags: (RTL, MODIFIED)
;;  pred:       104 [71.0%] 
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u853(6){ }u854(7){ }u855(16){ }u856(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 451 456 465
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 465
;; lr  def 	 17 [flags] 466
(code_label 597 1031 598 106 171 "" [1 uses])
(note 598 597 903 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 903 598 599 106 (set (reg:SI 466 [orig:449 D.83218 ] [449])
        (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 599 903 600 106 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 83 [ tmp ])
            (reg:SI 465 [orig:252 D.83218 ] [252]))) D:\LHX\7.5 contest\t1.cpp:60 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 83 [ tmp ])
        (nil)))
(jump_insn 600 599 601 106 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 608)
            (pc))) D:\LHX\7.5 contest\t1.cpp:60 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 8629 (nil)))
 -> 608)
;;  succ:       107 [13.7%]  (FALLTHRU)
;;              108 [86.3%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 451 456 465 466

;; basic block 107, loop depth 1, count 0, freq 3
;;  prev block 106, next block 108, flags: (RTL, MODIFIED)
;;  pred:       106 [13.7%]  (FALLTHRU)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u860(6){ }u861(7){ }u862(16){ }u863(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 456
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 451 465 466
(note 601 600 603 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 603 601 604 107 (set (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 456)) D:\LHX\7.5 contest\t1.cpp:60 90 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 604 603 605 107 (set (reg:SI 2 cx)
        (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)) D:\LHX\7.5 contest\t1.cpp:60 90 {*movsi_internal}
     (nil))
(call_insn 605 604 606 107 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt6vectorIiSaIiEE9push_backERKi") [flags 0x3]  <function_decl 06ec8400 push_back>) [0 push_back S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:\LHX\7.5 contest\t1.cpp:60 646 {*call_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 606 605 607 107 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:60 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 607 606 904 107 (set (reg:SI 465 [orig:252 D.83218 ] [252])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 904 607 905 107 (set (reg:SI 466 [orig:449 D.83218 ] [449])
        (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 905 904 608 107 (set (reg:SI 451 [ j ])
        (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       108 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 451 456 465 466

;; basic block 108, loop depth 1, count 0, freq 92, maybe hot
;;  prev block 107, next block 133, flags: (RTL, MODIFIED)
;;  pred:       22 [71.0%] 
;;              107 [100.0%]  (FALLTHRU)
;;              106 [86.3%] 
;;              105 [100.0%] 
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u875(6){ }u876(7){ }u877(16){ }u878(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 451 456 465 466
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 451 466
;; lr  def 	 17 [flags] 464
(code_label 608 905 609 108 130 "" [3 uses])
(note 609 608 611 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(insn 611 609 612 108 (parallel [
            (set (reg:SI 464 [orig:125 D.83218 ] [125])
                (plus:SI (reg:SI 451 [ j ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:45 220 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 451 [ j ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 612 611 615 108 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])
        (reg:SI 464 [orig:125 D.83218 ] [125])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (nil))
(insn 615 612 616 108 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 466 [orig:449 D.83218 ] [449])
            (reg:SI 464 [orig:125 D.83218 ] [125]))) D:\LHX\7.5 contest\t1.cpp:45 7 {*cmpsi_1}
     (nil))
(jump_insn 616 615 1118 108 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 941)
            (pc))) D:\LHX\7.5 contest\t1.cpp:45 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 941)
;;  succ:       22 [91.0%]  (DFS_BACK)
;;              133 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 456 464 465 466

;; basic block 133, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 108, next block 109, flags: (NEW, RTL, MODIFIED)
;;  pred:       108 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 465
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 465
;; lr  def 	 252
(note 1118 616 1105 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(insn 1105 1118 617 133 (set (reg:SI 252 [ D.83218 ])
        (reg:SI 465 [orig:252 D.83218 ] [252])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 465 [orig:252 D.83218 ] [252])
        (nil)))
;;  succ:       109 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 252

;; basic block 109, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 133, next block 134, flags: (RTL, MODIFIED)
;;  pred:       133 [100.0%]  (FALLTHRU)
;;              21 [100.0%] 
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u886(6){ }u887(7){ }u888(16){ }u889(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 252
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 252
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 129 132 403 404 406 409 410 412
(code_label 617 1105 618 109 129 "" [1 uses])
(note 618 617 621 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 621 618 622 109 (set (reg/f:SI 404 [ MEM[(int * *)&num + 4B] ])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])
        (nil)))
(insn 622 621 623 109 (parallel [
            (set (reg:SI 403 [ D.83218 ])
                (minus:SI (reg/f:SI 404 [ MEM[(int * *)&num + 4B] ])
                    (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(int * *)&num]+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 263 {*subsi_1}
     (expr_list:REG_DEAD (reg/f:SI 404 [ MEM[(int * *)&num + 4B] ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 623 622 624 109 (parallel [
            (set (reg:SI 406 [ D.83218 ])
                (ashiftrt:SI (reg:SI 403 [ D.83218 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 530 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 403 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 8 [0x8])) [0  S4 A32])
                (expr_list:REG_EQUAL (div:SI (reg:SI 403 [ D.83218 ])
                        (const_int 4 [0x4]))
                    (nil))))))
(insn 624 623 625 109 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 406 [ D.83218 ])) D:\LHX\7.5 contest\t1.cpp:62 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 406 [ D.83218 ])
        (nil)))
(insn 625 624 626 109 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 252 [ D.83218 ])) D:\LHX\7.5 contest\t1.cpp:62 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 252 [ D.83218 ])
        (nil)))
(insn 626 625 627 109 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref/f:SI ("*LC0") [flags 0x2]  <var_decl 07609ae0 *LC0>)) D:\LHX\7.5 contest\t1.cpp:62 90 {*movsi_internal}
     (nil))
(call_insn 627 626 629 109 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZL6printfPKcz") [flags 0x3]  <function_decl 018c8600 printf>) [0 printf S1 A8])
            (const_int 12 [0xc]))) D:\LHX\7.5 contest\t1.cpp:62 648 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (nil)))))
(insn 629 627 631 109 (set (reg/f:SI 129 [ D.83222 ])
        (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(int * *)&num]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 631 629 632 109 (set (reg/f:SI 410 [ MEM[(int * *)&num + 4B] ])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])
        (nil)))
(insn 632 631 633 109 (parallel [
            (set (reg:SI 409 [ D.83218 ])
                (minus:SI (reg/f:SI 410 [ MEM[(int * *)&num + 4B] ])
                    (reg/f:SI 129 [ D.83222 ])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 263 {*subsi_1}
     (expr_list:REG_DEAD (reg/f:SI 410 [ MEM[(int * *)&num + 4B] ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 633 632 42 109 (parallel [
            (set (reg:SI 412 [ D.83218 ])
                (ashiftrt:SI (reg:SI 409 [ D.83218 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 530 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 409 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 409 [ D.83218 ])
                    (const_int 4 [0x4]))
                (nil)))))
(insn 42 633 634 109 (set (reg/v:SI 132 [ i ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 634 42 635 109 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 412 [ D.83218 ])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:63 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 412 [ D.83218 ])
        (nil)))
(jump_insn 635 634 1119 109 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 1032)
            (pc))) D:\LHX\7.5 contest\t1.cpp:63 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 1032)
;;  succ:       134 [91.0%]  (FALLTHRU)
;;              130 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129 132

;; basic block 134, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 109, next block 110, flags: (NEW, RTL, MODIFIED)
;;  pred:       109 [91.0%]  (FALLTHRU)
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129 132
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 129 132
;; lr  def 	 462 463
(note 1119 635 1106 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(insn 1106 1119 1107 134 (set (reg/f:SI 462 [orig:129 D.83222 ] [129])
        (reg/f:SI 129 [ D.83222 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 129 [ D.83222 ])
        (nil)))
(insn 1107 1106 939 134 (set (reg/v:SI 463 [orig:132 i ] [132])
        (reg/v:SI 132 [ i ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 132 [ i ])
        (nil)))
;;  succ:       110 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 462 463

;; basic block 110, loop depth 1, count 0, freq 92, maybe hot
;;  prev block 134, next block 111, flags: (RTL, MODIFIED)
;;  pred:       134 [100.0%]  (FALLTHRU)
;;              110 [91.0%]  (DFS_BACK)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u908(6){ }u909(7){ }u910(16){ }u911(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 462 463
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 462 463
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 414 417 418 420 462 463
(code_label 939 1107 938 110 208 "" [1 uses])
(note 938 939 643 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn 643 938 644 110 (set (reg:SI 414 [ *_120 ])
        (mem:SI (plus:SI (mult:SI (reg/v:SI 463 [orig:132 i ] [132])
                    (const_int 4 [0x4]))
                (reg/f:SI 462 [orig:129 D.83222 ] [129])) [21 *_120+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 462 [orig:129 D.83222 ] [129])
        (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])) [0  S4 A32])
            (nil))))
(insn 644 643 645 110 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 414 [ *_120 ])) D:\LHX\7.5 contest\t1.cpp:63 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 414 [ *_120 ])
        (nil)))
(insn 645 644 646 110 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref/f:SI ("*LC1") [flags 0x2]  <var_decl 07609b40 *LC1>)) D:\LHX\7.5 contest\t1.cpp:63 90 {*movsi_internal}
     (nil))
(call_insn 646 645 647 110 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZL6printfPKcz") [flags 0x3]  <function_decl 018c8600 printf>) [0 printf S1 A8])
            (const_int 8 [0x8]))) D:\LHX\7.5 contest\t1.cpp:63 648 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 647 646 649 110 (parallel [
            (set (reg/v:SI 463 [orig:132 i ] [132])
                (plus:SI (reg/v:SI 463 [orig:132 i ] [132])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:63 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 649 647 652 110 (set (reg/f:SI 462 [orig:129 D.83222 ] [129])
        (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(int * *)&num]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 652 649 653 110 (set (reg/f:SI 418 [ MEM[(int * *)&num + 4B] ])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])
        (nil)))
(insn 653 652 654 110 (parallel [
            (set (reg:SI 417 [ D.83218 ])
                (minus:SI (reg/f:SI 418 [ MEM[(int * *)&num + 4B] ])
                    (reg/f:SI 462 [orig:129 D.83222 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 263 {*subsi_1}
     (expr_list:REG_DEAD (reg/f:SI 418 [ MEM[(int * *)&num + 4B] ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 654 653 655 110 (parallel [
            (set (reg:SI 420 [ D.83218 ])
                (ashiftrt:SI (reg:SI 417 [ D.83218 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 530 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 417 [ D.83218 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 417 [ D.83218 ])
                    (const_int 4 [0x4]))
                (nil)))))
(insn 655 654 656 110 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 463 [orig:132 i ] [132])
            (reg:SI 420 [ D.83218 ]))) D:\LHX\7.5 contest\t1.cpp:63 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 420 [ D.83218 ])
        (nil)))
(jump_insn 656 655 1033 110 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 939)
            (pc))) D:\LHX\7.5 contest\t1.cpp:63 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 939)
;;  succ:       110 [91.0%]  (DFS_BACK)
;;              111 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 462 463

;; basic block 111, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 110, next block 112, flags: (NEW, RTL, MODIFIED)
;;  pred:       110 [9.0%]  (FALLTHRU)
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1033 656 1034 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1034 1033 1035 111 (set (pc)
        (label_ref 1032)) 636 {jump}
     (nil)
 -> 1032)
;;  succ:       130 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1035 1034 793)
;; basic block 112, loop depth 2, count 0, freq 24, maybe hot
;;  prev block 111, next block 113, flags: (RTL)
;;  pred:       32 [9.0%] 
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u928(6){ }u929(7){ }u930(16){ }u931(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 427 428 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 203
(code_label 793 1035 792 112 190 "" [1 uses])
(note 792 793 887 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(insn 887 792 661 112 (set (reg/f:SI 203 [ __i$_M_node ])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (nil))
;;  succ:       113 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456

;; basic block 113, loop depth 2, count 0, freq 156, maybe hot
;;  prev block 112, next block 114, flags: (RTL)
;;  pred:       112 [100.0%]  (FALLTHRU)
;;              40 [6.7%] 
;;              41 [50.0%] 
;;              43 [50.0%] 
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u932(6){ }u933(7){ }u934(16){ }u935(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 203
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 203 258 421 437 438
(code_label 661 887 662 113 135 "" [3 uses])
(note 662 661 663 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 663 662 664 113 (set (reg/v:SI 258 [ __pos ])
        (reg/f:SI 203 [ __i$_M_node ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 203 [ __i$_M_node ])
        (nil)))
(insn 664 663 665 113 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (const_int 32 [0x20])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(call_insn 665 664 666 113 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znwj") [flags 0x43]  <function_decl 01938d00 operator new>) [0 operator new S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 648 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 666 665 667 113 (set (reg/f:SI 203 [ __i$_M_node ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 667 666 668 113 (set (mem:DI (plus:SI (reg/f:SI 203 [ __i$_M_node ])
                (const_int 16 [0x10])) [34 MEM[(struct pair *)__i$_M_node_205 + 16B].first+0 S8 A64])
        (reg/v:DI 112 [ t1 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 89 {*movdi_internal}
     (nil))
(insn 668 667 669 113 (set (mem:SI (plus:SI (reg/f:SI 203 [ __i$_M_node ])
                (const_int 24 [0x18])) [21 MEM[(struct pair *)__i$_M_node_205 + 16B].second+0 S4 A64])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 669 668 670 113 (parallel [
            (set (reg/f:SI 421 [ D.83232 ])
                (plus:SI (reg/f:SI 203 [ __i$_M_node ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/aligned_buffer.h:53 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])) [0  S4 A32])
            (nil))))
(insn 670 669 671 113 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 421 [ D.83232 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 421 [ D.83232 ])
        (nil)))
(insn 671 670 672 113 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v:SI 258 [ __pos ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 258 [ __pos ])
        (nil)))
(insn 672 671 673 113 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(call_insn 673 672 674 113 (parallel [
            (set (reg:DI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_") [flags 0x3]  <function_decl 06e17d80 _M_get_insert_hint_unique_pos>) [0 _M_get_insert_hint_unique_pos S1 A8])
                    (const_int 8 [0x8])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 653 {*call_value_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -8 [0xfffffffffffffff8])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [0  S4 A32]))
                (nil)))))
(insn 674 673 871 113 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 871 674 872 113 (set (reg:SI 437 [ __res ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 872 871 679 113 (set (reg:SI 438 [ __res+4 ])
        (reg:SI 1 dx [+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [+4 ])
        (nil)))
(insn 679 872 680 113 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 438 [ __res+4 ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 680 679 1036 113 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 678)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7837 (nil)))
 -> 678)
;;  succ:       45 [78.4%] 
;;              114 [21.6%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 437 438 456

;; basic block 114, loop depth 2, count 0, freq 34, maybe hot
;;  prev block 113, next block 115, flags: (NEW, RTL, MODIFIED)
;;  pred:       113 [21.6%]  (FALLTHRU)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 437 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1036 680 1038 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1038 1036 1039 114 (set (pc)
        (label_ref 1037)) 636 {jump}
     (nil)
 -> 1037)
;;  succ:       53 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 113 123 136 203 427 428 437 456

(barrier 1039 1038 803)
;; basic block 115, loop depth 2, count 0, freq 7, maybe hot
;;  prev block 114, next block 116, flags: (RTL)
;;  pred:       55 [9.0%] 
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u961(6){ }u962(7){ }u963(16){ }u964(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 186
(code_label 803 1039 802 115 193 "" [1 uses])
(note 802 803 886 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn 886 802 685 115 (set (reg/f:SI 186 [ __i$_M_node ])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (nil))
;;  succ:       116 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 186 456

;; basic block 116, loop depth 2, count 0, freq 45, maybe hot
;;  prev block 115, next block 117, flags: (RTL)
;;  pred:       115 [100.0%]  (FALLTHRU)
;;              63 [6.6%] 
;;              64 [50.0%] 
;;              66 [50.0%] 
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u965(6){ }u966(7){ }u967(16){ }u968(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 117 123 136 186 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 117 186
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 209 422 435 436
(code_label 685 886 686 116 147 "" [3 uses])
(note 686 685 688 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 688 686 689 116 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (const_int 32 [0x20])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(call_insn 689 688 690 116 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znwj") [flags 0x43]  <function_decl 01938d00 operator new>) [0 operator new S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 648 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 690 689 691 116 (set (reg/f:SI 209 [ __i$_M_node ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 691 690 692 116 (set (mem:DI (plus:SI (reg/f:SI 209 [ __i$_M_node ])
                (const_int 16 [0x10])) [34 MEM[(struct pair *)__i$_M_node_241 + 16B].first+0 S8 A64])
        (reg/v:DI 117 [ t2 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 117 [ t2 ])
        (nil)))
(insn 692 691 693 116 (set (mem:SI (plus:SI (reg/f:SI 209 [ __i$_M_node ])
                (const_int 24 [0x18])) [21 MEM[(struct pair *)__i$_M_node_241 + 16B].second+0 S4 A64])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 693 692 694 116 (parallel [
            (set (reg/f:SI 422 [ D.83232 ])
                (plus:SI (reg/f:SI 209 [ __i$_M_node ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/aligned_buffer.h:53 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])) [0  S4 A32])
            (nil))))
(insn 694 693 695 116 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 422 [ D.83232 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 422 [ D.83232 ])
        (nil)))
(insn 695 694 696 116 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 186 [ __i$_M_node ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 186 [ __i$_M_node ])
        (nil)))
(insn 696 695 697 116 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(call_insn 697 696 698 116 (parallel [
            (set (reg:DI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_") [flags 0x3]  <function_decl 06e17d80 _M_get_insert_hint_unique_pos>) [0 _M_get_insert_hint_unique_pos S1 A8])
                    (const_int 8 [0x8])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 653 {*call_value_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -8 [0xfffffffffffffff8])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [0  S4 A32]))
                (nil)))))
(insn 698 697 873 116 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 873 698 874 116 (set (reg:SI 435 [ __res ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 874 873 703 116 (set (reg:SI 436 [ __res+4 ])
        (reg:SI 1 dx [+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [+4 ])
        (nil)))
(insn 703 874 704 116 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 436 [ __res+4 ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 704 703 1040 116 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 702)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7837 (nil)))
 -> 702)
;;  succ:       68 [78.4%] 
;;              117 [21.6%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 435 436 456

;; basic block 117, loop depth 2, count 0, freq 10, maybe hot
;;  prev block 116, next block 118, flags: (NEW, RTL, MODIFIED)
;;  pred:       116 [21.6%]  (FALLTHRU)
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 435 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1040 704 1042 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1042 1040 1043 117 (set (pc)
        (label_ref 1041)) 636 {jump}
     (nil)
 -> 1041)
;;  succ:       76 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 209 435 456

(barrier 1043 1042 709)
;; basic block 118, loop depth 2, count 0, freq 39, maybe hot
;;  prev block 117, next block 119, flags: (RTL)
;;  pred:       77 [50.0%] 
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u993(6){ }u994(7){ }u995(16){ }u996(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165
(code_label 709 1043 710 118 158 "" [1 uses])
(note 710 709 712 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn 712 710 714 118 (set (reg/f:SI 165 [ __i$_M_node ])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 714 712 715 118 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 165 [ __i$_M_node ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 715 714 718 118 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 713)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 713)
;;  succ:       79 [91.0%] 
;;              119 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 165 456

;; basic block 119, loop depth 2, count 0, freq 4
;;  prev block 118, next block 120, flags: (RTL)
;;  pred:       118 [9.0%]  (FALLTHRU)
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u999(6){ }u1000(7){ }u1001(16){ }u1002(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 181
(note 718 715 885 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(insn 885 718 724 119 (set (reg/f:SI 181 [ __i$_M_node ])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (nil))
;;  succ:       120 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 181 456

;; basic block 120, loop depth 2, count 0, freq 45, maybe hot
;;  prev block 119, next block 121, flags: (RTL)
;;  pred:       119 [100.0%]  (FALLTHRU)
;;              86 [10.4%] 
;;              87 [50.0%] 
;;              89 [50.0%] 
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u1003(6){ }u1004(7){ }u1005(16){ }u1006(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 181 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 112 181
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 181 254 424 433 434
(code_label 724 885 725 120 163 "" [3 uses])
(note 725 724 726 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn 726 725 727 120 (set (reg/v:SI 254 [ __pos ])
        (reg/f:SI 181 [ __i$_M_node ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 181 [ __i$_M_node ])
        (nil)))
(insn 727 726 728 120 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (const_int 32 [0x20])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(call_insn 728 727 729 120 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znwj") [flags 0x43]  <function_decl 01938d00 operator new>) [0 operator new S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 648 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 729 728 730 120 (set (reg/f:SI 181 [ __i$_M_node ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 730 729 731 120 (set (mem:DI (plus:SI (reg/f:SI 181 [ __i$_M_node ])
                (const_int 16 [0x10])) [34 MEM[(struct pair *)__i$_M_node_277 + 16B].first+0 S8 A64])
        (reg/v:DI 112 [ t1 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 112 [ t1 ])
        (nil)))
(insn 731 730 732 120 (set (mem:SI (plus:SI (reg/f:SI 181 [ __i$_M_node ])
                (const_int 24 [0x18])) [21 MEM[(struct pair *)__i$_M_node_277 + 16B].second+0 S4 A64])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 732 731 733 120 (parallel [
            (set (reg/f:SI 424 [ D.83232 ])
                (plus:SI (reg/f:SI 181 [ __i$_M_node ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/aligned_buffer.h:53 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])) [0  S4 A32])
            (nil))))
(insn 733 732 734 120 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 424 [ D.83232 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 424 [ D.83232 ])
        (nil)))
(insn 734 733 735 120 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v:SI 254 [ __pos ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 254 [ __pos ])
        (nil)))
(insn 735 734 736 120 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(call_insn 736 735 737 120 (parallel [
            (set (reg:DI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_") [flags 0x3]  <function_decl 06e17d80 _M_get_insert_hint_unique_pos>) [0 _M_get_insert_hint_unique_pos S1 A8])
                    (const_int 8 [0x8])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 653 {*call_value_pop}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (expr_list:REG_ARGS_SIZE (const_int -8 [0xfffffffffffffff8])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [0  S4 A32]))
                (nil)))))
(insn 737 736 875 120 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 875 737 876 120 (set (reg:SI 433 [ __res ])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 876 875 742 120 (set (reg:SI 434 [ __res+4 ])
        (reg:SI 1 dx [+4 ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [+4 ])
        (nil)))
(insn 742 876 743 120 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 434 [ __res+4 ])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 743 742 1044 120 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 741)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7837 (nil)))
 -> 741)
;;  succ:       91 [78.4%] 
;;              121 [21.6%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 433 434 456

;; basic block 121, loop depth 2, count 0, freq 10, maybe hot
;;  prev block 120, next block 122, flags: (NEW, RTL, MODIFIED)
;;  pred:       120 [21.6%]  (FALLTHRU)
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 433 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1044 743 1046 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1046 1044 1047 121 (set (pc)
        (label_ref 1045)) 636 {jump}
     (nil)
 -> 1045)
;;  succ:       99 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 181 433 456

(barrier 1047 1046 780)
;; basic block 122, loop depth 0, count 0, freq 1
;;  prev block 121, next block 123, flags: (RTL)
;;  pred:       2 [9.0%] 
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u1032(6){ }u1033(7){ }u1034(16){ }u1035(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 429 430
(code_label 780 1047 779 122 186 "" [1 uses])
(note 779 780 877 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 877 779 878 122 (set (reg:SI 429 [ flag ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
(insn 878 877 748 122 (set (reg:SI 430 [ flag+4 ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
;;  succ:       123 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151 429 430

;; basic block 123, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 122, next block 124, flags: (RTL, MODIFIED)
;;  pred:       122 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (LOOP_EXIT)
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u1036(6){ }u1037(7){ }u1038(16){ }u1039(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151 429 430
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  def 	 159 493 494
(code_label 748 878 749 123 115 "" [1 uses])
(note 749 748 6 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 6 749 1108 123 (set (reg/v:DI 159 [ re ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:13 89 {*movdi_internal}
     (nil))
(insn 1108 6 1109 123 (set (reg/v:QI 493 [orig:151 ch ] [151])
        (reg/v:QI 151 [ ch ])) 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:QI 151 [ ch ])
        (nil)))
(insn 1109 1108 1048 123 (set (reg/v:DI 494 [orig:159 re ] [159])
        (reg/v:DI 159 [ re ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 159 [ re ])
        (nil)))
(jump_insn 1048 1109 1049 123 (set (pc)
        (label_ref 88)) 636 {jump}
     (nil)
 -> 88)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 429 430 493 494

(barrier 1049 1048 783)
;; basic block 124, loop depth 1, count 0, freq 81, maybe hot
;;  prev block 123, next block 125, flags: (RTL)
;;  pred:       9 [9.0%] 
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u1040(6){ }u1041(7){ }u1042(16){ }u1043(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 167 460
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 431 432
(code_label 783 1049 782 124 187 "" [1 uses])
(note 782 783 879 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn 879 782 880 124 (set (reg:SI 431 [ flag ])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
(insn 880 879 752 124 (set (reg:SI 432 [ flag+4 ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
;;  succ:       125 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 167 431 432 460

;; basic block 125, loop depth 1, count 0, freq 900, maybe hot
;;  prev block 124, next block 126, flags: (RTL, MODIFIED)
;;  pred:       124 [100.0%]  (FALLTHRU)
;;              12 [100.0%]  (LOOP_EXIT)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u1044(6){ }u1045(7){ }u1046(16){ }u1047(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 167 431 432 460
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 167
;; lr  def 	 175 488 489
(code_label 752 880 753 125 120 "" [1 uses])
(note 753 752 10 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(insn 10 753 1110 125 (set (reg/v:DI 175 [ re ])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:13 89 {*movdi_internal}
     (nil))
(insn 1110 10 1111 125 (set (reg/v:QI 488 [orig:167 ch ] [167])
        (reg/v:QI 167 [ ch ])) 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:QI 167 [ ch ])
        (nil)))
(insn 1111 1110 1050 125 (set (reg/v:DI 489 [orig:175 re ] [175])
        (reg/v:DI 175 [ re ])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 175 [ re ])
        (nil)))
(jump_insn 1050 1111 1051 125 (set (pc)
        (label_ref 140)) 636 {jump}
     (nil)
 -> 140)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 431 432 460 488 489

(barrier 1051 1050 756)
;; basic block 126, loop depth 0, count 0, freq 0
;;  prev block 125, next block 127, flags: (RTL, MODIFIED)
;;  pred:       7 [1.0%] 
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u1048(6){ }u1049(7){ }u1050(16){ }u1051(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 756 1051 757 126 119 "" [1 uses])
(note 757 756 758 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(insn 758 757 1052 126 (set (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (nil))
(jump_insn 1052 758 1053 126 (set (pc)
        (label_ref 759)) 636 {jump}
     (nil)
 -> 759)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1053 1052 769)
;; basic block 127, loop depth 2, count 0, freq 0
;;  prev block 126, next block 128, flags: (RTL, MODIFIED)
;;  pred:       128 [50.0%] 
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u1053(6){ }u1054(7){ }u1055(16){ }u1056(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 448 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 448
;; lr  def 	 165
(code_label 769 1053 762 127 185 "" [1 uses])
(note 762 769 891 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 891 762 1054 127 (set (reg/f:SI 165 [ __i$_M_node ])
        (reg/f:SI 448 [ __i$_M_node ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 448 [ __i$_M_node ])
        (expr_list:REG_EQUAL (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                        (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])
            (nil))))
(jump_insn 1054 891 1055 127 (set (pc)
        (label_ref 713)) 636 {jump}
     (nil)
 -> 713)
;;  succ:       79 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 165 456

(barrier 1055 1054 767)
;; basic block 128, loop depth 2, count 0, freq 33, maybe hot
;;  prev block 127, next block 129, flags: (RTL)
;;  pred:       65 [50.0%] 
;;              67 [100.0%] 
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u1058(6){ }u1059(7){ }u1060(16){ }u1061(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 186 448 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 186
;; lr  def 	 17 [flags]
(code_label 767 1055 768 128 153 "" [2 uses])
(note 768 767 770 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn 770 768 771 128 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg/f:SI 186 [ __i$_M_node ])
                    (const_int 24 [0x18])) [21 MEM[(mapped_type &)__i$_M_node_347 + 24]+0 S4 A32])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:53 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg/f:SI 186 [ __i$_M_node ])
        (nil)))
(jump_insn 771 770 1056 128 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 769)
            (pc))) D:\LHX\7.5 contest\t1.cpp:53 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 769)
;;  succ:       127 [50.0%] 
;;              129 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 112 123 136 448 456

;; basic block 129, loop depth 2, count 0, freq 17, maybe hot
;;  prev block 128, next block 130, flags: (NEW, RTL, MODIFIED)
;;  pred:       128 [50.0%]  (FALLTHRU)
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1056 771 1057 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1057 1056 1058 129 (set (pc)
        (label_ref 721)) 636 {jump}
     (nil)
 -> 721)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 123 136 456

(barrier 1058 1057 1032)
;; basic block 130, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 129, next block 1, flags: (RTL)
;;  pred:       109 [9.0%] 
;;              111 [100.0%]  (LOOP_EXIT)
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u1064(6){ }u1065(7){ }u1066(16){ }u1067(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 1032 1058 778 130 227 "" [2 uses])
(note 778 1032 776 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn 776 778 777 130 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:64 90 {*movsi_internal}
     (nil))
(insn 777 776 0 130 (use (reg/i:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:64 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function (static initializers for D:\LHX\7.5 contest\t1.cpp) (_GLOBAL__sub_I_s, funcdef_no=6112, decl_uid=80904, symbol_order=4233) (executed once)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs




Pass 1 for finding pseudo/allocno costs



   Insn 28(l0): point = 0
   Insn 27(l0): point = 2
   Insn 26(l0): point = 4
   Insn 24(l0): point = 6
   Insn 22(l0): point = 8
   Insn 20(l0): point = 10
   Insn 19(l0): point = 12
   Insn 18(l0): point = 14
   Insn 16(l0): point = 16
   Insn 14(l0): point = 18
   Insn 12(l0): point = 20
   Insn 10(l0): point = 22
   Insn 8(l0): point = 24
   Insn 7(l0): point = 26
   Insn 6(l0): point = 28
   Insn 5(l0): point = 30
Compressing live ranges: from 33 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-36)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


(static initializers for D:\LHX\7.5 contest\t1.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 7[sp]
;;  ref usage 	r0={5d} r1={5d} r2={6d,1u} r6={1d,2u} r7={1d,12u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,1u} r17={4d} r18={4d} r19={4d} r20={1d,2u} r21={5d} r22={5d} r23={5d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={5d} r30={5d} r31={5d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} 
;;    total ref usage 312{294d,18u,0e} in 16{12 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 2 cx)
        (symbol_ref:SI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 035d1180 __ioinit>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 90 {*movsi_internal}
     (nil))
(call_insn 6 5 7 2 (call (mem:QI (symbol_ref:SI ("_ZNSt8ios_base4InitC1Ev") [flags 0x43]  <function_decl 032bbb80 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 641 {*call}
     (expr_list:REG_DEAD (reg:SI 2 cx)
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
(insn 7 6 8 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref:SI ("__tcf_0") [flags 0x3]  <function_decl 0737aa00 __tcf_0>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 90 {*movsi_internal}
     (nil))
(call_insn 8 7 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("atexit") [flags 0x43]  <function_decl 0737aa80 atexit>) [0 atexit S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 648 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 10 8 12 2 (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))) [20 MEM[(struct _Rb_tree_impl *)&s]._M_header._M_color+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:463 90 {*movsi_internal}
     (nil))
(insn 12 10 14 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_impl *)&s]._M_header._M_parent+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:463 90 {*movsi_internal}
     (nil))
(insn 14 12 16 2 (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree_impl *)&s]._M_node_count+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:463 90 {*movsi_internal}
     (nil))
(insn 16 14 18 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 12 [0xc]))) [6 MEM[(struct _Rb_tree_impl *)&s]._M_header._M_left+0 S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:484 90 {*movsi_internal}
     (nil))
(insn 18 16 19 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 16 [0x10]))) [6 MEM[(struct _Rb_tree_impl *)&s]._M_header._M_right+0 S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:485 90 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref:SI ("__tcf_1") [flags 0x3]  <function_decl 0737ac80 __tcf_1>)) D:\LHX\7.5 contest\t1.cpp:20 90 {*movsi_internal}
     (nil))
(call_insn 20 19 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("atexit") [flags 0x43]  <function_decl 0737aa80 atexit>) [0 atexit S1 A8])
            (const_int 4 [0x4]))) D:\LHX\7.5 contest\t1.cpp:20 648 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 22 20 24 2 (set (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(struct _Vector_impl *)&num]._M_start+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:87 90 {*movsi_internal}
     (nil))
(insn 24 22 26 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(struct _Vector_impl *)&num]._M_finish+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:87 90 {*movsi_internal}
     (nil))
(insn 26 24 27 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Vector_impl *)&num]._M_end_of_storage+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:87 90 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref:SI ("__tcf_2") [flags 0x3]  <function_decl 0737ad00 __tcf_2>)) D:\LHX\7.5 contest\t1.cpp:23 90 {*movsi_internal}
     (nil))
(call_insn 28 27 0 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("atexit") [flags 0x43]  <function_decl 0737aa80 atexit>) [0 atexit S1 A8])
            (const_int 4 [0x4]))) D:\LHX\7.5 contest\t1.cpp:23 648 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

