
;; Function void __tcf_2() (__tcf_2, funcdef_no=6108, decl_uid=80894, symbol_order=3645)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) lzw {*call}
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
changing reg in insn 6
changing reg in insn 10
changing reg in insn 7


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


void __tcf_2()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 7[sp] 17[flags]
;;  ref usage 	r0={3d,2u} r1={2d} r2={2d} r7={1d,7u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 92{82d,10u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 0 ax [orig:83 D.83037 ] [83])
        (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(int * *)&num]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:83 D.83037 ] [83])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:177 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 14)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:177 596 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 14)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:83 D.83037 ] [83])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
(call_insn 11 10 14 3 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU)
;;              2 [21.6%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 14 11 15 4 1 "" [1 uses])
(note 15 14 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 22 15 0 NOTE_INSN_DELETED)

;; Function int printf(const char*, ...) (_ZL6printfPKcz, funcdef_no=417, decl_uid=944, symbol_order=134)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) lzw {*call_value}
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
changing reg in insn 11
changing reg in insn 16
changing reg in insn 19
changing reg in insn 9
changing reg in insn 6
changing reg in insn 8


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


int printf(const char*, ...)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 7[sp] 17[flags]
;;  ref usage 	r0={6d,6u} r1={2d} r2={2d} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={2e} r17={2d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 102{85d,15u,2e} in 8{7 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 8 2 (parallel [
            (set (reg/f:SI 0 ax [87])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 36 [0x24])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:299 220 {*addsi_1}
     (expr_list:REG_EQUIV (plus:SI (reg/f:SI 16 argp)
            (const_int 4 [0x4]))
        (nil)))
(insn 8 6 19 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [87])) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 90 {*movsi_internal}
     (nil))
(insn 19 8 9 2 (set (reg/v/f:SI 0 ax [orig:86 __format ] [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [6 __format+0 S4 A32])) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (reg/f:SI 16 argp) [6 __format+0 S4 A32])
        (nil)))
(insn 9 19 10 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v/f:SI 0 ax [orig:86 __format ] [86])) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 90 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("__mingw_vprintf") [flags 0x43]  <function_decl 02668200 __mingw_vprintf>) [0 __mingw_vprintf S1 A8])
            (const_int 8 [0x8]))) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 11 10 16 2 (set (reg/v:SI 0 ax [orig:83 __retval ] [83])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:300 90 {*movsi_internal}
     (nil))
(insn 16 11 17 2 (set (reg/i:SI 0 ax)
        (reg/v:SI 0 ax [orig:83 __retval ] [83])) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:303 90 {*movsi_internal}
     (nil))
(insn 17 16 20 2 (use (reg/i:SI 0 ax)) D:/Dev-Cpp/MinGW64/x86_64-w64-mingw32/include/stdio.h:303 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 20 17 0 NOTE_INSN_DELETED)

;; Function void __tcf_0() (__tcf_0, funcdef_no=6103, decl_uid=80872, symbol_order=3640)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) Uz {*sibcall}
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void __tcf_0()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 2[cx] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={3d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 85{81d,4u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 7 [sp]
;; live  gen 	 2 [cx]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 2 cx)
        (symbol_ref:SI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 035d1180 __ioinit>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 90 {*movsi_internal}
     (nil))
(call_insn/j 6 5 7 2 (call (mem:QI (symbol_ref:SI ("_ZNSt8ios_base4InitD1Ev") [flags 0x43]  <function_decl 032bbc80 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 644 {*sibcall}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 7 6 10)
(note 10 7 0 NOTE_INSN_DELETED)

;; Function long long unsigned int qpow(long long unsigned int, long long unsigned int) (_Z4qpowyy, funcdef_no=5705, decl_uid=72664, symbol_order=3171)

      Creating newreg=103
Removing SCRATCH in insn #10 (nop 0)
rescanning insn with uid = 10.
      Creating newreg=104
Removing SCRATCH in insn #39 (nop 0)
rescanning insn with uid = 39.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 0 in insn 2:  (0) =r  (1) riFo {*movdi_internal}
      Creating newreg=105 from oldreg=86, assigning class GENERAL_REGS to r105
    2: r105:DI=[argp:SI+0xc]
    Inserting insn reload after:
   71: r86:DI=r105:DI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) o  (1) riF {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) riFo {*movdi_internal}
            0 Scratch win: reject+=2
            1 Matching alt: reject+=2
          alt=0,overall=16,losers=2,rld_nregs=2
            0 Scratch win: reject+=2
            1 Matching alt: reject+=2
          alt=0,overall=16,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*iorsi_3}
      Creating newreg=106 from oldreg=103, assigning class GENERAL_REGS to r106
      Change to class INDEX_REGS for r103
   10: {flags:CCZ=cmp(r106:SI|r87:DI#0,0);clobber r106:SI;}
      REG_UNUSED r103:SI
    Inserting insn reload before:
   72: r106:SI=r87:DI#4

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) riFo {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=107 from oldreg=101, assigning class GENERAL_REGS to r107
   14: {r107:SI=r107:SI&0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   73: r107:SI=r87:DI#0
    Inserting insn reload after:
   74: r101:SI=r107:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpsi_ccno_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
  Commutative operand exchange in insn 20
	 Choosing alt 2 in insn 20:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=108 from oldreg=91, assigning class GENERAL_REGS to r108
   20: {r108:SI=r108:SI*r83:DI#4;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   75: r108:SI=r86:DI#0
    Inserting insn reload after:
   76: r91:SI=r108:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 2 in insn 21:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=109 from oldreg=92, assigning class GENERAL_REGS to r109
   21: {r109:SI=r109:SI*r83:DI#0;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   77: r109:SI=r86:DI#4
    Inserting insn reload after:
   78: r92:SI=r109:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 23:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 29:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=110 from oldreg=95, assigning class GENERAL_REGS to r110
   29: {r110:SI=r110:SI*r86:DI#0;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   79: r110:SI=r86:DI#4
    Inserting insn reload after:
   80: r95:SI=r110:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            2 Non pseudo reload: reject++
          alt=1,overall=20,losers=2,rld_nregs=3
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            2 Non pseudo reload: reject++
          alt=1,overall=20,losers=2,rld_nregs=3
	 Choosing alt 1 in insn 32:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=111 from oldreg=86, assigning class AD_REGS to r111
   32: {r111:DI=zero_extend(r111:DI#0)*zero_extend(r86:DI#0);clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   81: clobber r111:DI
   82: r111:DI#0=r86:DI#0
    Inserting insn reload after:
   83: r86:DI=r111:DI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) o  (1) riF {*movdi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=0,overall=13,losers=2 -- refuse
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 1 in insn 34:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) 0  (2) Jc {*lshrdi3_doubleword}
            0 Scratch win: reject+=2
            1 Matching alt: reject+=2
          alt=0,overall=16,losers=2,rld_nregs=2
            0 Scratch win: reject+=2
            1 Matching alt: reject+=2
          alt=0,overall=16,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*iorsi_3}
      Creating newreg=112 from oldreg=104, assigning class GENERAL_REGS to r112
      Change to class INDEX_REGS for r104
   39: {flags:CCZ=cmp(r112:SI|r87:DI#0,0);clobber r112:SI;}
      REG_UNUSED r104:SI
    Inserting insn reload before:
   84: r112:SI=r87:DI#4

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) riFo {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=113 from oldreg=86, assigning class GENERAL_REGS to inheritance r113
    Original reg change 86->113 (bb5):
   77: r109:SI=r113:DI#4
    Add inheritance<-original before:
   85: r113:DI=r86:DI

    Inheritance reuse change 86->113 (bb5):
   23: {r83:DI=zero_extend(r83:DI#0)*zero_extend(r113:DI#0);clobber flags:CC;}
      REG_UNUSED flags:CC
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=114 from oldreg=86, assigning class GENERAL_REGS to inheritance r114
    Original reg change 86->114 (bb5):
   75: r108:SI=r114:DI#0
    Add inheritance<-original before:
   86: r114:DI=r86:DI

    Inheritance reuse change 86->114 (bb5):
   85: r113:DI=r114:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 6
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=115 from oldreg=86, assigning class GENERAL_REGS to inheritance r115
    Original reg change 86->115 (bb6):
   82: r111:DI#0=r115:DI#0
    Add inheritance<-original before:
   87: r115:DI=r86:DI

    Inheritance reuse change 86->115 (bb6):
   32: {r111:DI=zero_extend(r111:DI#0)*zero_extend(r115:DI#0);clobber flags:CC;}
      REG_UNUSED flags:CC
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=116 from oldreg=86, assigning class GENERAL_REGS to inheritance r116
    Original reg change 86->116 (bb6):
   29: {r110:SI=r110:SI*r116:DI#0;clobber flags:CC;}
      REG_UNUSED flags:CC
    Add inheritance<-original before:
   88: r116:DI=r86:DI

    Inheritance reuse change 86->116 (bb6):
   87: r115:DI=r116:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=117 from oldreg=86, assigning class GENERAL_REGS to inheritance r117
    Original reg change 86->117 (bb6):
   79: r110:SI=r117:DI#4
    Add inheritance<-original before:
   89: r117:DI=r86:DI

    Inheritance reuse change 86->117 (bb6):
   88: r116:DI=r117:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 48: point = 0
   Insn 47: point = 0
  BB 7
   Insn 68: point = 2
  BB 6
   Insn 40: point = 3
   Insn 39: point = 3
   Insn 84: point = 4
   Insn 36: point = 5
   Insn 34: point = 5
   Insn 83: point = 6
   Insn 32: point = 8
   Insn 82: point = 10
   Insn 87: point = 10
	   Creating copy r115<-r116@910
   Insn 81: point = 12
   Insn 31: point = 13
   Insn 80: point = 15
	Hard reg 4 is preferable by r110 with profit 910
   Insn 29: point = 17
   Insn 88: point = 17
	   Creating copy r116<-r117@910
   Insn 79: point = 19
   Insn 89: point = 20
  BB 5
   Insn 25: point = 23
   Insn 23: point = 24
   Insn 22: point = 26
   Insn 78: point = 28
	Hard reg 1 is preferable by r109 with profit 455
   Insn 21: point = 30
   Insn 77: point = 30
   Insn 85: point = 31
	   Creating copy r113<-r114@455
   Insn 76: point = 33
	Hard reg 4 is preferable by r108 with profit 455
   Insn 20: point = 35
   Insn 75: point = 35
   Insn 86: point = 36
  BB 4
   Insn 18: point = 38
   Insn 17: point = 38
   Insn 74: point = 39
	Hard reg 4 is preferable by r107 with profit 910
   Insn 14: point = 41
   Insn 73: point = 41
  BB 3
   Insn 5: point = 43
  BB 8
   Insn 6: point = 45
  BB 2
   Insn 11: point = 46
   Insn 10: point = 46
   Insn 72: point = 47
   Insn 3: point = 48
   Insn 71: point = 49
   Insn 2: point = 51
 r83: [45..45] [0..43]
 r86: [46..49] [21..44] [3..6]
 r87: [46..48] [3..44]
 r91: [27..33]
 r92: [27..28]
 r93: [23..26]
 r95: [14..15]
 r97: [5..13]
 r101: [38..39]
 r105: [50..51]
 r106: [46..47]
 r107: [40..41]
 r108: [34..35]
 r109: [29..30]
 r110: [16..19]
 r111: [7..12]
 r112: [3..4]
 r113: [25..31]
 r114: [32..36]
 r115: [9..10]
 r116: [11..17]
 r117: [18..20]
Compressing live ranges: from 52 to 33 - 63%
Ranges after the compression:
 r83: [0..28]
 r86: [29..30] [14..27] [0..3]
 r87: [29..30] [0..27]
 r91: [16..21]
 r92: [16..17]
 r93: [14..15]
 r95: [8..9]
 r97: [2..7]
 r101: [24..25]
 r105: [31..32]
 r106: [29..30]
 r107: [26..27]
 r108: [22..23]
 r109: [18..19]
 r110: [10..13]
 r111: [4..7]
 r112: [0..1]
 r113: [14..19]
 r114: [20..23]
 r115: [4..5]
 r116: [6..11]
 r117: [12..13]

********** Assignment #1: **********

	 Assigning to 111 (cl=AD_REGS, orig=86, freq=4550, tfirst=111, tfreq=4550)...
	 Trying 0: spill 83(freq=2454)	 Now best 0(cost=-2096)

	 Trying 1: spill 83(freq=2454)
      Spill r83(hr=0, freq=2454) for r111
	   Assign 0 to reload r111 (freq=4550)
	 Assigning to 115 (cl=GENERAL_REGS, orig=86, freq=2730, tfirst=115, tfreq=4550)...
	   Assign 5 to inheritance r115 (freq=2730)
	Hard reg 5 is preferable by r116 with profit 910
	Hard reg 5 is preferable by r117 with profit 455
	 Assigning to 116 (cl=GENERAL_REGS, orig=86, freq=2730, tfirst=115, tfreq=4550)...
	   Assign 5 to inheritance r116 (freq=2730)
	Hard reg 5 is preferable by r117 with profit 1365
	 Assigning to 117 (cl=GENERAL_REGS, orig=86, freq=2730, tfirst=115, tfreq=4550)...
	   Assign 5 to inheritance r117 (freq=2730)
	 Assigning to 113 (cl=GENERAL_REGS, orig=86, freq=1365, tfirst=113, tfreq=1820)...
	   Assign 5 to inheritance r113 (freq=1365)
	Hard reg 5 is preferable by r114 with profit 455
	 Assigning to 114 (cl=GENERAL_REGS, orig=86, freq=1365, tfirst=113, tfreq=1820)...
	   Assign 5 to inheritance r114 (freq=1365)
	 Assigning to 105 (cl=GENERAL_REGS, orig=86, freq=180, tfirst=105, tfreq=180)...
	   Assign 0 to reload r105 (freq=180)
	 Assigning to 107 (cl=GENERAL_REGS, orig=101, freq=2730, tfirst=107, tfreq=2730)...
	   Assign 4 to reload r107 (freq=2730)
	 Assigning to 110 (cl=GENERAL_REGS, orig=95, freq=2730, tfirst=110, tfreq=2730)...
	   Assign 4 to reload r110 (freq=2730)
	 Assigning to 112 (cl=GENERAL_REGS, orig=104, freq=1820, tfirst=112, tfreq=1820)...
	   Assign 0 to reload r112 (freq=1820)
	 Assigning to 108 (cl=GENERAL_REGS, orig=91, freq=1365, tfirst=108, tfreq=1365)...
	   Assign 4 to reload r108 (freq=1365)
	 Assigning to 109 (cl=GENERAL_REGS, orig=92, freq=1365, tfirst=109, tfreq=1365)...
	   Assign 1 to reload r109 (freq=1365)
	 Assigning to 106 (cl=GENERAL_REGS, orig=103, freq=180, tfirst=106, tfreq=180)...
	   Assign 0 to reload r106 (freq=180)
  Reassigning non-reload pseudos
	   Assign 5 to r86 (freq=3275)

********** Undoing inheritance #1: **********

Inherit 5 out of 5 (100.00%)

********** Pseudos coalescing #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) riFo {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) riFo {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) riFo {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Small class reload: reject+=3
            alt=1,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 32:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 29:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 25:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=1,overall=19,losers=2,rld_nregs=3
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            2 Non pseudo reload: reject++
            alt=1,overall=20,losers=2 -- refuse
	 Choosing alt 1 in insn 23:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=118 from oldreg=83, assigning class AD_REGS to r118
   23: {r118:DI=zero_extend(r118:DI#0)*zero_extend(r113:DI#0);clobber flags:CC;}
      REG_DEAD r113:DI
    Inserting insn reload before:
   90: clobber r118:DI
   91: r118:DI#0=r83:DI#0
    Inserting insn reload after:
   92: r83:DI=r118:DI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) o  (1) riF {*movdi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 21:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 20:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) o  (1) riF {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) o  (1) riF {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #2: **********

EBB 2 3
EBB 4
EBB 5
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=119 from oldreg=83, assigning class GENERAL_REGS to inheritance r119
    Original reg change 83->119 (bb5):
   21: {r109:SI=r109:SI*r119:DI#0;clobber flags:CC;}
    Add inheritance<-original before:
   93: r119:DI=r83:DI

    Inheritance reuse change 83->119 (bb5):
   91: r118:DI#0=r119:DI#0
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=120 from oldreg=83, assigning class GENERAL_REGS to inheritance r120
    Original reg change 83->120 (bb5):
   20: {r108:SI=r108:SI*r120:DI#4;clobber flags:CC;}
    Add inheritance<-original before:
   94: r120:DI=r83:DI

    Inheritance reuse change 83->120 (bb5):
   93: r119:DI=r120:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #2: **********

  BB 9
   Insn 48: point = 0
   Insn 47: point = 0
  BB 7
   Insn 68: point = 2
  BB 6
   Insn 40: point = 3
   Insn 39: point = 3
   Insn 84: point = 4
   Insn 36: point = 5
   Insn 34: point = 5
   Insn 83: point = 6
	Hard reg 5 is preferable by r111 with profit 910
   Insn 32: point = 8
   Insn 82: point = 10
   Insn 87: point = 10
	   Creating copy r115<-r116@910
   Insn 81: point = 12
   Insn 31: point = 13
   Insn 80: point = 15
	Hard reg 4 is preferable by r110 with profit 910
   Insn 29: point = 17
   Insn 88: point = 17
	   Creating copy r116<-r117@910
   Insn 79: point = 19
   Insn 89: point = 20
	Hard reg 5 is preferable by r117 with profit 910
  BB 5
   Insn 25: point = 23
   Insn 92: point = 24
   Insn 23: point = 26
   Insn 91: point = 28
   Insn 90: point = 29
   Insn 22: point = 30
   Insn 78: point = 32
	Hard reg 1 is preferable by r109 with profit 455
   Insn 21: point = 34
   Insn 93: point = 34
	   Creating copy r119<-r120@455
   Insn 77: point = 36
   Insn 85: point = 37
	   Creating copy r113<-r114@455
   Insn 76: point = 39
	Hard reg 4 is preferable by r108 with profit 455
   Insn 20: point = 41
   Insn 94: point = 41
   Insn 75: point = 43
   Insn 86: point = 44
  BB 4
   Insn 18: point = 46
   Insn 17: point = 46
   Insn 74: point = 47
	Hard reg 4 is preferable by r107 with profit 910
   Insn 14: point = 49
   Insn 73: point = 49
  BB 3
   Insn 5: point = 51
  BB 8
   Insn 6: point = 53
  BB 2
   Insn 11: point = 54
   Insn 10: point = 54
   Insn 72: point = 55
   Insn 3: point = 56
   Insn 71: point = 57
	Hard reg 5 is preferable by r105 with profit 90
   Insn 2: point = 59
 r83: [53..53] [42..51] [0..24]
 r86: [54..57] [21..52] [3..6]
 r87: [54..56] [3..52]
 r91: [31..39]
 r92: [31..32]
 r93: [23..30]
 r95: [14..15]
 r97: [5..13]
 r101: [46..47]
 r105: [58..59]
 r106: [54..55]
 r107: [48..49]
 r108: [40..43]
 r109: [33..36]
 r110: [16..19]
 r111: [7..12]
 r112: [3..4]
 r113: [27..37]
 r114: [38..44]
 r115: [9..10]
 r116: [11..17]
 r117: [18..20]
 r118: [25..29]
 r119: [28..34]
 r120: [35..41]
Compressing live ranges: from 60 to 39 - 65%
Ranges after the compression:
 r83: [28..34] [0..15]
 r86: [35..36] [14..33] [0..3]
 r87: [35..36] [0..33]
 r91: [18..25]
 r92: [18..19]
 r93: [14..17]
 r95: [8..9]
 r97: [2..7]
 r101: [30..31]
 r105: [37..38]
 r106: [35..36]
 r107: [32..33]
 r108: [26..29]
 r109: [20..23]
 r110: [10..13]
 r111: [4..7]
 r112: [0..1]
 r113: [16..23]
 r114: [24..29]
 r115: [4..5]
 r116: [6..11]
 r117: [12..13]
 r118: [16..17]
 r119: [16..21]
 r120: [22..27]

********** Assignment #2: **********

	 Assigning to 118 (cl=AD_REGS, orig=83, freq=2275, tfirst=118, tfreq=2275)...
	   Assign 0 to reload r118 (freq=2275)
	 Assigning to 119 (cl=GENERAL_REGS, orig=83, freq=1365, tfirst=119, tfreq=1820)...
	 Assigning to 120 (cl=GENERAL_REGS, orig=83, freq=1365, tfirst=119, tfreq=1820)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
   91: r118:DI#0=r83:DI#0
      REG_DEAD r83:DI
   Insn after restoring regs:
   21: {r109:SI=r109:SI*r83:DI#0;clobber flags:CC;}
	   Removing inheritance:
   93: r119:DI=r120:DI
      REG_DEAD r120:DI
deleting insn with uid = 93.
   Insn after restoring regs:
   20: {r108:SI=r108:SI*r83:DI#4;clobber flags:CC;}
	   Removing inheritance:
   94: r120:DI=r83:DI
      REG_DEAD r83:DI
deleting insn with uid = 94.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #3: **********

  BB 9
   Insn 48: point = 0
   Insn 47: point = 0
  BB 7
   Insn 68: point = 2
  BB 6
   Insn 40: point = 3
   Insn 39: point = 3
   Insn 84: point = 4
   Insn 36: point = 5
   Insn 34: point = 5
   Insn 83: point = 6
   Insn 32: point = 8
   Insn 82: point = 10
   Insn 87: point = 10
   Insn 81: point = 12
   Insn 31: point = 13
   Insn 80: point = 15
   Insn 29: point = 17
   Insn 88: point = 17
   Insn 79: point = 19
   Insn 89: point = 20
  BB 5
   Insn 25: point = 23
   Insn 92: point = 24
   Insn 23: point = 26
   Insn 91: point = 28
   Insn 90: point = 29
   Insn 22: point = 30
   Insn 78: point = 32
   Insn 21: point = 34
   Insn 77: point = 34
   Insn 85: point = 35
   Insn 76: point = 37
   Insn 20: point = 39
   Insn 75: point = 39
   Insn 86: point = 40
  BB 4
   Insn 18: point = 42
   Insn 17: point = 42
   Insn 74: point = 43
   Insn 14: point = 45
   Insn 73: point = 45
  BB 3
   Insn 5: point = 47
  BB 8
   Insn 6: point = 49
  BB 2
   Insn 11: point = 50
   Insn 10: point = 50
   Insn 72: point = 51
   Insn 3: point = 52
   Insn 71: point = 53
   Insn 2: point = 55
 r83: [49..49] [28..47] [0..24]
Compressing live ranges: from 56 to 5 - 8%
Ranges after the compression:
 r83: [0..4]
  Slot 0 regnos (width = 8):	 83
Changing spilled pseudos to memory in insn #5
Changing spilled pseudos to memory in insn #20
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #91
Changing spilled pseudos to memory in insn #92
Changing spilled pseudos to memory in insn #25
Changing spilled pseudos to memory in insn #6
Changing spilled pseudos to memory in insn #47
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=8, prev_offset=0)
Can eliminate 20 to 6 (offset=-20, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) riFo {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) riFo {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) riFo {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) o  (1) riF {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 25:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) o  (1) riF {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 21:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 20:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) o  (1) riF {*movdi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=8, prev_offset=8)
Can eliminate 20 to 6 (offset=-20, prev_offset=0)
changing reg in insn 34
changing reg in insn 36
changing reg in insn 3
changing reg in insn 36
changing reg in insn 22
changing reg in insn 22
changing reg in insn 22
changing reg in insn 31
changing reg in insn 31
changing reg in insn 17
deleting insn with uid = 74.
deleting insn with uid = 86.
deleting insn with uid = 76.
deleting insn with uid = 85.
deleting insn with uid = 78.
deleting insn with uid = 90.
deleting insn with uid = 89.
deleting insn with uid = 88.
deleting insn with uid = 80.
deleting insn with uid = 81.
deleting insn with uid = 87.


try_optimize_cfg iteration 1

Forwarding edge 6->7 to 9 failed.
starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 11 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 11 (  1.1)


long long unsigned int qpow(long long unsigned int, long long unsigned int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 1 [dx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,9u} r1={7d,7u} r2={3d,4u} r3={2d,3u} r4={8d,8u} r5={2d,5u} r6={3d,3u} r7={1d,20u} r17={14d,3u} r21={1d} r22={1d} r23={1d} r29={1d} r30={1d} r31={1d} 
;;    total ref usage 119{57d,62u,0e} in 35{35 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 0 [ax]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 71 2 (set (reg/v:DI 0 ax [orig:86 a ] [86])
        (mem/c:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [34 a+0 S8 A32])) D:\LHX\7.5 contest\t1.cpp:24 89 {*movdi_internal}
     (nil))
(insn 71 2 3 2 (set (reg/v:DI 5 di [orig:86 a ] [86])
        (reg/v:DI 0 ax [orig:86 a ] [86])) D:\LHX\7.5 contest\t1.cpp:24 89 {*movdi_internal}
     (nil))
(insn 3 71 4 2 (set (reg/v:DI 2 cx [orig:87 b ] [87])
        (mem/c:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [34 b+0 S8 A32])) D:\LHX\7.5 contest\t1.cpp:24 89 {*movdi_internal}
     (nil))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(note 9 4 72 2 NOTE_INSN_DELETED)
(insn 72 9 10 2 (set (reg:SI 0 ax [103])
        (reg:SI 3 bx [ b+4 ])) D:\LHX\7.5 contest\t1.cpp:26 90 {*movsi_internal}
     (nil))
(insn 10 72 11 2 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ior:SI (reg:SI 0 ax [103])
                        (reg:SI 2 cx [orig:87 b ] [87]))
                    (const_int 0 [0])))
            (clobber (reg:SI 0 ax [103]))
        ]) D:\LHX\7.5 contest\t1.cpp:26 425 {*iorsi_3}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 54)
            (pc))) D:\LHX\7.5 contest\t1.cpp:26 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 54)
;;  succ:       3 [91.0%]  (FALLTHRU)
;;              8 [9.0%] 
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [91.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 12 11 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 12 37 3 (set (mem/c:DI (reg/f:SI 7 sp) [45 %sfp+-8 S8 A64])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU)
;;              6 [91.0%]  (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 4 [si] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 37 5 13 4 16 "" [1 uses])
(note 13 37 73 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 73 13 14 4 (set (reg:SI 4 si [orig:101 D.83044 ] [101])
        (reg:SI 2 cx [orig:87 b ] [87])) D:\LHX\7.5 contest\t1.cpp:27 90 {*movsi_internal}
     (nil))
(insn 14 73 17 4 (parallel [
            (set (reg:SI 4 si [orig:101 D.83044 ] [101])
                (and:SI (reg:SI 4 si [orig:101 D.83044 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 370 {*andsi_1}
     (nil))
(insn 17 14 18 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:101 D.83044 ] [101])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:27 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 27)
            (pc))) D:\LHX\7.5 contest\t1.cpp:27 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 27)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 4550, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [50.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si]
;; live  kill	 17 [flags]
(note 19 18 75 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 75 19 94 5 (set (reg:SI 4 si [91])
        (reg:SI 5 di [orig:86 a ] [86])) D:\LHX\7.5 contest\t1.cpp:27 90 {*movsi_internal}
     (nil))
(note 94 75 20 5 NOTE_INSN_DELETED)
(insn 20 94 77 5 (parallel [
            (set (reg:SI 4 si [91])
                (mult:SI (reg:SI 4 si [91])
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [45 %sfp+-4 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 306 {*mulsi3_1}
     (nil))
(insn 77 20 93 5 (set (reg:SI 1 dx [92])
        (reg:SI 6 bp [ a+4 ])) D:\LHX\7.5 contest\t1.cpp:27 90 {*movsi_internal}
     (nil))
(note 93 77 21 5 NOTE_INSN_DELETED)
(insn 21 93 22 5 (parallel [
            (set (reg:SI 1 dx [92])
                (mult:SI (reg:SI 1 dx [92])
                    (mem/c:SI (reg/f:SI 7 sp) [45 %sfp+-8 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 306 {*mulsi3_1}
     (nil))
(insn 22 21 91 5 (parallel [
            (set (reg:SI 4 si [93])
                (plus:SI (reg:SI 4 si [91])
                    (reg:SI 1 dx [92])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 220 {*addsi_1}
     (nil))
(insn 91 22 23 5 (set (reg:SI 0 ax [orig:83 re ] [83])
        (mem/c:SI (reg/f:SI 7 sp) [45 %sfp+-8 S4 A64])) D:\LHX\7.5 contest\t1.cpp:27 90 {*movsi_internal}
     (nil))
(insn 23 91 92 5 (parallel [
            (set (reg/v:DI 0 ax [orig:83 re ] [83])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:83 re ] [83]))
                    (zero_extend:DI (reg:SI 5 di [orig:86 a ] [86]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 323 {*umulsidi3_1}
     (nil))
(insn 92 23 24 5 (set (mem/c:DI (reg/f:SI 7 sp) [45 %sfp+-8 S8 A64])
        (reg/v:DI 0 ax [orig:83 re ] [83])) D:\LHX\7.5 contest\t1.cpp:27 89 {*movdi_internal}
     (nil))
(note 24 92 25 5 NOTE_INSN_DELETED)
(insn 25 24 27 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [45 %sfp+-4 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [45 %sfp+-4 S4 A32])
                    (reg:SI 4 si [93])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 220 {*addsi_1}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 0 [ax] 17 [flags]
(code_label 27 25 28 6 15 "" [1 uses])
(note 28 27 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 79 28 29 6 (set (reg:SI 4 si [95])
        (reg:SI 6 bp [ a+4 ])) D:\LHX\7.5 contest\t1.cpp:28 90 {*movsi_internal}
     (nil))
(insn 29 79 31 6 (parallel [
            (set (reg:SI 4 si [95])
                (mult:SI (reg:SI 4 si [95])
                    (reg:SI 5 di [orig:86 a ] [86])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 306 {*mulsi3_1}
     (nil))
(insn 31 29 82 6 (parallel [
            (set (reg:SI 4 si [97])
                (ashift:SI (reg:SI 4 si [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 496 {*ashlsi3_1}
     (nil))
(insn 82 31 32 6 (set (reg:SI 0 ax [orig:86 a ] [86])
        (reg:SI 5 di [orig:86 a ] [86])) D:\LHX\7.5 contest\t1.cpp:28 90 {*movsi_internal}
     (nil))
(insn 32 82 83 6 (parallel [
            (set (reg/v:DI 0 ax [orig:86 a ] [86])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:86 a ] [86]))
                    (zero_extend:DI (reg:SI 5 di [orig:86 a ] [86]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 323 {*umulsidi3_1}
     (nil))
(insn 83 32 33 6 (set (reg/v:DI 5 di [orig:86 a ] [86])
        (reg/v:DI 0 ax [orig:86 a ] [86])) D:\LHX\7.5 contest\t1.cpp:28 89 {*movdi_internal}
     (nil))
(note 33 83 34 6 NOTE_INSN_DELETED)
(insn 34 33 36 6 (parallel [
            (set (reg:SI 6 bp [ a+4 ])
                (plus:SI (reg:SI 6 bp [ a+4 ])
                    (reg:SI 4 si [97])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 220 {*addsi_1}
     (nil))
(insn 36 34 38 6 (parallel [
            (set (reg/v:DI 2 cx [orig:87 b ] [87])
                (lshiftrt:DI (reg/v:DI 2 cx [orig:87 b ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 516 {*lshrdi3_doubleword}
     (nil))
(note 38 36 84 6 NOTE_INSN_DELETED)
(insn 84 38 39 6 (set (reg:SI 0 ax [104])
        (reg:SI 3 bx [ b+4 ])) D:\LHX\7.5 contest\t1.cpp:26 90 {*movsi_internal}
     (nil))
(insn 39 84 40 6 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ior:SI (reg:SI 0 ax [104])
                        (reg:SI 2 cx [orig:87 b ] [87]))
                    (const_int 0 [0])))
            (clobber (reg:SI 0 ax [104]))
        ]) D:\LHX\7.5 contest\t1.cpp:26 425 {*iorsi_3}
     (nil))
(jump_insn 40 39 67 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 37)
            (pc))) D:\LHX\7.5 contest\t1.cpp:26 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 37)
;;  succ:       4 [91.0%]  (DFS_BACK)
;;              7 [9.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 67 40 68 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 68 67 69 7 (set (pc)
        (label_ref 41)) 636 {jump}
     (nil)
 -> 41)
;;  succ:       9 [100.0%]  (LOOP_EXIT)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 69 68 54)
;; basic block 8, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [9.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 54 69 53 8 17 "" [1 uses])
(note 53 54 6 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 6 53 41 8 (set (mem/c:DI (reg/f:SI 7 sp) [45 %sfp+-8 S8 A64])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:25 89 {*movdi_internal}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              7 [100.0%]  (LOOP_EXIT)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 41 6 42 9 14 "" [1 uses])
(note 42 41 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 42 48 9 (set (reg/i:DI 0 ax)
        (mem/c:DI (reg/f:SI 7 sp) [45 %sfp+-8 S8 A64])) D:\LHX\7.5 contest\t1.cpp:31 89 {*movdi_internal}
     (nil))
(insn 48 47 70 9 (use (reg/i:DI 0 ax)) D:\LHX\7.5 contest\t1.cpp:31 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(note 70 48 0 NOTE_INSN_DELETED)

;; Function void std::vector<_Tp, _Alloc>::_M_emplace_back_aux(_Args&& ...) [with _Args = {const int&}; _Tp = int; _Alloc = std::allocator<int>] (_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_, funcdef_no=5879, decl_uid=75856, symbol_order=3371)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-28, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=134 from oldreg=111, assigning class GENERAL_REGS to r134
   15: {r134:SI=r134:SI-r93:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  149: r134:SI=r98:SI
    Inserting insn reload after:
  150: r111:SI=r134:SI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=135 from oldreg=117, assigning class GENERAL_REGS to r135
   16: {r135:SI=r135:SI>>0x2;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUAL r111:SI/0x4
    Inserting insn reload before:
  151: r135:SI=r111:SI
    Inserting insn reload after:
  152: r117:SI=r135:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpsi_1}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 28:  (0) r  (1) l  (2) M {*ashlsi3_1}
      Creating newreg=136 from oldreg=104, assigning class GENERAL_REGS to r136
   28: {r136:SI=r117:SI<<0x3;clobber flags:CC;}
      REG_DEAD r117:SI
      REG_UNUSED flags:CC
    Inserting insn reload after:
  153: r104:SI=r136:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) r {*cmpsi_ccno_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
      Creating newreg=137 from oldreg=104, assigning class GENERAL_REGS to r137
   33: [sp:SI]=r137:SI
    Inserting insn reload before:
  154: r137:SI=r104:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 38:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=138 from oldreg=111, assigning class GENERAL_REGS to r138
   38: {r138:SI=r138:SI-r93:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  155: r138:SI=r98:SI
    Inserting insn reload after:
  156: r111:SI=r138:SI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 39:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*addsi_2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 68:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) lzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=139 from oldreg=104, assigning class GENERAL_REGS to r139
      Making reload reg 139 for reg 104 optional
   87: {r123:SI=r91:SI+r139:SI;clobber flags:CC;}
      REG_DEAD r104:SI
      REG_DEAD r91:SI
      REG_UNUSED flags:CC
      REG_EQUIV [r115:SI+0x8]
    Inserting insn reload before:
  157: r139:SI=r104:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=140, assigning class NO_REGS to save r140
   36: r93:SI=[r115:SI]
    Add reg<-save before:
  159: r115:SI=r140:SI

   32: NOTE_INSN_BASIC_BLOCK 10
    Add save<-reg after:
  158: r140:SI=r115:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 11
EBB 12 13
EBB 14 15
EBB 16 17
EBB 18
EBB 19
EBB 20 21
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=141, assigning class NO_REGS to save r141
   82: call [`_ZdlPv'] argc:0x4
      REG_EH_REGION 0
    Add reg<-save after:
  161: r91:SI=r141:SI

   80: NOTE_INSN_BASIC_BLOCK 21
    Add save<-reg after:
  160: r141:SI=r91:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=142, assigning class NO_REGS to save r142
   82: call [`_ZdlPv'] argc:0x4
      REG_EH_REGION 0
    Add reg<-save after:
  163: r115:SI=r142:SI

   80: NOTE_INSN_BASIC_BLOCK 21
    Add save<-reg after:
  162: r142:SI=r115:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 22

********** Pseudo live ranges #1: **********

  BB 22
   Insn 88: point = 0
   Insn 87: point = 1
   Insn 157: point = 3
   Insn 86: point = 5
   Insn 85: point = 6
  BB 21
   Insn 161: point = 7
	Hard reg 0 is preferable by r141 with profit 70
   Insn 163: point = 9
	Hard reg 2 is preferable by r142 with profit 70
   Insn 82: point = 11
   Insn 81: point = 11
   Insn 160: point = 12
	Hard reg 0 is preferable by r141 with profit 140
   Insn 162: point = 14
	Hard reg 2 is preferable by r142 with profit 140
  BB 20
   Insn 79: point = 17
   Insn 78: point = 17
  BB 19
   Insn 75: point = 18
   Insn 70: point = 20
   Insn 69: point = 22
   Insn 68: point = 24
   Insn 147: point = 25
   Insn 146: point = 27
   Insn 145: point = 29
   Insn 144: point = 31
  BB 18
   Insn 66: point = 34
   Insn 65: point = 34
   Insn 63: point = 34
   Insn 62: point = 34
  BB 17
   Insn 59: point = 35
  BB 16
   Insn 57: point = 37
   Insn 56: point = 37
   Insn 55: point = 37
  BB 15
   Insn 143: point = 39
   Insn 142: point = 41
   Insn 141: point = 43
   Insn 140: point = 45
   Insn 139: point = 47
   Insn 138: point = 49
   Insn 10: point = 51
   Insn 53: point = 52
  BB 14
   Insn 51: point = 54
   Insn 50: point = 54
  BB 13
   Insn 47: point = 55
  BB 12
   Insn 45: point = 57
   Insn 44: point = 57
   Insn 43: point = 59
   Insn 137: point = 61
  BB 10
   Insn 135: point = 63
   Insn 39: point = 63
   Insn 156: point = 64
	Hard reg 1 is preferable by r138 with profit 26
   Insn 38: point = 66
   Insn 155: point = 66
   Insn 37: point = 67
   Insn 36: point = 68
   Insn 159: point = 69
	Hard reg 2 is preferable by r140 with profit 26
   Insn 35: point = 71
   Insn 34: point = 72
   Insn 33: point = 72
   Insn 154: point = 73
   Insn 158: point = 74
	Hard reg 2 is preferable by r140 with profit 52
  BB 8
   Insn 133: point = 77
   Insn 6: point = 77
  BB 6
   Insn 129: point = 79
  BB 7
   Insn 131: point = 80
   Insn 7: point = 80
  BB 9
   Insn 5: point = 82
  BB 11
   Insn 9: point = 84
   Insn 8: point = 85
  BB 5
   Insn 30: point = 87
   Insn 29: point = 87
   Insn 153: point = 88
   Insn 28: point = 90
  BB 4
   Insn 26: point = 93
   Insn 25: point = 93
  BB 3
   Insn 23: point = 94
   Insn 22: point = 94
   Insn 21: point = 94
  BB 2
   Insn 19: point = 96
   Insn 18: point = 96
   Insn 152: point = 96
	Hard reg 0 is preferable by r135 with profit 90
   Insn 16: point = 98
   Insn 151: point = 98
   Insn 150: point = 99
	Hard reg 1 is preferable by r134 with profit 90
   Insn 15: point = 101
   Insn 149: point = 101
   Insn 14: point = 102
   Insn 13: point = 103
   Insn 2: point = 104
 r87: [55..57]
 r91: [84..84] [50..71] [13..31] [2..7]
 r92: [48..52]
 r93: [84..103] [46..68] [11..29]
 r94: [55..59]
 r95: [35..37]
 r97: [44..51]
 r98: [84..102] [42..67] [23..27]
 r104: [84..88] [82..82] [79..80] [4..77]
 r105: [87..94]
 r109: [84..85] [54..63] [5..18]
 r111: [84..99] [58..64]
 r115: [75..104] [40..69] [15..25] [0..9]
 r116: [60..61]
 r117: [91..96]
 r118: [23..24]
 r119: [21..22]
 r120: [19..20]
 r123: [0..1]
 r128: [32..49]
 r129: [34..47]
 r130: [30..45]
 r131: [34..43]
 r132: [28..41]
 r133: [26..39]
 r134: [100..101]
 r135: [97..98]
 r136: [89..90]
 r137: [72..73]
 r138: [65..66]
 r139: [2..3]
 r140: [70..74]
 r141: [8..12]
 r142: [10..14]
Compressing live ranges: from 105 to 69 - 65%
Ranges after the compression:
 r87: [40..41]
 r91: [57..57] [38..49] [10..25] [2..5]
 r92: [36..39]
 r93: [57..68] [34..47] [8..23]
 r94: [40..43]
 r95: [26..27]
 r97: [32..39]
 r98: [57..68] [30..47] [18..21]
 r104: [4..60]
 r105: [59..64]
 r109: [57..58] [40..45] [4..13]
 r111: [57..66] [42..45]
 r115: [52..68] [28..47] [12..19] [0..7]
 r116: [44..45]
 r117: [63..64]
 r118: [18..19]
 r119: [16..17]
 r120: [14..15]
 r123: [0..1]
 r128: [26..37]
 r129: [26..35]
 r130: [24..33]
 r131: [26..31]
 r132: [22..29]
 r133: [20..27]
 r134: [67..68]
 r135: [65..66]
 r136: [61..62]
 r137: [50..51]
 r138: [46..47]
 r139: [2..3]
 r140: [48..51]
 r141: [6..9]
 r142: [8..11]

********** Assignment #1: **********

	 Assigning to 134 (cl=GENERAL_REGS, orig=111, freq=270, tfirst=134, tfreq=270)...
	   Assign 1 to reload r134 (freq=270)
	 Assigning to 135 (cl=GENERAL_REGS, orig=117, freq=270, tfirst=135, tfreq=270)...
	   Assign 0 to reload r135 (freq=270)
	 Assigning to 139 (cl=GENERAL_REGS, orig=104, freq=180, tfirst=139, tfreq=180)...
	   Assign 5 to optional reload r139 (freq=180)
	 Assigning to 138 (cl=GENERAL_REGS, orig=111, freq=78, tfirst=138, tfreq=78)...
	   Assign 1 to reload r138 (freq=78)
	 Assigning to 137 (cl=GENERAL_REGS, orig=104, freq=52, tfirst=137, tfreq=52)...
	   Assign 0 to reload r137 (freq=52)
	 Assigning to 136 (cl=GENERAL_REGS, orig=104, freq=2, tfirst=136, tfreq=2)...
	   Assign 0 to reload r136 (freq=2)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

	     Keep split r140 (orig=r115)
	     Keep split r141 (orig=r91)
	     Keep split r142 (orig=r115)
Split 3 out of 3 (100.00%)
Remove optional reload reg 139
  Restoring original insn:
   87: {r123:SI=r91:SI+r104:SI;clobber flags:CC;}
      REG_DEAD r104:SI
      REG_DEAD r91:SI
      REG_EQUIV [r115:SI+0x8]
  Deleting move 157
  157: r139:SI=r104:SI
      REG_DEAD r104:SI
deleting insn with uid = 157.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=143 from oldreg=104, assigning class GENERAL_REGS to r143
      Making reload reg 143 for reg 104 optional
   87: {r123:SI=r91:SI+r143:SI;clobber flags:CC;}
      REG_DEAD r104:SI
      REG_DEAD r91:SI
      REG_EQUIV [r115:SI+0x8]
    Inserting insn reload before:
  164: r143:SI=r104:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12 13
EBB 14 15
EBB 16 17
EBB 18
EBB 19
EBB 20 21
EBB 22

********** Pseudo live ranges #2: **********

  BB 22
   Insn 88: point = 0
   Insn 87: point = 1
   Insn 164: point = 3
   Insn 86: point = 5
   Insn 85: point = 6
  BB 21
   Insn 161: point = 7
	Hard reg 0 is preferable by r141 with profit 70
   Insn 163: point = 9
	Hard reg 2 is preferable by r142 with profit 70
   Insn 82: point = 11
   Insn 81: point = 11
   Insn 160: point = 12
	Hard reg 0 is preferable by r141 with profit 140
   Insn 162: point = 14
	Hard reg 2 is preferable by r142 with profit 140
  BB 20
   Insn 79: point = 17
   Insn 78: point = 17
  BB 19
   Insn 75: point = 18
   Insn 70: point = 20
   Insn 69: point = 22
   Insn 68: point = 24
   Insn 147: point = 25
   Insn 146: point = 27
   Insn 145: point = 29
   Insn 144: point = 31
  BB 18
   Insn 66: point = 34
   Insn 65: point = 34
   Insn 63: point = 34
   Insn 62: point = 34
  BB 17
   Insn 59: point = 35
  BB 16
   Insn 57: point = 37
   Insn 56: point = 37
   Insn 55: point = 37
  BB 15
   Insn 143: point = 39
   Insn 142: point = 41
   Insn 141: point = 43
   Insn 140: point = 45
   Insn 139: point = 47
   Insn 138: point = 49
   Insn 10: point = 51
   Insn 53: point = 52
  BB 14
   Insn 51: point = 54
   Insn 50: point = 54
  BB 13
   Insn 47: point = 55
  BB 12
   Insn 45: point = 57
   Insn 44: point = 57
   Insn 43: point = 59
   Insn 137: point = 61
  BB 10
   Insn 135: point = 63
   Insn 39: point = 63
   Insn 156: point = 64
	Hard reg 1 is preferable by r138 with profit 26
   Insn 38: point = 66
   Insn 155: point = 66
   Insn 37: point = 67
   Insn 36: point = 68
   Insn 159: point = 69
	Hard reg 2 is preferable by r140 with profit 26
   Insn 35: point = 71
   Insn 34: point = 72
   Insn 33: point = 72
   Insn 154: point = 73
   Insn 158: point = 74
	Hard reg 2 is preferable by r140 with profit 52
  BB 8
   Insn 133: point = 77
   Insn 6: point = 77
  BB 6
   Insn 129: point = 79
  BB 7
   Insn 131: point = 80
   Insn 7: point = 80
  BB 9
   Insn 5: point = 82
  BB 11
   Insn 9: point = 84
   Insn 8: point = 85
  BB 5
   Insn 30: point = 87
   Insn 29: point = 87
   Insn 153: point = 88
   Insn 28: point = 90
  BB 4
   Insn 26: point = 93
   Insn 25: point = 93
  BB 3
   Insn 23: point = 94
   Insn 22: point = 94
   Insn 21: point = 94
  BB 2
   Insn 19: point = 96
   Insn 18: point = 96
   Insn 152: point = 96
	Hard reg 0 is preferable by r135 with profit 90
   Insn 16: point = 98
   Insn 151: point = 98
   Insn 150: point = 99
	Hard reg 1 is preferable by r134 with profit 90
   Insn 15: point = 101
   Insn 149: point = 101
   Insn 14: point = 102
   Insn 13: point = 103
   Insn 2: point = 104
 r87: [55..57]
 r91: [84..84] [50..71] [13..31] [2..7]
 r92: [48..52]
 r93: [84..103] [46..68] [11..29]
 r94: [55..59]
 r95: [35..37]
 r97: [44..51]
 r98: [84..102] [42..67] [23..27]
 r104: [84..88] [82..82] [79..80] [4..77]
 r105: [87..94]
 r109: [84..85] [54..63] [5..18]
 r111: [84..99] [58..64]
 r115: [75..104] [40..69] [15..25] [0..9]
 r116: [60..61]
 r117: [91..96]
 r118: [23..24]
 r119: [21..22]
 r120: [19..20]
 r123: [0..1]
 r128: [32..49]
 r129: [34..47]
 r130: [30..45]
 r131: [34..43]
 r132: [28..41]
 r133: [26..39]
 r134: [100..101]
 r135: [97..98]
 r136: [89..90]
 r137: [72..73]
 r138: [65..66]
 r140: [70..74]
 r141: [8..12]
 r142: [10..14]
 r143: [2..3]
Compressing live ranges: from 105 to 69 - 65%
Ranges after the compression:
 r87: [40..41]
 r91: [57..57] [38..49] [10..25] [2..5]
 r92: [36..39]
 r93: [57..68] [34..47] [8..23]
 r94: [40..43]
 r95: [26..27]
 r97: [32..39]
 r98: [57..68] [30..47] [18..21]
 r104: [4..60]
 r105: [59..64]
 r109: [57..58] [40..45] [4..13]
 r111: [57..66] [42..45]
 r115: [52..68] [28..47] [12..19] [0..7]
 r116: [44..45]
 r117: [63..64]
 r118: [18..19]
 r119: [16..17]
 r120: [14..15]
 r123: [0..1]
 r128: [26..37]
 r129: [26..35]
 r130: [24..33]
 r131: [26..31]
 r132: [22..29]
 r133: [20..27]
 r134: [67..68]
 r135: [65..66]
 r136: [61..62]
 r137: [50..51]
 r138: [46..47]
 r140: [48..51]
 r141: [6..9]
 r142: [8..11]
 r143: [2..3]

********** Assignment #2: **********

	 Assigning to 143 (cl=GENERAL_REGS, orig=104, freq=180, tfirst=143, tfreq=180)...
	   Assign 5 to optional reload r143 (freq=180)
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Keep optional reload reg 139
Remove optional reload reg 143
  Restoring original insn:
   87: {r123:SI=r91:SI+r104:SI;clobber flags:CC;}
      REG_DEAD r104:SI
      REG_DEAD r91:SI
      REG_EQUIV [r115:SI+0x8]
  Deleting move 164
  164: r143:SI=r104:SI
      REG_DEAD r104:SI
deleting insn with uid = 164.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*addsi_1}

********** Pseudo live ranges #3: **********

  BB 22
   Insn 88: point = 0
   Insn 87: point = 1
   Insn 86: point = 3
   Insn 85: point = 4
  BB 21
   Insn 161: point = 5
   Insn 163: point = 7
   Insn 82: point = 9
   Insn 81: point = 9
   Insn 160: point = 10
   Insn 162: point = 12
  BB 20
   Insn 79: point = 15
   Insn 78: point = 15
  BB 19
   Insn 75: point = 16
   Insn 70: point = 18
   Insn 69: point = 20
   Insn 68: point = 22
   Insn 147: point = 23
   Insn 146: point = 25
   Insn 145: point = 27
   Insn 144: point = 29
  BB 18
   Insn 66: point = 32
   Insn 65: point = 32
   Insn 63: point = 32
   Insn 62: point = 32
  BB 17
   Insn 59: point = 33
  BB 16
   Insn 57: point = 35
   Insn 56: point = 35
   Insn 55: point = 35
  BB 15
   Insn 143: point = 37
   Insn 142: point = 39
   Insn 141: point = 41
   Insn 140: point = 43
   Insn 139: point = 45
   Insn 138: point = 47
   Insn 10: point = 49
   Insn 53: point = 50
  BB 14
   Insn 51: point = 52
   Insn 50: point = 52
  BB 13
   Insn 47: point = 53
  BB 12
   Insn 45: point = 55
   Insn 44: point = 55
   Insn 43: point = 57
   Insn 137: point = 59
  BB 10
   Insn 135: point = 61
   Insn 39: point = 61
   Insn 156: point = 62
   Insn 38: point = 64
   Insn 155: point = 64
   Insn 37: point = 65
   Insn 36: point = 66
   Insn 159: point = 67
   Insn 35: point = 69
   Insn 34: point = 70
   Insn 33: point = 70
   Insn 154: point = 71
   Insn 158: point = 72
  BB 8
   Insn 133: point = 75
   Insn 6: point = 75
  BB 6
   Insn 129: point = 77
  BB 7
   Insn 131: point = 78
   Insn 7: point = 78
  BB 9
   Insn 5: point = 80
  BB 11
   Insn 9: point = 82
   Insn 8: point = 83
  BB 5
   Insn 30: point = 85
   Insn 29: point = 85
   Insn 153: point = 86
   Insn 28: point = 88
  BB 4
   Insn 26: point = 91
   Insn 25: point = 91
  BB 3
   Insn 23: point = 92
   Insn 22: point = 92
   Insn 21: point = 92
  BB 2
   Insn 19: point = 94
   Insn 18: point = 94
   Insn 152: point = 94
   Insn 16: point = 96
   Insn 151: point = 96
   Insn 150: point = 97
   Insn 15: point = 99
   Insn 149: point = 99
   Insn 14: point = 100
   Insn 13: point = 101
   Insn 2: point = 102
 r104: [82..86] [80..80] [77..78] [2..75]
 r140: [68..72]
 r141: [6..10]
 r142: [8..12]
Compressing live ranges: from 103 to 9 - 8%
Ranges after the compression:
 r104: [0..8]
 r140: [2..3]
 r141: [0..1]
 r142: [0..1]
  Slot 0 regnos (width = 4):	 104
  Slot 1 regnos (width = 4):	 141	 140
  Slot 2 regnos (width = 4):	 142
Changing spilled pseudos to memory in insn #153
Changing spilled pseudos to memory in insn #7
Changing spilled pseudos to memory in insn #6
Changing spilled pseudos to memory in insn #5
Changing spilled pseudos to memory in insn #158
Changing spilled pseudos to memory in insn #154
Changing spilled pseudos to memory in insn #159
Changing spilled pseudos to memory in insn #162
Changing spilled pseudos to memory in insn #160
Changing spilled pseudos to memory in insn #163
Changing spilled pseudos to memory in insn #161
Changing spilled pseudos to memory in insn #87
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=16)
Can eliminate 20 to 6 (offset=-28, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) re {*movsi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=64)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=-28, prev_offset=0)
changing reg in insn 44
changing reg in insn 47
changing reg in insn 144
changing reg in insn 9
changing reg in insn 35
changing reg in insn 138
changing reg in insn 75
changing reg in insn 87
changing reg in insn 85
changing reg in insn 10
changing reg in insn 39
changing reg in insn 53
changing reg in insn 139
changing reg in insn 145
changing reg in insn 36
changing reg in insn 13
changing reg in insn 140
changing reg in insn 81
changing reg in insn 78
changing reg in insn 68
changing reg in insn 53
changing reg in insn 50
changing reg in insn 38
changing reg in insn 15
changing reg in insn 43
changing reg in insn 47
changing reg in insn 55
changing reg in insn 59
changing reg in insn 10
changing reg in insn 141
changing reg in insn 146
changing reg in insn 37
changing reg in insn 14
changing reg in insn 142
changing reg in insn 69
changing reg in insn 50
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 25
changing reg in insn 75
changing reg in insn 8
changing reg in insn 39
changing reg in insn 86
changing reg in insn 16
changing reg in insn 147
changing reg in insn 2
changing reg in insn 143
changing reg in insn 88
changing reg in insn 86
changing reg in insn 85
changing reg in insn 37
changing reg in insn 36
changing reg in insn 14
changing reg in insn 13
changing reg in insn 87
changing reg in insn 137
changing reg in insn 43
changing reg in insn 28
changing reg in insn 22
changing reg in insn 21
changing reg in insn 18
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 75
changing reg in insn 87
changing reg in insn 88
changing reg in insn 138
changing reg in insn 144
changing reg in insn 139
changing reg in insn 63
changing reg in insn 55
changing reg in insn 65
changing reg in insn 63
changing reg in insn 140
changing reg in insn 145
changing reg in insn 141
changing reg in insn 62
changing reg in insn 56
changing reg in insn 59
changing reg in insn 62
changing reg in insn 142
changing reg in insn 146
changing reg in insn 65
changing reg in insn 143
changing reg in insn 147
deleting insn with uid = 2.
deleting insn with uid = 150.
deleting insn with uid = 152.
deleting insn with uid = 35.
deleting insn with uid = 156.
deleting insn with uid = 138.
deleting insn with uid = 139.
deleting insn with uid = 140.
deleting insn with uid = 141.
deleting insn with uid = 142.
deleting insn with uid = 143.
deleting insn with uid = 144.
deleting insn with uid = 145.
deleting insn with uid = 146.
deleting insn with uid = 147.


try_optimize_cfg iteration 1

Forwarding edge 5->6 to 10 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 82.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 24 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 24 (    1)


void std::vector<_Tp, _Alloc>::_M_emplace_back_aux(_Args&& ...) [with _Args = {const int&}; _Tp = int; _Alloc = std::allocator<int>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={10d,16u} r1={11d,10u,1e} r2={5d,9u,1e} r3={6d,7u} r4={3d,3u} r5={4d,7u} r6={2d,7u} r7={1d,41u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1e} r17={23d,9u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={3d} r30={3d} r31={3d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 315{203d,109u,3e} in 69{67 regular + 2 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(note 11 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 11 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 4 14 2 (set (reg/f:SI 6 bp [orig:93 D.83068 ] [93])
        (mem/f:SI (reg/f:SI 2 cx [orig:115 this ] [115]) [6 MEM[(int * *)this_2(D)]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 14 13 149 2 (set (reg/f:SI 5 di [orig:98 D.83068 ] [98])
        (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:115 this ] [115])
                (const_int 4 [0x4])) [6 MEM[(int * *)this_2(D) + 4B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 149 14 15 2 (set (reg:SI 1 dx [orig:111 D.83069 ] [111])
        (reg/f:SI 5 di [orig:98 D.83068 ] [98])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (nil))
(insn 15 149 151 2 (parallel [
            (set (reg:SI 1 dx [orig:111 D.83069 ] [111])
                (minus:SI (reg:SI 1 dx [orig:111 D.83069 ] [111])
                    (reg/f:SI 6 bp [orig:93 D.83068 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 263 {*subsi_1}
     (nil))
(insn 151 15 16 2 (set (reg:SI 0 ax [orig:117 D.83069 ] [117])
        (reg:SI 1 dx [orig:111 D.83069 ] [111])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (nil))
(insn 16 151 18 2 (parallel [
            (set (reg:SI 0 ax [orig:117 D.83069 ] [117])
                (ashiftrt:SI (reg:SI 0 ax [orig:117 D.83069 ] [117])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 530 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 1 dx [orig:111 D.83069 ] [111])
            (const_int 4 [0x4]))
        (nil)))
(insn 18 16 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:117 D.83069 ] [117])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_algobase.h:222 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 95)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_algobase.h:222 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 95)
;;  succ:       7 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (parallel [
            (set (reg/v:SI 3 bx [orig:105 __len ] [105])
                (ashift:SI (reg:SI 0 ax [orig:117 D.83069 ] [117])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1427 496 {*ashlsi3_1}
     (nil))
(insn 22 21 23 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:117 D.83069 ] [117])
            (reg/v:SI 3 bx [orig:105 __len ] [105]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 7 {*cmpsi_1}
     (nil))
(jump_insn 23 22 24 3 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 99)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 596 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 99)
;;  succ:       8 [100.0%] 
;;              4 (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 3 bx [orig:105 __len ] [105])
            (const_int 1073741823 [0x3fffffff]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 7 {*cmpsi_1}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 103)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 596 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 103)
;;  succ:       9 [100.0%] 
;;              5 (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 153 5 (parallel [
            (set (reg:SI 0 ax [orig:104 D.83065 ] [104])
                (ashift:SI (reg:SI 0 ax [orig:117 D.83069 ] [117])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 496 {*ashlsi3_1}
     (nil))
(insn 153 28 29 5 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [45 %sfp+-12 S4 A32])
        (reg:SI 0 ax [orig:104 D.83065 ] [104])) 90 {*movsi_internal}
     (nil))
(insn 29 153 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:105 __len ] [105])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:170 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 30 29 128 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 107)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:170 596 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 107)
;;  succ:       6 (FALLTHRU)
;;              11 [100.0%] 
;; lr  out 	 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	
;; live  kill	
(note 128 30 129 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 129 128 130 6 (set (pc)
        (label_ref 31)) 636 {jump}
     (nil)
 -> 31)
;;  succ:       10 [100.0%] 
;; lr  out 	 2 [cx] 7 [sp]
;; live  out 	 2 [cx] 7 [sp]

(barrier 130 129 95)
;; basic block 7, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 95 130 94 7 31 "" [1 uses])
(note 94 95 7 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 7 94 131 7 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [45 %sfp+-12 S4 A32])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_algobase.h:222 90 {*movsi_internal}
     (nil))
(jump_insn 131 7 132 7 (set (pc)
        (label_ref 31)) 636 {jump}
     (nil)
 -> 31)
;;  succ:       10 [100.0%] 
;; lr  out 	 2 [cx] 7 [sp]
;; live  out 	 2 [cx] 7 [sp]

(barrier 132 131 99)
;; basic block 8, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 99 132 98 8 32 "" [1 uses])
(note 98 99 6 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 6 98 133 8 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [45 %sfp+-12 S4 A32])
        (const_int -4 [0xfffffffffffffffc])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 90 {*movsi_internal}
     (nil))
(jump_insn 133 6 134 8 (set (pc)
        (label_ref 31)) 636 {jump}
     (nil)
 -> 31)
;;  succ:       10 [100.0%] 
;; lr  out 	 2 [cx] 7 [sp]
;; live  out 	 2 [cx] 7 [sp]

(barrier 134 133 103)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 103 134 102 9 33 "" [1 uses])
(note 102 103 5 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 5 102 31 9 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [45 %sfp+-12 S4 A32])
        (const_int -4 [0xfffffffffffffffc])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1428 90 {*movsi_internal}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 7 [sp]
;; live  out 	 2 [cx] 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 261, maybe hot
;; Invalid sum of incoming frequencies 900, should be 261
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              7 [100.0%] 
;;              6 [100.0%] 
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp]
;; live  kill	 17 [flags]
(code_label 31 5 32 10 24 "" [3 uses])
(note 32 31 158 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 158 32 154 10 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [45 %sfp+-8 S4 A32])
        (reg/f:SI 2 cx [orig:115 this ] [115])) 90 {*movsi_internal}
     (nil))
(insn 154 158 33 10 (set (reg:SI 0 ax [orig:104 D.83065 ] [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [45 %sfp+-12 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(insn 33 154 34 10 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:104 D.83065 ] [104])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(call_insn 34 33 159 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znwj") [flags 0x43]  <function_decl 01938d00 operator new>) [0 operator new S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 648 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 159 34 36 10 (set (reg/f:SI 2 cx [orig:115 this ] [115])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [45 %sfp+-8 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 36 159 37 10 (set (reg/f:SI 6 bp [orig:93 D.83068 ] [93])
        (mem/f:SI (reg/f:SI 2 cx [orig:115 this ] [115]) [6 MEM[(int * *)this_2(D)]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 37 36 155 10 (set (reg/f:SI 5 di [orig:98 D.83068 ] [98])
        (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:115 this ] [115])
                (const_int 4 [0x4])) [6 MEM[(int * *)this_2(D) + 4B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 155 37 38 10 (set (reg:SI 1 dx [orig:111 D.83069 ] [111])
        (reg/f:SI 5 di [orig:98 D.83068 ] [98])) 90 {*movsi_internal}
     (nil))
(insn 38 155 39 10 (parallel [
            (set (reg:SI 1 dx [orig:111 D.83069 ] [111])
                (minus:SI (reg:SI 1 dx [orig:111 D.83069 ] [111])
                    (reg/f:SI 6 bp [orig:93 D.83068 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) 263 {*subsi_1}
     (nil))
(insn 39 38 135 10 (parallel [
            (set (reg/f:SI 3 bx [orig:109 D.83071 ] [109])
                (plus:SI (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 220 {*addsi_1}
     (nil))
(jump_insn 135 39 136 10 (set (pc)
        (label_ref 40)) 636 {jump}
     (nil)
 -> 40)
;;  succ:       12 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

(barrier 136 135 107)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx]
;; live  in  	 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	
(code_label 107 136 106 11 34 "" [1 uses])
(note 106 107 8 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 8 106 9 11 (set (reg/f:SI 3 bx [orig:109 D.83071 ] [109])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:170 90 {*movsi_internal}
     (nil))
(insn 9 8 40 11 (set (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:170 90 {*movsi_internal}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 900, maybe hot
;; Invalid sum of incoming frequencies 261, should be 900
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 1 [dx] 4 [si] 17 [flags]
;; live  kill	
(code_label 40 9 41 12 25 "" [1 uses])
(note 41 40 42 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 42 41 137 12 NOTE_INSN_DELETED)
(insn 137 42 43 12 (set (reg/v/f:SI 4 si [orig:116 __args#0 ] [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [6 __args#0+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (reg/f:SI 16 argp) [6 __args#0+0 S4 A32])
        (nil)))
(insn 43 137 44 12 (set (reg:SI 4 si [orig:94 D.83069 ] [94])
        (mem:SI (reg/v/f:SI 4 si [orig:116 __args#0 ] [116]) [21 *__args#0_5(D)+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 90 {*movsi_internal}
     (nil))
(insn 44 43 45 12 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:SI (reg:SI 1 dx [orig:111 D.83069 ] [111])
                        (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91]))
                    (const_int 0 [0])))
            (set (reg/f:SI 1 dx [orig:87 D.83066 ] [87])
                (plus:SI (reg:SI 1 dx [orig:111 D.83069 ] [111])
                    (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 228 {*addsi_2}
     (nil))
(jump_insn 45 44 46 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 48)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 596 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 48)
;;  succ:       13 [85.0%]  (FALLTHRU)
;;              14 [15.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 765, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [85.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 46 45 47 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 13 (set (mem:SI (reg/f:SI 1 dx [orig:87 D.83066 ] [87]) [21 *_9+0 S4 A32])
        (reg:SI 4 si [orig:94 D.83069 ] [94])) 90 {*movsi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [15.0%] 
;;              13 [100.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 48 47 49 14 26 "" [1 uses])
(note 49 48 50 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 6 bp [orig:93 D.83068 ] [93])
            (reg/f:SI 5 di [orig:98 D.83068 ] [98]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 7 {*cmpsi_1}
     (nil))
(jump_insn 51 50 52 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 76)
;;  succ:       15 [91.0%]  (FALLTHRU)
;;              20 [9.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [91.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 1 [dx] 3 [bx]
;; live  in  	 0 [ax] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 1 [dx] 3 [bx]
;; live  kill	
(note 52 51 53 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 10 15 (set (reg:SI 1 dx [orig:92 ivtmp.296 ] [92])
        (reg/f:SI 6 bp [orig:93 D.83068 ] [93])) 90 {*movsi_internal}
     (nil))
(insn 10 53 64 15 (set (reg/v/f:SI 3 bx [orig:97 __new_finish ] [97])
        (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 90 {*movsi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;;              18 [91.0%]  (DFS_BACK)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 4 [si] 17 [flags]
;; live  kill	
(code_label 64 10 54 16 29 "" [1 uses])
(note 54 64 55 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 16 (set (reg:SI 4 si [orig:95 D.83069 ] [95])
        (mem:SI (reg:SI 1 dx [orig:92 ivtmp.296 ] [92]) [21 MEM[base: _3, offset: 0]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_construct.h:75 90 {*movsi_internal}
     (nil))
(insn 56 55 57 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:SI 3 bx [orig:97 __new_finish ] [97])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_construct.h:75 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 57 56 58 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 60)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_construct.h:75 596 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 60)
;;  succ:       17 [85.0%]  (FALLTHRU)
;;              18 [15.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 17, loop depth 0, count 0, freq 7735, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [85.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 58 57 59 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 17 (set (mem:SI (reg/v/f:SI 3 bx [orig:97 __new_finish ] [97]) [21 MEM[base: __new_finish_57, offset: 0B]+0 S4 A32])
        (reg:SI 4 si [orig:95 D.83069 ] [95])) 90 {*movsi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 18, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [15.0%] 
;;              17 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 1 [dx] 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 1 [dx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 60 59 61 18 28 "" [1 uses])
(note 61 60 62 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 18 (parallel [
            (set (reg/v/f:SI 3 bx [orig:97 __new_finish ] [97])
                (plus:SI (reg/v/f:SI 3 bx [orig:97 __new_finish ] [97])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 220 {*addsi_1}
     (nil))
(insn 63 62 65 18 (parallel [
            (set (reg:SI 1 dx [orig:92 ivtmp.296 ] [92])
                (plus:SI (reg:SI 1 dx [orig:92 ivtmp.296 ] [92])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 220 {*addsi_1}
     (nil))
(insn 65 63 66 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 5 di [orig:98 D.83068 ] [98])
            (reg:SI 1 dx [orig:92 ivtmp.296 ] [92]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 7 {*cmpsi_1}
     (nil))
(jump_insn 66 65 67 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 64)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_uninitialized.h:74 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 64)
;;  succ:       16 [91.0%]  (DFS_BACK)
;;              19 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       18 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 1 [dx] 3 [bx] 5 [di]
;; live  kill	 17 [flags]
(note 67 66 68 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 19 (parallel [
            (set (reg/f:SI 1 dx [orig:118 D.83066 ] [118])
                (plus:SI (reg/f:SI 6 bp [orig:93 D.83068 ] [93])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 220 {*addsi_1}
     (nil))
(insn 69 68 70 19 (parallel [
            (set (reg:SI 5 di [orig:119 D.83067 ] [119])
                (minus:SI (reg/f:SI 5 di [orig:98 D.83068 ] [98])
                    (reg/f:SI 1 dx [orig:118 D.83066 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) 263 {*subsi_1}
     (nil))
(insn 70 69 71 19 (parallel [
            (set (reg:SI 5 di [orig:120 D.83067 ] [120])
                (lshiftrt:SI (reg:SI 5 di [orig:119 D.83067 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 529 {*lshrsi3_1}
     (nil))
(note 71 70 72 19 NOTE_INSN_DELETED)
(note 72 71 74 19 NOTE_INSN_DELETED)
(note 74 72 75 19 NOTE_INSN_DELETED)
(insn 75 74 76 19 (set (reg/f:SI 3 bx [orig:109 D.83071 ] [109])
        (plus:SI (plus:SI (mult:SI (reg:SI 5 di [orig:120 D.83067 ] [120])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91]))
            (const_int 8 [0x8]))) 213 {*leasi}
     (nil))
;;  succ:       20 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp]

;; basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       19 [100.0%]  (FALLTHRU)
;;              14 [9.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 76 75 77 20 27 "" [1 uses])
(note 77 76 78 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 6 bp [orig:93 D.83068 ] [93])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:177 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 79 78 80 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 83)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:177 596 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 83)
;;  succ:       21 [78.3%]  (FALLTHRU)
;;              22 [21.6%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp]

;; basic block 21, loop depth 0, count 0, freq 705, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [78.3%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	
(note 80 79 162 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 162 80 160 21 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [45 %sfp+-4 S4 A32])
        (reg/f:SI 2 cx [orig:115 this ] [115])) 90 {*movsi_internal}
     (nil))
(insn 160 162 81 21 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [45 %sfp+-8 S4 A32])
        (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91])) 90 {*movsi_internal}
     (nil))
(insn 81 160 82 21 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 6 bp [orig:93 D.83068 ] [93])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
(call_insn 82 81 163 21 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 163 82 161 21 (set (reg/f:SI 2 cx [orig:115 this ] [115])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [45 %sfp+-4 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
(insn 161 163 83 21 (set (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [45 %sfp+-8 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
;;  succ:       22 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp]

;; basic block 22, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 21, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       21 [100.0%]  (FALLTHRU)
;;              20 [21.6%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 83 161 84 22 30 "" [1 uses])
(note 84 83 85 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 22 (set (mem/f:SI (reg/f:SI 2 cx [orig:115 this ] [115]) [6 this_2(D)->D.72607._M_impl._M_start+0 S4 A32])
        (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:441 90 {*movsi_internal}
     (nil))
(insn 86 85 157 22 (set (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:115 this ] [115])
                (const_int 4 [0x4])) [6 this_2(D)->D.72607._M_impl._M_finish+0 S4 A32])
        (reg/f:SI 3 bx [orig:109 D.83071 ] [109])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:442 90 {*movsi_internal}
     (nil))
(note 157 86 164 22 NOTE_INSN_DELETED)
(note 164 157 87 22 NOTE_INSN_DELETED)
(insn 87 164 88 22 (parallel [
            (set (reg:SI 0 ax [123])
                (plus:SI (reg/v/f:SI 0 ax [orig:91 __new_finish ] [91])
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 20 [0x14])) [45 %sfp+-12 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:443 220 {*addsi_1}
     (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:115 this ] [115])
                (const_int 8 [0x8])) [6 this_2(D)->D.72607._M_impl._M_end_of_storage+0 S4 A32])
        (nil)))
(insn 88 87 148 22 (set (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:115 this ] [115])
                (const_int 8 [0x8])) [6 this_2(D)->D.72607._M_impl._M_end_of_storage+0 S4 A32])
        (reg:SI 0 ax [123])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/vector.tcc:443 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 148 88 0 NOTE_INSN_DELETED)

;; Function void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::value_type = int] (_ZNSt6vectorIiSaIiEE9push_backERKi, funcdef_no=5790, decl_uid=72197, symbol_order=3279)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) Uz  (2) i {*sibcall_pop}
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 18
changing reg in insn 15
changing reg in insn 12
changing reg in insn 8
changing reg in insn 11
changing reg in insn 15
changing reg in insn 2
changing reg in insn 25
changing reg in insn 19
changing reg in insn 8
changing reg in insn 7
changing reg in insn 18
changing reg in insn 3
changing reg in insn 24
changing reg in insn 11
changing reg in insn 18
changing reg in insn 19
deleting insn with uid = 2.
deleting insn with uid = 25.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 8 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 8 (    1)


void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::value_type = int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={4d,5u} r1={4d,3u} r2={2d,4u,1e} r6={1d,9u} r7={2d,10u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1u} r17={4d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 126{90d,35u,1e} in 13{12 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 5 4 2 (set (reg/v/f:SI 1 dx [orig:88 __x ] [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [6 __x+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:913 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 0 ax [orig:83 D.83074 ] [83])
        (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:87 this ] [87])
                (const_int 4 [0x4])) [6 this_3(D)->D.72607._M_impl._M_finish+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:915 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:83 D.83074 ] [83])
            (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:87 this ] [87])
                    (const_int 8 [0x8])) [6 this_3(D)->D.72607._M_impl._M_end_of_storage+0 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:915 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:915 596 {*jcc_1}
     (int_list:REG_BR_PROB 672 (nil))
 -> 22)
;;  succ:       3 [93.3%]  (FALLTHRU)
;;              6 [6.7%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [93.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 1 dx [orig:86 D.83075 ] [86])
        (mem:SI (reg/v/f:SI 1 dx [orig:88 __x ] [88]) [21 MEM[(const int &)__x_6(D)]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 90 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:83 D.83074 ] [83])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 16)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:120 596 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 16)
;;  succ:       4 [89.9%]  (FALLTHRU)
;;              5 [10.1%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 8382, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [89.9%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (mem:SI (reg/f:SI 0 ax [orig:83 D.83074 ] [83]) [21 *_4+0 S4 A32])
        (reg:SI 1 dx [orig:86 D.83075 ] [86])) 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 2 [cx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [10.1%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 16 15 17 5 49 "" [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (parallel [
            (set (reg/f:SI 0 ax [89])
                (plus:SI (reg/f:SI 0 ax [orig:83 D.83074 ] [83])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:919 220 {*addsi_1}
     (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:87 this ] [87])
                (const_int 4 [0x4])) [6 this_3(D)->D.72607._M_impl._M_finish+0 S4 A32])
        (nil)))
(insn 19 18 40 5 (set (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:87 this ] [87])
                (const_int 4 [0x4])) [6 this_3(D)->D.72607._M_impl._M_finish+0 S4 A32])
        (reg/f:SI 0 ax [89])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:919 90 {*movsi_internal}
     (nil))
(jump_insn 40 19 41 5 (set (pc)
        (label_ref 39)) 636 {jump}
     (nil)
 -> 39)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

(barrier 41 40 22)
;; basic block 6, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [6.7%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 7 [sp]
;; live  kill	
(code_label 22 41 23 6 48 "" [1 uses])
(note 23 22 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 26 6 (set (mem:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg/v/f:SI 1 dx [orig:88 __x ] [88])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:923 90 {*movsi_internal}
     (nil))
(call_insn/j 26 24 28 6 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_") [flags 0x3]  <function_decl 07016d00 _M_emplace_back_aux>) [0 _M_emplace_back_aux S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:923 647 {*sibcall_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 16 argp) [0  S4 A32]))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

(barrier 28 26 39)
;; basic block 7, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 6, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(code_label 39 28 32 7 54 "" [1 uses])
(note 32 39 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

(note 42 32 0 NOTE_INSN_DELETED)

;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const long long unsigned int, int> >*] (_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E, funcdef_no=5921, decl_uid=70302, symbol_order=3414)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) lzm  (2) i {*call_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) lzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpsi_ccno_1}
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
changing reg in insn 20
changing reg in insn 23
changing reg in insn 2
changing reg in insn 17
changing reg in insn 23
changing reg in insn 3
changing reg in insn 25
changing reg in insn 21
changing reg in insn 20
changing reg in insn 15
changing reg in insn 7
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 6 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 6 count 6 (  1.2)


void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const long long unsigned int, int> >*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 2[cx] 3[bx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={4d,1u} r1={3d} r2={4d,2u} r3={2d,5u,1e} r4={1d,1u} r5={1d,1u} r7={3d,15u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1e} r17={5d,2u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={3d} r30={3d} r31={3d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 190{161d,27u,2e} in 15{13 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/f:SI 5 di [orig:85 this ] [85])
        (reg:SI 2 cx [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1239 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:SI 3 bx [orig:86 __x ] [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [6 __x+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1239 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (reg/f:SI 16 argp) [6 __x+0 S4 A32])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:SI 3 bx [orig:86 __x ] [86])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1243 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 38 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 31)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1243 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 31)
;;  succ:       3 [91.0%]  (FALLTHRU)
;;              4 [9.0%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [91.0%]  (FALLTHRU)
;;              3 [91.0%]  (DFS_BACK)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 38 8 37 3 60 "" [1 uses])
(note 37 38 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 37 16 3 (set (reg/f:SI 0 ax [orig:87 MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B] ] [87])
        (mem/f:SI (plus:SI (reg/v/f:SI 3 bx [orig:86 __x ] [86])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg/v/f:SI 3 bx [orig:86 __x ] [86])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B]+0 S4 A32])
        (nil)))
(insn 16 15 17 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:87 MEM[(struct _Rb_tree_node_base * *)__x_12 + 12B] ] [87])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 90 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:SI 2 cx)
        (reg/f:SI 5 di [orig:85 this ] [85])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 90 {*movsi_internal}
     (nil))
(call_insn 18 17 19 3 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E") [flags 0x3]  <function_decl 06e20200 _M_erase>) [0 _M_erase S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 646 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 19 18 20 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1245 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 20 19 21 3 (set (reg/v/f:SI 4 si [orig:84 __x ] [84])
        (mem/f:SI (plus:SI (reg/v/f:SI 3 bx [orig:86 __x ] [86])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__x_12 + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v/f:SI 3 bx [orig:86 __x ] [86])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
(call_insn 22 21 23 3 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 23 22 25 3 (set (reg/v/f:SI 3 bx [orig:86 __x ] [86])
        (reg/v/f:SI 4 si [orig:84 __x ] [84])) 90 {*movsi_internal}
     (nil))
(insn 25 23 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:SI 3 bx [orig:86 __x ] [86])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1243 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 26 25 31 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 38)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1243 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 38)
;;  succ:       3 [91.0%]  (DFS_BACK)
;;              4 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [9.0%] 
;;              3 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 31 26 32 4 56 "" [1 uses])
(note 32 31 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 43 32 0 NOTE_INSN_DELETED)

;; Function void __tcf_1() (__tcf_1, funcdef_no=6107, decl_uid=80892, symbol_order=3644)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) lzm  (2) i {*call_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
changing reg in insn 6
changing reg in insn 7


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void __tcf_1()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 2[cx] 7[sp] 17[flags]
;;  ref usage 	r0={3d,1u} r1={2d} r2={3d,1u} r7={3d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 96{85d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 7 [sp]
;; live  kill	 17 [flags]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 0 ax [orig:85 MEM[(struct _Rb_tree_node_base * *)&s + 8B] ] [85])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])
        (nil)))
(insn 7 6 8 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:85 MEM[(struct _Rb_tree_node_base * *)&s + 8B] ] [85])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 90 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E") [flags 0x3]  <function_decl 06e20200 _M_erase>) [0 _M_erase S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 646 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 10 9 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:715 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 13 10 0 NOTE_INSN_DELETED)

;; Function std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = long long unsigned int] (_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE24_M_get_insert_unique_posERS1_, funcdef_no=5998, decl_uid=70242, symbol_order=3498)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-28, prev_offset=0)
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
      Removing equiv init insn 3 (freq=90)
    3: r94:SI=[argp:SI+0x30]
      REG_EQUIV [argp:SI]
deleting insn with uid = 3.
      Creating newreg=110 from oldreg=93, assigning class GENERAL_REGS to address r110
	   Change to class INDEX_REGS for r110
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
   13: r86:SI=[r110:SI+0x8]
    Inserting insn reload before:
  141: r110:SI=r93:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=111 from oldreg=93, assigning class GENERAL_REGS to r111
   17: {r86:SI=r111:SI+0x4;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  142: r111:SI=r93:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 107 r94:SI -- no change
Changing pseudo 94 in address of insn 107 on equiv [argp:SI+0x30]
      Creating newreg=112, assigning class GENERAL_REGS to address r112
	   Change to class INDEX_REGS for r112
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
  107: r96:SI=[r112:SI]
    Inserting insn reload before:
  143: r112:SI=[argp:SI+0x30]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 108 r94:SI+0x4 -- no change
Changing pseudo 94 in address of insn 108 on equiv [argp:SI+0x30]
      Creating newreg=113, assigning class GENERAL_REGS to address r113
	   Change to class INDEX_REGS for r113
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
  108: r97:SI=[r113:SI+0x4]
    Inserting insn reload before:
  144: r113:SI=[argp:SI+0x30]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) r {*cmpsi_ccno_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) q {*cmpqi_ccno_1}
      Creating newreg=114 from oldreg=93, assigning class GENERAL_REGS to address r114
	   Change to class INDEX_REGS for r114
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
   50: flags:CCZ=cmp([r114:SI+0xc],r86:SI)
      REG_DEAD r93:SI
    Inserting insn reload before:
  145: r114:SI=r93:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) lzw {*call_value}
Changing address in insn 111 r94:SI -- no change
Changing pseudo 94 in address of insn 111 on equiv [argp:SI+0x30]
      Creating newreg=115, assigning class GENERAL_REGS to address r115
	   Change to class INDEX_REGS for r115
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
  111: r96:SI=[r115:SI]
    Inserting insn reload before:
  146: r115:SI=[argp:SI+0x30]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 112 r94:SI+0x4 -- no change
Changing pseudo 94 in address of insn 112 on equiv [argp:SI+0x30]
      Creating newreg=116, assigning class GENERAL_REGS to address r116
	   Change to class INDEX_REGS for r116
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
  112: r97:SI=[r116:SI+0x4]
      REG_DEAD r94:SI
    Inserting insn reload before:
  147: r116:SI=[argp:SI+0x30]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=117 from oldreg=93, assigning class GENERAL_REGS to inheritance r117
    Original reg change 93->117 (bb2):
    2: r117:SI=cx:SI
      REG_DEAD cx:SI
    Add original<-inheritance after:
  148: r93:SI=r117:SI

    Inheritance reuse change 93->117 (bb2):
  141: r110:SI=r117:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21

********** Pseudo live ranges #1: **********

  BB 21
   Insn 89: point = 0
   Insn 118: point = 0
   Insn 117: point = 1
  BB 19
   Insn 129: point = 3
   Insn 75: point = 3
   Insn 74: point = 5
  BB 14
   Insn 127: point = 7
   Insn 54: point = 7
   Insn 53: point = 9
  BB 20
   Insn 81: point = 11
   Insn 80: point = 12
  BB 18
   Insn 71: point = 15
   Insn 70: point = 15
  BB 17
   Insn 69: point = 17
  BB 16
   Insn 67: point = 18
   Insn 66: point = 18
  BB 15
   Insn 10: point = 20
   Insn 9: point = 22
   Insn 114: point = 24
   Insn 113: point = 25
   Insn 112: point = 26
   Insn 147: point = 28
   Insn 111: point = 29
   Insn 146: point = 31
   Insn 61: point = 32
   Insn 60: point = 33
   Insn 59: point = 33
  BB 13
   Insn 51: point = 34
   Insn 50: point = 34
   Insn 145: point = 35
  BB 3
   Insn 121: point = 38
   Insn 17: point = 38
   Insn 142: point = 40
  BB 12
   Insn 46: point = 42
   Insn 45: point = 42
   Insn 8: point = 43
   Insn 139: point = 44
   Insn 138: point = 46
   Insn 137: point = 48
   Insn 136: point = 50
   Insn 135: point = 52
   Insn 134: point = 54
  BB 11
   Insn 43: point = 57
   Insn 42: point = 57
  BB 9
   Insn 125: point = 58
   Insn 6: point = 58
   Insn 33: point = 59
  BB 10
   Insn 7: point = 61
   Insn 38: point = 62
  BB 8
   Insn 30: point = 64
   Insn 29: point = 64
  BB 7
   Insn 28: point = 65
  BB 6
   Insn 26: point = 66
   Insn 25: point = 66
   Insn 110: point = 66
   Insn 109: point = 67
  BB 4
   Insn 123: point = 69
   Insn 133: point = 69
   Insn 132: point = 71
   Insn 131: point = 73
   Insn 108: point = 75
   Insn 144: point = 77
   Insn 107: point = 78
   Insn 143: point = 80
  BB 2
   Insn 15: point = 82
   Insn 14: point = 82
   Insn 13: point = 82
   Insn 141: point = 84
	   Creating copy r110<-r117@90
   Insn 148: point = 86
   Insn 2: point = 87
	Hard reg 2 is preferable by r117 with profit 90
  BB 5
   Insn 5: point = 89
 r83: [42..54]
 r84: [90..91] [61..62] [57..59]
 r86: [74..82] [42..52] [23..38] [13..20] [8..10]
 r88: [21..32]
 r90: [42..43] [15..22] [4..6]
 r93: [89..91] [36..86]
 r94: [34..91]
 r96: [72..78] [42..50] [15..29]
 r97: [70..75] [42..48] [18..26]
 r98: [42..46] [15..25]
 r99: [42..44] [18..24]
 r100: [11..12] [7..9] [1..5]
 r101: [11..11] [7..7] [0..3]
 r104: [89..89] [53..73]
 r105: [89..91] [51..71]
 r106: [89..91] [49..69]
 r107: [61..61] [55..58]
 r108: [47..67]
 r109: [45..66]
 r110: [83..84]
 r111: [39..40]
 r112: [79..80]
 r113: [76..77]
 r114: [34..35]
 r115: [30..31]
 r116: [27..28]
 r117: [85..87]
Compressing live ranges: from 92 to 58 - 63%
Ranges after the compression:
 r83: [25..36]
 r84: [56..57] [37..40]
 r86: [45..50] [25..34] [13..22] [9..10] [5..6]
 r88: [11..18]
 r90: [25..26] [9..12] [2..3]
 r93: [21..57]
 r94: [19..57]
 r96: [43..48] [25..32] [9..16]
 r97: [41..46] [25..30] [9..14]
 r98: [25..28] [9..14]
 r99: [25..26] [9..14]
 r100: [0..8]
 r101: [7..7] [4..4] [0..1]
 r104: [55..55] [35..44]
 r105: [55..57] [33..42]
 r106: [55..57] [31..40]
 r107: [37..39]
 r108: [29..40]
 r109: [27..40]
 r110: [51..52]
 r111: [23..24]
 r112: [49..50]
 r113: [47..48]
 r114: [19..20]
 r115: [17..18]
 r116: [15..16]
 r117: [53..54]

********** Assignment #1: **********

	 Assigning to 110 (cl=INDEX_REGS, orig=93, freq=180, tfirst=110, tfreq=270)...
	   Assign 0 to reload r110 (freq=180)
	Hard reg 2 is preferable by r117 with profit 90
	Hard reg 0 is preferable by r117 with profit 90
	 Assigning to 117 (cl=GENERAL_REGS, orig=93, freq=270, tfirst=110, tfreq=270)...
	   Assign 0 to inheritance r117 (freq=270)
	 Assigning to 112 (cl=INDEX_REGS, orig=112, freq=162, tfirst=112, tfreq=162)...
	   Assign 0 to reload r112 (freq=162)
	 Assigning to 113 (cl=INDEX_REGS, orig=113, freq=162, tfirst=113, tfreq=162)...
	   Assign 0 to reload r113 (freq=162)
	 Assigning to 114 (cl=INDEX_REGS, orig=93, freq=90, tfirst=114, tfreq=90)...
	   Assign 0 to reload r114 (freq=90)
	 Assigning to 115 (cl=INDEX_REGS, orig=115, freq=80, tfirst=115, tfreq=80)...
	   Assign 4 to reload r115 (freq=80)
	 Assigning to 116 (cl=INDEX_REGS, orig=116, freq=80, tfirst=116, tfreq=80)...
	   Assign 1 to reload r116 (freq=80)
	 Assigning to 111 (cl=GENERAL_REGS, orig=93, freq=16, tfirst=111, tfreq=16)...
	   Assign 0 to reload r111 (freq=16)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 1 out of 1 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) m  (1) re {*movsi_internal}
  Slot 0 regnos (width = 4):	 90
  Slot 1 regnos (width = 4):	 93
Changing spilled pseudos to memory in insn #148
Changing spilled pseudos to memory in insn #142
Changing spilled pseudos to memory in insn #8
Changing spilled pseudos to memory in insn #145
Changing spilled pseudos to memory in insn #9
Changing spilled pseudos to memory in insn #75
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=16)
Can eliminate 20 to 6 (offset=-28, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) m  (1) re {*movsi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=64)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=-28, prev_offset=0)
changing reg in insn 134
changing reg in insn 45
changing reg in insn 33
changing reg in insn 38
changing reg in insn 5
changing reg in insn 42
changing reg in insn 135
changing reg in insn 10
changing reg in insn 17
changing reg in insn 13
changing reg in insn 131
changing reg in insn 50
changing reg in insn 54
changing reg in insn 80
changing reg in insn 8
changing reg in insn 9
changing reg in insn 59
changing reg in insn 14
changing reg in insn 61
changing reg in insn 10
changing reg in insn 114
changing reg in insn 113
changing reg in insn 136
changing reg in insn 111
changing reg in insn 107
changing reg in insn 132
changing reg in insn 70
changing reg in insn 137
changing reg in insn 112
changing reg in insn 108
changing reg in insn 133
changing reg in insn 66
changing reg in insn 138
changing reg in insn 113
changing reg in insn 70
changing reg in insn 139
changing reg in insn 114
changing reg in insn 66
changing reg in insn 80
changing reg in insn 74
changing reg in insn 53
changing reg in insn 117
changing reg in insn 54
changing reg in insn 81
changing reg in insn 75
changing reg in insn 118
changing reg in insn 131
changing reg in insn 5
changing reg in insn 135
changing reg in insn 110
changing reg in insn 109
changing reg in insn 33
changing reg in insn 38
changing reg in insn 132
changing reg in insn 136
changing reg in insn 29
changing reg in insn 133
changing reg in insn 137
changing reg in insn 25
changing reg in insn 6
changing reg in insn 7
changing reg in insn 134
changing reg in insn 109
changing reg in insn 138
changing reg in insn 29
changing reg in insn 110
changing reg in insn 139
changing reg in insn 25
deleting insn with uid = 131.
deleting insn with uid = 132.
deleting insn with uid = 133.
deleting insn with uid = 134.
deleting insn with uid = 135.
deleting insn with uid = 136.
deleting insn with uid = 137.
deleting insn with uid = 138.
deleting insn with uid = 139.
deleting insn with uid = 118.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 60.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 31 count 24 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 31 count 24 (  1.1)


std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = long long unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 1 [dx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={15d,16u} r1={8d,4u} r2={4d,3u} r3={4d,11u} r4={3d,3u} r5={2d,2u} r6={2d,2u} r7={1d,34u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={10d,10u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={2d} r30={2d} r31={2d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 206{121d,85u,0e} in 61{60 regular + 1 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags]
;; live  kill	
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 148 2 (set (reg/f:SI 0 ax [orig:93 this ] [93])
        (reg:SI 2 cx [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1435 90 {*movsi_internal}
     (nil))
(insn 148 2 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [45 %sfp+-4 S4 A32])
        (reg/f:SI 0 ax [orig:93 this ] [93])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1435 90 {*movsi_internal}
     (nil))
(note 3 148 4 2 NOTE_INSN_DELETED)
(note 4 3 141 2 NOTE_INSN_FUNCTION_BEG)
(insn 141 4 13 2 (set (reg/f:SI 0 ax [orig:93 this ] [93])
        (reg/f:SI 0 ax [orig:93 this ] [93])) 90 {*movsi_internal}
     (nil))
(insn 13 141 14 2 (set (reg/f:SI 3 bx [orig:86 __j ] [86])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:93 this ] [93])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)this_6(D) + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 3 bx [orig:86 __j ] [86])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1442 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1442 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 20)
;;  succ:       4 [91.0%] 
;;              3 [9.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [9.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	 17 [flags]
(note 16 15 142 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 142 16 17 3 (set (reg/f:SI 0 ax [orig:93 this ] [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [45 %sfp+-4 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:529 90 {*movsi_internal}
     (nil))
(insn 17 142 121 3 (parallel [
            (set (reg/f:SI 3 bx [orig:86 __j ] [86])
                (plus:SI (reg/f:SI 0 ax [orig:93 this ] [93])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:529 220 {*addsi_1}
     (nil))
(jump_insn 121 17 122 3 (set (pc)
        (label_ref 47)) 636 {jump}
     (nil)
 -> 47)
;;  succ:       13 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 122 121 20)
;; basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [91.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 6 [bp]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 6 [bp]
;; live  kill	
(code_label 20 122 21 4 66 "" [1 uses])
(note 21 20 143 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 143 21 107 4 (set (reg:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [6 __k+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 107 143 144 4 (set (reg:SI 6 bp [orig:96 D.83085 ] [96])
        (mem:SI (reg:SI 0 ax [112]) [34 MEM[(const long long unsigned int &)__k_8(D)]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 144 107 108 4 (set (reg:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [6 __k+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 108 144 123 4 (set (reg:SI 5 di [orig:97 D.83085+4 ] [97])
        (mem:SI (plus:SI (reg:SI 0 ax [113])
                (const_int 4 [0x4])) [34 MEM[(const long long unsigned int &)__k_8(D)]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(jump_insn 123 108 124 4 (set (pc)
        (label_ref 41)) 636 {jump}
     (nil)
 -> 41)
;;  succ:       6 [100.0%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

(barrier 124 123 94)
;; basic block 5, loop depth 0, count 0, freq 8281, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [91.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 94 124 93 5 77 "" [1 uses])
(note 93 94 5 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 5 93 41 5 (set (reg/f:SI 3 bx [orig:86 __j ] [86])
        (reg/f:SI 0 ax [orig:84 __j ] [84])) 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(code_label 41 5 23 6 71 "" [1 uses])
(note 23 41 109 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 109 23 110 6 (set (reg:SI 4 si [orig:98 D.83085 ] [98])
        (mem:SI (plus:SI (reg/f:SI 3 bx [orig:86 __j ] [86])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__j_43 + 16]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 110 109 25 6 (set (reg:SI 2 cx [orig:99 D.83085+4 ] [99])
        (mem:SI (plus:SI (reg/f:SI 3 bx [orig:86 __j ] [86])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__j_43 + 16]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 25 110 26 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 2 cx [orig:99 D.83085+4 ] [99])
            (reg:SI 5 di [orig:97 D.83085+4 ] [97]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 7 {*cmpsi_1}
     (nil))
(jump_insn 26 25 99 6 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 36)
;;  succ:       10 [50.0%] 
;;              7 [50.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]

;; basic block 7, loop depth 0, count 0, freq 4550, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [50.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  gen 	
;; live  kill	
(note 99 26 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 28 99 100 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 105)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 105)
;;  succ:       9 [50.0%] 
;;              8 [50.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 2275, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [50.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 100 28 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 100 30 8 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 4 si [orig:98 D.83085 ] [98])
            (reg:SI 6 bp [orig:96 D.83085 ] [96]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 7 {*cmpsi_1}
     (nil))
(jump_insn 30 29 105 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 36)
;;  succ:       10 [50.0%] 
;;              9 [50.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 4550, maybe hot
;; Invalid sum of incoming frequencies 3413, should be 4550
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [50.0%]  (FALLTHRU)
;;              7 [50.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 105 30 32 9 79 "" [1 uses])
(note 32 105 33 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 6 9 (set (reg/f:SI 0 ax [orig:84 __j ] [84])
        (mem/f:SI (plus:SI (reg/f:SI 3 bx [orig:86 __j ] [86])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__j_43 + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 6 33 125 9 (set (reg/v:QI 1 dx [orig:83 __comp ] [83])
        (const_int 1 [0x1])) 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(jump_insn 125 6 126 9 (set (pc)
        (label_ref 39)) 636 {jump}
     (nil)
 -> 39)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

(barrier 126 125 36)
;; basic block 10, loop depth 0, count 0, freq 4550, maybe hot
;; Invalid sum of incoming frequencies 5688, should be 4550
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [50.0%] 
;;              8 [50.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 36 126 37 10 68 "" [2 uses])
(note 37 36 38 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 7 10 (set (reg/f:SI 0 ax [orig:84 __j ] [84])
        (mem/f:SI (plus:SI (reg/f:SI 3 bx [orig:86 __j ] [86])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__j_43 + 12B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 7 38 39 10 (set (reg/v:QI 1 dx [orig:83 __comp ] [83])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1446 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 11, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 39 7 40 11 70 "" [1 uses])
(note 40 39 42 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 42 40 43 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:84 __j ] [84])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1442 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 43 42 44 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 94)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1442 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 94)
;;  succ:       5 [91.0%] 
;;              12 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 44 43 8 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 8 44 45 12 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [45 %sfp+-8 S4 A32])
        (reg/f:SI 3 bx [orig:86 __j ] [86])) 90 {*movsi_internal}
     (nil))
(insn 45 8 46 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 1 dx [orig:83 __comp ] [83])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1449 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 46 45 47 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 64)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1449 596 {*jcc_1}
     (int_list:REG_BR_PROB 5495 (nil))
 -> 64)
;;  succ:       13 [45.0%]  (FALLTHRU)
;;              16 [55.0%] 
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 450, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [45.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 47 46 48 13 67 "" [1 uses])
(note 48 47 49 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(note 49 48 145 13 NOTE_INSN_DELETED)
(insn 145 49 50 13 (set (reg/f:SI 0 ax [orig:93 this ] [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [45 %sfp+-4 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1451 90 {*movsi_internal}
     (nil))
(insn 50 145 51 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:93 this ] [93])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)this_6(D) + 12B]+0 S4 A32])
            (reg/f:SI 3 bx [orig:86 __j ] [86]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1451 7 {*cmpsi_1}
     (nil))
(jump_insn 51 50 52 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1451 596 {*jcc_1}
     (int_list:REG_BR_PROB 8986 (nil))
 -> 57)
;;  succ:       14 [10.1%]  (FALLTHRU)
;;              15 [89.9%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [10.1%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(note 52 51 53 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 14 (set (reg:SI 0 ax [orig:100 D.81357 ] [100])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1452 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 54 53 127 14 (set (reg:SI 1 dx [orig:101 D.81357+4 ] [101])
        (reg/f:SI 3 bx [orig:86 __j ] [86])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1452 90 {*movsi_internal}
     (nil))
(jump_insn 127 54 128 14 (set (pc)
        (label_ref 82)) 636 {jump}
     (nil)
 -> 82)
;;  succ:       21 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 128 127 57)
;; basic block 15, loop depth 0, count 0, freq 404, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [89.9%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp]
;; live  kill	
(code_label 57 128 58 15 73 "" [1 uses])
(note 58 57 59 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 15 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 3 bx [orig:86 __j ] [86])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (nil))
(call_insn/i 60 59 61 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base") [flags 0x43]  <function_decl 06b62500 _Rb_tree_decrement>) [0 _Rb_tree_decrement S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 61 60 146 15 (set (reg/f:SI 0 ax [orig:88 __j ] [88])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (nil))
(insn 146 61 111 15 (set (reg:SI 4 si [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [6 __k+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 111 146 147 15 (set (reg:SI 6 bp [orig:96 D.83085 ] [96])
        (mem:SI (reg:SI 4 si [115]) [34 MEM[(const long long unsigned int &)__k_8(D)]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 147 111 112 15 (set (reg:SI 1 dx [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [6 __k+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 112 147 113 15 (set (reg:SI 5 di [orig:97 D.83085+4 ] [97])
        (mem:SI (plus:SI (reg:SI 1 dx [116])
                (const_int 4 [0x4])) [34 MEM[(const long long unsigned int &)__k_8(D)]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 113 112 114 15 (set (reg:SI 4 si [orig:98 D.83085 ] [98])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:88 __j ] [88])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__j_25 + 16]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 114 113 9 15 (set (reg:SI 2 cx [orig:99 D.83085+4 ] [99])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:88 __j ] [88])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__j_25 + 16]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 9 114 10 15 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [45 %sfp+-8 S4 A32])
        (reg/f:SI 3 bx [orig:86 __j ] [86])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (nil))
(insn 10 9 64 15 (set (reg/f:SI 3 bx [orig:86 __j ] [86])
        (reg/f:SI 0 ax [orig:88 __j ] [88])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 854, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [55.0%] 
;;              15 [100.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 2 [cx] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 64 10 65 16 72 "" [1 uses])
(note 65 64 66 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 16 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 2 cx [orig:99 D.83085+4 ] [99])
            (reg:SI 5 di [orig:97 D.83085+4 ] [97]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 7 {*cmpsi_1}
     (nil))
(jump_insn 67 66 102 16 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 78)
;;  succ:       20 [50.0%] 
;;              17 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags]

;; basic block 17, loop depth 0, count 0, freq 427, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [50.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags]
;; live  gen 	
;; live  kill	
(note 102 67 69 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(jump_insn 69 102 103 17 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 106)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 106)
;;  succ:       19 [50.0%] 
;;              18 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp]

;; basic block 18, loop depth 0, count 0, freq 214, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       17 [50.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; lr  use 	 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 103 69 70 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 70 103 71 18 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 4 si [orig:98 D.83085 ] [98])
            (reg:SI 6 bp [orig:96 D.83085 ] [96]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 7 {*cmpsi_1}
     (nil))
(jump_insn 71 70 106 18 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1456 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 78)
;;  succ:       20 [50.0%] 
;;              19 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 333, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       18 [50.0%]  (FALLTHRU)
;;              17 [50.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 106 71 73 19 80 "" [1 uses])
(note 73 106 74 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 19 (set (reg:SI 0 ax [orig:100 D.81357 ] [100])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1457 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 75 74 129 19 (set (reg:SI 1 dx [orig:101 D.81357+4 ] [101])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [45 %sfp+-8 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1457 90 {*movsi_internal}
     (nil))
(jump_insn 129 75 130 19 (set (pc)
        (label_ref 82)) 636 {jump}
     (nil)
 -> 82)
;;  succ:       21 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 130 129 78)
;; basic block 20, loop depth 0, count 0, freq 521, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [50.0%] 
;;              18 [50.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 78 130 79 20 75 "" [2 uses])
(note 79 78 80 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 20 (set (reg:SI 0 ax [orig:100 D.81357 ] [100])
        (reg/f:SI 3 bx [orig:86 __j ] [86])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1458 90 {*movsi_internal}
     (nil))
(insn 81 80 82 20 (set (reg:SI 1 dx [orig:101 D.81357+4 ] [101])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1458 90 {*movsi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

;; basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 20, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 1 [dx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 82 81 83 21 74 "" [2 uses])
(note 83 82 117 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 117 83 89 21 (set (reg:SI 0 ax)
        (reg:SI 0 ax [orig:100 D.81357 ] [100])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1459 90 {*movsi_internal}
     (nil))
(insn 89 117 140 21 (use (reg/i:DI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1459 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(note 140 89 0 NOTE_INSN_DELETED)

;; Function std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const key_type&) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = long long unsigned int] (_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_, funcdef_no=5939, decl_uid=70248, symbol_order=3443)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-28, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) g {*movsi_internal}
      Removing equiv init insn 4 (freq=1000)
    4: r103:SI=[argp:SI+0x34]
      REG_EQUIV [argp:SI+0x4]
deleting insn with uid = 4.
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 9:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 18 r103:SI+0x4 -- no change
Changing pseudo 103 in address of insn 18 on equiv [argp:SI+0x34]
      Creating newreg=119, assigning class GENERAL_REGS to address r119
	   Change to class INDEX_REGS for r119
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) rm  (1) re {*cmpsi_1}
      Creating newreg=120, assigning class GENERAL_REGS to r120
   18: flags:CC=cmp([r85:SI+0x14],r120:SI)
    Inserting insn reload before:
  206: r119:SI=[argp:SI+0x34]
  207: r120:SI=[r119:SI+0x4]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 22 r103:SI -- no change
Changing pseudo 103 in address of insn 22 on equiv [argp:SI+0x34]
      Creating newreg=121, assigning class GENERAL_REGS to address r121
	   Change to class INDEX_REGS for r121
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*cmpsi_1}
   22: flags:CC=cmp(r115:SI,[r121:SI])
      REG_DEAD r115:SI
    Inserting insn reload before:
  208: r121:SI=[argp:SI+0x34]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 167 r103:SI -- no change
Changing pseudo 103 in address of insn 167 on equiv [argp:SI+0x34]
      Creating newreg=122, assigning class GENERAL_REGS to address r122
	   Change to class INDEX_REGS for r122
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
  167: r107:SI=[r122:SI]
    Inserting insn reload before:
  209: r122:SI=[argp:SI+0x34]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
Changing address in insn 168 r103:SI+0x4 -- no change
Changing pseudo 103 in address of insn 168 on equiv [argp:SI+0x34]
      Creating newreg=123, assigning class GENERAL_REGS to address r123
	   Change to class INDEX_REGS for r123
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
  168: r108:SI=[r123:SI+0x4]
    Inserting insn reload before:
  210: r123:SI=[argp:SI+0x34]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) lzw {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
	 Choosing alt 0 in insn 180:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
      Creating newreg=124 from oldreg=111, assigning class GENERAL_REGS to r124
  180: r124:SI={(flags:CCZ!=0)?r102:SI:r124:SI}
      REG_DEAD r117:SI
      REG_DEAD flags:CCZ
    Inserting insn reload before:
  211: r124:SI=r117:SI
    Inserting insn reload after:
  212: r111:SI=r124:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) r  (2) 0  (3) rm {*movsicc_noc}
Changing pseudo 103 in operand 1 of insn 76 on equiv [argp:SI+0x34]
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=125, assigning class GENERAL_REGS to r125
   76: r125:SI=[argp:SI+0x34]
      REG_DEAD r103:SI
    Inserting insn reload after:
  213: [sp:SI]=r125:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=610,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) lzm  (3) i {*call_value_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (1) lzw {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) r  (2) 0  (3) rm {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28

********** Pseudo live ranges #1: **********

  BB 28
   Insn 144: point = 0
   Insn 176: point = 0
   Insn 175: point = 1
  BB 26
   Insn 201: point = 3
   Insn 130: point = 3
   Insn 129: point = 4
  BB 17
   Insn 195: point = 7
   Insn 172: point = 7
   Insn 171: point = 8
   Insn 79: point = 9
   Insn 78: point = 9
   Insn 77: point = 9
   Insn 213: point = 10
   Insn 76: point = 11
  BB 7
   Insn 189: point = 13
  BB 16
   Insn 193: point = 14
   Insn 182: point = 14
   Insn 181: point = 16
   Insn 212: point = 16
	Hard reg 0 is preferable by r124 with profit 302
   Insn 180: point = 18
   Insn 211: point = 18
	Hard reg 0 is preferable by r124 with profit 302
	Hard reg 2 is preferable by r124 with profit 302
   Insn 204: point = 20
   Insn 178: point = 21
  BB 15
   Insn 58: point = 22
   Insn 57: point = 22
  BB 14
   Insn 56: point = 24
  BB 13
   Insn 54: point = 25
   Insn 53: point = 25
   Insn 52: point = 26
   Insn 51: point = 27
   Insn 50: point = 27
  BB 25
   Insn 199: point = 28
   Insn 187: point = 28
   Insn 186: point = 30
   Insn 185: point = 30
   Insn 203: point = 32
   Insn 183: point = 33
  BB 24
   Insn 111: point = 34
   Insn 110: point = 34
  BB 23
   Insn 109: point = 36
  BB 22
   Insn 107: point = 37
   Insn 106: point = 37
   Insn 105: point = 38
   Insn 104: point = 39
   Insn 103: point = 39
  BB 12
   Insn 191: point = 40
   Insn 45: point = 40
   Insn 44: point = 41
  BB 11
   Insn 42: point = 44
   Insn 41: point = 44
  BB 21
   Insn 197: point = 45
   Insn 98: point = 45
   Insn 97: point = 47
  BB 20
   Insn 95: point = 49
   Insn 94: point = 49
  BB 19
   Insn 90: point = 50
   Insn 89: point = 50
  BB 18
   Insn 88: point = 52
   Insn 87: point = 52
  BB 10
   Insn 37: point = 54
   Insn 36: point = 54
  BB 9
   Insn 35: point = 55
  BB 8
   Insn 33: point = 56
   Insn 32: point = 56
   Insn 170: point = 56
   Insn 169: point = 57
   Insn 168: point = 58
   Insn 210: point = 60
   Insn 167: point = 61
   Insn 209: point = 63
  BB 27
   Insn 139: point = 65
   Insn 138: point = 67
  BB 6
   Insn 23: point = 69
   Insn 22: point = 69
   Insn 208: point = 70
  BB 5
   Insn 21: point = 72
  BB 4
   Insn 19: point = 73
   Insn 18: point = 73
   Insn 207: point = 74
   Insn 206: point = 76
   Insn 165: point = 77
   Insn 16: point = 78
  BB 3
   Insn 14: point = 80
   Insn 13: point = 80
  BB 2
   Insn 11: point = 81
   Insn 10: point = 81
   Insn 9: point = 82
   Insn 3: point = 83
   Insn 2: point = 84
 r85: [66..78]
 r97: [15..26]
 r98: [29..38]
 r101: [69..84] [49..64] [44..44] [34..39] [22..27] [9..13]
 r102: [81..83] [46..64] [42..44] [29..39] [15..27] [5..6]
 r103: [69..85] [49..64] [44..44] [34..39] [22..27] [13..13]
 r104: [81..82]
 r107: [49..61] [44..44] [34..39] [22..27]
 r108: [49..58] [44..44] [37..39] [25..27]
 r109: [50..57]
 r110: [52..56]
 r111: [65..67] [45..47] [40..41] [28..30] [14..16] [7..8] [1..4]
 r112: [65..65] [45..45] [40..40] [28..28] [14..14] [7..7] [0..3]
 r115: [69..77]
 r117: [19..20]
 r118: [31..32]
 r119: [75..76]
 r120: [73..74]
 r121: [69..70]
 r122: [62..63]
 r123: [59..60]
 r124: [17..18]
 r125: [10..11]
Compressing live ranges: from 86 to 49 - 56%
Ranges after the compression:
 r85: [39..46]
 r97: [10..17]
 r98: [19..24]
 r101: [41..48] [32..37] [28..28] [23..24] [16..17] [6..8]
 r102: [47..48] [30..37] [27..28] [19..24] [10..17] [2..3]
 r103: [41..48] [32..37] [28..28] [23..24] [16..17] [8..8]
 r104: [47..48]
 r107: [32..35] [28..28] [23..24] [16..17]
 r108: [32..33] [28..28] [23..24] [16..17]
 r109: [32..33]
 r110: [32..33]
 r111: [38..40] [29..31] [25..26] [18..20] [9..11] [4..5] [0..1]
 r112: [38..38] [29..29] [25..25] [18..18] [9..9] [4..4] [0..1]
 r115: [41..46]
 r117: [14..15]
 r118: [21..22]
 r119: [45..46]
 r120: [43..44]
 r121: [41..42]
 r122: [36..37]
 r123: [34..35]
 r124: [12..13]
 r125: [6..7]

********** Assignment #1: **********

	 Assigning to 122 (cl=INDEX_REGS, orig=122, freq=1700, tfirst=122, tfreq=1700)...
	   Assign 0 to reload r122 (freq=1700)
	 Assigning to 123 (cl=INDEX_REGS, orig=123, freq=1700, tfirst=123, tfreq=1700)...
	   Assign 0 to reload r123 (freq=1700)
	 Assigning to 124 (cl=GENERAL_REGS, orig=111, freq=906, tfirst=124, tfreq=906)...
	   Assign 0 to reload r124 (freq=906)
	 Assigning to 125 (cl=GENERAL_REGS, orig=125, freq=462, tfirst=125, tfreq=462)...
	   Assign 0 to reload r125 (freq=462)
	 Assigning to 119 (cl=INDEX_REGS, orig=119, freq=150, tfirst=119, tfreq=150)...
	   Assign 5 to reload r119 (freq=150)
	 Assigning to 120 (cl=GENERAL_REGS, orig=120, freq=150, tfirst=120, tfreq=150)...
	   Assign 5 to reload r120 (freq=150)
	 Assigning to 121 (cl=INDEX_REGS, orig=121, freq=36, tfirst=121, tfreq=36)...
	   Assign 5 to reload r121 (freq=36)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=16)
Can eliminate 20 to 6 (offset=-28, prev_offset=0)
changing reg in insn 16
changing reg in insn 18
changing reg in insn 139
changing reg in insn 165
changing reg in insn 52
changing reg in insn 182
changing reg in insn 181
changing reg in insn 178
changing reg in insn 57
changing reg in insn 53
changing reg in insn 105
changing reg in insn 187
changing reg in insn 185
changing reg in insn 110
changing reg in insn 106
changing reg in insn 2
changing reg in insn 94
changing reg in insn 41
changing reg in insn 77
changing reg in insn 16
changing reg in insn 13
changing reg in insn 9
changing reg in insn 3
changing reg in insn 94
changing reg in insn 41
changing reg in insn 187
changing reg in insn 182
changing reg in insn 180
changing reg in insn 186
changing reg in insn 183
changing reg in insn 170
changing reg in insn 169
changing reg in insn 129
changing reg in insn 103
changing reg in insn 98
changing reg in insn 50
changing reg in insn 44
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 167
changing reg in insn 110
changing reg in insn 89
changing reg in insn 57
changing reg in insn 36
changing reg in insn 168
changing reg in insn 106
changing reg in insn 87
changing reg in insn 53
changing reg in insn 32
changing reg in insn 169
changing reg in insn 89
changing reg in insn 36
changing reg in insn 170
changing reg in insn 87
changing reg in insn 32
changing reg in insn 185
changing reg in insn 129
changing reg in insn 44
changing reg in insn 138
changing reg in insn 97
changing reg in insn 171
changing reg in insn 45
changing reg in insn 175
changing reg in insn 45
changing reg in insn 187
changing reg in insn 182
changing reg in insn 98
changing reg in insn 139
changing reg in insn 130
changing reg in insn 172
changing reg in insn 176
changing reg in insn 165
changing reg in insn 22
changing reg in insn 204
changing reg in insn 203
changing reg in insn 185
deleting insn with uid = 172.
deleting insn with uid = 176.


try_optimize_cfg iteration 1

Forwarding edge 6->7 to 17 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 104.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 46 count 29 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 46 count 29 (    1)


std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const key_type&) [with _Key = long long unsigned int; _Val = std::pair<const long long unsigned int, int>; _KeyOfValue = std::_Select1st<std::pair<const long long unsigned int, int> >; _Compare = std::less<long long unsigned int>; _Alloc = std::allocator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::pair<const long long unsigned int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = long long unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 1 [dx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={21d,17u} r1={14d,13u} r2={6d,3u} r3={2d,18u} r4={1d,6u} r5={4d,7u} r6={1d,4u} r7={3d,47u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1e} r17={23d,22u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={4d} r30={4d} r31={4d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} 
;;    total ref usage 417{279d,137u,1e} in 87{84 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/f:SI 4 si [orig:101 this ] [101])
        (reg:SI 2 cx [ this ])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1532 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 3 bx [orig:102 __position ] [102])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [36 __position+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1532 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (reg/f:SI 16 argp) [36 __position+0 S4 A32])
        (nil)))
(note 4 3 5 2 NOTE_INSN_DELETED)
(note 5 4 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 5 10 2 (parallel [
            (set (reg/f:SI 0 ax [orig:104 D.83088 ] [104])
                (plus:SI (reg/f:SI 4 si [orig:101 this ] [101])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:529 220 {*addsi_1}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:102 __position ] [102])
            (reg/f:SI 0 ax [orig:104 D.83088 ] [104]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1540 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1540 596 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 28)
;;  succ:       3 [15.0%]  (FALLTHRU)
;;              8 [85.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 1500, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [15.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg/f:SI 4 si [orig:101 this ] [101])
                    (const_int 20 [0x14])) [21 MEM[(unsigned int *)this_5(D) + 20B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
;;  succ:       4 [50.0%]  (FALLTHRU)
;;              17 [50.0%] 
;; lr  out 	 4 [si] 7 [sp]
;; live  out 	 4 [si] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 750, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [50.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 165 4 (set (reg/f:SI 3 bx [orig:85 D.83090 ] [85])
        (mem/f:SI (plus:SI (reg/f:SI 4 si [orig:101 this ] [101])
                (const_int 16 [0x10])) [6 MEM[(struct _Rb_tree_node_base * &)this_5(D) + 16]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1543 90 {*movsi_internal}
     (nil))
(insn 165 16 166 4 (set (reg:SI 0 ax [orig:115 MEM[(const long long unsigned int &)_7 + 16] ] [115])
        (mem:SI (plus:SI (reg/f:SI 3 bx [orig:85 D.83090 ] [85])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)_7 + 16]+0 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 90 {*movsi_internal}
     (nil))
(note 166 165 206 4 NOTE_INSN_DELETED)
(insn 206 166 207 4 (set (reg:SI 5 di [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [6 __k+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 90 {*movsi_internal}
     (nil))
(insn 207 206 18 4 (set (reg:SI 5 di [120])
        (mem:SI (plus:SI (reg:SI 5 di [119])
                (const_int 4 [0x4])) [34 MEM[(const long long unsigned int &)__k_9(D)]+4 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 90 {*movsi_internal}
     (nil))
(insn 18 207 19 4 (set (reg:CC 17 flags)
        (compare:CC (mem:SI (plus:SI (reg/f:SI 3 bx [orig:85 D.83090 ] [85])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)_7 + 16]+4 S4 A32])
            (reg:SI 5 di [120]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 7 {*cmpsi_1}
     (nil))
(jump_insn 19 18 146 4 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 136)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 136)
;;  succ:       27 [50.0%] 
;;              5 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 17 [flags]

;; basic block 5, loop depth 0, count 0, freq 375, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [50.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;; live  gen 	
;; live  kill	
(note 146 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 21 146 147 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
;;  succ:       17 [50.0%] 
;;              6 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 188, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [50.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 147 21 208 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 208 147 22 6 (set (reg:SI 5 di [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [6 __k+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 90 {*movsi_internal}
     (nil))
(insn 22 208 23 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:115 MEM[(const long long unsigned int &)_7 + 16] ] [115])
            (mem:SI (reg:SI 5 di [121]) [34 MEM[(const long long unsigned int &)__k_9(D)]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 7 {*cmpsi_1}
     (nil))
(jump_insn 23 22 188 6 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 136)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1542 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 136)
;;  succ:       27 [50.0%] 
;;              7 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 94, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [50.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 4 [si] 7 [sp]
;; live  gen 	
;; live  kill	
(note 188 23 189 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 189 188 190 7 (set (pc)
        (label_ref 74)) 636 {jump}
     (nil)
 -> 74)
;;  succ:       17 [100.0%] 
;; lr  out 	 4 [si] 7 [sp]
;; live  out 	 4 [si] 7 [sp]

(barrier 190 189 28)
;; basic block 8, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [85.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(code_label 28 190 29 8 89 "" [1 uses])
(note 29 28 209 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 209 29 167 8 (set (reg:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [6 __k+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 167 209 210 8 (set (reg:SI 5 di [orig:107 D.83091 ] [107])
        (mem:SI (reg:SI 0 ax [122]) [34 MEM[(const long long unsigned int &)__k_9(D)]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 210 167 168 8 (set (reg:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [6 __k+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 168 210 169 8 (set (reg:SI 6 bp [orig:108 D.83091+4 ] [108])
        (mem:SI (plus:SI (reg:SI 0 ax [123])
                (const_int 4 [0x4])) [34 MEM[(const long long unsigned int &)__k_9(D)]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 169 168 170 8 (set (reg:SI 1 dx [orig:109 D.83091 ] [109])
        (mem:SI (plus:SI (reg/v:SI 3 bx [orig:102 __position ] [102])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)_33 + 16]+0 S4 A64])) 90 {*movsi_internal}
     (nil))
(insn 170 169 32 8 (set (reg:SI 0 ax [orig:110 D.83091+4 ] [110])
        (mem:SI (plus:SI (reg/v:SI 3 bx [orig:102 __position ] [102])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)_33 + 16]+4 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 32 170 33 8 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 6 bp [orig:108 D.83091+4 ] [108])
            (reg:SI 0 ax [orig:110 D.83091+4 ] [110]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 7 {*cmpsi_1}
     (nil))
(jump_insn 33 32 149 8 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 163)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 163)
;;  succ:       20 [50.0%] 
;;              9 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]

;; basic block 9, loop depth 0, count 0, freq 4250, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [50.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  gen 	
;; live  kill	
(note 149 33 35 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 35 149 150 9 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 161)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 161)
;;  succ:       11 [50.0%] 
;;              10 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 2125, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [50.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 150 35 36 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 36 150 37 10 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [orig:107 D.83091 ] [107])
            (reg:SI 1 dx [orig:109 D.83091 ] [109]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 7 {*cmpsi_1}
     (nil))
(jump_insn 37 36 161 10 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1548 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 83)
;;  succ:       18 [50.0%] 
;;              11 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 11, loop depth 0, count 0, freq 4250, maybe hot
;; Invalid sum of incoming frequencies 3188, should be 4250
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%]  (FALLTHRU)
;;              9 [50.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 161 37 39 11 104 "" [1 uses])
(note 39 161 40 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(note 40 39 41 11 NOTE_INSN_DELETED)
(insn 41 40 42 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 4 si [orig:101 this ] [101])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * &)this_5(D) + 12]+0 S4 A32])
            (reg/v:SI 3 bx [orig:102 __position ] [102]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1552 7 {*cmpsi_1}
     (nil))
(jump_insn 42 41 43 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1552 596 {*jcc_1}
     (int_list:REG_BR_PROB 8986 (nil))
 -> 48)
;;  succ:       12 [10.1%]  (FALLTHRU)
;;              13 [89.9%] 
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 431, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [10.1%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(note 43 42 44 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 12 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (reg/v:SI 3 bx [orig:102 __position ] [102])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1553 90 {*movsi_internal}
     (nil))
(insn 45 44 191 12 (set (reg:SI 1 dx [orig:112 D.81243+4 ] [112])
        (reg:SI 0 ax [orig:111 D.81243 ] [111])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1553 90 {*movsi_internal}
     (nil))
(jump_insn 191 45 192 12 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 192 191 48)
;; basic block 13, loop depth 0, count 0, freq 3819, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [89.9%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(code_label 48 192 49 13 95 "" [1 uses])
(note 49 48 50 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 13 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v:SI 3 bx [orig:102 __position ] [102])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (nil))
(call_insn/i 51 50 52 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base") [flags 0x43]  <function_decl 06b62500 _Rb_tree_decrement>) [0 _Rb_tree_decrement S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 52 51 53 13 (set (reg/f:SI 1 dx [orig:97 D.83090 ] [97])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:218 90 {*movsi_internal}
     (nil))
(insn 53 52 54 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 6 bp [orig:108 D.83091+4 ] [108])
            (mem:SI (plus:SI (reg/f:SI 1 dx [orig:97 D.83090 ] [97])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)_35 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 7 {*cmpsi_1}
     (nil))
(jump_insn 54 53 152 13 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
;;  succ:       17 [50.0%] 
;;              14 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]

;; basic block 14, loop depth 0, count 0, freq 1910, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [50.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  gen 	
;; live  kill	
(note 152 54 56 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 56 152 153 14 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 162)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 162)
;;  succ:       16 [50.0%] 
;;              15 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 15, loop depth 0, count 0, freq 955, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [50.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 153 56 57 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 57 153 58 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [orig:107 D.83091 ] [107])
            (mem:SI (plus:SI (reg/f:SI 1 dx [orig:97 D.83090 ] [97])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)_35 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 7 {*cmpsi_1}
     (nil))
(jump_insn 58 57 162 15 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1554 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
;;  succ:       17 [50.0%] 
;;              16 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 3028, maybe hot
;; Invalid sum of incoming frequencies 1433, should be 3028
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       15 [50.0%]  (FALLTHRU)
;;              14 [50.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	
(code_label 162 58 60 16 105 "" [1 uses])
(note 60 162 178 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 178 60 204 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 1 dx [orig:97 D.83090 ] [97])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)_35 + 12B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 3 {*cmpsi_ccno_1}
     (nil))
(insn 204 178 211 16 (set (reg:SI 2 cx [117])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 211 204 180 16 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (reg:SI 2 cx [117])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 90 {*movsi_internal}
     (nil))
(insn 180 211 212 16 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/v:SI 3 bx [orig:102 __position ] [102])
            (reg:SI 0 ax [orig:111 D.81243 ] [111]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 927 {*movsicc_noc}
     (nil))
(insn 212 180 181 16 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (reg:SI 0 ax [orig:111 D.81243 ] [111])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 90 {*movsi_internal}
     (nil))
(insn 181 212 182 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 1 dx [orig:97 D.83090 ] [97])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)_35 + 12B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 3 {*cmpsi_ccno_1}
     (nil))
(insn 182 181 193 16 (set (reg:SI 1 dx [orig:112 D.81243+4 ] [112])
        (if_then_else:SI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/f:SI 1 dx [orig:97 D.83090 ] [97])
            (reg/v:SI 3 bx [orig:102 __position ] [102]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1557 927 {*movsicc_noc}
     (nil))
(jump_insn 193 182 194 16 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 194 193 74)
;; basic block 17, loop depth 0, count 0, freq 2311, maybe hot
;; Invalid sum of incoming frequencies 4614, should be 2311
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [50.0%] 
;;              3 [50.0%] 
;;              13 [50.0%] 
;;              15 [50.0%] 
;;              22 [50.0%] 
;;              24 [50.0%] 
;;              7 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;; live  kill	 17 [flags]
(code_label 74 194 75 17 90 "" [7 uses])
(note 75 74 76 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 213 17 (set (reg:SI 0 ax [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [6 __k+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 90 {*movsi_internal}
     (nil))
(insn 213 76 77 17 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [125])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 90 {*movsi_internal}
     (nil))
(insn 77 213 78 17 (set (reg:SI 2 cx)
        (reg/f:SI 4 si [orig:101 this ] [101])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 90 {*movsi_internal}
     (nil))
(call_insn 78 77 79 17 (parallel [
            (set (reg:DI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE24_M_get_insert_unique_posERS1_") [flags 0x3]  <function_decl 06e17c80 _M_get_insert_unique_pos>) [0 _M_get_insert_unique_pos S1 A8])
                    (const_int 4 [0x4])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 653 {*call_value_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 79 78 171 17 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 171 79 195 17 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1562 90 {*movsi_internal}
     (nil))
(jump_insn 195 171 196 17 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 196 195 83)
;; basic block 18, loop depth 0, count 0, freq 0
;; Invalid sum of incoming frequencies 1063, should be 0
;;  prev block 17, next block 19, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [50.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 83 196 84 18 93 "" [1 uses])
(note 84 83 87 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 87 84 88 18 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 6 bp [orig:108 D.83091+4 ] [108])
            (reg:SI 0 ax [orig:110 D.83091+4 ] [110]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1564 7 {*cmpsi_1}
     (nil))
(jump_insn 88 87 156 18 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 163)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1564 596 {*jcc_1}
     (int_list:REG_BR_PROB 0 (nil))
 -> 163)
;;  succ:       20
;;              19 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 1063, maybe hot
;; Invalid sum of incoming frequencies 0, should be 1063
;;  prev block 18, next block 20, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       18 [100.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 156 88 89 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 89 156 90 19 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [orig:107 D.83091 ] [107])
            (reg:SI 1 dx [orig:109 D.83091 ] [109]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1564 7 {*cmpsi_1}
     (nil))
(jump_insn 90 89 163 19 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1564 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 127)
;;  succ:       26 [50.0%] 
;;              20 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 20, loop depth 0, count 0, freq 2125, maybe hot
;; Invalid sum of incoming frequencies 4782, should be 2125
;;  prev block 19, next block 21, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       19 [50.0%]  (FALLTHRU)
;;              18
;;              8 [50.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 163 90 92 20 106 "" [2 uses])
(note 92 163 93 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(note 93 92 94 20 NOTE_INSN_DELETED)
(insn 94 93 95 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/f:SI 4 si [orig:101 this ] [101])
                    (const_int 16 [0x10])) [6 MEM[(struct _Rb_tree_node_base * &)this_5(D) + 16]+0 S4 A32])
            (reg/v:SI 3 bx [orig:102 __position ] [102]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1568 7 {*cmpsi_1}
     (nil))
(jump_insn 95 94 96 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1568 596 {*jcc_1}
     (int_list:REG_BR_PROB 8986 (nil))
 -> 101)
;;  succ:       21 [10.1%]  (FALLTHRU)
;;              22 [89.9%] 
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]

;; basic block 21, loop depth 0, count 0, freq 215, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [10.1%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(note 96 95 97 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 21 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1569 90 {*movsi_internal}
     (nil))
(insn 98 97 197 21 (set (reg:SI 1 dx [orig:112 D.81243+4 ] [112])
        (reg/v:SI 3 bx [orig:102 __position ] [102])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1569 90 {*movsi_internal}
     (nil))
(jump_insn 197 98 198 21 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 198 197 101)
;; basic block 22, loop depth 0, count 0, freq 1910, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [89.9%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(code_label 101 198 102 22 101 "" [1 uses])
(note 102 101 103 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 22 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v:SI 3 bx [orig:102 __position ] [102])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:203 90 {*movsi_internal}
     (nil))
(call_insn/i 104 103 105 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base") [flags 0x43]  <function_decl 06b62400 _Rb_tree_increment>) [0 _Rb_tree_increment S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:203 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 105 104 106 22 (set (reg/f:SI 1 dx [orig:98 D.83090 ] [98])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:203 90 {*movsi_internal}
     (nil))
(insn 106 105 107 22 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 6 bp [orig:108 D.83091+4 ] [108])
            (mem:SI (plus:SI (reg/f:SI 1 dx [orig:98 D.83090 ] [98])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)_36 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 7 {*cmpsi_1}
     (nil))
(jump_insn 107 106 158 22 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
;;  succ:       17 [50.0%] 
;;              23 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]

;; basic block 23, loop depth 0, count 0, freq 955, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       22 [50.0%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; lr  use 	 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  gen 	
;; live  kill	
(note 158 107 109 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(jump_insn 109 158 159 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 164)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 164)
;;  succ:       25 [50.0%] 
;;              24 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 24, loop depth 0, count 0, freq 478, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       23 [50.0%]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 159 109 110 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 110 159 111 24 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [orig:107 D.83091 ] [107])
            (mem:SI (plus:SI (reg/f:SI 1 dx [orig:98 D.83090 ] [98])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)_36 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 7 {*cmpsi_1}
     (nil))
(jump_insn 111 110 164 24 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1570 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
;;  succ:       17 [50.0%] 
;;              25 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 7 [sp]

;; basic block 25, loop depth 0, count 0, freq 1514, maybe hot
;; Invalid sum of incoming frequencies 717, should be 1514
;;  prev block 24, next block 26, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       24 [50.0%]  (FALLTHRU)
;;              23 [50.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(code_label 164 111 113 25 107 "" [1 uses])
(note 113 164 183 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 183 113 203 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/v:SI 3 bx [orig:102 __position ] [102])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)_33 + 12B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 3 {*cmpsi_ccno_1}
     (nil))
(insn 203 183 185 25 (set (reg:SI 0 ax [118])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 185 203 186 25 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/f:SI 1 dx [orig:98 D.83090 ] [98])
            (reg:SI 0 ax [118]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 927 {*movsicc_noc}
     (nil))
(insn 186 185 187 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg/v:SI 3 bx [orig:102 __position ] [102])
                    (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)_33 + 12B]+0 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 3 {*cmpsi_ccno_1}
     (nil))
(insn 187 186 199 25 (set (reg:SI 1 dx [orig:112 D.81243+4 ] [112])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/f:SI 1 dx [orig:98 D.83090 ] [98])
            (reg/v:SI 3 bx [orig:102 __position ] [102]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1573 927 {*movsicc_noc}
     (nil))
(jump_insn 199 187 200 25 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 200 199 127)
;; basic block 26, loop depth 0, count 0, freq 2125, maybe hot
;; Invalid sum of incoming frequencies 532, should be 2125
;;  prev block 25, next block 27, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       19 [50.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 127 200 128 26 99 "" [1 uses])
(note 128 127 129 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 26 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (reg/v:SI 3 bx [orig:102 __position ] [102])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1582 90 {*movsi_internal}
     (nil))
(insn 130 129 201 26 (set (reg:SI 1 dx [orig:112 D.81243+4 ] [112])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1582 90 {*movsi_internal}
     (nil))
(jump_insn 201 130 202 26 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       28 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 202 201 136)
;; basic block 27, loop depth 0, count 0, freq 375, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [50.0%] 
;;              6 [50.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 136 202 137 27 91 "" [2 uses])
(note 137 136 138 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 138 137 139 27 (set (reg:SI 0 ax [orig:111 D.81243 ] [111])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1544 90 {*movsi_internal}
     (nil))
(insn 139 138 177 27 (set (reg:SI 1 dx [orig:112 D.81243+4 ] [112])
        (reg/f:SI 3 bx [orig:85 D.83090 ] [85])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1544 90 {*movsi_internal}
     (nil))
;;  succ:       28 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

;; basic block 28, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 27, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       27 [100.0%]  (FALLTHRU)
;;              21 [100.0%] 
;;              12 [100.0%] 
;;              25 [100.0%] 
;;              16 [100.0%] 
;;              17 [100.0%] 
;;              26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 1 [dx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 177 139 145 28 108 "" [6 uses])
(note 145 177 175 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 175 145 144 28 (set (reg:SI 0 ax)
        (reg:SI 0 ax [orig:111 D.81243 ] [111])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1583 90 {*movsi_internal}
     (nil))
(insn 144 175 205 28 (use (reg/i:DI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1583 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(note 205 144 0 NOTE_INSN_DELETED)

;; Function int main() (main, funcdef_no=5706, decl_uid=72670, symbol_order=3172) (executed once)

      Creating newreg=498
Removing SCRATCH in insn #82 (nop 2)
rescanning insn with uid = 82.
      Creating newreg=499
Removing SCRATCH in insn #134 (nop 2)
rescanning insn with uid = 134.
      Creating newreg=500
Removing SCRATCH in insn #169 (nop 2)
rescanning insn with uid = 169.
      Creating newreg=501
Removing SCRATCH in insn #192 (nop 2)
rescanning insn with uid = 192.
      Creating newreg=502
Removing SCRATCH in insn #242 (nop 2)
rescanning insn with uid = 242.
      Creating newreg=503
Removing SCRATCH in insn #244 (nop 0)
rescanning insn with uid = 244.
      Creating newreg=504
Removing SCRATCH in insn #273 (nop 0)
rescanning insn with uid = 273.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) lzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =qm  (1) %0  (2) qn {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) qm  (1) qn {*cmpqi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 855:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 856:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 927:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1060:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1061:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 926:  (0) qm  (1) qn {*cmpqi_1}
            3 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 928:  (0) r  (2) 0  (3) rm {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 929:  (0) qm  (1) qn {*cmpqi_1}
            3 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 931:  (0) r  (2) 0  (3) rm {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =qm  (1) %0  (2) qn {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) qm  (1) qn {*cmpqi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1063:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1064:  (0) m  (1) re {*movsi_internal}
            0 Early clobber: reject++
            alt=0: Bad operand -- refuse
            1 Matching earlyclobber alt: reject--
          alt=1,overall=5,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 77:  (0) r  (1) 0  (2) Jc {*ashldi3_doubleword}
      Creating newreg=505 from oldreg=263, assigning class GENERAL_REGS to r505
   77: {r505:DI=r505:DI<<0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1121: r505:DI=r494:DI
    Inserting insn reload after:
 1122: r263:DI=r505:DI

            0 Early clobber: reject++
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) 0  (2) Jc {*ashldi3_doubleword}
          alt=0,overall=6,losers=1,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) qm {extendqisi2}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*A  (1) 0  (2) =X {extendsidi2_1}
      Change to class NO_REGS for r498
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =qm  (1) %0  (2) qn {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) qm  (1) qn {*cmpqi_1}
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 93:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=506 from oldreg=269, assigning class GENERAL_REGS to r506
   93: {r506:SI=r506:SI*r159:DI#0;clobber flags:CC;}
      REG_DEAD r430:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1123: r506:SI=r430:SI
    Inserting insn reload after:
 1124: r269:SI=r506:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1123:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
  Commutative operand exchange in insn 94
	 Choosing alt 2 in insn 94:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=507 from oldreg=270, assigning class GENERAL_REGS to r507
   94: {r507:SI=r507:SI*r159:DI#4;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1125: r507:SI=r429:SI
    Inserting insn reload after:
 1126: r270:SI=r507:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Small class reload: reject+=3
          alt=1,overall=9,losers=1,rld_nregs=1
            1 Small class reload: reject+=3
            2 Non pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 1 in insn 96:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=508 from oldreg=272, assigning class AD_REGS to r508
   96: {r508:DI=zero_extend(r508:DI#0)*zero_extend(r159:DI#0);clobber flags:CC;}
      REG_DEAD r429:SI
      REG_DEAD r159:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1127: clobber r508:DI
 1128: r508:DI#0=r429:SI
    Inserting insn reload after:
 1129: r272:DI=r508:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1128:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) r {*cmpsi_ccno_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
      Removing equiv init insn 933 (freq=1)
  933: r460:SI=0xffffffffffffffff
      REG_EQUIV 0xffffffffffffffff
deleting insn with uid = 933.
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =qm  (1) %0  (2) qn {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) qm  (1) qn {*cmpqi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 859:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 860:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1067:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1068:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 932:  (0) qm  (1) qn {*cmpqi_1}
Changing pseudo 460 in operand 3 of insn 934 on equiv 0xffffffffffffffff
            3 Matching alt: reject+=2
            3 Non-pseudo reload: reject+=2
            3 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            3 Non-pseudo reload: reject+=2
            3 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 934:  (0) r  (2) 0  (3) rm {*movsicc_noc}
      Creating newreg=509, assigning class GENERAL_REGS to r509
  934: r491:SI={(flags:CCZ!=0)?r491:SI:r509:SI}
      REG_DEAD flags:CCZ
    Inserting insn reload before:
 1130: r509:SI=0xffffffffffffffff

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1130:  (0) =r  (1) g {*movsi_internal}
      Change to class INDEX_REGS for r509
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 935:  (0) qm  (1) qn {*cmpqi_1}
Changing pseudo 460 in operand 3 of insn 937 on equiv 0xffffffffffffffff
            3 Matching alt: reject+=2
            3 Non-pseudo reload: reject+=2
            3 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            3 Non-pseudo reload: reject+=2
            3 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 937:  (0) r  (2) 0  (3) rm {*movsicc_noc}
      Creating newreg=510, assigning class GENERAL_REGS to r510
  937: r492:SI={(flags:CCZ!=0)?r492:SI:r510:SI}
      REG_DEAD flags:CCZ
    Inserting insn reload before:
 1131: r510:SI=0xffffffffffffffff

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1131:  (0) =r  (1) g {*movsi_internal}
      Change to class INDEX_REGS for r510
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 122:  (0) =qm  (1) %0  (2) qn {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) qm  (1) qn {*cmpqi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1070:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1071:  (0) m  (1) re {*movsi_internal}
            0 Early clobber: reject++
            alt=0: Bad operand -- refuse
            1 Matching earlyclobber alt: reject--
          alt=1,overall=5,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 129:  (0) r  (1) 0  (2) Jc {*ashldi3_doubleword}
      Creating newreg=511 from oldreg=276, assigning class GENERAL_REGS to r511
  129: {r511:DI=r511:DI<<0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1132: r511:DI=r489:DI
    Inserting insn reload after:
 1133: r276:DI=r511:DI

            0 Early clobber: reject++
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) 0  (2) Jc {*ashldi3_doubleword}
          alt=0,overall=6,losers=1,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) qm {extendqisi2}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*A  (1) 0  (2) =X {extendsidi2_1}
      Change to class NO_REGS for r499
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =qm  (1) %0  (2) qn {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) qm  (1) qn {*cmpqi_1}
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 146:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=512 from oldreg=283, assigning class GENERAL_REGS to r512
  146: {r512:SI=r512:SI*r175:DI#0;clobber flags:CC;}
      REG_DEAD r432:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1134: r512:SI=r432:SI
    Inserting insn reload after:
 1135: r283:SI=r512:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1134:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
  Commutative operand exchange in insn 147
	 Choosing alt 2 in insn 147:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=513 from oldreg=284, assigning class GENERAL_REGS to r513
  147: {r513:SI=r513:SI*r175:DI#4;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1136: r513:SI=r431:SI
    Inserting insn reload after:
 1137: r284:SI=r513:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Small class reload: reject+=3
          alt=1,overall=9,losers=1,rld_nregs=1
            1 Small class reload: reject+=3
            2 Non pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 1 in insn 149:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=514 from oldreg=286, assigning class AD_REGS to r514
  149: {r514:DI=zero_extend(r514:DI#0)*zero_extend(r175:DI#0);clobber flags:CC;}
      REG_DEAD r431:SI
      REG_DEAD r175:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1138: clobber r514:DI
 1139: r514:DI#0=r431:SI
    Inserting insn reload after:
 1140: r286:DI=r514:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 151
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=515 from oldreg=87, assigning class INDEX_REGS to address r515
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) re {*movsi_internal}
  153: [r515:SI*0x4+`a']=r286:DI#0
      REG_DEAD r286:DI
    Inserting insn reload before:
 1141: r515:SI=r87:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1141:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 154:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=516 from oldreg=87, assigning class GENERAL_REGS to r516
      Making reload reg 516 for reg 87 optional
  154: {r516:SI=r516:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1142: r516:SI=r87:SI
    Inserting insn reload after:
 1143: r87:SI=r516:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1143:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1142:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) r  (1) rm {*cmpsi_1}
      Creating newreg=517 from oldreg=87, assigning class GENERAL_REGS to r517
      Making reload reg 517 for reg 87 optional
  157: flags:CCGC=cmp(r487:SI,r517:SI)
    Inserting insn reload before:
 1144: r517:SI=r87:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1144:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1073:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) ?mr {*cmpsi_ccno_1}
      Creating newreg=518 from oldreg=449, assigning class GENERAL_REGS to r518
      Making reload reg 518 for reg 449 optional
  160: flags:CCNO=cmp(r518:SI,0)
    Inserting insn reload before:
 1145: r518:SI=r449:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1145:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
          alt=1,overall=15,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=24,losers=3 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=16,losers=2 -- refuse
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=519 from oldreg=240, assigning class GENERAL_REGS to r519
      Creating newreg=520 from oldreg=449, assigning class GENERAL_REGS to r520
  163: {r519:SI=r520:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1147: r520:SI=r449:SI
    Inserting insn reload after:
 1146: r240:SI=r519:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1146:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
      Removing equiv init insn 176 (freq=1)
  176: r458:SI=0x125e591
      REG_EQUIV 0x125e591
deleting insn with uid = 176.
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1075:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=3
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=2,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            2 Scratch win: reject+=2
          alt=3,overall=9,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) ?*o  (1) r  (2) &r {extendsidi2_1}
      Change to class INDEX_REGS for r500
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 172:  (0) r  (1) rm  (2) e {*mulsi3_1}
Changing pseudo 458 in operand 2 of insn 177 on equiv 0x125e591
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=33,losers=3,rld_nregs=4
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=1,overall=24,losers=2,rld_nregs=3
  Commutative operand exchange in insn 177
	 Choosing alt 1 in insn 177:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=521 from oldreg=298, assigning class AD_REGS to r521
  177: {r521:DI=zero_extend(r521:DI#0)*zero_extend([r485:SI*0x8+const(`pre'-0x8)]);clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUAL zero_extend([r485:SI*0x8+const(`pre'-0x8)])*0x125e591
    Inserting insn reload before:
 1148: clobber r521:DI
 1149: r521:DI#0=0x125e591
    Inserting insn reload after:
 1150: r298:DI=r521:DI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1149:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 179
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            2 Non pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
      Creating newreg=522 from oldreg=301, assigning class GENERAL_REGS to r522
  181: {r522:DI=r522:DI+r298:DI;clobber flags:CC;}
      REG_DEAD r298:DI
      REG_DEAD r290:DI
      REG_UNUSED flags:CC
      REG_EQUIV [r485:SI*0x8+`pre']
    Inserting insn reload before:
 1151: r522:DI=r290:DI
    Inserting insn reload after:
 1152: r301:DI=r522:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1151:  (0) =r  (1) riFo {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) o  (1) riF {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) rm  (1) re {*cmpsi_1}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
      Removing equiv init insn 199 (freq=1)
  199: r457:SI=0x125e591
      REG_EQUIV 0x125e591
deleting insn with uid = 199.
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=3
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=2,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            2 Scratch win: reject+=2
          alt=3,overall=9,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) ?*o  (1) r  (2) &r {extendsidi2_1}
      Change to class INDEX_REGS for r501
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 195:  (0) r  (1) rm  (2) e {*mulsi3_1}
Changing pseudo 457 in operand 2 of insn 200 on equiv 0x125e591
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=33,losers=3,rld_nregs=4
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=1,overall=24,losers=2,rld_nregs=3
  Commutative operand exchange in insn 200
	 Choosing alt 1 in insn 200:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=523 from oldreg=312, assigning class AD_REGS to r523
  200: {r523:DI=zero_extend(r523:DI#0)*zero_extend([r484:SI*0x8+const(`suf'+0x8)]);clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUAL zero_extend([r484:SI*0x8+const(`suf'+0x8)])*0x125e591
    Inserting insn reload before:
 1153: clobber r523:DI
 1154: r523:DI#0=0x125e591
    Inserting insn reload after:
 1155: r312:DI=r523:DI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1154:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            2 Non pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
      Creating newreg=524 from oldreg=315, assigning class GENERAL_REGS to r524
  204: {r524:DI=r524:DI+r312:DI;clobber flags:CC;}
      REG_DEAD r312:DI
      REG_DEAD r304:DI
      REG_UNUSED flags:CC
      REG_EQUIV [r484:SI*0x8+`suf']
    Inserting insn reload before:
 1156: r524:DI=r304:DI
    Inserting insn reload after:
 1157: r315:DI=r524:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1156:  (0) =r  (1) riFo {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) o  (1) riF {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 212:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
      Removing equiv init insn 602 (freq=1)
  602: {r456:SI=frame:SI-0x1c;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUIV frame:SI-0x4
deleting insn with uid = 602.
          alt=0,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) ?mr {*cmpsi_ccno_1}
      Creating newreg=525 from oldreg=449, assigning class GENERAL_REGS to r525
      Making reload reg 525 for reg 449 optional
  213: flags:CCNO=cmp(r525:SI,0)
    Inserting insn reload before:
 1158: r525:SI=r449:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1158:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1079:  (0) =r  (1) g {*movsi_internal}
            1 Early clobber: reject++
            2 Matching alt: reject+=2
            2 Small class reload: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 223:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
      Creating newreg=526 from oldreg=317, assigning class AREG to r526
  223: {r526:SI=r526:SI/r464:SI;r318:SI=r526:SI%r464:SI;clobber flags:CC;}
      REG_DEAD r464:SI
      REG_UNUSED r318:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1159: r526:SI=r466:SI
    Inserting insn reload after:
 1160: r317:SI=r526:SI

            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 895:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=527 from oldreg=451, assigning class GENERAL_REGS to r527
  895: r527:SI=[frame:SI-0x1c]
    Inserting insn reload after:
 1161: r451:SI=r527:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1161:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) lzm  (2) i {*call_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 238:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 240:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=528 from oldreg=451, assigning class GENERAL_REGS to r528
  241: r528:SI=[frame:SI-0x1c]
    Inserting insn reload after:
 1162: r451:SI=r528:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1162:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 911:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=3
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            alt=2,overall=12,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=3,overall=16,losers=1 -- refuse
	 Choosing alt 1 in insn 242:  (0) r  (1) 0  (2) X {extendsidi2_1}
      Creating newreg=529 from oldreg=104, assigning class GENERAL_REGS to r529
      Change to class NO_REGS for r502
  242: {r529:DI=sign_extend(r529:DI#0);clobber flags:CC;clobber r502:SI;}
      REG_UNUSED r502:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1163: clobber r529:DI
 1164: r529:DI#0=r451:SI
    Inserting insn reload after:
 1165: r104:DI=r529:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1164:  (0) =r  (1) g {*movsi_internal}
            0 Scratch win: reject+=2
            1 Matching alt: reject+=2
          alt=0,overall=16,losers=2,rld_nregs=2
            0 Scratch win: reject+=2
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*iorsi_3}
      Creating newreg=530 from oldreg=503, assigning class GENERAL_REGS to r530
      Change to class INDEX_REGS for r503
  244: {flags:CCZ=cmp(r530:SI|r104:DI#4,0);clobber r530:SI;}
      REG_UNUSED r503:SI
    Inserting insn reload before:
 1166: r530:SI=r451:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1166:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) o  (1) riF {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1081:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 248:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=531 from oldreg=439, assigning class GENERAL_REGS to r531
  248: {r531:SI=r531:SI&0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1167: r531:SI=r481:DI#0
    Inserting insn reload after:
 1168: r439:SI=r531:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1167:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) r {*cmpsi_ccno_1}
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 2 in insn 254:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=532 from oldreg=328, assigning class GENERAL_REGS to r532
  254: {r532:SI=r532:SI*r483:DI#0;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1169: r532:SI=r136:DI#4
    Inserting insn reload after:
 1170: r328:SI=r532:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1169:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
  Commutative operand exchange in insn 255
	 Choosing alt 2 in insn 255:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=533 from oldreg=329, assigning class GENERAL_REGS to r533
  255: {r533:SI=r533:SI*r483:DI#4;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1171: r533:SI=r136:DI#0
    Inserting insn reload after:
 1172: r329:SI=r533:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 256
	 Choosing alt 0 in insn 256:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=1,overall=19,losers=2,rld_nregs=3
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
            alt=1,overall=21,losers=2 -- refuse
	 Choosing alt 1 in insn 257:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=534 from oldreg=136, assigning class AD_REGS to r534
  257: {r534:DI=zero_extend(r534:DI#0)*zero_extend(r483:DI#0);clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1173: clobber r534:DI
 1174: r534:DI#0=r136:DI#0
    Inserting insn reload after:
 1175: r136:DI=r534:DI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1175:  (0) o  (1) riF {*movdi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1174:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=0,overall=13,losers=2 -- refuse
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 259
	 Choosing alt 1 in insn 259:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 263:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=535 from oldreg=332, assigning class GENERAL_REGS to r535
  263: {r535:SI=r535:SI*r483:DI#0;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1176: r535:SI=r483:DI#4
    Inserting insn reload after:
 1177: r332:SI=r535:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1176:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 268
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) 0  (2) Jc {*lshrdi3_doubleword}
            0 Scratch win: reject+=2
            1 Matching alt: reject+=2
          alt=0,overall=16,losers=2,rld_nregs=2
            0 Scratch win: reject+=2
            1 Matching alt: reject+=2
          alt=0,overall=16,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*iorsi_3}
      Creating newreg=536 from oldreg=504, assigning class GENERAL_REGS to r536
      Change to class INDEX_REGS for r504
  273: {flags:CCZ=cmp(r536:SI|r481:DI#0,0);clobber r536:SI;}
      REG_UNUSED r504:SI
    Inserting insn reload before:
 1178: r536:SI=r481:DI#4

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1178:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1083:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) o  (1) riF {*movdi_internal}
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 277:  (0) r  (1) rm {*cmpsi_1}
      Creating newreg=537 from oldreg=451, assigning class GENERAL_REGS to r537
  277: flags:CCGC=cmp(r537:SI,[`n'])
    Inserting insn reload before:
 1179: r537:SI=r451:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1179:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
      Creating newreg=538 from oldreg=451, assigning class GENERAL_REGS to address r538
	   Change to class INDEX_REGS for r538
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 899:  (0) =r  (1) Ts {*leasi}
  899: r450:SI=r538:SI+0x1
      REG_DEAD r451:SI
    Inserting insn reload before:
 1180: r538:SI=r451:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1180:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 283:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=539 from oldreg=123, assigning class GENERAL_REGS to r539
  283: {r339:SI=r539:SI-0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1181: r539:SI=r123:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1181:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non pseudo reload: reject++
          alt=2,overall=12,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
  Commutative operand exchange in insn 285
	 Choosing alt 2 in insn 285:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=540 from oldreg=340, assigning class GENERAL_REGS to r540
  285: {r540:SI=r540:SI*[r339:SI*0x8+`pre'];clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1182: r540:SI=r136:DI#4
    Inserting insn reload after:
 1183: r340:SI=r540:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1182:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non pseudo reload: reject++
          alt=2,overall=12,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
  Commutative operand exchange in insn 287
	 Choosing alt 2 in insn 287:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=541 from oldreg=342, assigning class GENERAL_REGS to r541
  287: {r541:SI=r541:SI*[r339:SI*0x8+const(`pre'+0x4)];clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1184: r541:SI=r136:DI#0
    Inserting insn reload after:
 1185: r342:SI=r541:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1184:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            2 Non pseudo reload: reject++
          alt=1,overall=15,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=1,overall=11,losers=1,rld_nregs=1
  Commutative operand exchange in insn 289
	 Choosing alt 1 in insn 289:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=542 from oldreg=345, assigning class AD_REGS to r542
  289: {r542:DI=zero_extend(r542:DI#0)*zero_extend([r339:SI*0x8+`pre']);clobber flags:CC;}
      REG_DEAD r339:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1186: clobber r542:DI
 1187: r542:DI#0=r136:DI#0
    Inserting insn reload after:
 1188: r345:DI=r542:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1187:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 291
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) riFo {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) 0  (2) ronF {*subdi3_doubleword}
      Creating newreg=543 from oldreg=123, assigning class INDEX_REGS to address r543
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=14,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=17,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=12,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=14,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 0 in insn 296:  (0) =r  (1) riFo {*movdi_internal}
      Creating newreg=544 from oldreg=113, assigning class GENERAL_REGS to r544
  296: r544:DI=[r543:SI*0x8+`suf']
    Inserting insn reload before:
 1189: r543:SI=r123:SI
    Inserting insn reload after:
 1190: r113:DI=r544:DI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1190:  (0) o  (1) riF {*movdi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1189:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 863:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=545 from oldreg=427, assigning class GENERAL_REGS to r545
  863: r545:SI=[r469:SI*0x8+`suf']
    Inserting insn reload after:
 1191: r427:SI=r545:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1191:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 864:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=546 from oldreg=428, assigning class GENERAL_REGS to r546
  864: r546:SI=[r469:SI*0x8+const(`suf'+0x4)]
      REG_DEAD r469:SI
    Inserting insn reload after:
 1192: r428:SI=r546:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1192:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 890:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 308:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 327:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 331:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 865:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 349:  (0) rm  (1) re {*cmpsi_1}
      Creating newreg=547, assigning class GENERAL_REGS to r547
  349: flags:CC=cmp([r203:SI+0x14],r547:SI)
    Inserting insn reload before:
 1193: r547:SI=[r438:SI+0x14]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1193:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 353:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 356:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 360:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 361:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 362:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 364:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) lzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 373:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) lzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 383:  (0) ?mr {*cmpsi_ccno_1}
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 386:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=548 from oldreg=363, assigning class GENERAL_REGS to r548
  386: {r548:SI=r548:SI*r136:DI#0;clobber flags:CC;}
      REG_DEAD r428:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1194: r548:SI=r428:SI
    Inserting insn reload after:
 1195: r363:SI=r548:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1194:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 387:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=549 from oldreg=364, assigning class GENERAL_REGS to r549
      Creating newreg=550 from oldreg=427, assigning class GENERAL_REGS to r550
      Making reload reg 550 for reg 427 optional
  387: {r549:SI=r549:SI*r550:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1196: r549:SI=r136:DI#4
 1198: r550:SI=r427:SI
    Inserting insn reload after:
 1197: r364:SI=r549:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1196:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1198:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Small class reload: reject+=3
            2 Non pseudo reload: reject++
          alt=1,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 389:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=551 from oldreg=366, assigning class AD_REGS to r551
  389: {r551:DI=zero_extend(r551:DI#0)*zero_extend(r136:DI#0);clobber flags:CC;}
      REG_DEAD r427:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1199: clobber r551:DI
 1200: r551:DI#0=r427:SI
    Inserting insn reload after:
 1201: r366:DI=r551:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1200:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 391
	 Choosing alt 0 in insn 391:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
	 Choosing alt 0 in insn 393:  (0) =r  (1) 0  (2) ronF {*subdi3_doubleword}
      Creating newreg=552 from oldreg=117, assigning class GENERAL_REGS to r552
  393: {r552:DI=r552:DI-r366:DI;clobber flags:CC;}
      REG_DEAD r366:DI
      REG_DEAD r113:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1202: r552:DI=r113:DI
    Inserting insn reload after:
 1203: r117:DI=r552:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1202:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 395:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=553 from oldreg=448, assigning class GENERAL_REGS to r553
  395: r553:SI=[const(`s'+0x8)]
    Inserting insn reload after:
 1204: r448:SI=r553:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1204:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 906:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) ?mr {*cmpsi_ccno_1}
      Creating newreg=554 from oldreg=448, assigning class GENERAL_REGS to r554
      Making reload reg 554 for reg 448 optional
  396: flags:CCZ=cmp(r554:SI,0)
    Inserting insn reload before:
 1205: r554:SI=r448:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1205:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 889:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 400:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 404:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 423:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 427:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 443:  (0) q  (1) qn {*movqi_internal}
      Creating newreg=555 from oldreg=209, assigning class GENERAL_REGS to address r555
	   Change to class INDEX_REGS for r555
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 867:  (0) =r  (1) g {*movsi_internal}
  867: r443:SI=[r555:SI+0x10]
    Inserting insn reload before:
 1206: r555:SI=r209:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1206:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=556 from oldreg=209, assigning class GENERAL_REGS to address r556
	   Change to class INDEX_REGS for r556
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 445:  (0) rm  (1) re {*cmpsi_1}
      Creating newreg=557, assigning class GENERAL_REGS to r557
  445: flags:CC=cmp([r556:SI+0x14],r557:SI)
    Inserting insn reload before:
 1207: r556:SI=r209:SI
 1208: r557:SI=[r436:SI+0x14]

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1207:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1208:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 449:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 452:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 456:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 457:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 1 in insn 458:  (0) m  (1) re {*movsi_internal}
      Creating newreg=558 from oldreg=209, assigning class GENERAL_REGS to r558
  458: [sp:SI+0x4]=r558:SI
    Inserting insn reload before:
 1209: r558:SI=r209:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1209:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 460:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) lzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 469:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 1 in insn 473:  (0) m  (1) re {*movsi_internal}
      Creating newreg=559 from oldreg=209, assigning class GENERAL_REGS to r559
  473: [sp:SI]=r559:SI
      REG_DEAD r209:SI
    Inserting insn reload before:
 1210: r559:SI=r209:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1210:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) lzw {*call}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
      Creating newreg=560 from oldreg=209, assigning class GENERAL_REGS to address r560
	   Change to class INDEX_REGS for r560
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 477:  (0) ?mr {*cmpsi_ccno_1}
  477: flags:CCZ=cmp([r560:SI+0x18],0)
      REG_DEAD r209:SI
    Inserting insn reload before:
 1211: r560:SI=r209:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1211:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 888:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 484:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 511:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 527:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 869:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 529:  (0) rm  (1) re {*cmpsi_1}
      Creating newreg=561, assigning class GENERAL_REGS to r561
  529: flags:CC=cmp([r181:SI+0x14],r561:SI)
    Inserting insn reload before:
 1212: r561:SI=[r434:SI+0x14]

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1212:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 533:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 536:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 540:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 541:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 542:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) lzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 553:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 557:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) lzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 563:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 564:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=562 from oldreg=83, assigning class GENERAL_REGS to r562
      Making reload reg 562 for reg 83 optional
  564: {r562:SI=r562:SI+0x1;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1213: r562:SI=r83:SI
    Inserting insn reload after:
 1214: r83:SI=r562:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1214:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1213:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 567:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=563 from oldreg=123, assigning class GENERAL_REGS to r563
      Making reload reg 563 for reg 123 optional
  567: {r563:SI=r563:SI+r470:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1215: r563:SI=r123:SI
    Inserting insn reload after:
 1216: r123:SI=r563:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1216:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1215:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=14,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 568:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=564 from oldreg=123, assigning class INDEX_REGS to r564
  568: {r469:SI=r470:SI+r564:SI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1217: r564:SI=r123:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1217:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 569:  (0) r  (1) r  (2) le {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 570:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 581:  (0) r  (1) rm {*cmpsi_1}
      Creating newreg=565 from oldreg=83, assigning class GENERAL_REGS to r565
      Making reload reg 565 for reg 83 optional
  581: flags:CCGC=cmp(r465:SI,r565:SI)
    Inserting insn reload before:
 1218: r565:SI=r83:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1218:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            alt=4,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            alt=9,overall=7,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 1 in insn 584:  (0) m  (1) re {*movsi_internal}
      Creating newreg=566 from oldreg=83, assigning class GENERAL_REGS to r566
  584: [`ans']=r566:SI
      REG_DEAD r83:SI
    Inserting insn reload before:
 1219: r566:SI=r83:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1219:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 588:  (0) m  (1) re {*movsi_internal}
Changing pseudo 456 in operand 1 of insn 590 on equiv frame:SI-0x1c
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=610,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 1 in insn 590:  (0) m  (1) re {*movsi_internal}
      Creating newreg=567, assigning class GENERAL_REGS to r567
  590: [sp:SI]=r567:SI
      REG_EQUAL frame:SI-0x4
    Inserting insn reload before:
 1220: r567:SI=frame:SI-0x1c

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1220:  (0) =r  (1) Ts {*leasi}
      Change to class INDEX_REGS for r567
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) lzm  (2) i {*call_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 593:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 901:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 902:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=568 from oldreg=451, assigning class GENERAL_REGS to r568
  902: r568:SI=[frame:SI-0x1c]
    Inserting insn reload after:
 1221: r451:SI=r568:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1221:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 903:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) rm  (1) re {*cmpsi_1}
      Creating newreg=569 from oldreg=83, assigning class GENERAL_REGS to r569
      Making reload reg 569 for reg 83 optional
  599: flags:CCZ=cmp(r569:SI,r465:SI)
      REG_DEAD r83:SI
    Inserting insn reload before:
 1222: r569:SI=r83:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1222:  (0) =r  (1) g {*movsi_internal}
Changing pseudo 456 in operand 1 of insn 603 on equiv frame:SI-0x1c
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=16,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=610,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 1 in insn 603:  (0) m  (1) re {*movsi_internal}
      Creating newreg=570, assigning class GENERAL_REGS to r570
  603: [sp:SI]=r570:SI
      REG_EQUAL frame:SI-0x4
    Inserting insn reload before:
 1223: r570:SI=frame:SI-0x1c

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1223:  (0) =r  (1) Ts {*leasi}
      Change to class INDEX_REGS for r570
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) lzm  (2) i {*call_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 606:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 904:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 905:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=571 from oldreg=451, assigning class GENERAL_REGS to r571
  905: r571:SI=[frame:SI-0x1c]
    Inserting insn reload after:
 1224: r451:SI=r571:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1224:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 611:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=572 from oldreg=464, assigning class GENERAL_REGS to r572
  611: {r572:SI=r572:SI+0x1;clobber flags:CC;}
      REG_DEAD r451:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x4]+0x1
    Inserting insn reload before:
 1225: r572:SI=r451:SI
    Inserting insn reload after:
 1226: r464:SI=r572:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1225:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 612:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 622:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 624:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 625:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 626:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =r  (1) g {*movsi_internal}
      Removing equiv init insn 631 (freq=1)
  631: r410:SI=[const(`num'+0x4)]
      REG_EQUIV [const(`num'+0x4)]
deleting insn with uid = 631.
Changing pseudo 410 in operand 1 of insn 632 on equiv [const(`num'+0x4)]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 632:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=573 from oldreg=409, assigning class GENERAL_REGS to r573
  632: {r573:SI=r573:SI-r129:SI;clobber flags:CC;}
      REG_DEAD r410:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1227: r573:SI=[const(`num'+0x4)]
    Inserting insn reload after:
 1228: r409:SI=r573:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1227:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 644:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 645:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 646:  (1) lzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 647:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 649:  (0) =r  (1) g {*movsi_internal}
      Removing equiv init insn 652 (freq=9)
  652: r418:SI=[const(`num'+0x4)]
      REG_EQUIV [const(`num'+0x4)]
deleting insn with uid = 652.
Changing pseudo 418 in operand 1 of insn 653 on equiv [const(`num'+0x4)]
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 653:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=574 from oldreg=417, assigning class GENERAL_REGS to r574
  653: {r574:SI=r574:SI-r462:SI;clobber flags:CC;}
      REG_DEAD r418:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1229: r574:SI=[const(`num'+0x4)]
    Inserting insn reload after:
 1230: r417:SI=r574:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1229:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 887:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 664:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (1) lzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) o  (1) riF {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 668:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 669:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 670:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 671:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (1) lzm  (3) i {*call_value_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 674:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 886:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 688:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 689:  (1) lzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) m  (1) re {*movsi_internal}
      Creating newreg=575 from oldreg=209, assigning class GENERAL_REGS to address r575
	   Change to class INDEX_REGS for r575
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 691:  (0) o  (1) riF {*movdi_internal}
  691: [r575:SI+0x10]=r117:DI
      REG_DEAD r117:DI
    Inserting insn reload before:
 1231: r575:SI=r209:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1231:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=576 from oldreg=209, assigning class GENERAL_REGS to address r576
	   Change to class INDEX_REGS for r576
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 692:  (0) m  (1) re {*movsi_internal}
  692: [r576:SI+0x18]=0
    Inserting insn reload before:
 1232: r576:SI=r209:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1232:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 693:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=577 from oldreg=209, assigning class GENERAL_REGS to r577
  693: {r422:SI=r577:SI+0x10;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUIV [sp:SI+0x4]
    Inserting insn reload before:
 1233: r577:SI=r209:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1233:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 694:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 695:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 696:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (1) lzm  (3) i {*call_value_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 698:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 885:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 727:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 728:  (1) lzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 730:  (0) o  (1) riF {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 731:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 732:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 733:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 734:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 736:  (1) lzm  (3) i {*call_value_pop}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 737:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 742:  (0) r {*cmpsi_ccno_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 877:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 878:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 879:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 880:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) riFo {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 758:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 891:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 770:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 776:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=578 from oldreg=430, assigning class GENERAL_REGS to inheritance r578
    Original reg change 430->578 (bb3):
  856: r578:SI=0
      REG_EQUAL 0
    Add original<-inheritance after:
 1234: r430:SI=r578:SI

    Inheritance reuse change 430->578 (bb3):
 1061: r497:SI=r578:SI
      REG_DEAD r578:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=579 from oldreg=429, assigning class GENERAL_REGS to inheritance r579
    Original reg change 429->579 (bb3):
  855: r579:SI=0x1
      REG_EQUAL 0x1
    Add original<-inheritance after:
 1235: r429:SI=r579:SI

    Inheritance reuse change 429->579 (bb3):
 1060: r496:SI=r579:SI
      REG_DEAD r579:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1234: r430:SI=r578:SI
deleting insn with uid = 1234.
	    Removing dead insn:
  1235: r429:SI=r579:SI
deleting insn with uid = 1235.
EBB 4
EBB 5
EBB 6
EBB 7 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=580 from oldreg=429, assigning class GENERAL_REGS to inheritance r580
    Original reg change 429->580 (bb7):
 1125: r507:SI=r580:SI
    Add inheritance<-original before:
 1236: r580:SI=r429:SI

    Inheritance reuse change 429->580 (bb7):
 1128: r508:DI#0=r580:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 9 10
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=581 from oldreg=432, assigning class GENERAL_REGS to inheritance r581
    Original reg change 432->581 (bb10):
  860: r581:SI=0
      REG_EQUAL 0
    Add original<-inheritance after:
 1237: r432:SI=r581:SI

    Inheritance reuse change 432->581 (bb10):
 1068: r492:SI=r581:SI
      REG_DEAD r581:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=582 from oldreg=431, assigning class GENERAL_REGS to inheritance r582
    Original reg change 431->582 (bb10):
  859: r582:SI=0x1
      REG_EQUAL 0x1
    Add original<-inheritance after:
 1238: r431:SI=r582:SI

    Inheritance reuse change 431->582 (bb10):
 1067: r491:SI=r582:SI
      REG_DEAD r582:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1237: r432:SI=r581:SI
deleting insn with uid = 1237.
	    Removing dead insn:
  1238: r431:SI=r582:SI
deleting insn with uid = 1238.
EBB 11
EBB 12
EBB 13
EBB 14
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=583 from oldreg=87, assigning class GENERAL_REGS to inheritance r583
    Original reg change 87->583 (bb14):
 1143: r583:SI=r516:SI
    Add original<-inheritance after:
 1239: r87:SI=r583:SI

    Inheritance reuse change 87->583 (bb14):
 1144: r517:SI=r583:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=584 from oldreg=87, assigning class INDEX_REGS to inheritance r584
    Original reg change 87->584 (bb14):
 1141: r515:SI=r584:SI
    Add inheritance<-original before:
 1240: r584:SI=r87:SI

    Inheritance reuse change 87->584 (bb14):
 1142: r516:SI=r584:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=585 from oldreg=431, assigning class GENERAL_REGS to inheritance r585
    Original reg change 431->585 (bb14):
 1136: r513:SI=r585:SI
    Add inheritance<-original before:
 1241: r585:SI=r431:SI

    Inheritance reuse change 431->585 (bb14):
 1139: r514:DI#0=r585:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 15 16
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=586 from oldreg=240, assigning class GENERAL_REGS to inheritance r586
    Original reg change 240->586 (bb16):
 1146: r586:SI=r519:SI
    Add original<-inheritance after:
 1242: r240:SI=r586:SI

    Inheritance reuse change 240->586 (bb16):
 1075: r486:SI=r586:SI
      REG_DEAD r586:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=587 from oldreg=449, assigning class GENERAL_REGS to inheritance r587
    Original reg change 449->587 (bb15):
 1145: r518:SI=r587:SI
    Add inheritance<-original before:
 1243: r587:SI=r449:SI

    Inheritance reuse change 449->587 (bb16):
 1147: r520:SI=r587:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=588 from oldreg=449, assigning class GENERAL_REGS to inheritance r588
    Original reg change 449->588 (bb15):
 1073: r588:SI=r487:SI
      REG_DEAD r487:SI
    Add original<-inheritance after:
 1244: r449:SI=r588:SI

    Inheritance reuse change 449->588 (bb15):
 1243: r587:SI=r588:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1242: r240:SI=r586:SI
deleting insn with uid = 1242.
EBB 17
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=589 from oldreg=290, assigning class GENERAL_REGS to inheritance r589
    Original reg change 290->589 (bb17):
  169: {r589:DI=sign_extend(r291:SI);clobber flags:CC;clobber r500:SI;}
      REG_UNUSED r500:SI
      REG_DEAD r291:SI
      REG_UNUSED flags:CC
    Add original<-inheritance after:
 1245: r290:DI=r589:DI

    Inheritance reuse change 290->589 (bb17):
 1151: r522:DI=r589:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1245: r290:DI=r589:DI
deleting insn with uid = 1245.
EBB 18
EBB 19
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=590 from oldreg=304, assigning class GENERAL_REGS to inheritance r590
    Original reg change 304->590 (bb19):
  192: {r590:DI=sign_extend(r305:SI);clobber flags:CC;clobber r501:SI;}
      REG_UNUSED r501:SI
      REG_DEAD r305:SI
      REG_UNUSED flags:CC
    Add original<-inheritance after:
 1246: r304:DI=r590:DI

    Inheritance reuse change 304->590 (bb19):
 1156: r524:DI=r590:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1246: r304:DI=r590:DI
deleting insn with uid = 1246.
EBB 20
EBB 21
EBB 131
EBB 22
EBB 23 24
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=591 from oldreg=451, assigning class GENERAL_REGS to inheritance r591
    Original reg change 451->591 (bb23):
 1164: r529:DI#0=r591:SI
    Add inheritance<-original before:
 1247: r591:SI=r451:SI

    Inheritance reuse change 451->591 (bb23):
 1166: r530:SI=r591:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=592 from oldreg=451, assigning class GENERAL_REGS to inheritance r592
    Original reg change 451->592 (bb23):
  911: r106:SI=r592:SI
    Add inheritance<-original before:
 1248: r592:SI=r451:SI

    Inheritance reuse change 451->592 (bb23):
 1247: r591:SI=r592:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=593 from oldreg=451, assigning class GENERAL_REGS to inheritance r593
    Original reg change 451->593 (bb23):
 1162: r593:SI=r528:SI
    Add original<-inheritance after:
 1249: r451:SI=r593:SI

    Inheritance reuse change 451->593 (bb23):
 1248: r592:SI=r593:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 25
EBB 26
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=594 from oldreg=136, assigning class GENERAL_REGS to inheritance r594
    Original reg change 136->594 (bb26):
 1171: r533:SI=r594:DI#0
    Add inheritance<-original before:
 1250: r594:DI=r136:DI

    Inheritance reuse change 136->594 (bb26):
 1174: r534:DI#0=r594:DI#0
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=595 from oldreg=136, assigning class GENERAL_REGS to inheritance r595
    Original reg change 136->595 (bb26):
 1169: r532:SI=r595:DI#4
    Add inheritance<-original before:
 1251: r595:DI=r136:DI

    Inheritance reuse change 136->595 (bb26):
 1250: r594:DI=r595:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 27
EBB 28
EBB 29
EBB 30 31
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=596 from oldreg=451, assigning class GENERAL_REGS to inheritance r596
    Original reg change 451->596 (bb30):
 1179: r537:SI=r596:SI
    Add inheritance<-original before:
 1252: r596:SI=r451:SI

    Inheritance reuse change 451->596 (bb31):
 1180: r538:SI=r596:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 32 33
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=597 from oldreg=136, assigning class GENERAL_REGS to inheritance r597
    Original reg change 136->597 (bb32):
 1184: r541:SI=r597:DI#0
    Add inheritance<-original before:
 1253: r597:DI=r136:DI

    Inheritance reuse change 136->597 (bb32):
 1187: r542:DI#0=r597:DI#0
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=598 from oldreg=136, assigning class GENERAL_REGS to inheritance r598
    Original reg change 136->598 (bb32):
 1182: r540:SI=r598:DI#4
    Add inheritance<-original before:
 1254: r598:DI=r136:DI

    Inheritance reuse change 136->598 (bb32):
 1253: r597:DI=r598:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=599 from oldreg=123, assigning class GENERAL_REGS to inheritance r599
    Original reg change 123->599 (bb32):
 1181: r539:SI=r599:SI
    Add inheritance<-original before:
 1255: r599:SI=r123:SI

    Inheritance reuse change 123->599 (bb32):
 1189: r543:SI=r599:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40 41
EBB 42
EBB 43
EBB 44
EBB 45 46 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=600, assigning class NO_REGS to save r600
   28: r203:SI=r437:SI
      REG_DEAD r437:SI
    Add reg<-save before:
 1257: r437:SI=r600:SI

  376: NOTE_INSN_BASIC_BLOCK 53
    Add save<-reg after:
 1256: r600:SI=r437:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 54
EBB 55 56
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=601 from oldreg=448, assigning class GENERAL_REGS to inheritance r601
    Original reg change 448->601 (bb55):
  906: r187:SI=r601:SI
    Add inheritance<-original before:
 1258: r601:SI=r448:SI

    Inheritance reuse change 448->601 (bb55):
 1205: r554:SI=r601:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=602 from oldreg=448, assigning class GENERAL_REGS to inheritance r602
    Original reg change 448->602 (bb55):
 1204: r602:SI=r553:SI
    Add original<-inheritance after:
 1259: r448:SI=r602:SI

    Inheritance reuse change 448->602 (bb55):
 1258: r601:SI=r602:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=603 from oldreg=427, assigning class GENERAL_REGS to inheritance r603
    Original reg change 427->603 (bb55):
 1198: r550:SI=r603:SI
    Add inheritance<-original before:
 1260: r603:SI=r427:SI

    Inheritance reuse change 427->603 (bb55):
 1200: r551:DI#0=r603:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=604 from oldreg=136, assigning class GENERAL_REGS to inheritance r604
    Original reg change 136->604 (bb55):
 1196: r549:SI=r604:DI#4
    Add inheritance<-original before:
 1261: r604:DI=r136:DI

    Inheritance reuse change 136->604 (bb55):
  389: {r551:DI=zero_extend(r551:DI#0)*zero_extend(r604:DI#0);clobber flags:CC;}
      REG_DEAD r427:SI
      REG_UNUSED flags:CC
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=605 from oldreg=136, assigning class GENERAL_REGS to inheritance r605
    Original reg change 136->605 (bb55):
  386: {r548:SI=r548:SI*r605:DI#0;clobber flags:CC;}
      REG_DEAD r428:SI
      REG_UNUSED flags:CC
    Add inheritance<-original before:
 1262: r605:DI=r136:DI

    Inheritance reuse change 136->605 (bb55):
 1261: r604:DI=r605:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63 64
EBB 65
EBB 66
EBB 67
EBB 68 69 70
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=606 from oldreg=209, assigning class INDEX_REGS to inheritance r606
    Original reg change 209->606 (bb70):
 1206: r555:SI=r606:SI
    Add inheritance<-original before:
 1263: r606:SI=r209:SI

    Inheritance reuse change 209->606 (bb70):
 1207: r556:SI=r606:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=607, assigning class NO_REGS to save r607
   34: r209:SI=r435:SI
      REG_DEAD r435:SI
    Add reg<-save before:
 1265: r435:SI=r607:SI

  472: NOTE_INSN_BASIC_BLOCK 76
    Add save<-reg after:
 1264: r607:SI=r435:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86 87
EBB 88
EBB 89
EBB 90
EBB 91 92 93
EBB 94
EBB 95
EBB 96
EBB 97
EBB 98
EBB 99
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=608, assigning class NO_REGS to save r608
   40: r181:SI=r433:SI
      REG_DEAD r433:SI
    Add reg<-save before:
 1267: r433:SI=r608:SI

  556: NOTE_INSN_BASIC_BLOCK 99
    Add save<-reg after:
 1266: r608:SI=r433:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 100
EBB 101 102
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=609 from oldreg=123, assigning class GENERAL_REGS to inheritance r609
    Original reg change 123->609 (bb101):
 1216: r609:SI=r563:SI
    Add original<-inheritance after:
 1268: r123:SI=r609:SI

    Inheritance reuse change 123->609 (bb101):
 1217: r564:SI=r609:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 103
EBB 132
EBB 104
EBB 105
EBB 106
EBB 107
EBB 108
EBB 133
EBB 109 134
EBB 110
EBB 111
EBB 112
EBB 113
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=610, assigning class NO_REGS to save r610
  671: [sp:SI]=r258:SI
      REG_DEAD r258:SI
    Add reg<-save before:
 1270: r258:SI=r610:SI

  663: r258:SI=r203:SI
      REG_DEAD r203:SI
    Add save<-reg after:
 1269: r610:SI=r258:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 114
EBB 115
EBB 116
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=611 from oldreg=209, assigning class INDEX_REGS to inheritance r611
    Original reg change 209->611 (bb116):
 1232: r576:SI=r611:SI
    Add inheritance<-original before:
 1271: r611:SI=r209:SI

    Inheritance reuse change 209->611 (bb116):
 1233: r577:SI=r611:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=612 from oldreg=209, assigning class INDEX_REGS to inheritance r612
    Original reg change 209->612 (bb116):
 1231: r575:SI=r612:SI
    Add inheritance<-original before:
 1272: r612:SI=r209:SI

    Inheritance reuse change 209->612 (bb116):
 1271: r611:SI=r612:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=613 from oldreg=209, assigning class GENERAL_REGS to inheritance r613
    Original reg change 209->613 (bb116):
  690: r613:SI=ax:SI
      REG_DEAD ax:SI
    Add original<-inheritance after:
 1273: r209:SI=r613:SI

    Inheritance reuse change 209->613 (bb116):
 1272: r612:SI=r613:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=614, assigning class NO_REGS to save r614
  691: [r575:SI+0x10]=r117:DI
      REG_DEAD r117:DI
    Add reg<-save before:
 1275: r117:DI=r614:DI

  686: NOTE_INSN_BASIC_BLOCK 116
    Add save<-reg after:
 1274: r614:DI=r117:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=615, assigning class NO_REGS to save r615
  695: [sp:SI]=r186:SI
      REG_DEAD r186:SI
    Add reg<-save before:
 1277: r186:SI=r615:SI

  686: NOTE_INSN_BASIC_BLOCK 116
    Add save<-reg after:
 1276: r615:SI=r186:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 117
EBB 118
EBB 119
EBB 120
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=616, assigning class NO_REGS to save r616
  734: [sp:SI]=r254:SI
      REG_DEAD r254:SI
    Add reg<-save before:
 1279: r254:SI=r616:SI

  726: r254:SI=r181:SI
      REG_DEAD r181:SI
    Add save<-reg after:
 1278: r616:SI=r254:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 121
EBB 122
EBB 123
EBB 124
EBB 125
EBB 126
EBB 127
EBB 128
EBB 129
EBB 130

********** Pseudo live ranges #1: **********

  BB 130
   Insn 777: point = 0
   Insn 776: point = 0
  BB 111
   Insn 1034: point = 0
  BB 110
   Insn 656: point = 0
   Insn 655: point = 0
   Insn 654: point = 1
   Insn 1230: point = 3
	Hard reg 0 is preferable by r574 with profit 9
   Insn 653: point = 5
   Insn 1229: point = 5
   Insn 649: point = 6
   Insn 647: point = 7
   Insn 646: point = 7
   Insn 645: point = 7
   Insn 644: point = 7
   Insn 643: point = 8
  BB 134
   Insn 1107: point = 11
   Insn 1106: point = 13
  BB 109
   Insn 635: point = 16
   Insn 634: point = 16
   Insn 42: point = 17
   Insn 633: point = 18
   Insn 1228: point = 20
	Hard reg 0 is preferable by r573 with profit 1
   Insn 632: point = 22
   Insn 1227: point = 22
   Insn 629: point = 23
   Insn 627: point = 24
   Insn 626: point = 24
   Insn 625: point = 24
   Insn 624: point = 25
   Insn 623: point = 26
   Insn 622: point = 28
   Insn 621: point = 30
  BB 21
   Insn 993: point = 32
   Insn 216: point = 32
  BB 126
   Insn 1052: point = 33
   Insn 758: point = 33
  BB 133
   Insn 1105: point = 33
  BB 108
   Insn 616: point = 36
   Insn 615: point = 36
   Insn 612: point = 36
   Insn 1226: point = 36
	Hard reg 3 is preferable by r572 with profit 9
   Insn 611: point = 38
   Insn 1225: point = 38
  BB 105
   Insn 1030: point = 41
   Insn 1221: point = 41
   Insn 902: point = 43
   Insn 901: point = 44
   Insn 594: point = 45
   Insn 593: point = 46
   Insn 592: point = 46
   Insn 591: point = 46
   Insn 590: point = 46
   Insn 1220: point = 47
   Insn 588: point = 48
   Insn 587: point = 49
   Insn 584: point = 50
   Insn 1219: point = 51
  BB 107
   Insn 1224: point = 54
   Insn 905: point = 56
   Insn 904: point = 57
   Insn 607: point = 58
   Insn 606: point = 59
   Insn 605: point = 59
   Insn 604: point = 59
   Insn 603: point = 59
   Insn 1223: point = 60
  BB 106
   Insn 600: point = 62
   Insn 599: point = 62
   Insn 1222: point = 63
   Insn 903: point = 65
  BB 104
   Insn 582: point = 67
   Insn 581: point = 67
   Insn 1218: point = 68
   Insn 580: point = 69
  BB 103
   Insn 1114: point = 71
   Insn 41: point = 71
  BB 132
   Insn 1104: point = 73
  BB 101
   Insn 571: point = 76
   Insn 570: point = 76
   Insn 569: point = 76
   Insn 568: point = 77
   Insn 1217: point = 79
	   Creating copy r564<-r609@27
   Insn 1268: point = 81
   Insn 1216: point = 82
	   Creating copy r563->r609@27
   Insn 567: point = 84
   Insn 1215: point = 84
   Insn 566: point = 86
  BB 129
   Insn 1057: point = 88
  BB 100
   Insn 1214: point = 89
   Insn 564: point = 91
   Insn 1213: point = 91
   Insn 563: point = 93
  BB 98
   Insn 1026: point = 95
   Insn 553: point = 95
   Insn 545: point = 95
   Insn 544: point = 95
   Insn 543: point = 96
   Insn 542: point = 98
   Insn 541: point = 98
   Insn 540: point = 99
  BB 96
   Insn 1024: point = 100
   Insn 536: point = 100
  BB 95
   Insn 534: point = 102
   Insn 533: point = 102
  BB 94
   Insn 532: point = 104
  BB 93
   Insn 530: point = 105
   Insn 529: point = 105
   Insn 1212: point = 106
   Insn 869: point = 107
   Insn 527: point = 108
  BB 97
   Insn 39: point = 110
  BB 92
   Insn 525: point = 112
   Insn 524: point = 112
  BB 91
   Insn 521: point = 113
   Insn 520: point = 113
  BB 90
   Insn 1022: point = 115
  BB 99
   Insn 40: point = 116
   Insn 1267: point = 118
	Hard reg 0 is preferable by r608 with profit 1
   Insn 558: point = 120
   Insn 557: point = 120
   Insn 1266: point = 121
	Hard reg 0 is preferable by r608 with profit 2
  BB 121
   Insn 1046: point = 124
  BB 120
   Insn 743: point = 125
   Insn 742: point = 125
   Insn 876: point = 125
   Insn 875: point = 126
   Insn 737: point = 127
   Insn 736: point = 127
   Insn 735: point = 127
   Insn 734: point = 127
   Insn 1279: point = 128
	Hard reg 1 is preferable by r616 with profit 4
   Insn 733: point = 130
   Insn 732: point = 131
   Insn 731: point = 132
   Insn 730: point = 132
   Insn 729: point = 133
   Insn 728: point = 134
   Insn 727: point = 134
   Insn 1278: point = 134
	Hard reg 1 is preferable by r616 with profit 8
   Insn 726: point = 136
  BB 89
   Insn 512: point = 139
   Insn 511: point = 139
  BB 88
   Insn 510: point = 140
  BB 87
   Insn 508: point = 141
   Insn 507: point = 141
  BB 86
   Insn 505: point = 142
   Insn 504: point = 142
   Insn 1103: point = 142
   Insn 1102: point = 144
  BB 85
   Insn 502: point = 147
   Insn 501: point = 147
  BB 83
   Insn 1019: point = 148
   Insn 37: point = 148
   Insn 36: point = 148
  BB 84
   Insn 497: point = 150
  BB 82
   Insn 489: point = 151
   Insn 488: point = 151
  BB 81
   Insn 487: point = 152
  BB 80
   Insn 485: point = 153
   Insn 484: point = 153
  BB 79
   Insn 1101: point = 154
   Insn 1100: point = 156
   Insn 1099: point = 158
   Insn 888: point = 160
  BB 127
   Insn 1054: point = 162
   Insn 891: point = 162
  BB 128
   Insn 771: point = 165
   Insn 770: point = 165
  BB 67
   Insn 1010: point = 167
  BB 119
   Insn 885: point = 168
  BB 118
   Insn 715: point = 170
   Insn 714: point = 170
   Insn 712: point = 170
  BB 78
   Insn 1017: point = 172
  BB 77
   Insn 478: point = 173
   Insn 477: point = 173
   Insn 1211: point = 174
  BB 75
   Insn 1014: point = 177
   Insn 469: point = 177
   Insn 461: point = 177
   Insn 460: point = 177
   Insn 459: point = 178
   Insn 458: point = 180
   Insn 1209: point = 181
   Insn 457: point = 182
   Insn 456: point = 183
  BB 73
   Insn 1012: point = 184
   Insn 452: point = 184
  BB 72
   Insn 450: point = 186
   Insn 449: point = 186
  BB 71
   Insn 448: point = 188
  BB 70
   Insn 446: point = 189
   Insn 445: point = 189
   Insn 1208: point = 190
   Insn 1207: point = 191
	   Creating copy r556<-r606@1
   Insn 867: point = 193
   Insn 1206: point = 195
	   Creating copy r555<-r606@1
   Insn 1263: point = 196
   Insn 443: point = 197
  BB 74
   Insn 33: point = 199
  BB 69
   Insn 441: point = 201
   Insn 440: point = 201
  BB 68
   Insn 437: point = 202
   Insn 436: point = 202
  BB 76
   Insn 34: point = 204
   Insn 1265: point = 206
	Hard reg 0 is preferable by r607 with profit 1
   Insn 474: point = 208
   Insn 473: point = 208
   Insn 1210: point = 209
   Insn 1264: point = 211
	Hard reg 0 is preferable by r607 with profit 2
  BB 117
   Insn 1042: point = 214
  BB 116
   Insn 704: point = 215
   Insn 703: point = 215
   Insn 874: point = 215
   Insn 873: point = 216
   Insn 698: point = 217
   Insn 697: point = 217
   Insn 696: point = 217
   Insn 695: point = 217
   Insn 1277: point = 218
	Hard reg 1 is preferable by r615 with profit 4
   Insn 694: point = 220
   Insn 693: point = 221
   Insn 1233: point = 223
	   Creating copy r577<-r611@4
   Insn 692: point = 225
   Insn 1232: point = 226
	   Creating copy r576<-r611@4
   Insn 1271: point = 227
	   Creating copy r611<-r612@4
   Insn 691: point = 229
   Insn 1275: point = 230
	Hard reg 2 is preferable by r614 with profit 4
   Insn 1231: point = 232
	   Creating copy r575<-r612@4
   Insn 1272: point = 233
	   Creating copy r612<-r613@4
   Insn 1273: point = 235
   Insn 690: point = 236
	Hard reg 0 is preferable by r613 with profit 4
   Insn 689: point = 237
   Insn 688: point = 237
   Insn 1274: point = 237
	Hard reg 2 is preferable by r614 with profit 8
   Insn 1276: point = 239
	Hard reg 1 is preferable by r615 with profit 8
  BB 66
   Insn 428: point = 242
   Insn 427: point = 242
  BB 65
   Insn 426: point = 243
  BB 64
   Insn 424: point = 244
   Insn 423: point = 244
  BB 63
   Insn 421: point = 245
   Insn 420: point = 245
   Insn 1098: point = 245
   Insn 1097: point = 247
   Insn 1096: point = 249
  BB 62
   Insn 418: point = 252
   Insn 417: point = 252
  BB 60
   Insn 1007: point = 253
   Insn 31: point = 253
   Insn 30: point = 253
  BB 61
   Insn 413: point = 255
  BB 59
   Insn 405: point = 256
   Insn 404: point = 256
  BB 58
   Insn 403: point = 257
  BB 57
   Insn 401: point = 258
   Insn 400: point = 258
  BB 56
   Insn 1095: point = 259
   Insn 1094: point = 261
   Insn 1093: point = 263
   Insn 1092: point = 265
   Insn 889: point = 267
  BB 115
   Insn 886: point = 269
  BB 55
   Insn 397: point = 271
   Insn 396: point = 271
   Insn 1205: point = 272
	   Creating copy r554<-r601@7
   Insn 906: point = 274
   Insn 1258: point = 275
	   Creating copy r601<-r602@7
   Insn 1259: point = 277
   Insn 1204: point = 278
	   Creating copy r553->r602@7
   Insn 395: point = 280
   Insn 1203: point = 281
	Hard reg 2 is preferable by r552 with profit 7
   Insn 393: point = 283
   Insn 1202: point = 284
   Insn 391: point = 286
   Insn 1201: point = 287
	Hard reg 0 is preferable by r551 with profit 7
   Insn 389: point = 289
   Insn 1200: point = 291
   Insn 1199: point = 292
   Insn 388: point = 293
   Insn 1197: point = 295
	Hard reg 0 is preferable by r549 with profit 7
   Insn 387: point = 297
   Insn 1198: point = 298
	   Creating copy r550<-r603@7
   Insn 1260: point = 299
   Insn 1196: point = 301
   Insn 1261: point = 302
	   Creating copy r604<-r605@7
   Insn 1195: point = 304
	Hard reg 2 is preferable by r548 with profit 7
   Insn 386: point = 306
   Insn 1262: point = 306
   Insn 1194: point = 307
  BB 54
   Insn 384: point = 310
   Insn 383: point = 310
  BB 52
   Insn 1005: point = 312
   Insn 373: point = 312
   Insn 365: point = 312
   Insn 364: point = 312
   Insn 363: point = 313
   Insn 362: point = 315
   Insn 361: point = 315
   Insn 360: point = 316
  BB 50
   Insn 1003: point = 317
   Insn 356: point = 317
  BB 49
   Insn 354: point = 319
   Insn 353: point = 319
  BB 48
   Insn 352: point = 321
  BB 47
   Insn 350: point = 322
   Insn 349: point = 322
   Insn 1193: point = 323
   Insn 865: point = 324
   Insn 347: point = 325
  BB 51
   Insn 27: point = 327
  BB 46
   Insn 345: point = 329
   Insn 344: point = 329
  BB 45
   Insn 341: point = 330
   Insn 340: point = 330
  BB 44
   Insn 1001: point = 332
  BB 53
   Insn 28: point = 333
   Insn 1257: point = 335
	Hard reg 0 is preferable by r600 with profit 2
   Insn 378: point = 337
   Insn 377: point = 337
   Insn 1256: point = 338
	Hard reg 0 is preferable by r600 with profit 4
  BB 114
   Insn 1038: point = 341
  BB 113
   Insn 680: point = 342
   Insn 679: point = 342
   Insn 872: point = 342
   Insn 871: point = 343
   Insn 674: point = 344
   Insn 673: point = 344
   Insn 672: point = 344
   Insn 671: point = 344
   Insn 1270: point = 345
	Hard reg 1 is preferable by r610 with profit 15
   Insn 670: point = 347
   Insn 669: point = 348
   Insn 668: point = 349
   Insn 667: point = 349
   Insn 666: point = 349
   Insn 665: point = 350
   Insn 664: point = 350
   Insn 1269: point = 350
	Hard reg 1 is preferable by r610 with profit 30
   Insn 663: point = 352
  BB 43
   Insn 332: point = 355
   Insn 331: point = 355
  BB 42
   Insn 330: point = 356
  BB 41
   Insn 328: point = 357
   Insn 327: point = 357
  BB 40
   Insn 325: point = 358
   Insn 324: point = 358
   Insn 1091: point = 358
   Insn 1090: point = 360
  BB 39
   Insn 322: point = 363
   Insn 321: point = 363
  BB 37
   Insn 998: point = 364
   Insn 25: point = 364
   Insn 24: point = 364
  BB 38
   Insn 317: point = 366
  BB 36
   Insn 309: point = 367
   Insn 308: point = 367
  BB 35
   Insn 307: point = 368
  BB 34
   Insn 305: point = 369
   Insn 304: point = 369
  BB 33
   Insn 1089: point = 370
   Insn 1088: point = 372
   Insn 1087: point = 374
   Insn 890: point = 376
  BB 112
   Insn 887: point = 378
  BB 32
   Insn 301: point = 380
   Insn 300: point = 380
   Insn 1192: point = 380
   Insn 864: point = 382
   Insn 1191: point = 384
   Insn 863: point = 386
   Insn 1190: point = 387
   Insn 296: point = 389
   Insn 1189: point = 391
	   Creating copy r543<-r599@27
   Insn 294: point = 393
   Insn 293: point = 395
   Insn 291: point = 397
   Insn 1188: point = 398
	Hard reg 0 is preferable by r542 with profit 27
   Insn 289: point = 400
   Insn 1187: point = 402
   Insn 1186: point = 403
   Insn 288: point = 404
   Insn 1185: point = 406
	Hard reg 1 is preferable by r541 with profit 27
   Insn 287: point = 408
   Insn 1184: point = 408
   Insn 1253: point = 409
	   Creating copy r597<-r598@27
   Insn 1183: point = 411
	Hard reg 4 is preferable by r540 with profit 27
   Insn 285: point = 413
   Insn 1182: point = 413
   Insn 1254: point = 414
   Insn 283: point = 415
   Insn 1181: point = 417
	   Creating copy r539<-r599@27
   Insn 1255: point = 418
  BB 102
   Insn 1028: point = 420
   Insn 574: point = 420
  BB 31
   Insn 1086: point = 422
   Insn 1085: point = 424
   Insn 1084: point = 426
   Insn 899: point = 428
   Insn 1180: point = 430
	   Creating copy r538<-r596@2
   Insn 22: point = 432
   Insn 21: point = 433
   Insn 20: point = 434
  BB 30
   Insn 278: point = 436
   Insn 277: point = 436
   Insn 1179: point = 437
	   Creating copy r537<-r596@2
   Insn 1252: point = 438
  BB 28
   Insn 996: point = 440
   Insn 1083: point = 440
  BB 27
   Insn 274: point = 443
   Insn 273: point = 443
   Insn 1178: point = 444
   Insn 270: point = 445
   Insn 268: point = 445
   Insn 266: point = 446
   Insn 265: point = 448
   Insn 1177: point = 450
	Hard reg 4 is preferable by r535 with profit 27
   Insn 263: point = 452
   Insn 1176: point = 452
  BB 26
   Insn 259: point = 454
   Insn 1175: point = 455
   Insn 257: point = 457
   Insn 1174: point = 459
   Insn 1173: point = 460
   Insn 256: point = 461
   Insn 1172: point = 463
	Hard reg 4 is preferable by r533 with profit 13
   Insn 255: point = 465
   Insn 1171: point = 465
   Insn 1250: point = 466
	   Creating copy r594<-r595@13
   Insn 1170: point = 468
	Hard reg 5 is preferable by r532 with profit 13
   Insn 254: point = 470
   Insn 1169: point = 470
   Insn 1251: point = 471
  BB 25
   Insn 252: point = 474
   Insn 251: point = 474
   Insn 1168: point = 475
	Hard reg 4 is preferable by r531 with profit 27
   Insn 248: point = 477
   Insn 1167: point = 477
  BB 24
   Insn 1082: point = 479
   Insn 1081: point = 481
   Insn 1080: point = 483
   Insn 17: point = 485
   Insn 16: point = 486
  BB 29
   Insn 18: point = 488
  BB 23
   Insn 245: point = 490
   Insn 244: point = 490
   Insn 1166: point = 491
	   Creating copy r530<-r591@2
   Insn 1165: point = 493
	Hard reg 3 is preferable by r529 with profit 2
   Insn 242: point = 495
   Insn 1164: point = 497
   Insn 1247: point = 497
	   Creating copy r591<-r592@2
   Insn 1163: point = 499
   Insn 911: point = 500
   Insn 1248: point = 501
	   Creating copy r592<-r593@2
   Insn 1249: point = 503
   Insn 1162: point = 504
	   Creating copy r528->r593@2
   Insn 241: point = 506
   Insn 240: point = 507
   Insn 238: point = 507
   Insn 236: point = 507
   Insn 234: point = 507
   Insn 232: point = 507
   Insn 231: point = 507
   Insn 230: point = 507
   Insn 229: point = 507
   Insn 228: point = 508
  BB 22
   Insn 225: point = 510
   Insn 224: point = 510
   Insn 1161: point = 511
   Insn 895: point = 513
   Insn 1160: point = 514
	Hard reg 0 is preferable by r526 with profit 9
   Insn 223: point = 516
   Insn 1159: point = 518
  BB 131
   Insn 1079: point = 520
   Insn 1078: point = 522
   Insn 1077: point = 524
  BB 20
   Insn 214: point = 527
   Insn 213: point = 527
   Insn 1158: point = 528
   Insn 15: point = 529
   Insn 221: point = 530
   Insn 212: point = 531
  BB 19
   Insn 209: point = 532
   Insn 208: point = 532
   Insn 206: point = 532
   Insn 205: point = 532
   Insn 1157: point = 533
	Hard reg 0 is preferable by r524 with profit 90
   Insn 204: point = 535
   Insn 1156: point = 536
	   Creating copy r524<-r590@90
   Insn 202: point = 538
   Insn 1155: point = 539
	Hard reg 1 is preferable by r523 with profit 90
   Insn 200: point = 541
   Insn 1154: point = 543
   Insn 1153: point = 543
   Insn 195: point = 544
   Insn 192: point = 545
   Insn 191: point = 547
  BB 18
   Insn 1076: point = 549
   Insn 13: point = 551
  BB 17
   Insn 186: point = 553
   Insn 185: point = 553
   Insn 183: point = 553
   Insn 182: point = 553
   Insn 1152: point = 554
	Hard reg 0 is preferable by r522 with profit 90
   Insn 181: point = 556
   Insn 1151: point = 557
	   Creating copy r522<-r589@90
   Insn 179: point = 559
   Insn 1150: point = 560
	Hard reg 1 is preferable by r521 with profit 90
   Insn 177: point = 562
   Insn 1149: point = 564
   Insn 1148: point = 564
   Insn 172: point = 565
   Insn 169: point = 566
   Insn 168: point = 568
  BB 16
   Insn 1075: point = 570
	Hard reg 3 is preferable by r586 with profit 1
   Insn 1074: point = 572
   Insn 12: point = 574
   Insn 1146: point = 575
	   Creating copy r519->r586@1
   Insn 163: point = 577
   Insn 1147: point = 579
	   Creating copy r520<-r587@1
  BB 15
   Insn 161: point = 582
   Insn 160: point = 582
   Insn 1145: point = 583
	   Creating copy r518<-r587@1
   Insn 1243: point = 584
	   Creating copy r587<-r588@1
   Insn 1244: point = 586
   Insn 1073: point = 587
	Hard reg 0 is preferable by r588 with profit 1
  BB 14
   Insn 158: point = 590
   Insn 157: point = 590
   Insn 1144: point = 591
	   Creating copy r517<-r583@81
   Insn 155: point = 593
   Insn 1239: point = 594
   Insn 1143: point = 595
	   Creating copy r516->r583@81
   Insn 154: point = 597
   Insn 1142: point = 597
	   Creating copy r516<-r584@81
   Insn 153: point = 599
   Insn 1141: point = 600
	   Creating copy r515<-r584@81
   Insn 1240: point = 601
   Insn 151: point = 603
   Insn 1140: point = 604
	Hard reg 0 is preferable by r514 with profit 81
   Insn 149: point = 606
   Insn 1139: point = 608
   Insn 1138: point = 609
   Insn 148: point = 610
   Insn 1137: point = 612
	Hard reg 0 is preferable by r513 with profit 81
   Insn 147: point = 614
   Insn 1136: point = 614
	   Creating copy r513<-r585@81
   Insn 1241: point = 615
   Insn 1135: point = 617
	Hard reg 2 is preferable by r512 with profit 81
   Insn 146: point = 619
   Insn 1134: point = 619
   Insn 1072: point = 621
  BB 13
   Insn 143: point = 624
   Insn 142: point = 624
   Insn 141: point = 625
   Insn 139: point = 627
   Insn 138: point = 628
   Insn 137: point = 629
   Insn 136: point = 629
   Insn 135: point = 631
   Insn 134: point = 633
   Insn 133: point = 635
   Insn 131: point = 637
   Insn 130: point = 639
   Insn 1133: point = 640
	Hard reg 0 is preferable by r511 with profit 910
   Insn 129: point = 642
   Insn 1132: point = 642
  BB 125
   Insn 1050: point = 644
   Insn 1111: point = 644
   Insn 1110: point = 646
   Insn 10: point = 648
  BB 12
   Insn 991: point = 650
   Insn 1071: point = 650
   Insn 1070: point = 652
   Insn 1069: point = 654
  BB 11
   Insn 124: point = 657
   Insn 123: point = 657
   Insn 122: point = 658
   Insn 120: point = 660
   Insn 119: point = 661
   Insn 118: point = 662
   Insn 937: point = 662
   Insn 1131: point = 663
   Insn 935: point = 664
   Insn 934: point = 665
   Insn 1130: point = 666
   Insn 932: point = 667
  BB 10
   Insn 1068: point = 668
	Hard reg 4 is preferable by r581 with profit 81
   Insn 1067: point = 670
	Hard reg 3 is preferable by r582 with profit 81
   Insn 1066: point = 672
   Insn 860: point = 674
   Insn 859: point = 675
  BB 124
   Insn 880: point = 677
   Insn 879: point = 678
  BB 9
   Insn 110: point = 680
   Insn 109: point = 680
   Insn 108: point = 681
   Insn 107: point = 683
   Insn 106: point = 684
   Insn 105: point = 685
  BB 8
   Insn 7: point = 686
  BB 7
   Insn 103: point = 688
   Insn 102: point = 688
   Insn 101: point = 689
   Insn 100: point = 690
   Insn 98: point = 691
   Insn 1129: point = 692
	Hard reg 0 is preferable by r508 with profit 1
   Insn 96: point = 694
   Insn 1128: point = 696
   Insn 1127: point = 697
   Insn 95: point = 698
   Insn 1126: point = 700
	Hard reg 0 is preferable by r507 with profit 1
   Insn 94: point = 702
   Insn 1125: point = 702
	   Creating copy r507<-r580@1
   Insn 1236: point = 703
   Insn 1124: point = 705
	Hard reg 2 is preferable by r506 with profit 1
   Insn 93: point = 707
   Insn 1123: point = 707
   Insn 1065: point = 709
  BB 6
   Insn 91: point = 712
   Insn 90: point = 712
   Insn 89: point = 713
   Insn 87: point = 715
   Insn 86: point = 716
   Insn 85: point = 717
   Insn 84: point = 717
   Insn 83: point = 719
   Insn 82: point = 721
   Insn 81: point = 723
   Insn 79: point = 725
   Insn 78: point = 727
   Insn 1122: point = 728
	Hard reg 0 is preferable by r505 with profit 9
   Insn 77: point = 730
   Insn 1121: point = 730
  BB 123
   Insn 1048: point = 732
   Insn 1109: point = 732
   Insn 1108: point = 734
   Insn 6: point = 736
  BB 5
   Insn 988: point = 738
   Insn 1064: point = 738
   Insn 1063: point = 740
   Insn 1062: point = 742
  BB 4
   Insn 72: point = 745
   Insn 71: point = 745
   Insn 70: point = 746
   Insn 68: point = 748
   Insn 67: point = 749
   Insn 66: point = 750
   Insn 931: point = 750
   Insn 929: point = 750
   Insn 928: point = 751
   Insn 926: point = 751
  BB 3
   Insn 1061: point = 752
	Hard reg 5 is preferable by r578 with profit 1
   Insn 1060: point = 754
	Hard reg 4 is preferable by r579 with profit 1
   Insn 1059: point = 756
   Insn 927: point = 758
   Insn 856: point = 759
   Insn 855: point = 760
  BB 122
   Insn 878: point = 762
   Insn 877: point = 763
  BB 2
   Insn 58: point = 765
   Insn 57: point = 765
   Insn 56: point = 766
   Insn 55: point = 768
   Insn 54: point = 769
   Insn 53: point = 770
   Insn 3: point = 770
 r83: [92..433] [73..89] [64..71] [52..53]
 r84: [682..684]
 r85: [688..690]
 r87: [602..686] [590..594]
 r94: [573..574]
 r101: [550..551]
 r104: [490..493] [484..487]
 r106: [482..500] [427..440]
 r112: [375..393] [266..360] [173..249] [159..171] [132..144]
 r113: [285..387]
 r117: [264..281] [238..247] [229..230]
 r120: [327..327] [319..325] [314..317]
 r123: [85..432] [76..81]
 r125: [525..529]
 r129: [14..23]
 r132: [12..17]
 r135: [480..486]
 r136: [488..488] [472..485] [76..455]
 r149: [767..769]
 r150: [747..749]
 r151: [757..768] [735..742]
 r158: [718..719]
 r159: [733..736] [695..709]
 r160: [714..716]
 r165: [170..170] [157..162]
 r166: [659..661]
 r167: [673..683] [647..654]
 r174: [630..631]
 r175: [645..648] [607..621]
 r176: [626..628]
 r181: [168..168] [155..160] [137..142] [120..133] [93..116]
 r186: [269..269] [262..267] [240..245] [217..218] [165..167]
 r187: [271..274] [260..268]
 r189: [425..434]
 r203: [378..378] [371..376] [353..358] [337..349] [310..333]
 r209: [210..235] [175..204]
 r212: [199..199] [186..197] [179..184]
 r229: [110..110] [102..108] [97..100]
 r252: [523..530] [24..33]
 r254: [135..136] [127..128]
 r258: [351..352] [344..345]
 r261: [765..766]
 r262: [745..746]
 r263: [726..728]
 r264: [726..727]
 r265: [720..725]
 r266: [720..721]
 r267: [722..723]
 r268: [712..713]
 r269: [699..705]
 r270: [699..700]
 r271: [691..698]
 r272: [689..692]
 r274: [680..681]
 r275: [657..658]
 r276: [638..640]
 r277: [638..639]
 r278: [632..637]
 r279: [632..633]
 r280: [634..635]
 r281: [624..625]
 r283: [611..617]
 r284: [611..612]
 r285: [603..610]
 r286: [599..604]
 r291: [567..568]
 r293: [559..565]
 r298: [556..560]
 r301: [553..554]
 r305: [546..547]
 r307: [538..544]
 r312: [535..539]
 r315: [532..533]
 r317: [510..514]
 r318: [516..517]
 r320: [507..508]
 r328: [462..468]
 r329: [462..463]
 r330: [454..461]
 r332: [449..450]
 r334: [445..448]
 r339: [401..415]
 r340: [405..411]
 r342: [405..406]
 r344: [397..404]
 r345: [394..398]
 r347: [394..395]
 r356: [312..313]
 r363: [294..304]
 r364: [294..295]
 r365: [286..293]
 r366: [283..287]
 r374: [177..178]
 r386: [95..96]
 r397: [48..49]
 r403: [27..28]
 r404: [29..30]
 r406: [25..26]
 r409: [19..20]
 r412: [16..18]
 r414: [7..8]
 r417: [2..3]
 r420: [0..1]
 r421: [347..348]
 r422: [220..221]
 r424: [130..131]
 r427: [300..384]
 r428: [308..380]
 r429: [762..763] [704..740]
 r430: [762..762] [708..738]
 r431: [677..678] [616..652]
 r432: [677..677] [620..650]
 r433: [122..126] [117..118] [113..114]
 r434: [125..125] [98..114]
 r435: [212..216] [205..206] [202..203]
 r436: [215..215] [182..203]
 r437: [339..343] [334..335] [330..331]
 r438: [342..342] [315..331]
 r439: [474..475]
 r441: [319..324]
 r443: [186..193]
 r445: [102..107]
 r448: [271..277] [242..268] [163..167]
 r449: [521..586]
 r450: [423..428]
 r451: [510..511] [436..503] [62..73] [54..54] [39..41]
 r456: [36..531]
 r457: [532..552]
 r458: [553..581]
 r460: [590..687]
 r461: [745..758]
 r462: [9..13] [0..6]
 r463: [0..11]
 r464: [517..524] [36..36]
 r465: [510..522] [62..69] [54..58] [34..45]
 r466: [510..520] [62..65] [54..57] [36..44]
 r467: [396..426] [76..76]
 r468: [422..424] [380..420] [373..377]
 r469: [383..422] [76..77]
 r470: [74..86]
 r471: [145..158]
 r472: [147..156]
 r473: [150..154] [143..148]
 r474: [250..265]
 r475: [248..263]
 r476: [255..261] [246..253]
 r477: [252..259]
 r478: [361..374]
 r479: [363..372]
 r480: [366..370] [359..364]
 r481: [443..483]
 r482: [441..481]
 r483: [443..479]
 r484: [532..549]
 r485: [553..572]
 r486: [553..570]
 r487: [588..593]
 r488: [636..646] [624..627]
 r489: [639..644] [622..629]
 r490: [664..672] [655..660]
 r491: [653..670]
 r492: [651..668]
 r493: [724..734] [712..715]
 r494: [727..732] [710..717]
 r495: [750..756] [743..748]
 r496: [741..754]
 r497: [739..752]
 r498: [721..722]
 r499: [633..634]
 r500: [566..567]
 r501: [545..546]
 r502: [495..496]
 r505: [729..730]
 r506: [706..707]
 r507: [701..702]
 r508: [693..697]
 r509: [665..666]
 r510: [662..663]
 r511: [641..642]
 r512: [618..619]
 r513: [613..614]
 r514: [605..609]
 r515: [599..600]
 r516: [596..597]
 r517: [590..591]
 r518: [582..583]
 r519: [576..577]
 r520: [578..579]
 r521: [561..564]
 r522: [555..557]
 r523: [540..543]
 r524: [534..536]
 r525: [527..528]
 r526: [515..518]
 r527: [512..513]
 r528: [505..506]
 r529: [494..499]
 r530: [490..491]
 r531: [476..477]
 r532: [469..470]
 r533: [464..465]
 r534: [456..460]
 r535: [451..452]
 r536: [443..444]
 r537: [436..437]
 r538: [429..430]
 r539: [416..417]
 r540: [412..413]
 r541: [407..408]
 r542: [399..403]
 r543: [390..391]
 r544: [388..389]
 r545: [385..386]
 r546: [381..382]
 r547: [322..323]
 r548: [305..307]
 r549: [296..301]
 r550: [297..298]
 r551: [288..292]
 r552: [282..284]
 r553: [279..280]
 r554: [271..272]
 r555: [194..195]
 r556: [189..191]
 r557: [189..190]
 r558: [180..181]
 r559: [208..209]
 r560: [173..174]
 r561: [105..106]
 r562: [90..91]
 r563: [83..84]
 r564: [78..79]
 r565: [67..68]
 r566: [50..51]
 r567: [46..47]
 r568: [42..43]
 r569: [62..63]
 r570: [59..60]
 r571: [55..56]
 r572: [37..38]
 r573: [21..22]
 r574: [4..5]
 r575: [229..232]
 r576: [225..226]
 r577: [222..223]
 r578: [753..759]
 r579: [755..760]
 r580: [696..703]
 r581: [669..674]
 r582: [671..675]
 r583: [592..595]
 r584: [598..601]
 r585: [608..615]
 r586: [571..575]
 r587: [580..584]
 r588: [585..587]
 r589: [558..566]
 r590: [537..545]
 r591: [492..497]
 r592: [498..501]
 r593: [502..504]
 r594: [459..466]
 r595: [467..471]
 r596: [431..438]
 r597: [402..409]
 r598: [410..414]
 r599: [392..418]
 r600: [336..338]
 r601: [273..275]
 r602: [276..278]
 r603: [291..299]
 r604: [290..302]
 r605: [303..306]
 r606: [192..196]
 r607: [207..211]
 r608: [119..121]
 r609: [80..82]
 r610: [346..350]
 r611: [224..227]
 r612: [228..233]
 r613: [234..236]
 r614: [231..237]
 r615: [219..239]
 r616: [129..134]
Compressing live ranges: from 770 to 494 - 64%
Ranges after the compression:
 r83: [65..269] [47..62] [38..39]
 r84: [433..434]
 r85: [435..436]
 r87: [376..434] [368..371]
 r94: [356..357]
 r101: [341..342]
 r104: [303..306] [300..301]
 r106: [298..310] [264..271]
 r112: [227..242] [166..218] [101..155] [85..92]
 r113: [179..236]
 r117: [164..176] [148..153] [142..143]
 r120: [195..199]
 r123: [61..269] [53..58]
 r125: [328..329]
 r129: [12..17]
 r132: [10..13]
 r135: [296..301]
 r136: [292..302] [53..281]
 r149: [492..493]
 r150: [478..479]
 r151: [486..493] [470..475]
 r158: [455..456]
 r159: [468..471] [439..450]
 r160: [453..454]
 r165: [106..106] [99..102]
 r166: [417..418]
 r167: [427..434] [409..414]
 r174: [394..395]
 r175: [407..410] [378..389]
 r176: [392..393]
 r181: [105..105] [97..102] [89..90] [76..86] [65..73]
 r186: [162..168] [150..151] [134..135] [103..104]
 r187: [169..172] [160..167]
 r189: [262..269]
 r203: [223..229] [215..216] [204..212] [193..201]
 r209: [129..147] [110..124]
 r212: [112..122]
 r229: [67..71]
 r252: [326..329] [18..23]
 r254: [87..88] [81..82]
 r258: [213..214] [209..210]
 r261: [490..491]
 r262: [476..477]
 r263: [463..465]
 r264: [463..464]
 r265: [457..462]
 r266: [457..458]
 r267: [459..460]
 r268: [451..452]
 r269: [441..446]
 r270: [441..442]
 r271: [437..440]
 r272: [435..438]
 r274: [431..432]
 r275: [415..416]
 r276: [402..404]
 r277: [402..403]
 r278: [396..401]
 r279: [396..397]
 r280: [398..399]
 r281: [390..391]
 r283: [380..385]
 r284: [380..381]
 r285: [376..379]
 r286: [374..377]
 r291: [352..353]
 r293: [347..350]
 r298: [345..348]
 r301: [343..344]
 r305: [339..340]
 r307: [334..337]
 r312: [332..335]
 r315: [330..331]
 r317: [317..320]
 r318: [321..322]
 r320: [315..316]
 r328: [284..289]
 r329: [284..285]
 r330: [280..283]
 r332: [276..277]
 r334: [274..275]
 r339: [247..256]
 r340: [249..254]
 r342: [249..250]
 r344: [245..248]
 r345: [243..246]
 r347: [243..244]
 r356: [193..194]
 r363: [183..190]
 r364: [183..184]
 r365: [179..182]
 r366: [177..180]
 r374: [110..111]
 r386: [65..66]
 r397: [34..35]
 r403: [20..21]
 r404: [22..23]
 r406: [18..19]
 r409: [14..15]
 r412: [12..13]
 r414: [6..7]
 r417: [2..3]
 r420: [0..1]
 r421: [211..212]
 r422: [136..137]
 r424: [83..84]
 r427: [187..234]
 r428: [193..230]
 r429: [488..489] [445..473]
 r430: [488..488] [449..471]
 r431: [429..430] [384..412]
 r432: [429..429] [388..410]
 r433: [78..80] [72..75]
 r434: [79..79] [67..73]
 r435: [131..133] [123..126]
 r436: [132..132] [114..124]
 r437: [206..208] [200..203]
 r438: [207..207] [195..201]
 r439: [292..293]
 r441: [197..198]
 r443: [116..119]
 r445: [69..70]
 r448: [169..174] [150..167] [103..104]
 r449: [324..367]
 r450: [260..265]
 r451: [317..318] [270..312] [45..51] [40..40] [28..29]
 r456: [25..329]
 r457: [330..342]
 r458: [343..363]
 r460: [368..434]
 r461: [476..487]
 r462: [8..11] [0..5]
 r463: [0..9]
 r464: [322..327] [25..25]
 r465: [317..325] [45..50] [40..42] [24..31]
 r466: [317..323] [45..48] [40..42] [25..31]
 r467: [245..263] [53..53]
 r468: [230..261] [225..228]
 r469: [233..259] [53..54]
 r470: [52..62]
 r471: [93..100]
 r472: [93..98]
 r473: [91..96]
 r474: [156..165]
 r475: [154..163]
 r476: [152..161]
 r477: [156..159]
 r478: [219..226]
 r479: [219..224]
 r480: [217..222]
 r481: [272..299]
 r482: [272..297]
 r483: [272..295]
 r484: [330..340]
 r485: [343..355]
 r486: [343..353]
 r487: [368..371]
 r488: [400..408] [390..393]
 r489: [403..406] [390..393]
 r490: [421..426] [415..418]
 r491: [413..424]
 r492: [411..422]
 r493: [461..469] [451..454]
 r494: [464..467] [451..454]
 r495: [476..485]
 r496: [474..483]
 r497: [472..481]
 r498: [458..459]
 r499: [397..398]
 r500: [351..352]
 r501: [338..339]
 r502: [307..308]
 r505: [466..467]
 r506: [447..448]
 r507: [443..444]
 r508: [439..440]
 r509: [421..422]
 r510: [419..420]
 r511: [405..406]
 r512: [386..387]
 r513: [382..383]
 r514: [378..379]
 r515: [374..375]
 r516: [372..373]
 r517: [368..369]
 r518: [364..365]
 r519: [358..359]
 r520: [360..361]
 r521: [349..350]
 r522: [345..346]
 r523: [336..337]
 r524: [332..333]
 r525: [328..329]
 r526: [321..323]
 r527: [319..320]
 r528: [313..314]
 r529: [307..310]
 r530: [303..304]
 r531: [294..295]
 r532: [290..291]
 r533: [286..287]
 r534: [282..283]
 r535: [278..279]
 r536: [272..273]
 r537: [270..271]
 r538: [266..267]
 r539: [257..258]
 r540: [255..256]
 r541: [251..252]
 r542: [247..248]
 r543: [239..240]
 r544: [237..238]
 r545: [235..236]
 r546: [231..232]
 r547: [197..198]
 r548: [191..192]
 r549: [185..188]
 r550: [185..186]
 r551: [181..182]
 r552: [177..178]
 r553: [175..176]
 r554: [169..170]
 r555: [120..121]
 r556: [116..117]
 r557: [116..117]
 r558: [112..113]
 r559: [127..128]
 r560: [108..109]
 r561: [69..70]
 r562: [63..64]
 r563: [59..60]
 r564: [55..56]
 r565: [49..50]
 r566: [36..37]
 r567: [32..33]
 r568: [30..31]
 r569: [45..46]
 r570: [43..44]
 r571: [41..42]
 r572: [26..27]
 r573: [16..17]
 r574: [4..5]
 r575: [142..145]
 r576: [140..141]
 r577: [138..139]
 r578: [482..487]
 r579: [484..487]
 r580: [439..444]
 r581: [423..428]
 r582: [425..428]
 r583: [370..371]
 r584: [374..375]
 r585: [378..383]
 r586: [354..357]
 r587: [362..365]
 r588: [366..367]
 r589: [347..351]
 r590: [334..338]
 r591: [305..308]
 r592: [309..310]
 r593: [311..312]
 r594: [282..287]
 r595: [288..291]
 r596: [268..271]
 r597: [247..252]
 r598: [253..256]
 r599: [241..258]
 r600: [204..205]
 r601: [171..172]
 r602: [173..174]
 r603: [181..186]
 r604: [181..188]
 r605: [189..192]
 r606: [118..121]
 r607: [127..130]
 r608: [76..77]
 r609: [57..58]
 r610: [211..212]
 r611: [140..141]
 r612: [142..145]
 r613: [146..147]
 r614: [144..147]
 r615: [136..149]
 r616: [83..86]

********** Assignment #1: **********

    Spill r272 after risky transformations
    Spill r494 after risky transformations
    Spill r489 after risky transformations
	 Assigning to 526 (cl=AREG, orig=317, freq=27, tfirst=526, tfreq=27)...
	   Assign 0 to reload r526 (freq=27)
	 Assigning to 521 (cl=AD_REGS, orig=298, freq=450, tfirst=521, tfreq=450)...
	 Trying 0: spill 293(freq=180)	 Now best 0(cost=-270)

	 Trying 1:
      Spill r293(hr=0, freq=180) for r521
	   Assign 0 to reload r521 (freq=450)
	 Assigning to 523 (cl=AD_REGS, orig=312, freq=450, tfirst=523, tfreq=450)...
	 Trying 0: spill 307(freq=180)	 Now best 0(cost=-270)

	 Trying 1:
      Spill r307(hr=0, freq=180) for r523
	   Assign 0 to reload r523 (freq=450)
	 Assigning to 514 (cl=AD_REGS, orig=286, freq=405, tfirst=514, tfreq=405)...
	   Assign 0 to reload r514 (freq=405)
	 Assigning to 542 (cl=AD_REGS, orig=345, freq=135, tfirst=542, tfreq=135)...
	 Trying 0: spill 339(freq=108) assign 598(cost=-81)	 Now best 0(cost=-135)

	 Trying 1:
      Spill r339(hr=0, freq=108) for r542
	   Assign 0 to reload r542 (freq=135)
	 Assigning to 534 (cl=AD_REGS, orig=136, freq=65, tfirst=534, tfreq=65)...
	 Trying 0: spill 483(freq=176) assign 595(cost=-39)	 Now best 0(cost=72)

	 Trying 1: spill 483(freq=176) assign 595(cost=-39)
      Spill r483(hr=0, freq=176) for r534
	   Assign 0 to reload r534 (freq=65)
	 Assigning to 551 (cl=AD_REGS, orig=366, freq=35, tfirst=551, tfreq=35)...
	   Assign 0 to reload r551 (freq=35)
	 Assigning to 508 (cl=AD_REGS, orig=272, freq=5, tfirst=508, tfreq=5)...
	   Assign 0 to reload r508 (freq=5)
	 Assigning to 511 (cl=GENERAL_REGS, orig=276, freq=2730, tfirst=511, tfreq=2730)...
	   Assign 0 to reload r511 (freq=2730)
	 Assigning to 522 (cl=GENERAL_REGS, orig=301, freq=270, tfirst=522, tfreq=270)...
	 Trying 0: spill 298(freq=270)	 Now best 0(cost=-90)

	 Trying 1: spill 298(freq=270)
	 Trying 2: spill 298(freq=270) spill 486(freq=91) assign 589(cost=-180)	 Now best 0(cost=-179)

	 Trying 3: spill 485(freq=541) spill 486(freq=91) assign 589(cost=-180)	 Now best 3(cost=182)

	 Trying 4: spill 485(freq=541) assign 589(cost=-180)	 Now best 4(cost=91)

	 Trying 5:
	 Trying 6:
      Spill r485(hr=4, freq=541) for r522
	   Assign 4 to reload r522 (freq=270)
	Hard reg 4 is preferable by r589 with profit 90
	 Assigning to 524 (cl=GENERAL_REGS, orig=315, freq=270, tfirst=524, tfreq=270)...
	 Trying 0: spill 312(freq=270) assign 590(cost=-180)	 Now best 0(cost=-270)

	 Trying 1: spill 312(freq=270) assign 590(cost=-180)
	 Trying 2: spill 312(freq=270) assign 590(cost=-180)
	 Trying 3: spill 484(freq=541) assign 590(cost=-180)	 Now best 3(cost=91)

	 Trying 4: spill 484(freq=541) assign 590(cost=-180)
	 Trying 5:
	 Trying 6:
      Spill r484(hr=4, freq=541) for r524
	   Assign 3 to reload r524 (freq=270)
	Hard reg 3 is preferable by r590 with profit 90
	 Assigning to 509 (cl=INDEX_REGS, orig=509, freq=1820, tfirst=509, tfreq=1820)...
	   Assign 0 to reload r509 (freq=1820)
	 Assigning to 510 (cl=INDEX_REGS, orig=510, freq=1820, tfirst=510, tfreq=1820)...
	   Assign 0 to reload r510 (freq=1820)
	 Assigning to 515 (cl=INDEX_REGS, orig=87, freq=162, tfirst=515, tfreq=405)...
	   Assign 5 to reload r515 (freq=162)
	Hard reg 5 is preferable by r584 with profit 81
	Hard reg 5 is preferable by r516 with profit 40
	Hard reg 5 is preferable by r583 with profit 20
	Hard reg 5 is preferable by r517 with profit 10
	 Assigning to 516 (cl=GENERAL_REGS, orig=87, freq=243, tfirst=515, tfreq=405)...
	   Assign 5 to optional reload r516 (freq=243)
	Hard reg 5 is preferable by r584 with profit 162
	Hard reg 5 is preferable by r583 with profit 101
	Hard reg 5 is preferable by r517 with profit 50
	 Assigning to 517 (cl=GENERAL_REGS, orig=87, freq=162, tfirst=515, tfreq=405)...
	   Assign 5 to optional reload r517 (freq=162)
	Hard reg 5 is preferable by r583 with profit 182
	 Assigning to 583 (cl=GENERAL_REGS, orig=87, freq=243, tfirst=515, tfreq=405)...
	   Assign 5 to inheritance r583 (freq=243)
	 Assigning to 584 (cl=INDEX_REGS, orig=87, freq=243, tfirst=515, tfreq=405)...
	   Assign 5 to inheritance r584 (freq=243)
	 Assigning to 513 (cl=GENERAL_REGS, orig=284, freq=243, tfirst=513, tfreq=324)...
	   Assign 0 to reload r513 (freq=243)
	Hard reg 0 is preferable by r585 with profit 81
	 Assigning to 585 (cl=GENERAL_REGS, orig=431, freq=243, tfirst=513, tfreq=324)...
	   Assign 3 to inheritance r585 (freq=243)
	 Assigning to 589 (cl=GENERAL_REGS, orig=290, freq=180, tfirst=522, tfreq=270)...
	   Assign 4 to inheritance r589 (freq=180)
	 Assigning to 590 (cl=GENERAL_REGS, orig=304, freq=180, tfirst=524, tfreq=270)...
	   Assign 3 to inheritance r590 (freq=180)
	 Assigning to 512 (cl=GENERAL_REGS, orig=283, freq=243, tfirst=512, tfreq=243)...
	   Assign 2 to reload r512 (freq=243)
	 Assigning to 581 (cl=GENERAL_REGS, orig=432, freq=162, tfirst=581, tfreq=162)...
	   Assign 4 to inheritance r581 (freq=162)
	 Assigning to 582 (cl=GENERAL_REGS, orig=431, freq=162, tfirst=582, tfreq=162)...
	   Assign 3 to inheritance r582 (freq=162)
	 Assigning to 597 (cl=GENERAL_REGS, orig=136, freq=81, tfirst=597, tfreq=108)...
	 Assigning to 598 (cl=GENERAL_REGS, orig=136, freq=81, tfirst=597, tfreq=108)...
	   Assign 0 to inheritance r598 (freq=81)
	Hard reg 0 is preferable by r597 with profit 27
	 Assigning to 563 (cl=GENERAL_REGS, orig=123, freq=81, tfirst=563, tfreq=108)...
	   Assign 5 to optional reload r563 (freq=81)
	Hard reg 5 is preferable by r609 with profit 27
	Hard reg 5 is preferable by r564 with profit 13
	 Assigning to 609 (cl=GENERAL_REGS, orig=123, freq=81, tfirst=563, tfreq=108)...
	   Assign 5 to inheritance r609 (freq=81)
	Hard reg 5 is preferable by r564 with profit 40
	 Assigning to 544 (cl=GENERAL_REGS, orig=113, freq=54, tfirst=544, tfreq=54)...
	   Assign 0 to reload r544 (freq=54)
	 Assigning to 505 (cl=GENERAL_REGS, orig=263, freq=27, tfirst=505, tfreq=27)...
	   Assign 0 to reload r505 (freq=27)
	 Assigning to 552 (cl=GENERAL_REGS, orig=117, freq=21, tfirst=552, tfreq=21)...
	   Assign 2 to reload r552 (freq=21)
	 Assigning to 564 (cl=INDEX_REGS, orig=123, freq=54, tfirst=563, tfreq=108)...
	   Assign 5 to reload r564 (freq=54)
	 Assigning to 500 (cl=INDEX_REGS, orig=500, freq=90, tfirst=500, tfreq=90)...
	   Assign 0 to reload r500 (freq=90)
	 Assigning to 501 (cl=INDEX_REGS, orig=501, freq=90, tfirst=501, tfreq=90)...
	   Assign 0 to reload r501 (freq=90)
	 Assigning to 531 (cl=GENERAL_REGS, orig=439, freq=81, tfirst=531, tfreq=81)...
	   Assign 4 to reload r531 (freq=81)
	 Assigning to 535 (cl=GENERAL_REGS, orig=332, freq=81, tfirst=535, tfreq=81)...
	   Assign 4 to reload r535 (freq=81)
	 Assigning to 539 (cl=GENERAL_REGS, orig=123, freq=54, tfirst=539, tfreq=81)...
	   Assign 0 to reload r539 (freq=54)
	Hard reg 0 is preferable by r599 with profit 27
	Hard reg 0 is preferable by r543 with profit 13
	 Assigning to 543 (cl=INDEX_REGS, orig=123, freq=54, tfirst=539, tfreq=81)...
	   Assign 0 to reload r543 (freq=54)
	Hard reg 0 is preferable by r599 with profit 54
	 Assigning to 599 (cl=GENERAL_REGS, orig=123, freq=81, tfirst=539, tfreq=81)...
	 Assigning to 540 (cl=GENERAL_REGS, orig=340, freq=81, tfirst=540, tfreq=81)...
	   Assign 4 to reload r540 (freq=81)
	 Assigning to 541 (cl=GENERAL_REGS, orig=342, freq=81, tfirst=541, tfreq=81)...
	   Assign 1 to reload r541 (freq=81)
	 Assigning to 536 (cl=GENERAL_REGS, orig=504, freq=54, tfirst=536, tfreq=54)...
	   Assign 0 to reload r536 (freq=54)
	 Assigning to 545 (cl=GENERAL_REGS, orig=427, freq=54, tfirst=545, tfreq=54)...
	   Assign 0 to reload r545 (freq=54)
	 Assigning to 546 (cl=GENERAL_REGS, orig=428, freq=54, tfirst=546, tfreq=54)...
	   Assign 0 to reload r546 (freq=54)
	 Assigning to 594 (cl=GENERAL_REGS, orig=136, freq=39, tfirst=594, tfreq=52)...
	 Assigning to 595 (cl=GENERAL_REGS, orig=136, freq=39, tfirst=594, tfreq=52)...
	   Assign 0 to inheritance r595 (freq=39)
	Hard reg 0 is preferable by r594 with profit 13
	 Assigning to 532 (cl=GENERAL_REGS, orig=328, freq=39, tfirst=532, tfreq=39)...
	   Assign 5 to reload r532 (freq=39)
	 Assigning to 533 (cl=GENERAL_REGS, orig=329, freq=39, tfirst=533, tfreq=39)...
	   Assign 4 to reload r533 (freq=39)
	 Assigning to 604 (cl=GENERAL_REGS, orig=136, freq=21, tfirst=604, tfreq=28)...
	 Assigning to 605 (cl=GENERAL_REGS, orig=136, freq=21, tfirst=604, tfreq=28)...
	   Assign 0 to inheritance r605 (freq=21)
	Hard reg 0 is preferable by r604 with profit 7
	 Assigning to 553 (cl=GENERAL_REGS, orig=448, freq=14, tfirst=553, tfreq=28)...
	   Assign 0 to reload r553 (freq=14)
	Hard reg 0 is preferable by r602 with profit 7
	Hard reg 0 is preferable by r601 with profit 3
	Hard reg 0 is preferable by r554 with profit 1
	 Assigning to 554 (cl=GENERAL_REGS, orig=448, freq=14, tfirst=553, tfreq=28)...
	   Assign 1 to optional reload r554 (freq=14)
	Hard reg 1 is preferable by r601 with profit 7
	Hard reg 0 is preferable by r601 with profit 3
	Hard reg 0 is preferable by r602 with profit 7
	Hard reg 1 is preferable by r602 with profit 3
	 Assigning to 601 (cl=GENERAL_REGS, orig=448, freq=21, tfirst=553, tfreq=28)...
	   Assign 1 to inheritance r601 (freq=21)
	Hard reg 1 is preferable by r602 with profit 10
	Hard reg 0 is preferable by r602 with profit 7
	 Assigning to 602 (cl=GENERAL_REGS, orig=448, freq=21, tfirst=553, tfreq=28)...
	   Assign 1 to inheritance r602 (freq=21)
	 Assigning to 572 (cl=GENERAL_REGS, orig=125, freq=27, tfirst=572, tfreq=27)...
	   Assign 3 to reload r572 (freq=27)
	 Assigning to 574 (cl=GENERAL_REGS, orig=417, freq=27, tfirst=574, tfreq=27)...
	   Assign 0 to reload r574 (freq=27)
	 Assigning to 548 (cl=GENERAL_REGS, orig=363, freq=21, tfirst=548, tfreq=21)...
	   Assign 2 to reload r548 (freq=21)
	 Assigning to 549 (cl=GENERAL_REGS, orig=364, freq=21, tfirst=549, tfreq=21)...
	   Assign 0 to reload r549 (freq=21)
	 Assigning to 550 (cl=GENERAL_REGS, orig=427, freq=14, tfirst=550, tfreq=21)...
	   Assign 3 to optional reload r550 (freq=14)
	Hard reg 3 is preferable by r603 with profit 7
	 Assigning to 603 (cl=GENERAL_REGS, orig=427, freq=21, tfirst=550, tfreq=21)...
	   Assign 3 to inheritance r603 (freq=21)
	 Assigning to 562 (cl=GENERAL_REGS, orig=83, freq=21, tfirst=562, tfreq=21)...
	   Assign 0 to optional reload r562 (freq=21)
	 Assigning to 575 (cl=INDEX_REGS, orig=209, freq=8, tfirst=575, tfreq=20)...
	   Assign 0 to reload r575 (freq=8)
	Hard reg 0 is preferable by r612 with profit 4
	Hard reg 0 is preferable by r613 with profit 6
	Hard reg 0 is preferable by r611 with profit 2
	Hard reg 0 is preferable by r576 with profit 1
	Hard reg 0 is preferable by r577 with profit 1
	 Assigning to 576 (cl=INDEX_REGS, orig=209, freq=8, tfirst=575, tfreq=20)...
	   Assign 0 to reload r576 (freq=8)
	Hard reg 0 is preferable by r611 with profit 6
	Hard reg 0 is preferable by r612 with profit 6
	Hard reg 0 is preferable by r613 with profit 7
	Hard reg 0 is preferable by r577 with profit 3
	 Assigning to 577 (cl=GENERAL_REGS, orig=209, freq=8, tfirst=575, tfreq=20)...
	   Assign 0 to reload r577 (freq=8)
	Hard reg 0 is preferable by r611 with profit 10
	Hard reg 0 is preferable by r612 with profit 8
	Hard reg 0 is preferable by r613 with profit 8
	 Assigning to 611 (cl=INDEX_REGS, orig=209, freq=12, tfirst=575, tfreq=20)...
	   Assign 0 to inheritance r611 (freq=12)
	Hard reg 0 is preferable by r612 with profit 12
	Hard reg 0 is preferable by r613 with profit 10
	 Assigning to 612 (cl=INDEX_REGS, orig=209, freq=12, tfirst=575, tfreq=20)...
	   Assign 0 to inheritance r612 (freq=12)
	Hard reg 0 is preferable by r613 with profit 14
	 Assigning to 613 (cl=GENERAL_REGS, orig=209, freq=12, tfirst=575, tfreq=20)...
	   Assign 0 to inheritance r613 (freq=12)
	 Assigning to 529 (cl=GENERAL_REGS, orig=104, freq=10, tfirst=529, tfreq=10)...
	   Assign 3 to reload r529 (freq=10)
	 Assigning to 527 (cl=GENERAL_REGS, orig=451, freq=18, tfirst=527, tfreq=18)...
	   Assign 3 to reload r527 (freq=18)
	 Assigning to 528 (cl=GENERAL_REGS, orig=451, freq=4, tfirst=528, tfreq=10)...
	   Assign 0 to reload r528 (freq=4)
	Hard reg 0 is preferable by r593 with profit 2
	Hard reg 0 is preferable by r592 with profit 1
	Hard reg 0 is preferable by r591 with profit 1
	Hard reg 0 is preferable by r530 with profit 1
	 Assigning to 530 (cl=GENERAL_REGS, orig=503, freq=4, tfirst=528, tfreq=10)...
	   Assign 0 to reload r530 (freq=4)
	Hard reg 0 is preferable by r591 with profit 3
	Hard reg 0 is preferable by r592 with profit 2
	Hard reg 0 is preferable by r593 with profit 3
	 Assigning to 591 (cl=GENERAL_REGS, orig=451, freq=6, tfirst=528, tfreq=10)...
	   Assign 0 to inheritance r591 (freq=6)
	Hard reg 0 is preferable by r592 with profit 4
	Hard reg 0 is preferable by r593 with profit 4
	 Assigning to 592 (cl=GENERAL_REGS, orig=451, freq=6, tfirst=528, tfreq=10)...
	   Assign 0 to inheritance r592 (freq=6)
	Hard reg 0 is preferable by r593 with profit 6
	 Assigning to 593 (cl=GENERAL_REGS, orig=451, freq=6, tfirst=528, tfreq=10)...
	   Assign 0 to inheritance r593 (freq=6)
	 Assigning to 537 (cl=GENERAL_REGS, orig=451, freq=4, tfirst=537, tfreq=6)...
	   Assign 0 to reload r537 (freq=4)
	Hard reg 0 is preferable by r596 with profit 2
	Hard reg 0 is preferable by r538 with profit 1
	 Assigning to 538 (cl=INDEX_REGS, orig=451, freq=4, tfirst=537, tfreq=6)...
	   Assign 0 to reload r538 (freq=4)
	Hard reg 0 is preferable by r596 with profit 4
	 Assigning to 596 (cl=GENERAL_REGS, orig=451, freq=6, tfirst=537, tfreq=6)...
	   Assign 0 to inheritance r596 (freq=6)
	 Assigning to 560 (cl=INDEX_REGS, orig=209, freq=6, tfirst=560, tfreq=6)...
	   Assign 0 to reload r560 (freq=6)
	 Assigning to 507 (cl=GENERAL_REGS, orig=270, freq=3, tfirst=507, tfreq=4)...
	   Assign 0 to reload r507 (freq=3)
	Hard reg 0 is preferable by r580 with profit 1
	 Assigning to 580 (cl=GENERAL_REGS, orig=429, freq=3, tfirst=507, tfreq=4)...
	   Assign 3 to inheritance r580 (freq=3)
	 Assigning to 518 (cl=GENERAL_REGS, orig=449, freq=2, tfirst=518, tfreq=4)...
	   Assign 0 to optional reload r518 (freq=2)
	Hard reg 0 is preferable by r587 with profit 1
	Hard reg 0 is preferable by r588 with profit 2
	Hard reg 0 is preferable by r520 with profit 1
	 Assigning to 520 (cl=GENERAL_REGS, orig=449, freq=2, tfirst=518, tfreq=4)...
	   Assign 0 to reload r520 (freq=2)
	Hard reg 0 is preferable by r587 with profit 2
	Hard reg 0 is preferable by r588 with profit 3
	 Assigning to 587 (cl=GENERAL_REGS, orig=449, freq=3, tfirst=518, tfreq=4)...
	   Assign 0 to inheritance r587 (freq=3)
	Hard reg 0 is preferable by r588 with profit 4
	 Assigning to 588 (cl=GENERAL_REGS, orig=449, freq=3, tfirst=518, tfreq=4)...
	   Assign 0 to inheritance r588 (freq=3)
	 Assigning to 558 (cl=GENERAL_REGS, orig=209, freq=4, tfirst=558, tfreq=4)...
	   Assign 3 to reload r558 (freq=4)
	 Assigning to 565 (cl=GENERAL_REGS, orig=83, freq=4, tfirst=565, tfreq=4)...
	   Assign 0 to optional reload r565 (freq=4)
	 Assigning to 506 (cl=GENERAL_REGS, orig=269, freq=3, tfirst=506, tfreq=3)...
	   Assign 2 to reload r506 (freq=3)
	 Assigning to 555 (cl=INDEX_REGS, orig=209, freq=2, tfirst=555, tfreq=3)...
	   Assign 3 to reload r555 (freq=2)
	Hard reg 3 is preferable by r606 with profit 1
	Hard reg 3 is preferable by r556 with profit 1
	 Assigning to 556 (cl=INDEX_REGS, orig=209, freq=2, tfirst=555, tfreq=3)...
	   Assign 3 to reload r556 (freq=2)
	Hard reg 3 is preferable by r606 with profit 2
	 Assigning to 606 (cl=INDEX_REGS, orig=209, freq=3, tfirst=555, tfreq=3)...
	   Assign 3 to inheritance r606 (freq=3)
	 Assigning to 573 (cl=GENERAL_REGS, orig=409, freq=3, tfirst=573, tfreq=3)...
	   Assign 0 to reload r573 (freq=3)
	 Assigning to 519 (cl=GENERAL_REGS, orig=240, freq=2, tfirst=519, tfreq=2)...
	   Assign 0 to reload r519 (freq=2)
	Hard reg 3 is preferable by r586 with profit 1
	Hard reg 0 is preferable by r586 with profit 1
	 Assigning to 586 (cl=GENERAL_REGS, orig=240, freq=2, tfirst=519, tfreq=2)...
	   Assign 0 to inheritance r586 (freq=2)
	 Assigning to 525 (cl=GENERAL_REGS, orig=449, freq=2, tfirst=525, tfreq=2)...
	   Assign 0 to optional reload r525 (freq=2)
	 Assigning to 547 (cl=GENERAL_REGS, orig=547, freq=2, tfirst=547, tfreq=2)...
	 Trying 0: spill 120(freq=11)	 Now best 0(cost=9)

	 Trying 1: spill 438(freq=41)
	 Trying 2: spill 441(freq=2)	 Now best 2(cost=0)

	 Trying 3: spill 203(freq=241)
	 Trying 4: spill 112(freq=156) assign 604(cost=-21) assign 557(cost=-2)
	 Trying 5: spill 112(freq=156) assign 604(cost=-21) assign 557(cost=-2)
	 Trying 6:
      Spill r441(hr=2, freq=2) for r547
	   Assign 2 to reload r547 (freq=2)
	 Assigning to 557 (cl=GENERAL_REGS, orig=557, freq=2, tfirst=557, tfreq=2)...
	 Trying 0: spill 212(freq=5)	 Now best 0(cost=3)

	 Trying 1: spill 436(freq=13)
	 Trying 2: spill 443(freq=2)	 Now best 2(cost=0)

	 Trying 4: spill 112(freq=156) assign 604(cost=-21)
	 Trying 5: spill 112(freq=156) assign 604(cost=-21)
	 Trying 6:
      Spill r443(hr=2, freq=2) for r557
	   Assign 2 to reload r557 (freq=2)
	 Assigning to 559 (cl=GENERAL_REGS, orig=209, freq=2, tfirst=559, tfreq=2)...
	   Assign 0 to reload r559 (freq=2)
	 Assigning to 561 (cl=GENERAL_REGS, orig=561, freq=2, tfirst=561, tfreq=2)...
	   Assign 5 to reload r561 (freq=2)
	 Assigning to 566 (cl=GENERAL_REGS, orig=83, freq=2, tfirst=566, tfreq=2)...
	   Assign 0 to reload r566 (freq=2)
	 Assigning to 567 (cl=INDEX_REGS, orig=567, freq=2, tfirst=567, tfreq=2)...
	   Assign 0 to reload r567 (freq=2)
	 Assigning to 568 (cl=GENERAL_REGS, orig=451, freq=2, tfirst=568, tfreq=2)...
	   Assign 0 to reload r568 (freq=2)
	 Assigning to 569 (cl=GENERAL_REGS, orig=83, freq=2, tfirst=569, tfreq=2)...
	   Assign 0 to optional reload r569 (freq=2)
	 Assigning to 570 (cl=INDEX_REGS, orig=570, freq=2, tfirst=570, tfreq=2)...
	   Assign 0 to reload r570 (freq=2)
	 Assigning to 571 (cl=GENERAL_REGS, orig=451, freq=2, tfirst=571, tfreq=2)...
	   Assign 0 to reload r571 (freq=2)
	 Assigning to 578 (cl=GENERAL_REGS, orig=430, freq=2, tfirst=578, tfreq=2)...
	   Assign 5 to inheritance r578 (freq=2)
	 Assigning to 579 (cl=GENERAL_REGS, orig=429, freq=2, tfirst=579, tfreq=2)...
	   Assign 4 to inheritance r579 (freq=2)
  Reassigning non-reload pseudos
	   Assign 5 to r484 (freq=541)
	   Assign 3 to r431 (freq=170)
	   Assign 3 to r272 (freq=4)
	   Assign 3 to r429 (freq=3)

********** Undoing inheritance #1: **********

Inherit 28 out of 32 (87.50%)
	     Keep split r600 (orig=r437)
	     Keep split r607 (orig=r435)
	     Keep split r608 (orig=r433)
	     Keep split r610 (orig=r258)
	     Keep split r614 (orig=r117)
	     Keep split r615 (orig=r186)
	     Keep split r616 (orig=r254)
Split 7 out of 7 (100.00%)
   Insn after restoring regs:
 1174: r534:DI#0=r136:DI#0
      REG_DEAD r136:DI
    Change reload insn:
 1171: r533:SI=r595:DI#0
   Insn after restoring regs:
 1250: r136:DI=r595:DI
      REG_DEAD r595:DI
   Insn after restoring regs:
 1189: r543:SI=r123:SI
      REG_DEAD r123:SI
   Insn after restoring regs:
 1187: r542:DI#0=r136:DI#0
      REG_DEAD r136:DI
    Change reload insn:
 1184: r541:SI=r598:DI#0
   Insn after restoring regs:
 1253: r136:DI=r598:DI
      REG_DEAD r598:DI
   Insn after restoring regs:
 1181: r539:SI=r123:SI
	   Removing inheritance:
 1255: r599:SI=r123:SI
deleting insn with uid = 1255.
   Insn after restoring regs:
  389: {r551:DI=zero_extend(r551:DI#0)*zero_extend(r136:DI#0);clobber flags:CC;}
      REG_DEAD r136:DI
    Change reload insn:
 1196: r549:SI=r605:DI#4
   Insn after restoring regs:
 1261: r136:DI=r605:DI
      REG_DEAD r605:DI
Keep optional reload reg 516
Keep optional reload reg 517
Keep optional reload reg 518
Keep optional reload reg 550
Keep optional reload reg 554
Remove optional reload reg 525
  Restoring original insn:
  213: flags:CCNO=cmp(r449:SI,0)
      REG_DEAD r449:SI
  Deleting move 1158
 1158: r525:SI=r449:SI
deleting insn with uid = 1158.
Remove optional reload reg 562
  Restoring original insn:
  564: {r83:SI=r83:SI+0x1;clobber flags:CC;}
  Deleting move 1213
 1213: r562:SI=r83:SI
      REG_DEAD r83:SI
deleting insn with uid = 1213.
  Deleting move 1214
 1214: r83:SI=r562:SI
      REG_DEAD r562:SI
deleting insn with uid = 1214.
Remove optional reload reg 563
  Restoring original insn:
  567: {r123:SI=r123:SI+r470:SI;clobber flags:CC;}
  Deleting move 1215
 1215: r563:SI=r123:SI
      REG_DEAD r123:SI
deleting insn with uid = 1215.
  Restoring original insn:
 1216: r609:SI=r123:SI
      REG_DEAD r123:SI
Remove optional reload reg 565
  Restoring original insn:
  581: flags:CCGC=cmp(r465:SI,r83:SI)
      REG_DEAD r83:SI
  Deleting move 1218
 1218: r565:SI=r83:SI
deleting insn with uid = 1218.
Remove optional reload reg 569
  Restoring original insn:
  599: flags:CCZ=cmp(r83:SI,r465:SI)
      REG_DEAD r83:SI
  Deleting move 1222
 1222: r569:SI=r83:SI
      REG_DEAD r83:SI
deleting insn with uid = 1222.

********** Pseudo live ranges #2: **********

  BB 130
   Insn 777: point = 0
   Insn 776: point = 0
  BB 111
   Insn 1034: point = 0
  BB 110
   Insn 656: point = 0
   Insn 655: point = 0
   Insn 654: point = 1
   Insn 1230: point = 3
	Hard reg 0 is preferable by r574 with profit 9
   Insn 653: point = 5
   Insn 1229: point = 5
   Insn 649: point = 6
   Insn 647: point = 7
   Insn 646: point = 7
   Insn 645: point = 7
   Insn 644: point = 7
   Insn 643: point = 8
  BB 134
   Insn 1107: point = 11
   Insn 1106: point = 13
  BB 109
   Insn 635: point = 16
   Insn 634: point = 16
   Insn 42: point = 17
   Insn 633: point = 18
   Insn 1228: point = 20
	Hard reg 0 is preferable by r573 with profit 1
   Insn 632: point = 22
   Insn 1227: point = 22
   Insn 629: point = 23
   Insn 627: point = 24
   Insn 626: point = 24
   Insn 625: point = 24
   Insn 624: point = 25
   Insn 623: point = 26
   Insn 622: point = 28
   Insn 621: point = 30
  BB 21
   Insn 993: point = 32
   Insn 216: point = 32
  BB 126
   Insn 1052: point = 33
   Insn 758: point = 33
  BB 133
   Insn 1105: point = 33
  BB 108
   Insn 616: point = 36
   Insn 615: point = 36
   Insn 612: point = 36
   Insn 1226: point = 36
	Hard reg 3 is preferable by r572 with profit 9
   Insn 611: point = 38
   Insn 1225: point = 38
  BB 105
   Insn 1030: point = 41
   Insn 1221: point = 41
   Insn 902: point = 43
   Insn 901: point = 44
   Insn 594: point = 45
   Insn 593: point = 46
   Insn 592: point = 46
   Insn 591: point = 46
   Insn 590: point = 46
   Insn 1220: point = 47
   Insn 588: point = 48
   Insn 587: point = 49
   Insn 584: point = 50
   Insn 1219: point = 51
  BB 107
   Insn 1224: point = 54
   Insn 905: point = 56
   Insn 904: point = 57
   Insn 607: point = 58
   Insn 606: point = 59
   Insn 605: point = 59
   Insn 604: point = 59
   Insn 603: point = 59
   Insn 1223: point = 60
  BB 106
   Insn 600: point = 62
   Insn 599: point = 62
   Insn 903: point = 63
  BB 104
   Insn 582: point = 65
   Insn 581: point = 65
   Insn 580: point = 65
  BB 103
   Insn 1114: point = 67
   Insn 41: point = 67
  BB 132
   Insn 1104: point = 69
  BB 101
   Insn 571: point = 72
   Insn 570: point = 72
   Insn 569: point = 72
   Insn 568: point = 73
   Insn 1217: point = 75
	   Creating copy r564<-r609@27
   Insn 1268: point = 77
   Insn 1216: point = 78
   Insn 567: point = 80
   Insn 566: point = 80
  BB 129
   Insn 1057: point = 82
  BB 100
   Insn 564: point = 83
   Insn 563: point = 83
  BB 98
   Insn 1026: point = 85
   Insn 553: point = 85
   Insn 545: point = 85
   Insn 544: point = 85
   Insn 543: point = 86
   Insn 542: point = 88
   Insn 541: point = 88
   Insn 540: point = 89
  BB 96
   Insn 1024: point = 90
   Insn 536: point = 90
  BB 95
   Insn 534: point = 92
   Insn 533: point = 92
  BB 94
   Insn 532: point = 94
  BB 93
   Insn 530: point = 95
   Insn 529: point = 95
   Insn 1212: point = 96
   Insn 869: point = 97
   Insn 527: point = 98
  BB 97
   Insn 39: point = 100
  BB 92
   Insn 525: point = 102
   Insn 524: point = 102
  BB 91
   Insn 521: point = 103
   Insn 520: point = 103
  BB 90
   Insn 1022: point = 105
  BB 99
   Insn 40: point = 106
   Insn 1267: point = 108
	Hard reg 0 is preferable by r608 with profit 1
   Insn 558: point = 110
   Insn 557: point = 110
   Insn 1266: point = 111
	Hard reg 0 is preferable by r608 with profit 2
  BB 121
   Insn 1046: point = 114
  BB 120
   Insn 743: point = 115
   Insn 742: point = 115
   Insn 876: point = 115
   Insn 875: point = 116
   Insn 737: point = 117
   Insn 736: point = 117
   Insn 735: point = 117
   Insn 734: point = 117
   Insn 1279: point = 118
	Hard reg 1 is preferable by r616 with profit 4
   Insn 733: point = 120
   Insn 732: point = 121
   Insn 731: point = 122
   Insn 730: point = 122
   Insn 729: point = 123
   Insn 728: point = 124
   Insn 727: point = 124
   Insn 1278: point = 124
	Hard reg 1 is preferable by r616 with profit 8
   Insn 726: point = 126
  BB 89
   Insn 512: point = 129
   Insn 511: point = 129
  BB 88
   Insn 510: point = 130
  BB 87
   Insn 508: point = 131
   Insn 507: point = 131
  BB 86
   Insn 505: point = 132
   Insn 504: point = 132
   Insn 1103: point = 132
   Insn 1102: point = 134
  BB 85
   Insn 502: point = 137
   Insn 501: point = 137
  BB 83
   Insn 1019: point = 138
   Insn 37: point = 138
   Insn 36: point = 138
  BB 84
   Insn 497: point = 140
  BB 82
   Insn 489: point = 141
   Insn 488: point = 141
  BB 81
   Insn 487: point = 142
  BB 80
   Insn 485: point = 143
   Insn 484: point = 143
  BB 79
   Insn 1101: point = 144
   Insn 1100: point = 146
   Insn 1099: point = 148
   Insn 888: point = 150
  BB 127
   Insn 1054: point = 152
   Insn 891: point = 152
  BB 128
   Insn 771: point = 155
   Insn 770: point = 155
  BB 67
   Insn 1010: point = 157
  BB 119
   Insn 885: point = 158
  BB 118
   Insn 715: point = 160
   Insn 714: point = 160
   Insn 712: point = 160
  BB 78
   Insn 1017: point = 162
  BB 77
   Insn 478: point = 163
   Insn 477: point = 163
   Insn 1211: point = 164
  BB 75
   Insn 1014: point = 167
   Insn 469: point = 167
   Insn 461: point = 167
   Insn 460: point = 167
   Insn 459: point = 168
   Insn 458: point = 170
   Insn 1209: point = 171
   Insn 457: point = 172
   Insn 456: point = 173
  BB 73
   Insn 1012: point = 174
   Insn 452: point = 174
  BB 72
   Insn 450: point = 176
   Insn 449: point = 176
  BB 71
   Insn 448: point = 178
  BB 70
   Insn 446: point = 179
   Insn 445: point = 179
   Insn 1208: point = 180
   Insn 1207: point = 181
	   Creating copy r556<-r606@1
   Insn 867: point = 183
   Insn 1206: point = 185
	   Creating copy r555<-r606@1
   Insn 1263: point = 186
   Insn 443: point = 187
  BB 74
   Insn 33: point = 189
  BB 69
   Insn 441: point = 191
   Insn 440: point = 191
  BB 68
   Insn 437: point = 192
   Insn 436: point = 192
  BB 76
   Insn 34: point = 194
   Insn 1265: point = 196
	Hard reg 0 is preferable by r607 with profit 1
   Insn 474: point = 198
   Insn 473: point = 198
   Insn 1210: point = 199
   Insn 1264: point = 201
	Hard reg 0 is preferable by r607 with profit 2
  BB 117
   Insn 1042: point = 204
  BB 116
   Insn 704: point = 205
   Insn 703: point = 205
   Insn 874: point = 205
   Insn 873: point = 206
   Insn 698: point = 207
   Insn 697: point = 207
   Insn 696: point = 207
   Insn 695: point = 207
   Insn 1277: point = 208
	Hard reg 1 is preferable by r615 with profit 4
   Insn 694: point = 210
   Insn 693: point = 211
   Insn 1233: point = 213
	   Creating copy r577<-r611@4
   Insn 692: point = 215
   Insn 1232: point = 216
	   Creating copy r576<-r611@4
   Insn 1271: point = 217
	   Creating copy r611<-r612@4
   Insn 691: point = 219
   Insn 1275: point = 220
	Hard reg 2 is preferable by r614 with profit 4
   Insn 1231: point = 222
	   Creating copy r575<-r612@4
   Insn 1272: point = 223
	   Creating copy r612<-r613@4
   Insn 1273: point = 225
   Insn 690: point = 226
	Hard reg 0 is preferable by r613 with profit 4
   Insn 689: point = 227
   Insn 688: point = 227
   Insn 1274: point = 227
	Hard reg 2 is preferable by r614 with profit 8
   Insn 1276: point = 229
	Hard reg 1 is preferable by r615 with profit 8
  BB 66
   Insn 428: point = 232
   Insn 427: point = 232
  BB 65
   Insn 426: point = 233
  BB 64
   Insn 424: point = 234
   Insn 423: point = 234
  BB 63
   Insn 421: point = 235
   Insn 420: point = 235
   Insn 1098: point = 235
   Insn 1097: point = 237
   Insn 1096: point = 239
  BB 62
   Insn 418: point = 242
   Insn 417: point = 242
  BB 60
   Insn 1007: point = 243
   Insn 31: point = 243
   Insn 30: point = 243
  BB 61
   Insn 413: point = 245
  BB 59
   Insn 405: point = 246
   Insn 404: point = 246
  BB 58
   Insn 403: point = 247
  BB 57
   Insn 401: point = 248
   Insn 400: point = 248
  BB 56
   Insn 1095: point = 249
   Insn 1094: point = 251
   Insn 1093: point = 253
   Insn 1092: point = 255
   Insn 889: point = 257
  BB 115
   Insn 886: point = 259
  BB 55
   Insn 397: point = 261
   Insn 396: point = 261
   Insn 1205: point = 262
	   Creating copy r554<-r601@7
   Insn 906: point = 264
   Insn 1258: point = 265
	   Creating copy r601<-r602@7
   Insn 1259: point = 267
   Insn 1204: point = 268
	   Creating copy r553->r602@7
   Insn 395: point = 270
   Insn 1203: point = 271
	Hard reg 2 is preferable by r552 with profit 7
   Insn 393: point = 273
   Insn 1202: point = 274
   Insn 391: point = 276
   Insn 1201: point = 277
	Hard reg 0 is preferable by r551 with profit 7
   Insn 389: point = 279
   Insn 1200: point = 281
   Insn 1199: point = 282
   Insn 388: point = 283
   Insn 1197: point = 285
	Hard reg 0 is preferable by r549 with profit 7
   Insn 387: point = 287
   Insn 1198: point = 288
	   Creating copy r550<-r603@7
   Insn 1260: point = 289
   Insn 1196: point = 291
   Insn 1261: point = 293
   Insn 1195: point = 294
	Hard reg 2 is preferable by r548 with profit 7
   Insn 386: point = 296
   Insn 1262: point = 296
   Insn 1194: point = 298
  BB 54
   Insn 384: point = 301
   Insn 383: point = 301
  BB 52
   Insn 1005: point = 303
   Insn 373: point = 303
   Insn 365: point = 303
   Insn 364: point = 303
   Insn 363: point = 304
   Insn 362: point = 306
   Insn 361: point = 306
   Insn 360: point = 307
  BB 50
   Insn 1003: point = 308
   Insn 356: point = 308
  BB 49
   Insn 354: point = 310
   Insn 353: point = 310
  BB 48
   Insn 352: point = 312
  BB 47
   Insn 350: point = 313
   Insn 349: point = 313
   Insn 1193: point = 314
   Insn 865: point = 315
   Insn 347: point = 316
  BB 51
   Insn 27: point = 318
  BB 46
   Insn 345: point = 320
   Insn 344: point = 320
  BB 45
   Insn 341: point = 321
   Insn 340: point = 321
  BB 44
   Insn 1001: point = 323
  BB 53
   Insn 28: point = 324
   Insn 1257: point = 326
	Hard reg 0 is preferable by r600 with profit 2
   Insn 378: point = 328
   Insn 377: point = 328
   Insn 1256: point = 329
	Hard reg 0 is preferable by r600 with profit 4
  BB 114
   Insn 1038: point = 332
  BB 113
   Insn 680: point = 333
   Insn 679: point = 333
   Insn 872: point = 333
   Insn 871: point = 334
   Insn 674: point = 335
   Insn 673: point = 335
   Insn 672: point = 335
   Insn 671: point = 335
   Insn 1270: point = 336
	Hard reg 1 is preferable by r610 with profit 15
   Insn 670: point = 338
   Insn 669: point = 339
   Insn 668: point = 340
   Insn 667: point = 340
   Insn 666: point = 340
   Insn 665: point = 341
   Insn 664: point = 341
   Insn 1269: point = 341
	Hard reg 1 is preferable by r610 with profit 30
   Insn 663: point = 343
  BB 43
   Insn 332: point = 346
   Insn 331: point = 346
  BB 42
   Insn 330: point = 347
  BB 41
   Insn 328: point = 348
   Insn 327: point = 348
  BB 40
   Insn 325: point = 349
   Insn 324: point = 349
   Insn 1091: point = 349
   Insn 1090: point = 351
  BB 39
   Insn 322: point = 354
   Insn 321: point = 354
  BB 37
   Insn 998: point = 355
   Insn 25: point = 355
   Insn 24: point = 355
  BB 38
   Insn 317: point = 357
  BB 36
   Insn 309: point = 358
   Insn 308: point = 358
  BB 35
   Insn 307: point = 359
  BB 34
   Insn 305: point = 360
   Insn 304: point = 360
  BB 33
   Insn 1089: point = 361
   Insn 1088: point = 363
   Insn 1087: point = 365
   Insn 890: point = 367
  BB 112
   Insn 887: point = 369
  BB 32
   Insn 301: point = 371
   Insn 300: point = 371
   Insn 1192: point = 371
   Insn 864: point = 373
   Insn 1191: point = 375
   Insn 863: point = 377
   Insn 1190: point = 378
   Insn 296: point = 380
   Insn 1189: point = 382
   Insn 294: point = 383
   Insn 293: point = 385
   Insn 291: point = 387
   Insn 1188: point = 388
	Hard reg 0 is preferable by r542 with profit 27
   Insn 289: point = 390
   Insn 1187: point = 392
   Insn 1186: point = 392
   Insn 288: point = 393
   Insn 1185: point = 395
	Hard reg 1 is preferable by r541 with profit 27
   Insn 287: point = 397
   Insn 1184: point = 397
   Insn 1253: point = 399
   Insn 1183: point = 400
	Hard reg 4 is preferable by r540 with profit 27
   Insn 285: point = 402
   Insn 1182: point = 402
   Insn 1254: point = 403
   Insn 283: point = 405
   Insn 1181: point = 407
  BB 102
   Insn 1028: point = 409
   Insn 574: point = 409
  BB 31
   Insn 1086: point = 411
   Insn 1085: point = 413
   Insn 1084: point = 415
   Insn 899: point = 417
   Insn 1180: point = 419
	   Creating copy r538<-r596@2
   Insn 22: point = 421
   Insn 21: point = 422
   Insn 20: point = 423
  BB 30
   Insn 278: point = 425
   Insn 277: point = 425
   Insn 1179: point = 426
	   Creating copy r537<-r596@2
   Insn 1252: point = 427
  BB 28
   Insn 996: point = 429
   Insn 1083: point = 429
  BB 27
   Insn 274: point = 432
   Insn 273: point = 432
   Insn 1178: point = 433
   Insn 270: point = 434
   Insn 268: point = 434
   Insn 266: point = 435
   Insn 265: point = 437
   Insn 1177: point = 439
	Hard reg 4 is preferable by r535 with profit 27
   Insn 263: point = 441
   Insn 1176: point = 441
  BB 26
   Insn 259: point = 443
   Insn 1175: point = 444
   Insn 257: point = 446
   Insn 1174: point = 448
   Insn 1173: point = 449
   Insn 256: point = 450
   Insn 1172: point = 452
	Hard reg 4 is preferable by r533 with profit 13
   Insn 255: point = 454
   Insn 1171: point = 454
   Insn 1250: point = 456
   Insn 1170: point = 457
	Hard reg 5 is preferable by r532 with profit 13
   Insn 254: point = 459
   Insn 1169: point = 459
   Insn 1251: point = 460
  BB 25
   Insn 252: point = 463
   Insn 251: point = 463
   Insn 1168: point = 464
	Hard reg 4 is preferable by r531 with profit 27
   Insn 248: point = 466
   Insn 1167: point = 466
  BB 24
   Insn 1082: point = 468
   Insn 1081: point = 470
   Insn 1080: point = 472
   Insn 17: point = 474
   Insn 16: point = 475
  BB 29
   Insn 18: point = 477
  BB 23
   Insn 245: point = 479
   Insn 244: point = 479
   Insn 1166: point = 480
	   Creating copy r530<-r591@2
   Insn 1165: point = 482
	Hard reg 3 is preferable by r529 with profit 2
   Insn 242: point = 484
   Insn 1164: point = 486
   Insn 1247: point = 486
	   Creating copy r591<-r592@2
   Insn 1163: point = 488
   Insn 911: point = 489
   Insn 1248: point = 490
	   Creating copy r592<-r593@2
   Insn 1249: point = 492
   Insn 1162: point = 493
	   Creating copy r528->r593@2
   Insn 241: point = 495
   Insn 240: point = 496
   Insn 238: point = 496
   Insn 236: point = 496
   Insn 234: point = 496
   Insn 232: point = 496
   Insn 231: point = 496
   Insn 230: point = 496
   Insn 229: point = 496
   Insn 228: point = 497
  BB 22
   Insn 225: point = 499
   Insn 224: point = 499
   Insn 1161: point = 500
   Insn 895: point = 502
   Insn 1160: point = 503
	Hard reg 0 is preferable by r526 with profit 9
   Insn 223: point = 505
   Insn 1159: point = 507
  BB 131
   Insn 1079: point = 509
   Insn 1078: point = 511
   Insn 1077: point = 513
  BB 20
   Insn 214: point = 516
   Insn 213: point = 516
   Insn 15: point = 516
   Insn 221: point = 517
   Insn 212: point = 518
  BB 19
   Insn 209: point = 519
   Insn 208: point = 519
   Insn 206: point = 519
   Insn 205: point = 519
   Insn 1157: point = 520
	Hard reg 0 is preferable by r524 with profit 90
   Insn 204: point = 522
   Insn 1156: point = 523
	   Creating copy r524<-r590@90
   Insn 202: point = 525
   Insn 1155: point = 526
	Hard reg 1 is preferable by r523 with profit 90
   Insn 200: point = 528
   Insn 1154: point = 530
   Insn 1153: point = 530
   Insn 195: point = 531
   Insn 192: point = 532
   Insn 191: point = 534
  BB 18
   Insn 1076: point = 536
   Insn 13: point = 538
  BB 17
   Insn 186: point = 540
   Insn 185: point = 540
   Insn 183: point = 540
   Insn 182: point = 540
   Insn 1152: point = 541
	Hard reg 0 is preferable by r522 with profit 90
   Insn 181: point = 543
   Insn 1151: point = 544
	   Creating copy r522<-r589@90
   Insn 179: point = 546
   Insn 1150: point = 547
	Hard reg 1 is preferable by r521 with profit 90
   Insn 177: point = 549
   Insn 1149: point = 551
   Insn 1148: point = 551
   Insn 172: point = 552
   Insn 169: point = 553
   Insn 168: point = 555
  BB 16
   Insn 1075: point = 557
	Hard reg 3 is preferable by r586 with profit 1
   Insn 1074: point = 559
   Insn 12: point = 561
   Insn 1146: point = 562
	   Creating copy r519->r586@1
   Insn 163: point = 564
   Insn 1147: point = 566
	   Creating copy r520<-r587@1
  BB 15
   Insn 161: point = 569
   Insn 160: point = 569
   Insn 1145: point = 570
	   Creating copy r518<-r587@1
   Insn 1243: point = 571
	   Creating copy r587<-r588@1
   Insn 1244: point = 573
   Insn 1073: point = 574
	Hard reg 0 is preferable by r588 with profit 1
  BB 14
   Insn 158: point = 577
   Insn 157: point = 577
   Insn 1144: point = 578
	   Creating copy r517<-r583@81
   Insn 155: point = 580
   Insn 1239: point = 581
   Insn 1143: point = 582
	   Creating copy r516->r583@81
   Insn 154: point = 584
   Insn 1142: point = 584
	   Creating copy r516<-r584@81
   Insn 153: point = 586
   Insn 1141: point = 587
	   Creating copy r515<-r584@81
   Insn 1240: point = 588
   Insn 151: point = 590
   Insn 1140: point = 591
	Hard reg 0 is preferable by r514 with profit 81
   Insn 149: point = 593
   Insn 1139: point = 595
   Insn 1138: point = 596
   Insn 148: point = 597
   Insn 1137: point = 599
	Hard reg 0 is preferable by r513 with profit 81
   Insn 147: point = 601
   Insn 1136: point = 601
	   Creating copy r513<-r585@81
   Insn 1241: point = 602
	Hard reg 3 is preferable by r585 with profit 81
   Insn 1135: point = 604
	Hard reg 2 is preferable by r512 with profit 81
   Insn 146: point = 606
   Insn 1134: point = 606
   Insn 1072: point = 608
  BB 13
   Insn 143: point = 611
   Insn 142: point = 611
   Insn 141: point = 612
   Insn 139: point = 614
   Insn 138: point = 615
   Insn 137: point = 616
   Insn 136: point = 616
   Insn 135: point = 618
   Insn 134: point = 620
   Insn 133: point = 622
   Insn 131: point = 624
   Insn 130: point = 626
   Insn 1133: point = 627
	Hard reg 0 is preferable by r511 with profit 910
   Insn 129: point = 629
   Insn 1132: point = 629
  BB 125
   Insn 1050: point = 631
   Insn 1111: point = 631
   Insn 1110: point = 633
   Insn 10: point = 635
  BB 12
   Insn 991: point = 637
   Insn 1071: point = 637
   Insn 1070: point = 639
   Insn 1069: point = 641
  BB 11
   Insn 124: point = 644
   Insn 123: point = 644
   Insn 122: point = 645
   Insn 120: point = 647
   Insn 119: point = 648
   Insn 118: point = 649
   Insn 937: point = 649
   Insn 1131: point = 650
   Insn 935: point = 651
   Insn 934: point = 652
   Insn 1130: point = 653
   Insn 932: point = 654
  BB 10
   Insn 1068: point = 655
	Hard reg 4 is preferable by r581 with profit 81
   Insn 1067: point = 657
	Hard reg 3 is preferable by r582 with profit 81
   Insn 1066: point = 659
   Insn 860: point = 661
   Insn 859: point = 662
  BB 124
   Insn 880: point = 664
   Insn 879: point = 665
  BB 9
   Insn 110: point = 667
   Insn 109: point = 667
   Insn 108: point = 668
   Insn 107: point = 670
   Insn 106: point = 671
   Insn 105: point = 672
  BB 8
   Insn 7: point = 673
  BB 7
   Insn 103: point = 675
   Insn 102: point = 675
   Insn 101: point = 676
   Insn 100: point = 677
   Insn 98: point = 678
   Insn 1129: point = 679
	Hard reg 3 is preferable by r508 with profit 1
   Insn 96: point = 681
   Insn 1128: point = 683
   Insn 1127: point = 684
   Insn 95: point = 685
   Insn 1126: point = 687
	Hard reg 0 is preferable by r507 with profit 1
   Insn 94: point = 689
   Insn 1125: point = 689
	   Creating copy r507<-r580@1
   Insn 1236: point = 690
	Hard reg 3 is preferable by r580 with profit 1
   Insn 1124: point = 692
	Hard reg 2 is preferable by r506 with profit 1
   Insn 93: point = 694
   Insn 1123: point = 694
   Insn 1065: point = 696
  BB 6
   Insn 91: point = 699
   Insn 90: point = 699
   Insn 89: point = 700
   Insn 87: point = 702
   Insn 86: point = 703
   Insn 85: point = 704
   Insn 84: point = 704
   Insn 83: point = 706
   Insn 82: point = 708
   Insn 81: point = 710
   Insn 79: point = 712
   Insn 78: point = 714
   Insn 1122: point = 715
	Hard reg 0 is preferable by r505 with profit 9
   Insn 77: point = 717
   Insn 1121: point = 717
  BB 123
   Insn 1048: point = 719
   Insn 1109: point = 719
   Insn 1108: point = 721
   Insn 6: point = 723
  BB 5
   Insn 988: point = 725
   Insn 1064: point = 725
   Insn 1063: point = 727
   Insn 1062: point = 729
  BB 4
   Insn 72: point = 732
   Insn 71: point = 732
   Insn 70: point = 733
   Insn 68: point = 735
   Insn 67: point = 736
   Insn 66: point = 737
   Insn 931: point = 737
   Insn 929: point = 737
   Insn 928: point = 738
   Insn 926: point = 738
  BB 3
   Insn 1061: point = 739
	Hard reg 5 is preferable by r578 with profit 1
   Insn 1060: point = 741
	Hard reg 4 is preferable by r579 with profit 1
   Insn 1059: point = 743
   Insn 927: point = 745
   Insn 856: point = 746
   Insn 855: point = 747
  BB 122
   Insn 878: point = 749
   Insn 877: point = 750
  BB 2
   Insn 58: point = 752
   Insn 57: point = 752
   Insn 56: point = 753
   Insn 55: point = 755
   Insn 54: point = 756
   Insn 53: point = 757
   Insn 3: point = 757
 r83: [69..422] [62..67] [52..53]
 r84: [669..671]
 r85: [675..677]
 r87: [589..673] [577..581]
 r94: [560..561]
 r101: [537..538]
 r104: [479..482] [473..476]
 r106: [471..489] [416..429]
 r112: [366..383] [256..351] [163..239] [149..161] [122..134]
 r113: [275..378]
 r117: [254..271] [228..237] [219..220]
 r120: [318..318] [310..316] [305..308]
 r123: [79..421] [72..77]
 r125: [514..516]
 r129: [14..23]
 r132: [12..17]
 r135: [469..475]
 r136: [477..477] [461..474] [448..456] [404..444] [297..399] [72..293]
 r149: [754..756]
 r150: [734..736]
 r151: [744..755] [722..729]
 r158: [705..706]
 r159: [720..723] [682..696]
 r160: [701..703]
 r165: [160..160] [147..152]
 r166: [646..648]
 r167: [660..670] [634..641]
 r174: [617..618]
 r175: [632..635] [594..608]
 r176: [613..615]
 r181: [158..158] [145..150] [127..132] [110..123] [83..106]
 r186: [259..259] [252..257] [230..235] [207..208] [155..157]
 r187: [261..264] [250..258]
 r189: [414..423]
 r203: [369..369] [362..367] [344..349] [328..340] [301..324]
 r209: [200..225] [165..194]
 r212: [189..189] [176..187] [169..174]
 r229: [100..100] [92..98] [87..90]
 r252: [512..517] [24..33]
 r254: [125..126] [117..118]
 r258: [342..343] [335..336]
 r261: [752..753]
 r262: [732..733]
 r263: [713..715]
 r264: [713..714]
 r265: [707..712]
 r266: [707..708]
 r267: [709..710]
 r268: [699..700]
 r269: [686..692]
 r270: [686..687]
 r271: [678..685]
 r272: [676..679]
 r274: [667..668]
 r275: [644..645]
 r276: [625..627]
 r277: [625..626]
 r278: [619..624]
 r279: [619..620]
 r280: [621..622]
 r281: [611..612]
 r283: [598..604]
 r284: [598..599]
 r285: [590..597]
 r286: [586..591]
 r291: [554..555]
 r293: [546..552]
 r298: [543..547]
 r301: [540..541]
 r305: [533..534]
 r307: [525..531]
 r312: [522..526]
 r315: [519..520]
 r317: [499..503]
 r318: [505..506]
 r320: [496..497]
 r328: [451..457]
 r329: [451..452]
 r330: [443..450]
 r332: [438..439]
 r334: [434..437]
 r339: [391..405]
 r340: [394..400]
 r342: [394..395]
 r344: [387..393]
 r345: [384..388]
 r347: [384..385]
 r356: [303..304]
 r363: [284..294]
 r364: [284..285]
 r365: [276..283]
 r366: [273..277]
 r374: [167..168]
 r386: [85..86]
 r397: [48..49]
 r403: [27..28]
 r404: [29..30]
 r406: [25..26]
 r409: [19..20]
 r412: [16..18]
 r414: [7..8]
 r417: [2..3]
 r420: [0..1]
 r421: [338..339]
 r422: [210..211]
 r424: [120..121]
 r427: [290..375]
 r428: [299..371]
 r429: [749..750] [691..727]
 r430: [749..749] [695..725]
 r431: [664..665] [603..639]
 r432: [664..664] [607..637]
 r433: [112..116] [107..108] [103..104]
 r434: [115..115] [88..104]
 r435: [202..206] [195..196] [192..193]
 r436: [205..205] [172..193]
 r437: [330..334] [325..326] [321..322]
 r438: [333..333] [306..322]
 r439: [463..464]
 r441: [310..315]
 r443: [176..183]
 r445: [92..97]
 r448: [261..267] [232..258] [153..157]
 r449: [510..573]
 r450: [412..417]
 r451: [499..500] [425..492] [62..69] [54..54] [39..41]
 r456: [36..518]
 r457: [519..539]
 r458: [540..568]
 r460: [577..674]
 r461: [732..745]
 r462: [9..13] [0..6]
 r463: [0..11]
 r464: [506..513] [36..36]
 r465: [499..511] [62..65] [54..58] [34..45]
 r466: [499..509] [62..63] [54..57] [36..44]
 r467: [386..415] [72..72]
 r468: [411..413] [371..409] [364..368]
 r469: [374..411] [72..73]
 r470: [70..80]
 r471: [135..148]
 r472: [137..146]
 r473: [140..144] [133..138]
 r474: [240..255]
 r475: [238..253]
 r476: [245..251] [236..243]
 r477: [242..249]
 r478: [352..365]
 r479: [354..363]
 r480: [357..361] [350..355]
 r481: [432..472]
 r482: [430..470]
 r483: [432..468]
 r484: [519..536]
 r485: [540..559]
 r486: [540..557]
 r487: [575..580]
 r488: [623..633] [611..614]
 r489: [626..631] [609..616]
 r490: [651..659] [642..647]
 r491: [640..657]
 r492: [638..655]
 r493: [711..721] [699..702]
 r494: [714..719] [697..704]
 r495: [737..743] [730..735]
 r496: [728..741]
 r497: [726..739]
 r498: [708..709]
 r499: [620..621]
 r500: [553..554]
 r501: [532..533]
 r502: [484..485]
 r505: [716..717]
 r506: [693..694]
 r507: [688..689]
 r508: [680..684]
 r509: [652..653]
 r510: [649..650]
 r511: [628..629]
 r512: [605..606]
 r513: [600..601]
 r514: [592..596]
 r515: [586..587]
 r516: [583..584]
 r517: [577..578]
 r518: [569..570]
 r519: [563..564]
 r520: [565..566]
 r521: [548..551]
 r522: [542..544]
 r523: [527..530]
 r524: [521..523]
 r526: [504..507]
 r527: [501..502]
 r528: [494..495]
 r529: [483..488]
 r530: [479..480]
 r531: [465..466]
 r532: [458..459]
 r533: [453..454]
 r534: [445..449]
 r535: [440..441]
 r536: [432..433]
 r537: [425..426]
 r538: [418..419]
 r539: [406..407]
 r540: [401..402]
 r541: [396..397]
 r542: [389..392]
 r543: [381..382]
 r544: [379..380]
 r545: [376..377]
 r546: [372..373]
 r547: [313..314]
 r548: [295..298]
 r549: [286..291]
 r550: [287..288]
 r551: [278..282]
 r552: [272..274]
 r553: [269..270]
 r554: [261..262]
 r555: [184..185]
 r556: [179..181]
 r557: [179..180]
 r558: [170..171]
 r559: [198..199]
 r560: [163..164]
 r561: [95..96]
 r564: [74..75]
 r566: [50..51]
 r567: [46..47]
 r568: [42..43]
 r570: [59..60]
 r571: [55..56]
 r572: [37..38]
 r573: [21..22]
 r574: [4..5]
 r575: [219..222]
 r576: [215..216]
 r577: [212..213]
 r578: [740..746]
 r579: [742..747]
 r580: [683..690]
 r581: [656..661]
 r582: [658..662]
 r583: [579..582]
 r584: [585..588]
 r585: [595..602]
 r586: [558..562]
 r587: [567..571]
 r588: [572..574]
 r589: [545..553]
 r590: [524..532]
 r591: [481..486]
 r592: [487..490]
 r593: [491..493]
 r595: [455..460]
 r596: [420..427]
 r598: [398..403]
 r600: [327..329]
 r601: [263..265]
 r602: [266..268]
 r603: [281..289]
 r605: [292..296]
 r606: [182..186]
 r607: [197..201]
 r608: [109..111]
 r609: [76..78]
 r610: [337..341]
 r611: [214..217]
 r612: [218..223]
 r613: [224..226]
 r614: [221..227]
 r615: [209..229]
 r616: [119..124]
Compressing live ranges: from 757 to 488 - 64%
Ranges after the compression:
 r83: [45..263] [38..39]
 r84: [427..428]
 r85: [429..430]
 r87: [370..428] [362..365]
 r94: [350..351]
 r101: [335..336]
 r104: [297..300] [294..295]
 r106: [292..304] [258..265]
 r112: [221..234] [158..212] [93..147] [77..84]
 r113: [171..230]
 r117: [156..168] [140..145] [134..135]
 r120: [189..193]
 r123: [49..263]
 r125: [322..323]
 r129: [12..17]
 r132: [10..13]
 r135: [290..295]
 r136: [286..296] [249..283] [185..246] [49..182]
 r149: [486..487]
 r150: [472..473]
 r151: [480..487] [464..469]
 r158: [449..450]
 r159: [462..465] [433..444]
 r160: [447..448]
 r165: [98..98] [91..94]
 r166: [411..412]
 r167: [421..428] [403..408]
 r174: [388..389]
 r175: [401..404] [372..383]
 r176: [386..387]
 r181: [97..97] [89..94] [81..82] [68..78] [57..65]
 r186: [154..160] [142..143] [126..127] [95..96]
 r187: [161..164] [152..159]
 r189: [256..263]
 r203: [217..223] [209..210] [198..206] [187..195]
 r209: [121..139] [102..116]
 r212: [104..114]
 r229: [59..63]
 r252: [320..323] [18..23]
 r254: [79..80] [73..74]
 r258: [207..208] [203..204]
 r261: [484..485]
 r262: [470..471]
 r263: [457..459]
 r264: [457..458]
 r265: [451..456]
 r266: [451..452]
 r267: [453..454]
 r268: [445..446]
 r269: [435..440]
 r270: [435..436]
 r271: [431..434]
 r272: [429..432]
 r274: [425..426]
 r275: [409..410]
 r276: [396..398]
 r277: [396..397]
 r278: [390..395]
 r279: [390..391]
 r280: [392..393]
 r281: [384..385]
 r283: [374..379]
 r284: [374..375]
 r285: [370..373]
 r286: [368..371]
 r291: [346..347]
 r293: [341..344]
 r298: [339..342]
 r301: [337..338]
 r305: [333..334]
 r307: [328..331]
 r312: [326..329]
 r315: [324..325]
 r317: [311..314]
 r318: [315..316]
 r320: [309..310]
 r328: [278..283]
 r329: [278..279]
 r330: [274..277]
 r332: [270..271]
 r334: [268..269]
 r339: [239..250]
 r340: [241..246]
 r342: [241..242]
 r344: [237..240]
 r345: [235..238]
 r347: [235..236]
 r356: [187..188]
 r363: [175..182]
 r364: [175..176]
 r365: [171..174]
 r366: [169..172]
 r374: [102..103]
 r386: [57..58]
 r397: [34..35]
 r403: [20..21]
 r404: [22..23]
 r406: [18..19]
 r409: [14..15]
 r412: [12..13]
 r414: [6..7]
 r417: [2..3]
 r420: [0..1]
 r421: [205..206]
 r422: [128..129]
 r424: [75..76]
 r427: [179..228]
 r428: [187..224]
 r429: [482..483] [439..467]
 r430: [482..482] [443..465]
 r431: [423..424] [378..406]
 r432: [423..423] [382..404]
 r433: [70..72] [64..67]
 r434: [71..71] [59..65]
 r435: [123..125] [115..118]
 r436: [124..124] [106..116]
 r437: [200..202] [194..197]
 r438: [201..201] [189..195]
 r439: [286..287]
 r441: [191..192]
 r443: [108..111]
 r445: [61..62]
 r448: [161..166] [142..159] [95..96]
 r449: [318..361]
 r450: [254..259]
 r451: [311..312] [264..306] [45..47] [40..40] [28..29]
 r456: [25..323]
 r457: [324..336]
 r458: [337..357]
 r460: [362..428]
 r461: [470..481]
 r462: [8..11] [0..5]
 r463: [0..9]
 r464: [316..321] [25..25]
 r465: [311..319] [45..46] [40..42] [24..31]
 r466: [311..317] [45..46] [40..42] [25..31]
 r467: [237..257] [49..49]
 r468: [224..255] [219..222]
 r469: [227..253] [49..50]
 r470: [48..56]
 r471: [85..92]
 r472: [85..90]
 r473: [83..88]
 r474: [148..157]
 r475: [146..155]
 r476: [144..153]
 r477: [148..151]
 r478: [213..220]
 r479: [213..218]
 r480: [211..216]
 r481: [266..293]
 r482: [266..291]
 r483: [266..289]
 r484: [324..334]
 r485: [337..349]
 r486: [337..347]
 r487: [362..365]
 r488: [394..402] [384..387]
 r489: [397..400] [384..387]
 r490: [415..420] [409..412]
 r491: [407..418]
 r492: [405..416]
 r493: [455..463] [445..448]
 r494: [458..461] [445..448]
 r495: [470..479]
 r496: [468..477]
 r497: [466..475]
 r498: [452..453]
 r499: [391..392]
 r500: [345..346]
 r501: [332..333]
 r502: [301..302]
 r505: [460..461]
 r506: [441..442]
 r507: [437..438]
 r508: [433..434]
 r509: [415..416]
 r510: [413..414]
 r511: [399..400]
 r512: [380..381]
 r513: [376..377]
 r514: [372..373]
 r515: [368..369]
 r516: [366..367]
 r517: [362..363]
 r518: [358..359]
 r519: [352..353]
 r520: [354..355]
 r521: [343..344]
 r522: [339..340]
 r523: [330..331]
 r524: [326..327]
 r526: [315..317]
 r527: [313..314]
 r528: [307..308]
 r529: [301..304]
 r530: [297..298]
 r531: [288..289]
 r532: [284..285]
 r533: [280..281]
 r534: [276..277]
 r535: [272..273]
 r536: [266..267]
 r537: [264..265]
 r538: [260..261]
 r539: [251..252]
 r540: [247..248]
 r541: [243..244]
 r542: [239..240]
 r543: [233..234]
 r544: [231..232]
 r545: [229..230]
 r546: [225..226]
 r547: [191..192]
 r548: [183..186]
 r549: [177..180]
 r550: [177..178]
 r551: [173..174]
 r552: [169..170]
 r553: [167..168]
 r554: [161..162]
 r555: [112..113]
 r556: [108..109]
 r557: [108..109]
 r558: [104..105]
 r559: [119..120]
 r560: [100..101]
 r561: [61..62]
 r564: [51..52]
 r566: [36..37]
 r567: [32..33]
 r568: [30..31]
 r570: [43..44]
 r571: [41..42]
 r572: [26..27]
 r573: [16..17]
 r574: [4..5]
 r575: [134..137]
 r576: [132..133]
 r577: [130..131]
 r578: [476..481]
 r579: [478..481]
 r580: [433..438]
 r581: [417..422]
 r582: [419..422]
 r583: [364..365]
 r584: [368..369]
 r585: [372..377]
 r586: [348..351]
 r587: [356..359]
 r588: [360..361]
 r589: [341..345]
 r590: [328..332]
 r591: [299..302]
 r592: [303..304]
 r593: [305..306]
 r595: [282..285]
 r596: [262..265]
 r598: [245..248]
 r600: [198..199]
 r601: [163..164]
 r602: [165..166]
 r603: [173..178]
 r605: [181..184]
 r606: [110..113]
 r607: [119..122]
 r608: [68..69]
 r609: [53..54]
 r610: [205..206]
 r611: [132..133]
 r612: [134..137]
 r613: [138..139]
 r614: [136..139]
 r615: [128..141]
 r616: [75..78]

********** Pseudos coalescing #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1196:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1184:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1171:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1216:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1200:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1182:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1176:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1139:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1132:  (0) =r  (1) riFo {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1128:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1121:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1111:  (0) o  (1) riF {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1109:  (0) o  (1) riF {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1082:  (0) o  (1) riF {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1074:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1072:  (0) =r  (1) riFo {*movdi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1065:  (0) =r  (1) riFo {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 879:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 877:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 867:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=617 from oldreg=443, assigning class GENERAL_REGS to r617
  867: r617:SI=[r555:SI+0x10]
      REG_DEAD r555:SI
    Inserting insn reload after:
 1280: r443:SI=r617:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1280:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 865:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=618 from oldreg=441, assigning class GENERAL_REGS to r618
  865: r618:SI=[r203:SI+0x10]
    Inserting insn reload after:
 1281: r441:SI=r618:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1281:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 860:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 859:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 856:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 855:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) rm  (1) re {*cmpsi_1}
      Creating newreg=619 from oldreg=83, assigning class GENERAL_REGS to r619
      Making reload reg 619 for reg 83 optional
  599: flags:CCZ=cmp(r619:SI,r465:SI)
      REG_DEAD r83:SI
    Inserting insn reload before:
 1282: r619:SI=r83:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1282:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 581:  (0) r  (1) rm {*cmpsi_1}
      Creating newreg=620 from oldreg=83, assigning class GENERAL_REGS to r620
      Making reload reg 620 for reg 83 optional
  581: flags:CCGC=cmp(r465:SI,r620:SI)
    Inserting insn reload before:
 1283: r620:SI=r83:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1283:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 567:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=621 from oldreg=123, assigning class GENERAL_REGS to r621
      Making reload reg 621 for reg 123 optional
  567: {r621:SI=r621:SI+r470:SI;clobber flags:CC;}
    Inserting insn reload before:
 1284: r621:SI=r123:SI
    Inserting insn reload after:
 1285: r123:SI=r621:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1285:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1284:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 564:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=622 from oldreg=83, assigning class GENERAL_REGS to r622
      Making reload reg 622 for reg 83 optional
  564: {r622:SI=r622:SI+0x1;clobber flags:CC;}
    Inserting insn reload before:
 1286: r622:SI=r83:SI
    Inserting insn reload after:
 1287: r83:SI=r622:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1287:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1286:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 449:  (0) r  (1) rm {*cmpsi_1}
      Creating newreg=623 from oldreg=443, assigning class GENERAL_REGS to r623
  449: flags:CC=cmp(r623:SI,[r436:SI+0x10])
      REG_DEAD r443:SI
    Inserting insn reload before:
 1288: r623:SI=r443:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1288:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) r {*cmpsi_ccno_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 387:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 386:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 353:  (0) r  (1) rm {*cmpsi_1}
      Creating newreg=624 from oldreg=441, assigning class GENERAL_REGS to r624
  353: flags:CC=cmp(r624:SI,[r438:SI+0x10])
      REG_DEAD r441:SI
    Inserting insn reload before:
 1289: r624:SI=r441:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1289:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=625 from oldreg=339, assigning class INDEX_REGS to address r625
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            alt=1,overall=14,losers=1 -- refuse
	 Choosing alt 1 in insn 289:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
  289: {r542:DI=zero_extend(r542:DI#0)*zero_extend([r625:SI*0x8+`pre']);clobber flags:CC;}
      REG_DEAD r339:SI
    Inserting insn reload before:
 1290: r625:SI=r339:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1290:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=626 from oldreg=339, assigning class INDEX_REGS to address r626
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 287:  (0) r  (1) 0  (2) mr {*mulsi3_1}
  287: {r541:SI=r541:SI*[r626:SI*0x8+const(`pre'+0x4)];clobber flags:CC;}
    Inserting insn reload before:
 1291: r626:SI=r339:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1291:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=627 from oldreg=339, assigning class INDEX_REGS to address r627
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 285:  (0) r  (1) 0  (2) mr {*mulsi3_1}
  285: {r540:SI=r540:SI*[r627:SI*0x8+`pre'];clobber flags:CC;}
    Inserting insn reload before:
 1292: r627:SI=r339:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1292:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=16,losers=2 -- refuse
	 Choosing alt 3 in insn 283:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=628 from oldreg=339, assigning class GENERAL_REGS to r628
  283: {r628:SI=r539:SI-0x1;clobber flags:CC;}
      REG_DEAD r539:SI
    Inserting insn reload after:
 1293: r339:SI=r628:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1293:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 268:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            2 Non pseudo reload: reject++
          alt=1,overall=20,losers=2,rld_nregs=3
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            2 Non pseudo reload: reject++
          alt=1,overall=20,losers=2,rld_nregs=3
	 Choosing alt 1 in insn 266:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
      Creating newreg=629 from oldreg=483, assigning class AD_REGS to r629
  266: {r629:DI=zero_extend(r629:DI#0)*zero_extend(r483:DI#0);clobber flags:CC;}
    Inserting insn reload before:
 1294: clobber r629:DI
 1295: r629:DI#0=r483:DI#0
    Inserting insn reload after:
 1296: r483:DI=r629:DI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1296:  (0) o  (1) riF {*movdi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1295:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 263:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 257:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 255:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            2 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
            1 Non pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
	 Choosing alt 2 in insn 254:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) ?mr {*cmpsi_ccno_1}
      Creating newreg=630 from oldreg=449, assigning class GENERAL_REGS to r630
      Making reload reg 630 for reg 449 optional
  213: flags:CCNO=cmp(r630:SI,0)
    Inserting insn reload before:
 1297: r630:SI=r449:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1297:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) o  (1) riF {*movdi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=631 from oldreg=307, assigning class GENERAL_REGS to r631
      Making reload reg 631 for reg 307 optional
  202: {r312:DI#4=r312:DI#4+r631:SI;clobber flags:CC;}
      REG_DEAD r307:SI
    Inserting insn reload before:
 1298: r631:SI=r307:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1298:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            alt=1,overall=14,losers=1 -- refuse
	 Choosing alt 1 in insn 200:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
            0 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
	 Choosing alt 1 in insn 195:  (0) r  (1) rm  (2) e {*mulsi3_1}
      Creating newreg=632 from oldreg=307, assigning class GENERAL_REGS to r632
  195: {r632:SI=[r484:SI*0x8+const(`suf'+0xc)]*0x125e591;clobber flags:CC;}
    Inserting insn reload after:
 1299: r307:SI=r632:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1299:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=3
          alt=1,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=2,overall=6,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 192:  (0) ?r  (1) r  (2) X {extendsidi2_1}
      Change to class NO_REGS for r501
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) rm  (1) re {*cmpsi_1}
      Creating newreg=633 from oldreg=485, assigning class GENERAL_REGS to r633
      Making reload reg 633 for reg 485 optional
  185: flags:CCZ=cmp(r633:SI,r486:SI)
    Inserting insn reload before:
 1300: r633:SI=r485:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1300:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 183:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=634 from oldreg=485, assigning class GENERAL_REGS to r634
      Making reload reg 634 for reg 485 optional
  183: {r634:SI=r634:SI+0x1;clobber flags:CC;}
    Inserting insn reload before:
 1301: r634:SI=r485:SI
    Inserting insn reload after:
 1302: r485:SI=r634:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1302:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1301:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=635 from oldreg=485, assigning class INDEX_REGS to address r635
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) o  (1) riF {*movdi_internal}
  182: [r635:SI*0x8+`pre']=r301:DI
      REG_DEAD r301:DI
    Inserting insn reload before:
 1303: r635:SI=r485:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1303:  (0) =r  (1) g {*movsi_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*addsi_1}
      Creating newreg=636 from oldreg=293, assigning class GENERAL_REGS to r636
      Making reload reg 636 for reg 293 optional
  179: {r298:DI#4=r298:DI#4+r636:SI;clobber flags:CC;}
      REG_DEAD r293:SI
    Inserting insn reload before:
 1304: r636:SI=r293:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1304:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=637 from oldreg=485, assigning class INDEX_REGS to address r637
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            alt=1,overall=14,losers=1 -- refuse
	 Choosing alt 1 in insn 177:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
  177: {r521:DI=zero_extend(r521:DI#0)*zero_extend([r637:SI*0x8+const(`pre'-0x8)]);clobber flags:CC;}
      REG_EQUAL zero_extend([r485:SI*0x8+const(`pre'-0x8)])*0x125e591
    Inserting insn reload before:
 1305: r637:SI=r485:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1305:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=638 from oldreg=485, assigning class INDEX_REGS to address r638
            0 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
	 Choosing alt 1 in insn 172:  (0) r  (1) rm  (2) e {*mulsi3_1}
      Creating newreg=639 from oldreg=293, assigning class GENERAL_REGS to r639
  172: {r639:SI=[r638:SI*0x8+const(`pre'-0x4)]*0x125e591;clobber flags:CC;}
    Inserting insn reload before:
 1306: r638:SI=r485:SI
    Inserting insn reload after:
 1307: r293:SI=r639:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1307:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1306:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=3
          alt=1,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=2,overall=6,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 169:  (0) ?r  (1) r  (2) X {extendsidi2_1}
      Change to class NO_REGS for r500
      Creating newreg=640 from oldreg=485, assigning class INDEX_REGS to address r640
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
  168: r291:SI=[r640:SI*0x4+`a']
      REG_EQUIV [r485:SI*0x4+`a']
    Inserting insn reload before:
 1308: r640:SI=r485:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1308:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 154:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=4
            0 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
      Creating newreg=641 from oldreg=489, assigning class GENERAL_REGS to r641
  136: {r641:DI=r641:DI-0x30;clobber flags:CC;}
      REG_DEAD r174:DI
    Inserting insn reload before:
 1309: r641:DI=r174:DI
    Inserting insn reload after:
 1310: r489:DI=r641:DI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1310:  (0) o  (1) riF {*movdi_internal}
            0 Early clobber: reject++
            alt=0: Bad operand -- refuse
            1 Matching earlyclobber alt: reject--
          alt=1,overall=5,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 130:  (0) r  (1) 0  (2) Jc {*ashldi3_doubleword}
      Creating newreg=642 from oldreg=277, assigning class GENERAL_REGS to r642
  130: {r642:DI=r642:DI<<0x3;clobber flags:CC;}
      REG_DEAD r489:DI
    Inserting insn reload before:
 1311: r642:DI=r489:DI
    Inserting insn reload after:
 1312: r277:DI=r642:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1311:  (0) =r  (1) riFo {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=4
            0 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) ronF {*adddi3_doubleword}
      Creating newreg=643 from oldreg=494, assigning class GENERAL_REGS to r643
   84: {r643:DI=r643:DI-0x30;clobber flags:CC;}
      REG_DEAD r158:DI
    Inserting insn reload before:
 1313: r643:DI=r158:DI
    Inserting insn reload after:
 1314: r494:DI=r643:DI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1314:  (0) o  (1) riF {*movdi_internal}
            0 Early clobber: reject++
            alt=0: Bad operand -- refuse
            1 Matching earlyclobber alt: reject--
          alt=1,overall=5,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 78:  (0) r  (1) 0  (2) Jc {*ashldi3_doubleword}
      Creating newreg=644 from oldreg=264, assigning class GENERAL_REGS to r644
   78: {r644:DI=r644:DI<<0x3;clobber flags:CC;}
      REG_DEAD r494:DI
    Inserting insn reload before:
 1315: r644:DI=r494:DI
    Inserting insn reload after:
 1316: r264:DI=r644:DI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1315:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1278:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1279:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1276:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1277:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1274:  (0) o  (1) riF {*movdi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1275:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1273:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1269:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1270:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1268:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1266:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1267:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1264:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1265:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1263:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1262:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1261:  (0) o  (1) riF {*movdi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1260:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1259:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1256:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1257:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1254:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1253:  (0) o  (1) riF {*movdi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1252:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1251:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1250:  (0) o  (1) riF {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1249:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1244:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1240:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1239:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=645 from oldreg=494, assigning class GENERAL_REGS to inheritance r645
    Original reg change 494->645 (bb6):
 1121: r505:DI=r645:DI
    Add inheritance<-original before:
 1317: r645:DI=r494:DI

    Inheritance reuse change 494->645 (bb6):
 1315: r644:DI=r645:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 7 8
EBB 9 10
EBB 11
EBB 12
EBB 13
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=646 from oldreg=489, assigning class GENERAL_REGS to inheritance r646
    Original reg change 489->646 (bb13):
 1132: r511:DI=r646:DI
    Add inheritance<-original before:
 1318: r646:DI=r489:DI

    Inheritance reuse change 489->646 (bb13):
 1311: r642:DI=r646:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 14
EBB 15 16
EBB 17
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=647 from oldreg=485, assigning class GENERAL_REGS to inheritance r647
    Original reg change 485->647 (bb17):
 1302: r647:SI=r634:SI
    Add original<-inheritance after:
 1319: r485:SI=r647:SI

    Inheritance reuse change 485->647 (bb17):
 1300: r633:SI=r647:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=648 from oldreg=485, assigning class INDEX_REGS to inheritance r648
    Original reg change 485->648 (bb17):
 1303: r635:SI=r648:SI
    Add inheritance<-original before:
 1320: r648:SI=r485:SI

    Inheritance reuse change 485->648 (bb17):
 1301: r634:SI=r648:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=649 from oldreg=485, assigning class INDEX_REGS to inheritance r649
    Original reg change 485->649 (bb17):
 1305: r637:SI=r649:SI
    Add inheritance<-original before:
 1321: r649:SI=r485:SI

    Inheritance reuse change 485->649 (bb17):
 1320: r648:SI=r649:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=650 from oldreg=293, assigning class GENERAL_REGS to inheritance r650
    Original reg change 293->650 (bb17):
 1307: r650:SI=r639:SI
    Add original<-inheritance after:
 1322: r293:SI=r650:SI

    Inheritance reuse change 293->650 (bb17):
 1304: r636:SI=r650:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=651 from oldreg=485, assigning class INDEX_REGS to inheritance r651
    Original reg change 485->651 (bb17):
 1306: r638:SI=r651:SI
    Add inheritance<-original before:
 1323: r651:SI=r485:SI

    Inheritance reuse change 485->651 (bb17):
 1321: r649:SI=r651:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=652 from oldreg=485, assigning class INDEX_REGS to inheritance r652
    Original reg change 485->652 (bb17):
 1308: r640:SI=r652:SI
    Add inheritance<-original before:
 1324: r652:SI=r485:SI

    Inheritance reuse change 485->652 (bb17):
 1323: r651:SI=r652:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1322: r293:SI=r650:SI
deleting insn with uid = 1322.
EBB 18
EBB 19
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=653 from oldreg=307, assigning class GENERAL_REGS to inheritance r653
    Original reg change 307->653 (bb19):
 1299: r653:SI=r632:SI
    Add original<-inheritance after:
 1325: r307:SI=r653:SI

    Inheritance reuse change 307->653 (bb19):
 1298: r631:SI=r653:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1325: r307:SI=r653:SI
deleting insn with uid = 1325.
EBB 20
EBB 21
EBB 131
EBB 22
EBB 23 24
EBB 25
EBB 26
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=654 from oldreg=483, assigning class GENERAL_REGS to inheritance r654
    Original reg change 483->654 (bb26):
  255: {r533:SI=r533:SI*r654:DI#4;clobber flags:CC;}
    Add inheritance<-original before:
 1326: r654:DI=r483:DI

    Inheritance reuse change 483->654 (bb26):
  257: {r534:DI=zero_extend(r534:DI#0)*zero_extend(r654:DI#0);clobber flags:CC;}
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=655 from oldreg=136, assigning class GENERAL_REGS to inheritance r655
    Original reg change 136->655 (bb26):
 1250: r655:DI=r595:DI
    Add original<-inheritance after:
 1327: r136:DI=r655:DI

    Inheritance reuse change 136->655 (bb26):
 1174: r534:DI#0=r655:DI#0
      REG_DEAD r655:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=656 from oldreg=483, assigning class GENERAL_REGS to inheritance r656
    Original reg change 483->656 (bb26):
  254: {r532:SI=r532:SI*r656:DI#0;clobber flags:CC;}
    Add inheritance<-original before:
 1328: r656:DI=r483:DI

    Inheritance reuse change 483->656 (bb26):
 1326: r654:DI=r656:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1327: r136:DI=r655:DI
deleting insn with uid = 1327.
EBB 27
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=657 from oldreg=483, assigning class GENERAL_REGS to inheritance r657
    Original reg change 483->657 (bb27):
 1295: r629:DI#0=r657:DI#0
    Add inheritance<-original before:
 1329: r657:DI=r483:DI

    Inheritance reuse change 483->657 (bb27):
  266: {r629:DI=zero_extend(r629:DI#0)*zero_extend(r657:DI#0);clobber flags:CC;}
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=658 from oldreg=483, assigning class GENERAL_REGS to inheritance r658
    Original reg change 483->658 (bb27):
  263: {r535:SI=r535:SI*r658:DI#0;clobber flags:CC;}
    Add inheritance<-original before:
 1330: r658:DI=r483:DI

    Inheritance reuse change 483->658 (bb27):
 1329: r657:DI=r658:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=659 from oldreg=483, assigning class GENERAL_REGS to inheritance r659
    Original reg change 483->659 (bb27):
 1176: r535:SI=r659:DI#4
    Add inheritance<-original before:
 1331: r659:DI=r483:DI

    Inheritance reuse change 483->659 (bb27):
 1330: r658:DI=r659:DI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 28
EBB 29
EBB 30 31
EBB 32 33
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=660 from oldreg=339, assigning class INDEX_REGS to inheritance r660
    Original reg change 339->660 (bb32):
 1291: r626:SI=r660:SI
    Add inheritance<-original before:
 1332: r660:SI=r339:SI

    Inheritance reuse change 339->660 (bb32):
 1290: r625:SI=r660:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=661 from oldreg=136, assigning class GENERAL_REGS to inheritance r661
    Original reg change 136->661 (bb32):
 1253: r661:DI=r598:DI
    Add original<-inheritance after:
 1333: r136:DI=r661:DI

    Inheritance reuse change 136->661 (bb32):
 1187: r542:DI#0=r661:DI#0
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of INDEX_REGS and GENERAL_REGS
      Creating newreg=662 from oldreg=339, assigning class INDEX_REGS to inheritance r662
    Original reg change 339->662 (bb32):
 1292: r627:SI=r662:SI
    Add inheritance<-original before:
 1334: r662:SI=r339:SI

    Inheritance reuse change 339->662 (bb32):
 1332: r660:SI=r662:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=663 from oldreg=339, assigning class GENERAL_REGS to inheritance r663
    Original reg change 339->663 (bb32):
 1293: r663:SI=r628:SI
    Add original<-inheritance after:
 1335: r339:SI=r663:SI

    Inheritance reuse change 339->663 (bb32):
 1334: r662:SI=r663:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=664 from oldreg=123, assigning class GENERAL_REGS to inheritance r664
    Original reg change 123->664 (bb32):
 1181: r539:SI=r664:SI
    Add inheritance<-original before:
 1336: r664:SI=r123:SI

    Inheritance reuse change 123->664 (bb32):
 1189: r543:SI=r664:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1335: r339:SI=r663:SI
deleting insn with uid = 1335.
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40 41
EBB 42
EBB 43
EBB 44
EBB 45 46 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55 56
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=665 from oldreg=136, assigning class GENERAL_REGS to inheritance r665
    Original reg change 136->665 (bb55):
 1261: r665:DI=r605:DI
    Add original<-inheritance after:
 1337: r136:DI=r665:DI

    Inheritance reuse change 136->665 (bb55):
  389: {r551:DI=zero_extend(r551:DI#0)*zero_extend(r665:DI#0);clobber flags:CC;}
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63 64
EBB 65
EBB 66
EBB 67
EBB 68 69 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86 87
EBB 88
EBB 89
EBB 90
EBB 91 92 93
EBB 94
EBB 95
EBB 96
EBB 97
EBB 98
EBB 99
EBB 100
EBB 101 102
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=666 from oldreg=123, assigning class GENERAL_REGS to inheritance r666
    Original reg change 123->666 (bb101):
 1285: r666:SI=r621:SI
    Add original<-inheritance after:
 1338: r123:SI=r666:SI

    Inheritance reuse change 123->666 (bb101):
 1216: r609:SI=r666:SI
      REG_DEAD r666:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
  1338: r123:SI=r666:SI
deleting insn with uid = 1338.
EBB 103
EBB 132
EBB 104
EBB 105
EBB 106
EBB 107
EBB 108
EBB 133
EBB 109 134
EBB 110
EBB 111
EBB 112
EBB 113
EBB 114
EBB 115
EBB 116
EBB 117
EBB 118
EBB 119
EBB 120
EBB 121
EBB 122
EBB 123
EBB 124
EBB 125
EBB 126
EBB 127
EBB 128
EBB 129
EBB 130

********** Pseudo live ranges #3: **********

  BB 130
   Insn 777: point = 0
   Insn 776: point = 0
  BB 111
   Insn 1034: point = 0
  BB 110
   Insn 656: point = 0
   Insn 655: point = 0
   Insn 654: point = 1
   Insn 1230: point = 3
	Hard reg 0 is preferable by r574 with profit 9
   Insn 653: point = 5
   Insn 1229: point = 5
   Insn 649: point = 6
   Insn 647: point = 7
   Insn 646: point = 7
   Insn 645: point = 7
   Insn 644: point = 7
   Insn 643: point = 8
  BB 134
   Insn 1107: point = 11
   Insn 1106: point = 13
  BB 109
   Insn 635: point = 16
   Insn 634: point = 16
   Insn 42: point = 17
   Insn 633: point = 18
   Insn 1228: point = 20
	Hard reg 0 is preferable by r573 with profit 1
   Insn 632: point = 22
   Insn 1227: point = 22
   Insn 629: point = 23
   Insn 627: point = 24
   Insn 626: point = 24
   Insn 625: point = 24
   Insn 624: point = 25
   Insn 623: point = 26
   Insn 622: point = 28
   Insn 621: point = 30
  BB 21
   Insn 993: point = 32
   Insn 216: point = 32
  BB 126
   Insn 1052: point = 33
   Insn 758: point = 33
  BB 133
   Insn 1105: point = 33
  BB 108
   Insn 616: point = 36
   Insn 615: point = 36
   Insn 612: point = 36
   Insn 1226: point = 36
	Hard reg 3 is preferable by r572 with profit 9
   Insn 611: point = 38
   Insn 1225: point = 38
  BB 105
   Insn 1030: point = 41
   Insn 1221: point = 41
   Insn 902: point = 43
   Insn 901: point = 44
   Insn 594: point = 45
   Insn 593: point = 46
   Insn 592: point = 46
   Insn 591: point = 46
   Insn 590: point = 46
   Insn 1220: point = 47
   Insn 588: point = 48
   Insn 587: point = 49
   Insn 584: point = 50
   Insn 1219: point = 51
  BB 107
   Insn 1224: point = 54
   Insn 905: point = 56
   Insn 904: point = 57
   Insn 607: point = 58
   Insn 606: point = 59
   Insn 605: point = 59
   Insn 604: point = 59
   Insn 603: point = 59
   Insn 1223: point = 60
  BB 106
   Insn 600: point = 62
   Insn 599: point = 62
   Insn 1282: point = 63
   Insn 903: point = 65
  BB 104
   Insn 582: point = 67
   Insn 581: point = 67
   Insn 1283: point = 68
   Insn 580: point = 69
  BB 103
   Insn 1114: point = 71
   Insn 41: point = 71
  BB 132
   Insn 1104: point = 73
  BB 101
   Insn 571: point = 76
   Insn 570: point = 76
   Insn 569: point = 76
   Insn 568: point = 77
   Insn 1217: point = 79
	   Creating copy r564<-r609@27
   Insn 1268: point = 81
   Insn 1216: point = 82
	   Creating copy r609<-r666@27
   Insn 1285: point = 84
	   Creating copy r621->r666@27
   Insn 567: point = 86
   Insn 1284: point = 86
   Insn 566: point = 88
  BB 129
   Insn 1057: point = 90
  BB 100
   Insn 1287: point = 91
   Insn 564: point = 93
   Insn 1286: point = 93
   Insn 563: point = 95
  BB 98
   Insn 1026: point = 97
   Insn 553: point = 97
   Insn 545: point = 97
   Insn 544: point = 97
   Insn 543: point = 98
   Insn 542: point = 100
   Insn 541: point = 100
   Insn 540: point = 101
  BB 96
   Insn 1024: point = 102
   Insn 536: point = 102
  BB 95
   Insn 534: point = 104
   Insn 533: point = 104
  BB 94
   Insn 532: point = 106
  BB 93
   Insn 530: point = 107
   Insn 529: point = 107
   Insn 1212: point = 108
   Insn 869: point = 109
   Insn 527: point = 110
  BB 97
   Insn 39: point = 112
  BB 92
   Insn 525: point = 114
   Insn 524: point = 114
  BB 91
   Insn 521: point = 115
   Insn 520: point = 115
  BB 90
   Insn 1022: point = 117
  BB 99
   Insn 40: point = 118
   Insn 1267: point = 120
	Hard reg 0 is preferable by r608 with profit 1
   Insn 558: point = 122
   Insn 557: point = 122
   Insn 1266: point = 123
	Hard reg 0 is preferable by r608 with profit 2
  BB 121
   Insn 1046: point = 126
  BB 120
   Insn 743: point = 127
   Insn 742: point = 127
   Insn 876: point = 127
   Insn 875: point = 128
   Insn 737: point = 129
   Insn 736: point = 129
   Insn 735: point = 129
   Insn 734: point = 129
   Insn 1279: point = 130
	Hard reg 1 is preferable by r616 with profit 4
   Insn 733: point = 132
   Insn 732: point = 133
   Insn 731: point = 134
   Insn 730: point = 134
   Insn 729: point = 135
   Insn 728: point = 136
   Insn 727: point = 136
   Insn 1278: point = 136
	Hard reg 1 is preferable by r616 with profit 8
   Insn 726: point = 138
  BB 89
   Insn 512: point = 141
   Insn 511: point = 141
  BB 88
   Insn 510: point = 142
  BB 87
   Insn 508: point = 143
   Insn 507: point = 143
  BB 86
   Insn 505: point = 144
   Insn 504: point = 144
   Insn 1103: point = 144
   Insn 1102: point = 146
  BB 85
   Insn 502: point = 149
   Insn 501: point = 149
  BB 83
   Insn 1019: point = 150
   Insn 37: point = 150
   Insn 36: point = 150
  BB 84
   Insn 497: point = 152
  BB 82
   Insn 489: point = 153
   Insn 488: point = 153
  BB 81
   Insn 487: point = 154
  BB 80
   Insn 485: point = 155
   Insn 484: point = 155
  BB 79
   Insn 1101: point = 156
   Insn 1100: point = 158
   Insn 1099: point = 160
   Insn 888: point = 162
  BB 127
   Insn 1054: point = 164
   Insn 891: point = 164
  BB 128
   Insn 771: point = 167
   Insn 770: point = 167
  BB 67
   Insn 1010: point = 169
  BB 119
   Insn 885: point = 170
  BB 118
   Insn 715: point = 172
   Insn 714: point = 172
   Insn 712: point = 172
  BB 78
   Insn 1017: point = 174
  BB 77
   Insn 478: point = 175
   Insn 477: point = 175
   Insn 1211: point = 176
  BB 75
   Insn 1014: point = 179
   Insn 469: point = 179
   Insn 461: point = 179
   Insn 460: point = 179
   Insn 459: point = 180
   Insn 458: point = 182
   Insn 1209: point = 183
   Insn 457: point = 184
   Insn 456: point = 185
  BB 73
   Insn 1012: point = 186
   Insn 452: point = 186
  BB 72
   Insn 450: point = 188
   Insn 449: point = 188
   Insn 1288: point = 189
  BB 71
   Insn 448: point = 192
  BB 70
   Insn 446: point = 193
   Insn 445: point = 193
   Insn 1208: point = 194
   Insn 1207: point = 195
	   Creating copy r556<-r606@1
   Insn 1280: point = 197
   Insn 867: point = 199
   Insn 1206: point = 201
	   Creating copy r555<-r606@1
   Insn 1263: point = 202
   Insn 443: point = 203
  BB 74
   Insn 33: point = 205
  BB 69
   Insn 441: point = 207
   Insn 440: point = 207
  BB 68
   Insn 437: point = 208
   Insn 436: point = 208
  BB 76
   Insn 34: point = 210
   Insn 1265: point = 212
	Hard reg 0 is preferable by r607 with profit 1
   Insn 474: point = 214
   Insn 473: point = 214
   Insn 1210: point = 215
   Insn 1264: point = 217
	Hard reg 0 is preferable by r607 with profit 2
  BB 117
   Insn 1042: point = 220
  BB 116
   Insn 704: point = 221
   Insn 703: point = 221
   Insn 874: point = 221
   Insn 873: point = 222
   Insn 698: point = 223
   Insn 697: point = 223
   Insn 696: point = 223
   Insn 695: point = 223
   Insn 1277: point = 224
	Hard reg 1 is preferable by r615 with profit 4
   Insn 694: point = 226
   Insn 693: point = 227
   Insn 1233: point = 229
	   Creating copy r577<-r611@4
   Insn 692: point = 231
   Insn 1232: point = 232
	   Creating copy r576<-r611@4
   Insn 1271: point = 233
	   Creating copy r611<-r612@4
   Insn 691: point = 235
   Insn 1275: point = 236
	Hard reg 2 is preferable by r614 with profit 4
   Insn 1231: point = 238
	   Creating copy r575<-r612@4
   Insn 1272: point = 239
	   Creating copy r612<-r613@4
   Insn 1273: point = 241
   Insn 690: point = 242
	Hard reg 0 is preferable by r613 with profit 4
   Insn 689: point = 243
   Insn 688: point = 243
   Insn 1274: point = 243
	Hard reg 2 is preferable by r614 with profit 8
   Insn 1276: point = 245
	Hard reg 1 is preferable by r615 with profit 8
  BB 66
   Insn 428: point = 248
   Insn 427: point = 248
  BB 65
   Insn 426: point = 249
  BB 64
   Insn 424: point = 250
   Insn 423: point = 250
  BB 63
   Insn 421: point = 251
   Insn 420: point = 251
   Insn 1098: point = 251
   Insn 1097: point = 253
   Insn 1096: point = 255
  BB 62
   Insn 418: point = 258
   Insn 417: point = 258
  BB 60
   Insn 1007: point = 259
   Insn 31: point = 259
   Insn 30: point = 259
  BB 61
   Insn 413: point = 261
  BB 59
   Insn 405: point = 262
   Insn 404: point = 262
  BB 58
   Insn 403: point = 263
  BB 57
   Insn 401: point = 264
   Insn 400: point = 264
  BB 56
   Insn 1095: point = 265
   Insn 1094: point = 267
   Insn 1093: point = 269
   Insn 1092: point = 271
   Insn 889: point = 273
  BB 115
   Insn 886: point = 275
  BB 55
   Insn 397: point = 277
   Insn 396: point = 277
   Insn 1205: point = 278
	   Creating copy r554<-r601@7
   Insn 906: point = 280
   Insn 1258: point = 281
	   Creating copy r601<-r602@7
   Insn 1259: point = 283
   Insn 1204: point = 284
	   Creating copy r553->r602@7
   Insn 395: point = 286
   Insn 1203: point = 287
	Hard reg 2 is preferable by r552 with profit 7
   Insn 393: point = 289
   Insn 1202: point = 290
   Insn 391: point = 292
   Insn 1201: point = 293
	Hard reg 0 is preferable by r551 with profit 7
   Insn 389: point = 295
   Insn 1200: point = 297
   Insn 1199: point = 298
   Insn 388: point = 299
   Insn 1197: point = 301
	Hard reg 0 is preferable by r549 with profit 7
   Insn 387: point = 303
   Insn 1198: point = 304
	   Creating copy r550<-r603@7
   Insn 1260: point = 305
   Insn 1196: point = 307
   Insn 1337: point = 309
   Insn 1261: point = 310
	   Creating copy r605->r665@7
   Insn 1195: point = 311
	Hard reg 2 is preferable by r548 with profit 7
   Insn 386: point = 313
   Insn 1262: point = 313
   Insn 1194: point = 315
  BB 54
   Insn 384: point = 318
   Insn 383: point = 318
  BB 52
   Insn 1005: point = 320
   Insn 373: point = 320
   Insn 365: point = 320
   Insn 364: point = 320
   Insn 363: point = 321
   Insn 362: point = 323
   Insn 361: point = 323
   Insn 360: point = 324
  BB 50
   Insn 1003: point = 325
   Insn 356: point = 325
  BB 49
   Insn 354: point = 327
   Insn 353: point = 327
   Insn 1289: point = 328
  BB 48
   Insn 352: point = 331
  BB 47
   Insn 350: point = 332
   Insn 349: point = 332
   Insn 1193: point = 333
   Insn 1281: point = 334
   Insn 865: point = 336
   Insn 347: point = 337
  BB 51
   Insn 27: point = 339
  BB 46
   Insn 345: point = 341
   Insn 344: point = 341
  BB 45
   Insn 341: point = 342
   Insn 340: point = 342
  BB 44
   Insn 1001: point = 344
  BB 53
   Insn 28: point = 345
   Insn 1257: point = 347
	Hard reg 0 is preferable by r600 with profit 2
   Insn 378: point = 349
   Insn 377: point = 349
   Insn 1256: point = 350
	Hard reg 0 is preferable by r600 with profit 4
  BB 114
   Insn 1038: point = 353
  BB 113
   Insn 680: point = 354
   Insn 679: point = 354
   Insn 872: point = 354
   Insn 871: point = 355
   Insn 674: point = 356
   Insn 673: point = 356
   Insn 672: point = 356
   Insn 671: point = 356
   Insn 1270: point = 357
	Hard reg 1 is preferable by r610 with profit 15
   Insn 670: point = 359
   Insn 669: point = 360
   Insn 668: point = 361
   Insn 667: point = 361
   Insn 666: point = 361
   Insn 665: point = 362
   Insn 664: point = 362
   Insn 1269: point = 362
	Hard reg 1 is preferable by r610 with profit 30
   Insn 663: point = 364
  BB 43
   Insn 332: point = 367
   Insn 331: point = 367
  BB 42
   Insn 330: point = 368
  BB 41
   Insn 328: point = 369
   Insn 327: point = 369
  BB 40
   Insn 325: point = 370
   Insn 324: point = 370
   Insn 1091: point = 370
   Insn 1090: point = 372
  BB 39
   Insn 322: point = 375
   Insn 321: point = 375
  BB 37
   Insn 998: point = 376
   Insn 25: point = 376
   Insn 24: point = 376
  BB 38
   Insn 317: point = 378
  BB 36
   Insn 309: point = 379
   Insn 308: point = 379
  BB 35
   Insn 307: point = 380
  BB 34
   Insn 305: point = 381
   Insn 304: point = 381
  BB 33
   Insn 1089: point = 382
   Insn 1088: point = 384
   Insn 1087: point = 386
   Insn 890: point = 388
  BB 112
   Insn 887: point = 390
  BB 32
   Insn 301: point = 392
   Insn 300: point = 392
   Insn 1192: point = 392
   Insn 864: point = 394
   Insn 1191: point = 396
   Insn 863: point = 398
   Insn 1190: point = 399
   Insn 296: point = 401
   Insn 1189: point = 403
	   Creating copy r543<-r664@27
   Insn 294: point = 405
   Insn 293: point = 407
   Insn 291: point = 409
   Insn 1188: point = 410
	Hard reg 0 is preferable by r542 with profit 27
   Insn 289: point = 412
   Insn 1290: point = 414
	   Creating copy r625<-r660@27
   Insn 1187: point = 416
   Insn 1186: point = 417
   Insn 288: point = 418
   Insn 1185: point = 420
	Hard reg 1 is preferable by r541 with profit 27
   Insn 287: point = 422
   Insn 1291: point = 423
	   Creating copy r626<-r660@27
   Insn 1332: point = 424
	   Creating copy r660<-r662@27
   Insn 1184: point = 426
   Insn 1333: point = 428
   Insn 1253: point = 429
	   Creating copy r598->r661@27
   Insn 1183: point = 430
	Hard reg 4 is preferable by r540 with profit 27
   Insn 285: point = 432
   Insn 1292: point = 433
	   Creating copy r627<-r662@27
   Insn 1334: point = 434
	   Creating copy r662<-r663@27
   Insn 1182: point = 436
   Insn 1254: point = 437
   Insn 1293: point = 439
	   Creating copy r628->r663@27
   Insn 283: point = 441
   Insn 1181: point = 443
	   Creating copy r539<-r664@27
   Insn 1336: point = 444
  BB 102
   Insn 1028: point = 446
   Insn 574: point = 446
  BB 31
   Insn 1086: point = 448
   Insn 1085: point = 450
   Insn 1084: point = 452
   Insn 899: point = 454
   Insn 1180: point = 456
	   Creating copy r538<-r596@2
   Insn 22: point = 458
   Insn 21: point = 459
   Insn 20: point = 460
  BB 30
   Insn 278: point = 462
   Insn 277: point = 462
   Insn 1179: point = 463
	   Creating copy r537<-r596@2
   Insn 1252: point = 464
  BB 28
   Insn 996: point = 466
   Insn 1083: point = 466
  BB 27
   Insn 274: point = 469
   Insn 273: point = 469
   Insn 1178: point = 470
   Insn 270: point = 471
   Insn 268: point = 471
   Insn 1296: point = 472
   Insn 266: point = 474
   Insn 1295: point = 476
   Insn 1329: point = 476
	   Creating copy r657<-r658@27
   Insn 1294: point = 478
   Insn 265: point = 479
   Insn 1177: point = 481
	Hard reg 4 is preferable by r535 with profit 27
   Insn 263: point = 483
   Insn 1330: point = 483
	   Creating copy r658<-r659@27
   Insn 1176: point = 485
   Insn 1331: point = 486
  BB 26
   Insn 259: point = 489
   Insn 1175: point = 490
   Insn 257: point = 492
   Insn 1174: point = 494
   Insn 1173: point = 495
   Insn 256: point = 496
   Insn 1172: point = 498
	Hard reg 4 is preferable by r533 with profit 13
   Insn 255: point = 500
   Insn 1326: point = 500
	   Creating copy r654<-r656@13
   Insn 1171: point = 502
   Insn 1250: point = 504
	   Creating copy r595->r655@13
   Insn 1170: point = 505
	Hard reg 5 is preferable by r532 with profit 13
   Insn 254: point = 507
   Insn 1328: point = 507
   Insn 1169: point = 508
   Insn 1251: point = 509
  BB 25
   Insn 252: point = 512
   Insn 251: point = 512
   Insn 1168: point = 513
	Hard reg 4 is preferable by r531 with profit 27
   Insn 248: point = 515
   Insn 1167: point = 515
  BB 24
   Insn 1082: point = 517
   Insn 1081: point = 519
   Insn 1080: point = 521
   Insn 17: point = 523
   Insn 16: point = 524
  BB 29
   Insn 18: point = 526
  BB 23
   Insn 245: point = 528
   Insn 244: point = 528
   Insn 1166: point = 529
	   Creating copy r530<-r591@2
   Insn 1165: point = 531
	Hard reg 3 is preferable by r529 with profit 2
   Insn 242: point = 533
   Insn 1164: point = 535
   Insn 1247: point = 535
	   Creating copy r591<-r592@2
   Insn 1163: point = 537
   Insn 911: point = 538
   Insn 1248: point = 539
	   Creating copy r592<-r593@2
   Insn 1249: point = 541
   Insn 1162: point = 542
	   Creating copy r528->r593@2
   Insn 241: point = 544
   Insn 240: point = 545
   Insn 238: point = 545
   Insn 236: point = 545
   Insn 234: point = 545
   Insn 232: point = 545
   Insn 231: point = 545
   Insn 230: point = 545
   Insn 229: point = 545
   Insn 228: point = 546
  BB 22
   Insn 225: point = 548
   Insn 224: point = 548
   Insn 1161: point = 549
   Insn 895: point = 551
   Insn 1160: point = 552
	Hard reg 0 is preferable by r526 with profit 9
   Insn 223: point = 554
   Insn 1159: point = 556
  BB 131
   Insn 1079: point = 558
   Insn 1078: point = 560
   Insn 1077: point = 562
  BB 20
   Insn 214: point = 565
   Insn 213: point = 565
   Insn 1297: point = 566
   Insn 15: point = 567
   Insn 221: point = 568
   Insn 212: point = 569
  BB 19
   Insn 209: point = 570
   Insn 208: point = 570
   Insn 206: point = 570
   Insn 205: point = 570
   Insn 1157: point = 571
	Hard reg 0 is preferable by r524 with profit 90
   Insn 204: point = 573
   Insn 1156: point = 574
	   Creating copy r524<-r590@90
   Insn 202: point = 576
   Insn 1298: point = 577
	   Creating copy r631<-r653@90
   Insn 1155: point = 579
	Hard reg 1 is preferable by r523 with profit 90
   Insn 200: point = 581
   Insn 1154: point = 583
   Insn 1153: point = 583
   Insn 1299: point = 584
	   Creating copy r632->r653@90
   Insn 195: point = 586
   Insn 192: point = 587
   Insn 191: point = 589
  BB 18
   Insn 1076: point = 591
   Insn 13: point = 593
  BB 17
   Insn 186: point = 595
   Insn 185: point = 595
   Insn 1300: point = 596
	   Creating copy r633<-r647@90
   Insn 1319: point = 598
   Insn 1302: point = 599
	   Creating copy r634->r647@90
   Insn 183: point = 601
   Insn 1301: point = 601
	   Creating copy r634<-r648@90
   Insn 182: point = 603
   Insn 1303: point = 604
	   Creating copy r635<-r648@90
   Insn 1320: point = 605
	   Creating copy r648<-r649@90
   Insn 1152: point = 607
	Hard reg 0 is preferable by r522 with profit 90
   Insn 181: point = 609
   Insn 1151: point = 610
	   Creating copy r522<-r589@90
   Insn 179: point = 612
   Insn 1304: point = 613
	   Creating copy r636<-r650@90
   Insn 1150: point = 615
	Hard reg 1 is preferable by r521 with profit 90
   Insn 177: point = 617
   Insn 1305: point = 619
	   Creating copy r637<-r649@90
   Insn 1321: point = 620
	   Creating copy r649<-r651@90
   Insn 1149: point = 622
   Insn 1148: point = 622
   Insn 1307: point = 623
	   Creating copy r639->r650@90
   Insn 172: point = 625
   Insn 1306: point = 627
	   Creating copy r638<-r651@90
   Insn 1323: point = 628
	   Creating copy r651<-r652@90
   Insn 169: point = 630
   Insn 168: point = 632
   Insn 1308: point = 634
	   Creating copy r640<-r652@90
   Insn 1324: point = 635
  BB 16
   Insn 1075: point = 638
	Hard reg 3 is preferable by r586 with profit 1
   Insn 1074: point = 640
   Insn 12: point = 642
   Insn 1146: point = 643
	   Creating copy r519->r586@1
   Insn 163: point = 645
   Insn 1147: point = 647
	   Creating copy r520<-r587@1
  BB 15
   Insn 161: point = 650
   Insn 160: point = 650
   Insn 1145: point = 651
	   Creating copy r518<-r587@1
   Insn 1243: point = 652
	   Creating copy r587<-r588@1
   Insn 1244: point = 654
   Insn 1073: point = 655
	Hard reg 0 is preferable by r588 with profit 1
  BB 14
   Insn 158: point = 658
   Insn 157: point = 658
   Insn 1144: point = 659
	   Creating copy r517<-r583@81
   Insn 155: point = 661
   Insn 1239: point = 662
   Insn 1143: point = 663
	   Creating copy r516->r583@81
   Insn 154: point = 665
   Insn 1142: point = 665
	   Creating copy r516<-r584@81
   Insn 153: point = 667
   Insn 1141: point = 668
	   Creating copy r515<-r584@81
   Insn 1240: point = 669
   Insn 151: point = 671
   Insn 1140: point = 672
	Hard reg 0 is preferable by r514 with profit 81
   Insn 149: point = 674
   Insn 1139: point = 676
   Insn 1138: point = 677
   Insn 148: point = 678
   Insn 1137: point = 680
	Hard reg 0 is preferable by r513 with profit 81
   Insn 147: point = 682
   Insn 1136: point = 682
	   Creating copy r513<-r585@81
   Insn 1241: point = 683
	Hard reg 3 is preferable by r585 with profit 81
   Insn 1135: point = 685
	Hard reg 2 is preferable by r512 with profit 81
   Insn 146: point = 687
   Insn 1134: point = 687
   Insn 1072: point = 689
  BB 13
   Insn 143: point = 692
   Insn 142: point = 692
   Insn 141: point = 693
   Insn 139: point = 695
   Insn 138: point = 696
   Insn 137: point = 697
   Insn 1310: point = 697
   Insn 136: point = 699
   Insn 1309: point = 699
	Hard reg 4 is preferable by r641 with profit 910
   Insn 135: point = 701
   Insn 134: point = 703
   Insn 133: point = 705
   Insn 131: point = 707
   Insn 1312: point = 709
	Hard reg 4 is preferable by r642 with profit 910
   Insn 130: point = 711
   Insn 1311: point = 711
	   Creating copy r642<-r646@910
   Insn 1133: point = 713
	Hard reg 0 is preferable by r511 with profit 910
   Insn 129: point = 715
   Insn 1132: point = 715
	   Creating copy r511<-r646@910
   Insn 1318: point = 716
  BB 125
   Insn 1050: point = 719
   Insn 1111: point = 719
   Insn 1110: point = 721
   Insn 10: point = 723
  BB 12
   Insn 991: point = 725
   Insn 1071: point = 725
   Insn 1070: point = 727
   Insn 1069: point = 729
  BB 11
   Insn 124: point = 732
   Insn 123: point = 732
   Insn 122: point = 733
   Insn 120: point = 735
   Insn 119: point = 736
   Insn 118: point = 737
   Insn 937: point = 737
   Insn 1131: point = 738
   Insn 935: point = 739
   Insn 934: point = 740
   Insn 1130: point = 741
   Insn 932: point = 742
  BB 10
   Insn 1068: point = 743
	Hard reg 4 is preferable by r581 with profit 81
   Insn 1067: point = 745
	Hard reg 3 is preferable by r582 with profit 81
   Insn 1066: point = 747
   Insn 860: point = 749
   Insn 859: point = 750
  BB 124
   Insn 880: point = 752
   Insn 879: point = 753
  BB 9
   Insn 110: point = 755
   Insn 109: point = 755
   Insn 108: point = 756
   Insn 107: point = 758
   Insn 106: point = 759
   Insn 105: point = 760
  BB 8
   Insn 7: point = 761
  BB 7
   Insn 103: point = 763
   Insn 102: point = 763
   Insn 101: point = 764
   Insn 100: point = 765
   Insn 98: point = 766
   Insn 1129: point = 767
	Hard reg 3 is preferable by r508 with profit 1
   Insn 96: point = 769
   Insn 1128: point = 771
   Insn 1127: point = 772
   Insn 95: point = 773
   Insn 1126: point = 775
	Hard reg 0 is preferable by r507 with profit 1
   Insn 94: point = 777
   Insn 1125: point = 777
	   Creating copy r507<-r580@1
   Insn 1236: point = 778
	Hard reg 3 is preferable by r580 with profit 1
   Insn 1124: point = 780
	Hard reg 2 is preferable by r506 with profit 1
   Insn 93: point = 782
   Insn 1123: point = 782
   Insn 1065: point = 784
  BB 6
   Insn 91: point = 787
   Insn 90: point = 787
   Insn 89: point = 788
   Insn 87: point = 790
   Insn 86: point = 791
   Insn 85: point = 792
   Insn 1314: point = 792
   Insn 84: point = 794
   Insn 1313: point = 794
	Hard reg 4 is preferable by r643 with profit 9
   Insn 83: point = 796
   Insn 82: point = 798
   Insn 81: point = 800
   Insn 79: point = 802
   Insn 1316: point = 804
	Hard reg 4 is preferable by r644 with profit 9
   Insn 78: point = 806
   Insn 1315: point = 806
	   Creating copy r644<-r645@9
   Insn 1122: point = 808
	Hard reg 0 is preferable by r505 with profit 9
   Insn 77: point = 810
   Insn 1121: point = 810
	   Creating copy r505<-r645@9
   Insn 1317: point = 811
  BB 123
   Insn 1048: point = 814
   Insn 1109: point = 814
   Insn 1108: point = 816
   Insn 6: point = 818
  BB 5
   Insn 988: point = 820
   Insn 1064: point = 820
   Insn 1063: point = 822
   Insn 1062: point = 824
  BB 4
   Insn 72: point = 827
   Insn 71: point = 827
   Insn 70: point = 828
   Insn 68: point = 830
   Insn 67: point = 831
   Insn 66: point = 832
   Insn 931: point = 832
   Insn 929: point = 832
   Insn 928: point = 833
   Insn 926: point = 833
  BB 3
   Insn 1061: point = 834
	Hard reg 5 is preferable by r578 with profit 1
   Insn 1060: point = 836
	Hard reg 4 is preferable by r579 with profit 1
   Insn 1059: point = 838
   Insn 927: point = 840
   Insn 856: point = 841
   Insn 855: point = 842
  BB 122
   Insn 878: point = 844
   Insn 877: point = 845
  BB 2
   Insn 58: point = 847
   Insn 57: point = 847
   Insn 56: point = 848
   Insn 55: point = 850
   Insn 54: point = 851
   Insn 53: point = 852
   Insn 3: point = 852
 r83: [94..459] [73..91] [64..71] [52..53]
 r84: [757..759]
 r85: [763..765]
 r87: [670..761] [658..662]
 r94: [641..642]
 r101: [592..593]
 r104: [528..531] [522..525]
 r106: [520..538] [453..466]
 r112: [387..405] [272..372] [175..255] [161..173] [134..146]
 r113: [291..399]
 r117: [270..287] [244..253] [235..236]
 r120: [339..339] [327..337] [322..325]
 r123: [87..458] [76..81]
 r125: [563..567]
 r129: [14..23]
 r132: [12..17]
 r135: [518..524]
 r136: [526..526] [510..523] [438..490] [314..428] [76..309]
 r149: [849..851]
 r150: [829..831]
 r151: [839..850] [817..824]
 r158: [795..796]
 r159: [815..818] [770..784]
 r160: [789..791]
 r165: [172..172] [159..164]
 r166: [734..736]
 r167: [748..758] [722..729]
 r174: [700..701]
 r175: [720..723] [675..689]
 r176: [694..696]
 r181: [170..170] [157..162] [139..144] [122..135] [95..118]
 r186: [275..275] [268..273] [246..251] [223..224] [167..169]
 r187: [277..280] [266..274]
 r189: [451..460]
 r203: [390..390] [383..388] [365..370] [349..361] [318..345]
 r209: [216..241] [177..210]
 r212: [205..205] [188..203] [181..186]
 r229: [112..112] [104..110] [99..102]
 r252: [561..568] [24..33]
 r254: [137..138] [129..130]
 r258: [363..364] [356..357]
 r261: [847..848]
 r262: [827..828]
 r263: [803..808]
 r264: [803..804]
 r265: [797..802]
 r266: [797..798]
 r267: [799..800]
 r268: [787..788]
 r269: [774..780]
 r270: [774..775]
 r271: [766..773]
 r272: [764..767]
 r274: [755..756]
 r275: [732..733]
 r276: [708..713]
 r277: [708..709]
 r278: [702..707]
 r279: [702..703]
 r280: [704..705]
 r281: [692..693]
 r283: [679..685]
 r284: [679..680]
 r285: [671..678]
 r286: [667..672]
 r291: [631..632]
 r298: [609..615]
 r301: [603..607]
 r305: [588..589]
 r312: [573..579]
 r315: [570..571]
 r317: [548..552]
 r318: [554..555]
 r320: [545..546]
 r328: [497..505]
 r329: [497..498]
 r330: [489..496]
 r332: [480..481]
 r334: [471..479]
 r340: [419..430]
 r342: [419..420]
 r344: [409..418]
 r345: [406..410]
 r347: [406..407]
 r356: [320..321]
 r363: [300..311]
 r364: [300..301]
 r365: [292..299]
 r366: [289..293]
 r374: [179..180]
 r386: [97..98]
 r397: [48..49]
 r403: [27..28]
 r404: [29..30]
 r406: [25..26]
 r409: [19..20]
 r412: [16..18]
 r414: [7..8]
 r417: [2..3]
 r420: [0..1]
 r421: [359..360]
 r422: [226..227]
 r424: [132..133]
 r427: [306..396]
 r428: [316..392]
 r429: [844..845] [779..822]
 r430: [844..844] [783..820]
 r431: [752..753] [684..727]
 r432: [752..752] [688..725]
 r433: [124..128] [119..120] [115..116]
 r434: [127..127] [100..116]
 r435: [218..222] [211..212] [208..209]
 r436: [221..221] [184..209]
 r437: [351..355] [346..347] [342..343]
 r438: [354..354] [323..343]
 r439: [512..513]
 r441: [329..334]
 r443: [190..197]
 r445: [104..109]
 r448: [277..283] [248..274] [165..169]
 r449: [559..654]
 r450: [449..454]
 r451: [548..549] [462..541] [62..73] [54..54] [39..41]
 r456: [36..569]
 r457: [570..594]
 r458: [595..649]
 r460: [658..762]
 r461: [827..840]
 r462: [9..13] [0..6]
 r463: [0..11]
 r464: [555..562] [36..36]
 r465: [548..560] [62..69] [54..58] [34..45]
 r466: [548..558] [62..65] [54..57] [36..44]
 r467: [408..452] [76..76]
 r468: [448..450] [392..446] [385..389]
 r469: [395..448] [76..77]
 r470: [74..88]
 r471: [147..160]
 r472: [149..158]
 r473: [152..156] [145..150]
 r474: [256..271]
 r475: [254..269]
 r476: [261..267] [252..259]
 r477: [258..265]
 r478: [373..386]
 r479: [375..384]
 r480: [378..382] [371..376]
 r481: [469..521]
 r482: [467..519]
 r483: [487..517] [469..472]
 r484: [570..591]
 r485: [636..640] [595..598]
 r486: [595..638]
 r487: [656..661]
 r488: [706..721] [692..695]
 r489: [717..719] [690..697]
 r490: [739..747] [730..735]
 r491: [728..745]
 r492: [726..743]
 r493: [801..816] [787..790]
 r494: [812..814] [785..792]
 r495: [832..838] [825..830]
 r496: [823..836]
 r497: [821..834]
 r498: [798..799]
 r499: [703..704]
 r500: [630..631]
 r501: [587..588]
 r502: [533..534]
 r505: [809..810]
 r506: [781..782]
 r507: [776..777]
 r508: [768..772]
 r509: [740..741]
 r510: [737..738]
 r511: [714..715]
 r512: [686..687]
 r513: [681..682]
 r514: [673..677]
 r515: [667..668]
 r516: [664..665]
 r517: [658..659]
 r518: [650..651]
 r519: [644..645]
 r520: [646..647]
 r521: [616..622]
 r522: [608..610]
 r523: [580..583]
 r524: [572..574]
 r526: [553..556]
 r527: [550..551]
 r528: [543..544]
 r529: [532..537]
 r530: [528..529]
 r531: [514..515]
 r532: [506..508]
 r533: [499..502]
 r534: [491..495]
 r535: [482..485]
 r536: [469..470]
 r537: [462..463]
 r538: [455..456]
 r539: [442..443]
 r540: [431..436]
 r541: [421..426]
 r542: [411..417]
 r543: [402..403]
 r544: [400..401]
 r545: [397..398]
 r546: [393..394]
 r547: [332..333]
 r548: [312..315]
 r549: [302..307]
 r550: [303..304]
 r551: [294..298]
 r552: [288..290]
 r553: [285..286]
 r554: [277..278]
 r555: [200..201]
 r556: [193..195]
 r557: [193..194]
 r558: [182..183]
 r559: [214..215]
 r560: [175..176]
 r561: [107..108]
 r564: [78..79]
 r566: [50..51]
 r567: [46..47]
 r568: [42..43]
 r570: [59..60]
 r571: [55..56]
 r572: [37..38]
 r573: [21..22]
 r574: [4..5]
 r575: [235..238]
 r576: [231..232]
 r577: [228..229]
 r578: [835..841]
 r579: [837..842]
 r580: [771..778]
 r581: [744..749]
 r582: [746..750]
 r583: [660..663]
 r584: [666..669]
 r585: [676..683]
 r586: [639..643]
 r587: [648..652]
 r588: [653..655]
 r589: [611..630]
 r590: [575..587]
 r591: [530..535]
 r592: [536..539]
 r593: [540..542]
 r595: [503..509]
 r596: [457..464]
 r598: [427..437]
 r600: [348..350]
 r601: [279..281]
 r602: [282..284]
 r603: [297..305]
 r605: [308..313]
 r606: [196..202]
 r607: [213..217]
 r608: [121..123]
 r609: [80..82]
 r610: [358..362]
 r611: [230..233]
 r612: [234..239]
 r613: [240..242]
 r614: [237..243]
 r615: [225..245]
 r616: [131..136]
 r617: [198..199]
 r618: [335..336]
 r619: [62..63]
 r620: [67..68]
 r621: [85..86]
 r622: [92..93]
 r623: [188..189]
 r624: [327..328]
 r625: [413..414]
 r626: [422..423]
 r627: [432..433]
 r628: [440..441]
 r629: [473..478]
 r630: [565..566]
 r631: [576..577]
 r632: [585..586]
 r633: [595..596]
 r634: [600..601]
 r635: [603..604]
 r636: [612..613]
 r637: [618..619]
 r638: [626..627]
 r639: [624..625]
 r640: [633..634]
 r641: [698..699]
 r642: [710..711]
 r643: [793..794]
 r644: [805..806]
 r645: [807..811]
 r646: [712..716]
 r647: [597..599]
 r648: [602..605]
 r649: [606..620]
 r650: [614..623]
 r651: [621..628]
 r652: [629..635]
 r653: [578..584]
 r654: [493..500]
 r655: [494..504]
 r656: [501..507]
 r657: [475..476]
 r658: [477..483]
 r659: [484..486]
 r660: [415..424]
 r661: [416..429]
 r662: [425..434]
 r663: [435..439]
 r664: [404..444]
 r665: [296..310]
 r666: [83..84]
Compressing live ranges: from 852 to 563 - 66%
Ranges after the compression:
 r83: [67..291] [47..64] [38..39]
 r84: [495..496]
 r85: [497..498]
 r87: [431..496] [423..426]
 r94: [411..412]
 r101: [375..376]
 r104: [333..336] [330..331]
 r106: [328..340] [286..293]
 r112: [239..254] [172..230] [103..161] [87..94]
 r113: [185..248]
 r117: [170..182] [154..159] [148..149]
 r120: [203..211]
 r123: [63..291] [53..58]
 r125: [358..359]
 r129: [12..17]
 r132: [10..13]
 r135: [326..331]
 r136: [322..332] [275..309] [199..270] [53..196]
 r149: [561..562]
 r150: [547..548]
 r151: [555..562] [539..544]
 r158: [519..520]
 r159: [537..540] [501..512]
 r160: [515..516]
 r165: [108..108] [101..104]
 r166: [479..480]
 r167: [489..496] [471..476]
 r174: [451..452]
 r175: [469..472] [433..444]
 r176: [447..448]
 r181: [107..107] [99..104] [91..92] [78..88] [67..75]
 r186: [168..174] [156..157] [140..141] [105..106]
 r187: [175..178] [166..173]
 r189: [284..291]
 r203: [235..241] [227..228] [216..224] [201..213]
 r209: [135..153] [112..130]
 r212: [114..128]
 r229: [69..73]
 r252: [356..359] [18..23]
 r254: [89..90] [83..84]
 r258: [225..226] [221..222]
 r261: [559..560]
 r262: [545..546]
 r263: [527..532]
 r264: [527..528]
 r265: [521..526]
 r266: [521..522]
 r267: [523..524]
 r268: [513..514]
 r269: [503..508]
 r270: [503..504]
 r271: [499..502]
 r272: [497..500]
 r274: [493..494]
 r275: [477..478]
 r276: [459..464]
 r277: [459..460]
 r278: [453..458]
 r279: [453..454]
 r280: [455..456]
 r281: [445..446]
 r283: [435..440]
 r284: [435..436]
 r285: [431..434]
 r286: [429..432]
 r291: [403..404]
 r298: [387..392]
 r301: [383..386]
 r305: [373..374]
 r312: [362..367]
 r315: [360..361]
 r317: [347..350]
 r318: [351..352]
 r320: [345..346]
 r328: [312..319]
 r329: [312..313]
 r330: [308..311]
 r332: [302..303]
 r334: [296..301]
 r340: [263..270]
 r342: [263..264]
 r344: [257..262]
 r345: [255..258]
 r347: [255..256]
 r356: [201..202]
 r363: [189..196]
 r364: [189..190]
 r365: [185..188]
 r366: [183..186]
 r374: [112..113]
 r386: [67..68]
 r397: [34..35]
 r403: [20..21]
 r404: [22..23]
 r406: [18..19]
 r409: [14..15]
 r412: [12..13]
 r414: [6..7]
 r417: [2..3]
 r420: [0..1]
 r421: [223..224]
 r422: [142..143]
 r424: [85..86]
 r427: [193..246]
 r428: [201..242]
 r429: [557..558] [507..542]
 r430: [557..557] [511..540]
 r431: [491..492] [439..474]
 r432: [491..491] [443..472]
 r433: [80..82] [74..77]
 r434: [81..81] [69..75]
 r435: [137..139] [129..132]
 r436: [138..138] [116..130]
 r437: [218..220] [212..215]
 r438: [219..219] [203..213]
 r439: [322..323]
 r441: [207..208]
 r443: [120..123]
 r445: [71..72]
 r448: [175..180] [156..173] [105..106]
 r449: [354..422]
 r450: [282..287]
 r451: [347..348] [292..342] [45..51] [40..40] [28..29]
 r456: [25..359]
 r457: [360..376]
 r458: [377..418]
 r460: [423..496]
 r461: [545..556]
 r462: [8..11] [0..5]
 r463: [0..9]
 r464: [352..357] [25..25]
 r465: [347..355] [45..50] [40..42] [24..31]
 r466: [347..353] [45..48] [40..42] [25..31]
 r467: [257..285] [53..53]
 r468: [242..283] [237..240]
 r469: [245..281] [53..54]
 r470: [52..64]
 r471: [95..102]
 r472: [95..100]
 r473: [93..98]
 r474: [162..171]
 r475: [160..169]
 r476: [158..167]
 r477: [162..165]
 r478: [231..238]
 r479: [231..236]
 r480: [229..234]
 r481: [294..329]
 r482: [294..327]
 r483: [308..325] [294..297]
 r484: [360..374]
 r485: [407..410] [377..380]
 r486: [377..408]
 r487: [423..426]
 r488: [457..470] [445..448]
 r489: [467..468] [445..448]
 r490: [483..488] [477..480]
 r491: [475..486]
 r492: [473..484]
 r493: [525..538] [513..516]
 r494: [535..536] [513..516]
 r495: [545..554]
 r496: [543..552]
 r497: [541..550]
 r498: [522..523]
 r499: [454..455]
 r500: [402..403]
 r501: [372..373]
 r502: [337..338]
 r505: [533..534]
 r506: [509..510]
 r507: [505..506]
 r508: [501..502]
 r509: [483..484]
 r510: [481..482]
 r511: [465..466]
 r512: [441..442]
 r513: [437..438]
 r514: [433..434]
 r515: [429..430]
 r516: [427..428]
 r517: [423..424]
 r518: [419..420]
 r519: [413..414]
 r520: [415..416]
 r521: [393..396]
 r522: [387..388]
 r523: [368..369]
 r524: [362..363]
 r526: [351..353]
 r527: [349..350]
 r528: [343..344]
 r529: [337..340]
 r530: [333..334]
 r531: [324..325]
 r532: [320..321]
 r533: [314..317]
 r534: [310..311]
 r535: [304..307]
 r536: [294..295]
 r537: [292..293]
 r538: [288..289]
 r539: [279..280]
 r540: [271..274]
 r541: [265..268]
 r542: [259..262]
 r543: [251..252]
 r544: [249..250]
 r545: [247..248]
 r546: [243..244]
 r547: [207..208]
 r548: [197..200]
 r549: [191..194]
 r550: [191..192]
 r551: [187..188]
 r552: [183..184]
 r553: [181..182]
 r554: [175..176]
 r555: [126..127]
 r556: [120..121]
 r557: [120..121]
 r558: [114..115]
 r559: [133..134]
 r560: [110..111]
 r561: [71..72]
 r564: [55..56]
 r566: [36..37]
 r567: [32..33]
 r568: [30..31]
 r570: [43..44]
 r571: [41..42]
 r572: [26..27]
 r573: [16..17]
 r574: [4..5]
 r575: [148..151]
 r576: [146..147]
 r577: [144..145]
 r578: [551..556]
 r579: [553..556]
 r580: [501..506]
 r581: [485..490]
 r582: [487..490]
 r583: [425..426]
 r584: [429..430]
 r585: [433..438]
 r586: [409..412]
 r587: [417..420]
 r588: [421..422]
 r589: [389..402]
 r590: [364..372]
 r591: [335..338]
 r592: [339..340]
 r593: [341..342]
 r595: [318..321]
 r596: [290..293]
 r598: [269..274]
 r600: [216..217]
 r601: [177..178]
 r602: [179..180]
 r603: [187..192]
 r605: [195..198]
 r606: [122..127]
 r607: [133..136]
 r608: [78..79]
 r609: [57..58]
 r610: [223..224]
 r611: [146..147]
 r612: [148..151]
 r613: [152..153]
 r614: [150..153]
 r615: [142..155]
 r616: [85..88]
 r617: [124..125]
 r618: [209..210]
 r619: [45..46]
 r620: [49..50]
 r621: [61..62]
 r622: [65..66]
 r623: [118..119]
 r624: [205..206]
 r625: [259..260]
 r626: [265..266]
 r627: [271..272]
 r628: [277..278]
 r629: [298..301]
 r630: [358..359]
 r631: [364..365]
 r632: [370..371]
 r633: [377..378]
 r634: [381..382]
 r635: [383..384]
 r636: [389..390]
 r637: [393..394]
 r638: [399..400]
 r639: [397..398]
 r640: [405..406]
 r641: [449..450]
 r642: [461..462]
 r643: [517..518]
 r644: [529..530]
 r645: [531..534]
 r646: [463..466]
 r647: [379..380]
 r648: [383..384]
 r649: [385..394]
 r650: [391..396]
 r651: [395..400]
 r652: [401..406]
 r653: [366..369]
 r654: [310..315]
 r655: [310..319]
 r656: [316..321]
 r657: [298..299]
 r658: [300..305]
 r659: [306..307]
 r660: [261..266]
 r661: [261..270]
 r662: [267..272]
 r663: [273..276]
 r664: [253..280]
 r665: [187..196]
 r666: [59..60]

********** Assignment #2: **********

	 Assigning to 629 (cl=AD_REGS, orig=135, freq=135, tfirst=629, tfreq=135)...
	   Assign 0 to reload r629 (freq=135)
	 Assigning to 642 (cl=GENERAL_REGS, orig=277, freq=2730, tfirst=642, tfreq=3640)...
	   Assign 4 to reload r642 (freq=2730)
	Hard reg 4 is preferable by r646 with profit 910
	 Assigning to 646 (cl=GENERAL_REGS, orig=175, freq=2730, tfirst=642, tfreq=3640)...
	   Assign 4 to inheritance r646 (freq=2730)
	 Assigning to 641 (cl=GENERAL_REGS, orig=175, freq=2730, tfirst=641, tfreq=2730)...
	   Assign 4 to reload r641 (freq=2730)
	 Assigning to 633 (cl=GENERAL_REGS, orig=94, freq=180, tfirst=640, tfreq=720)...
	   Assign 0 to optional reload r633 (freq=180)
	Hard reg 0 is preferable by r647 with profit 90
	Hard reg 0 is preferable by r634 with profit 45
	Hard reg 0 is preferable by r648 with profit 22
	Hard reg 0 is preferable by r649 with profit 11
	Hard reg 0 is preferable by r651 with profit 5
	Hard reg 0 is preferable by r652 with profit 2
	Hard reg 0 is preferable by r638 with profit 2
	Hard reg 0 is preferable by r637 with profit 5
	Hard reg 0 is preferable by r635 with profit 11
	 Assigning to 634 (cl=GENERAL_REGS, orig=94, freq=270, tfirst=640, tfreq=720)...
	   Assign 0 to optional reload r634 (freq=270)
	Hard reg 0 is preferable by r648 with profit 112
	Hard reg 0 is preferable by r649 with profit 56
	Hard reg 0 is preferable by r651 with profit 27
	Hard reg 0 is preferable by r652 with profit 13
	Hard reg 0 is preferable by r640 with profit 5
	Hard reg 0 is preferable by r638 with profit 13
	Hard reg 0 is preferable by r637 with profit 27
	Hard reg 0 is preferable by r635 with profit 56
	Hard reg 0 is preferable by r647 with profit 180
	 Assigning to 635 (cl=INDEX_REGS, orig=94, freq=180, tfirst=640, tfreq=720)...
	   Assign 2 to reload r635 (freq=180)
	Hard reg 0 is preferable by r648 with profit 112
	Hard reg 2 is preferable by r648 with profit 90
	Hard reg 0 is preferable by r649 with profit 56
	Hard reg 2 is preferable by r649 with profit 45
	Hard reg 0 is preferable by r651 with profit 27
	Hard reg 2 is preferable by r651 with profit 22
	Hard reg 0 is preferable by r652 with profit 13
	Hard reg 2 is preferable by r652 with profit 11
	Hard reg 0 is preferable by r640 with profit 5
	Hard reg 2 is preferable by r640 with profit 5
	Hard reg 0 is preferable by r638 with profit 13
	Hard reg 2 is preferable by r638 with profit 11
	Hard reg 0 is preferable by r637 with profit 27
	Hard reg 2 is preferable by r637 with profit 22
	 Assigning to 637 (cl=INDEX_REGS, orig=94, freq=180, tfirst=640, tfreq=720)...
	   Assign 2 to reload r637 (freq=180)
	Hard reg 2 is preferable by r649 with profit 135
	Hard reg 0 is preferable by r649 with profit 56
	Hard reg 2 is preferable by r651 with profit 67
	Hard reg 0 is preferable by r651 with profit 27
	Hard reg 2 is preferable by r652 with profit 33
	Hard reg 0 is preferable by r652 with profit 13
	Hard reg 2 is preferable by r640 with profit 16
	Hard reg 0 is preferable by r640 with profit 5
	Hard reg 2 is preferable by r638 with profit 33
	Hard reg 0 is preferable by r638 with profit 13
	Hard reg 2 is preferable by r648 with profit 135
	Hard reg 0 is preferable by r648 with profit 112
	 Assigning to 638 (cl=INDEX_REGS, orig=94, freq=180, tfirst=640, tfreq=720)...
	   Assign 2 to reload r638 (freq=180)
	Hard reg 2 is preferable by r651 with profit 157
	Hard reg 0 is preferable by r651 with profit 27
	Hard reg 2 is preferable by r652 with profit 78
	Hard reg 0 is preferable by r652 with profit 13
	Hard reg 2 is preferable by r640 with profit 38
	Hard reg 0 is preferable by r640 with profit 5
	Hard reg 2 is preferable by r649 with profit 180
	Hard reg 0 is preferable by r649 with profit 56
	Hard reg 2 is preferable by r648 with profit 157
	Hard reg 0 is preferable by r648 with profit 112
	 Assigning to 640 (cl=INDEX_REGS, orig=94, freq=180, tfirst=640, tfreq=720)...
	   Assign 2 to reload r640 (freq=180)
	Hard reg 2 is preferable by r652 with profit 168
	Hard reg 0 is preferable by r652 with profit 13
	Hard reg 2 is preferable by r651 with profit 202
	Hard reg 0 is preferable by r651 with profit 27
	Hard reg 2 is preferable by r649 with profit 202
	Hard reg 0 is preferable by r649 with profit 56
	Hard reg 2 is preferable by r648 with profit 168
	Hard reg 0 is preferable by r648 with profit 112
	 Assigning to 647 (cl=GENERAL_REGS, orig=94, freq=270, tfirst=640, tfreq=720)...
	   Assign 0 to inheritance r647 (freq=270)
	 Assigning to 648 (cl=INDEX_REGS, orig=94, freq=270, tfirst=640, tfreq=720)...
	   Assign 2 to inheritance r648 (freq=270)
	Hard reg 2 is preferable by r649 with profit 292
	Hard reg 0 is preferable by r649 with profit 56
	Hard reg 2 is preferable by r651 with profit 247
	Hard reg 0 is preferable by r651 with profit 27
	Hard reg 2 is preferable by r652 with profit 190
	Hard reg 0 is preferable by r652 with profit 13
	 Assigning to 649 (cl=INDEX_REGS, orig=94, freq=270, tfirst=640, tfreq=720)...
	 Assigning to 651 (cl=INDEX_REGS, orig=94, freq=270, tfirst=640, tfreq=720)...
	   Assign 2 to inheritance r651 (freq=270)
	Hard reg 2 is preferable by r652 with profit 280
	Hard reg 0 is preferable by r652 with profit 13
	Hard reg 2 is preferable by r649 with profit 382
	Hard reg 0 is preferable by r649 with profit 56
	 Assigning to 652 (cl=INDEX_REGS, orig=94, freq=270, tfirst=640, tfreq=720)...
	   Assign 2 to inheritance r652 (freq=270)
	 Assigning to 631 (cl=GENERAL_REGS, orig=307, freq=180, tfirst=632, tfreq=180)...
	   Assign 0 to optional reload r631 (freq=180)
	Hard reg 0 is preferable by r653 with profit 90
	Hard reg 0 is preferable by r632 with profit 45
	 Assigning to 632 (cl=GENERAL_REGS, orig=307, freq=180, tfirst=632, tfreq=180)...
	   Assign 0 to reload r632 (freq=180)
	Hard reg 0 is preferable by r653 with profit 180
	 Assigning to 653 (cl=GENERAL_REGS, orig=307, freq=180, tfirst=632, tfreq=180)...
	 Assigning to 636 (cl=GENERAL_REGS, orig=293, freq=180, tfirst=639, tfreq=180)...
	   Assign 0 to optional reload r636 (freq=180)
	Hard reg 0 is preferable by r650 with profit 90
	Hard reg 0 is preferable by r639 with profit 45
	 Assigning to 639 (cl=GENERAL_REGS, orig=293, freq=180, tfirst=639, tfreq=180)...
	   Assign 0 to reload r639 (freq=180)
	Hard reg 0 is preferable by r650 with profit 180
	 Assigning to 650 (cl=GENERAL_REGS, orig=293, freq=180, tfirst=639, tfreq=180)...
	 Assigning to 657 (cl=GENERAL_REGS, orig=135, freq=81, tfirst=657, tfreq=135)...
	 Assigning to 658 (cl=GENERAL_REGS, orig=135, freq=81, tfirst=657, tfreq=135)...
	 Assigning to 659 (cl=GENERAL_REGS, orig=135, freq=81, tfirst=657, tfreq=135)...
	   Assign 0 to inheritance r659 (freq=81)
	Hard reg 0 is preferable by r658 with profit 27
	Hard reg 0 is preferable by r657 with profit 13
	 Assigning to 625 (cl=INDEX_REGS, orig=339, freq=54, tfirst=628, tfreq=108)...
	 Trying 2: spill 468(freq=77) assign 627(cost=-54) assign 660(cost=-81) assign 662(cost=-81) assign 663(cost=-54)	 Now best 2(cost=-247)

	 Trying 3: spill 469(freq=110) assign 627(cost=-54) assign 660(cost=-81) assign 662(cost=-81) assign 663(cost=-54)
	 Trying 4: spill 344(freq=54)
	 Trying 5: spill 467(freq=83) assign 627(cost=-54) assign 660(cost=-81) assign 662(cost=-81) assign 663(cost=-54)
	 Trying 6:
      Spill r468(hr=2, freq=77) for r625
	   Assign 2 to reload r625 (freq=54)
	Hard reg 2 is preferable by r660 with profit 27
	Hard reg 2 is preferable by r662 with profit 13
	Hard reg 2 is preferable by r663 with profit 6
	Hard reg 2 is preferable by r628 with profit 3
	Hard reg 2 is preferable by r627 with profit 6
	Hard reg 2 is preferable by r626 with profit 13
	 Assigning to 626 (cl=INDEX_REGS, orig=339, freq=54, tfirst=628, tfreq=108)...
	   Assign 2 to reload r626 (freq=54)
	Hard reg 2 is preferable by r660 with profit 54
	Hard reg 2 is preferable by r662 with profit 26
	Hard reg 2 is preferable by r663 with profit 12
	Hard reg 2 is preferable by r628 with profit 6
	Hard reg 2 is preferable by r627 with profit 12
	 Assigning to 627 (cl=INDEX_REGS, orig=339, freq=54, tfirst=628, tfreq=108)...
	   Assign 2 to reload r627 (freq=54)
	Hard reg 2 is preferable by r662 with profit 53
	Hard reg 2 is preferable by r663 with profit 25
	Hard reg 2 is preferable by r628 with profit 12
	Hard reg 2 is preferable by r660 with profit 67
	 Assigning to 628 (cl=GENERAL_REGS, orig=339, freq=54, tfirst=628, tfreq=108)...
	   Assign 2 to reload r628 (freq=54)
	Hard reg 2 is preferable by r663 with profit 52
	Hard reg 2 is preferable by r662 with profit 66
	Hard reg 2 is preferable by r660 with profit 73
	 Assigning to 660 (cl=INDEX_REGS, orig=339, freq=81, tfirst=628, tfreq=108)...
	   Assign 2 to inheritance r660 (freq=81)
	Hard reg 2 is preferable by r662 with profit 93
	Hard reg 2 is preferable by r663 with profit 65
	 Assigning to 662 (cl=INDEX_REGS, orig=339, freq=81, tfirst=628, tfreq=108)...
	   Assign 2 to inheritance r662 (freq=81)
	Hard reg 2 is preferable by r663 with profit 92
	 Assigning to 663 (cl=GENERAL_REGS, orig=339, freq=54, tfirst=628, tfreq=108)...
	   Assign 2 to inheritance r663 (freq=54)
	 Assigning to 661 (cl=GENERAL_REGS, orig=136, freq=81, tfirst=661, tfreq=81)...
	 Assigning to 621 (cl=GENERAL_REGS, orig=123, freq=81, tfirst=621, tfreq=81)...
	   Assign 1 to optional reload r621 (freq=81)
	Hard reg 1 is preferable by r666 with profit 27
	 Assigning to 666 (cl=GENERAL_REGS, orig=123, freq=54, tfirst=621, tfreq=81)...
	   Assign 1 to inheritance r666 (freq=54)
	 Assigning to 664 (cl=GENERAL_REGS, orig=123, freq=81, tfirst=664, tfreq=81)...
	 Assigning to 654 (cl=GENERAL_REGS, orig=135, freq=39, tfirst=654, tfreq=52)...
	 Assigning to 656 (cl=GENERAL_REGS, orig=135, freq=39, tfirst=654, tfreq=52)...
	 Assigning to 644 (cl=GENERAL_REGS, orig=264, freq=27, tfirst=644, tfreq=36)...
	   Assign 4 to reload r644 (freq=27)
	Hard reg 4 is preferable by r645 with profit 9
	 Assigning to 645 (cl=GENERAL_REGS, orig=159, freq=27, tfirst=644, tfreq=36)...
	   Assign 4 to inheritance r645 (freq=27)
	 Assigning to 643 (cl=GENERAL_REGS, orig=159, freq=27, tfirst=643, tfreq=27)...
	   Assign 4 to reload r643 (freq=27)
	 Assigning to 655 (cl=GENERAL_REGS, orig=136, freq=26, tfirst=655, tfreq=26)...
	 Assigning to 665 (cl=GENERAL_REGS, orig=136, freq=21, tfirst=665, tfreq=21)...
	 Assigning to 622 (cl=GENERAL_REGS, orig=83, freq=21, tfirst=622, tfreq=21)...
	   Assign 0 to optional reload r622 (freq=21)
	 Assigning to 620 (cl=GENERAL_REGS, orig=83, freq=4, tfirst=620, tfreq=4)...
	   Assign 0 to optional reload r620 (freq=4)
	 Assigning to 617 (cl=GENERAL_REGS, orig=443, freq=2, tfirst=617, tfreq=2)...
	   Assign 2 to reload r617 (freq=2)
	 Assigning to 618 (cl=GENERAL_REGS, orig=441, freq=2, tfirst=618, tfreq=2)...
	   Assign 2 to reload r618 (freq=2)
	 Assigning to 619 (cl=GENERAL_REGS, orig=83, freq=2, tfirst=619, tfreq=2)...
	   Assign 0 to optional reload r619 (freq=2)
	 Assigning to 623 (cl=GENERAL_REGS, orig=443, freq=2, tfirst=623, tfreq=2)...
	   Assign 3 to reload r623 (freq=2)
	 Assigning to 624 (cl=GENERAL_REGS, orig=441, freq=2, tfirst=624, tfreq=2)...
	   Assign 2 to reload r624 (freq=2)
	 Assigning to 630 (cl=GENERAL_REGS, orig=449, freq=2, tfirst=630, tfreq=2)...
	   Assign 0 to optional reload r630 (freq=2)
	Improving inheritance for 609(5) and 666(1)...
	   Assign 5 to inheritance r666 (freq=54)
  Reassigning non-reload pseudos
	   Assign 4 to r489 (freq=1991)
	   Assign 4 to r494 (freq=20)

********** Undoing inheritance #2: **********

Inherit 11 out of 22 (50.00%)
   Insn after restoring regs:
 1320: r648:SI=r485:SI
      REG_DEAD r485:SI
   Insn after restoring regs:
 1304: r636:SI=r293:SI
      REG_DEAD r293:SI
    Change reload insn:
 1305: r637:SI=r651:SI
   Insn after restoring regs:
 1321: r485:SI=r651:SI
      REG_DEAD r651:SI
   Insn after restoring regs:
 1307: r293:SI=r639:SI
      REG_DEAD r639:SI
   Insn after restoring regs:
 1298: r631:SI=r307:SI
      REG_DEAD r307:SI
   Insn after restoring regs:
 1299: r307:SI=r632:SI
      REG_DEAD r632:SI
   Insn after restoring regs:
  257: {r534:DI=zero_extend(r534:DI#0)*zero_extend(r483:DI#0);clobber flags:CC;}
      REG_DEAD r483:DI
   Insn after restoring regs:
 1174: r534:DI#0=r136:DI#0
      REG_DEAD r136:DI
   Insn after restoring regs:
  255: {r533:SI=r533:SI*r483:DI#4;clobber flags:CC;}
	   Removing inheritance:
 1326: r654:DI=r656:DI
      REG_DEAD r656:DI
deleting insn with uid = 1326.
   Insn after restoring regs:
 1250: r136:DI=r595:DI
   Insn after restoring regs:
  254: {r532:SI=r532:SI*r483:DI#0;clobber flags:CC;}
	   Removing inheritance:
 1328: r656:DI=r483:DI
deleting insn with uid = 1328.
   Insn after restoring regs:
  266: {r629:DI=zero_extend(r629:DI#0)*zero_extend(r483:DI#0);clobber flags:CC;}
      REG_DEAD r483:DI
   Insn after restoring regs:
 1295: r629:DI#0=r483:DI#0
	   Removing inheritance:
 1329: r657:DI=r658:DI
      REG_DEAD r658:DI
deleting insn with uid = 1329.
   Insn after restoring regs:
  263: {r535:SI=r535:SI*r483:DI#0;clobber flags:CC;}
   Insn after restoring regs:
 1330: r483:DI=r659:DI
      REG_DEAD r659:DI
   Insn after restoring regs:
 1189: r543:SI=r123:SI
      REG_DEAD r123:SI
   Insn after restoring regs:
 1187: r542:DI#0=r136:DI#0
      REG_DEAD r136:DI
	   Removing inheritance:
 1333: r136:DI=r661:DI
deleting insn with uid = 1333.
   Insn after restoring regs:
 1253: r136:DI=r598:DI
   Insn after restoring regs:
 1181: r539:SI=r123:SI
	   Removing inheritance:
 1336: r664:SI=r123:SI
deleting insn with uid = 1336.
   Insn after restoring regs:
  389: {r551:DI=zero_extend(r551:DI#0)*zero_extend(r136:DI#0);clobber flags:CC;}
      REG_DEAD r136:DI
	   Removing inheritance:
 1337: r136:DI=r665:DI
deleting insn with uid = 1337.
   Insn after restoring regs:
 1261: r136:DI=r605:DI
Keep optional reload reg 516
Keep optional reload reg 517
Keep optional reload reg 518
Keep optional reload reg 525
Keep optional reload reg 550
Keep optional reload reg 554
Keep optional reload reg 562
Keep optional reload reg 563
Keep optional reload reg 565
Keep optional reload reg 569
Keep optional reload reg 633
Keep optional reload reg 634
Remove optional reload reg 619
  Restoring original insn:
  599: flags:CCZ=cmp(r83:SI,r465:SI)
      REG_DEAD r83:SI
  Deleting move 1282
 1282: r619:SI=r83:SI
      REG_DEAD r83:SI
deleting insn with uid = 1282.
Remove optional reload reg 620
  Restoring original insn:
  581: flags:CCGC=cmp(r465:SI,r83:SI)
      REG_DEAD r83:SI
  Deleting move 1283
 1283: r620:SI=r83:SI
deleting insn with uid = 1283.
Remove optional reload reg 621
  Restoring original insn:
  567: {r123:SI=r123:SI+r470:SI;clobber flags:CC;}
  Deleting move 1284
 1284: r621:SI=r123:SI
      REG_DEAD r123:SI
deleting insn with uid = 1284.
  Restoring original insn:
 1285: r666:SI=r123:SI
      REG_DEAD r123:SI
Remove optional reload reg 622
  Restoring original insn:
  564: {r83:SI=r83:SI+0x1;clobber flags:CC;}
  Deleting move 1286
 1286: r622:SI=r83:SI
      REG_DEAD r83:SI
deleting insn with uid = 1286.
  Deleting move 1287
 1287: r83:SI=r622:SI
      REG_DEAD r622:SI
deleting insn with uid = 1287.
Remove optional reload reg 630
  Restoring original insn:
  213: flags:CCNO=cmp(r449:SI,0)
      REG_DEAD r449:SI
  Deleting move 1297
 1297: r630:SI=r449:SI
deleting insn with uid = 1297.
Remove optional reload reg 631
  Restoring original insn:
  202: {r312:DI#4=r312:DI#4+r307:SI;clobber flags:CC;}
      REG_DEAD r307:SI
  Deleting move 1298
 1298: r631:SI=r307:SI
      REG_DEAD r307:SI
deleting insn with uid = 1298.
Remove optional reload reg 636
  Restoring original insn:
  179: {r298:DI#4=r298:DI#4+r293:SI;clobber flags:CC;}
      REG_DEAD r293:SI
  Deleting move 1304
 1304: r636:SI=r293:SI
      REG_DEAD r293:SI
deleting insn with uid = 1304.

********** Pseudo live ranges #4: **********

  BB 130
   Insn 777: point = 0
   Insn 776: point = 0
  BB 111
   Insn 1034: point = 0
  BB 110
   Insn 656: point = 0
   Insn 655: point = 0
   Insn 654: point = 1
   Insn 1230: point = 3
	Hard reg 0 is preferable by r574 with profit 9
   Insn 653: point = 5
   Insn 1229: point = 5
   Insn 649: point = 6
   Insn 647: point = 7
   Insn 646: point = 7
   Insn 645: point = 7
   Insn 644: point = 7
   Insn 643: point = 8
  BB 134
   Insn 1107: point = 11
   Insn 1106: point = 13
  BB 109
   Insn 635: point = 16
   Insn 634: point = 16
   Insn 42: point = 17
   Insn 633: point = 18
   Insn 1228: point = 20
	Hard reg 0 is preferable by r573 with profit 1
   Insn 632: point = 22
   Insn 1227: point = 22
   Insn 629: point = 23
   Insn 627: point = 24
   Insn 626: point = 24
   Insn 625: point = 24
   Insn 624: point = 25
   Insn 623: point = 26
   Insn 622: point = 28
   Insn 621: point = 30
  BB 21
   Insn 993: point = 32
   Insn 216: point = 32
  BB 126
   Insn 1052: point = 33
   Insn 758: point = 33
  BB 133
   Insn 1105: point = 33
  BB 108
   Insn 616: point = 36
   Insn 615: point = 36
   Insn 612: point = 36
   Insn 1226: point = 36
	Hard reg 3 is preferable by r572 with profit 9
   Insn 611: point = 38
   Insn 1225: point = 38
  BB 105
   Insn 1030: point = 41
   Insn 1221: point = 41
   Insn 902: point = 43
   Insn 901: point = 44
   Insn 594: point = 45
   Insn 593: point = 46
   Insn 592: point = 46
   Insn 591: point = 46
   Insn 590: point = 46
   Insn 1220: point = 47
   Insn 588: point = 48
   Insn 587: point = 49
   Insn 584: point = 50
   Insn 1219: point = 51
  BB 107
   Insn 1224: point = 54
   Insn 905: point = 56
   Insn 904: point = 57
   Insn 607: point = 58
   Insn 606: point = 59
   Insn 605: point = 59
   Insn 604: point = 59
   Insn 603: point = 59
   Insn 1223: point = 60
  BB 106
   Insn 600: point = 62
   Insn 599: point = 62
   Insn 903: point = 63
  BB 104
   Insn 582: point = 65
   Insn 581: point = 65
   Insn 580: point = 65
  BB 103
   Insn 1114: point = 67
   Insn 41: point = 67
  BB 132
   Insn 1104: point = 69
  BB 101
   Insn 571: point = 72
   Insn 570: point = 72
   Insn 569: point = 72
   Insn 568: point = 73
   Insn 1217: point = 75
	   Creating copy r564<-r609@27
   Insn 1268: point = 77
   Insn 1216: point = 78
	   Creating copy r609<-r666@27
   Insn 1285: point = 80
   Insn 567: point = 82
   Insn 566: point = 82
  BB 129
   Insn 1057: point = 84
  BB 100
   Insn 564: point = 85
   Insn 563: point = 85
  BB 98
   Insn 1026: point = 87
   Insn 553: point = 87
   Insn 545: point = 87
   Insn 544: point = 87
   Insn 543: point = 88
   Insn 542: point = 90
   Insn 541: point = 90
   Insn 540: point = 91
  BB 96
   Insn 1024: point = 92
   Insn 536: point = 92
  BB 95
   Insn 534: point = 94
   Insn 533: point = 94
  BB 94
   Insn 532: point = 96
  BB 93
   Insn 530: point = 97
   Insn 529: point = 97
   Insn 1212: point = 98
   Insn 869: point = 99
   Insn 527: point = 100
  BB 97
   Insn 39: point = 102
  BB 92
   Insn 525: point = 104
   Insn 524: point = 104
  BB 91
   Insn 521: point = 105
   Insn 520: point = 105
  BB 90
   Insn 1022: point = 107
  BB 99
   Insn 40: point = 108
   Insn 1267: point = 110
	Hard reg 0 is preferable by r608 with profit 1
   Insn 558: point = 112
   Insn 557: point = 112
   Insn 1266: point = 113
	Hard reg 0 is preferable by r608 with profit 2
  BB 121
   Insn 1046: point = 116
  BB 120
   Insn 743: point = 117
   Insn 742: point = 117
   Insn 876: point = 117
   Insn 875: point = 118
   Insn 737: point = 119
   Insn 736: point = 119
   Insn 735: point = 119
   Insn 734: point = 119
   Insn 1279: point = 120
	Hard reg 1 is preferable by r616 with profit 4
   Insn 733: point = 122
   Insn 732: point = 123
   Insn 731: point = 124
   Insn 730: point = 124
   Insn 729: point = 125
   Insn 728: point = 126
   Insn 727: point = 126
   Insn 1278: point = 126
	Hard reg 1 is preferable by r616 with profit 8
   Insn 726: point = 128
  BB 89
   Insn 512: point = 131
   Insn 511: point = 131
  BB 88
   Insn 510: point = 132
  BB 87
   Insn 508: point = 133
   Insn 507: point = 133
  BB 86
   Insn 505: point = 134
   Insn 504: point = 134
   Insn 1103: point = 134
   Insn 1102: point = 136
  BB 85
   Insn 502: point = 139
   Insn 501: point = 139
  BB 83
   Insn 1019: point = 140
   Insn 37: point = 140
   Insn 36: point = 140
  BB 84
   Insn 497: point = 142
  BB 82
   Insn 489: point = 143
   Insn 488: point = 143
  BB 81
   Insn 487: point = 144
  BB 80
   Insn 485: point = 145
   Insn 484: point = 145
  BB 79
   Insn 1101: point = 146
   Insn 1100: point = 148
   Insn 1099: point = 150
   Insn 888: point = 152
  BB 127
   Insn 1054: point = 154
   Insn 891: point = 154
  BB 128
   Insn 771: point = 157
   Insn 770: point = 157
  BB 67
   Insn 1010: point = 159
  BB 119
   Insn 885: point = 160
  BB 118
   Insn 715: point = 162
   Insn 714: point = 162
   Insn 712: point = 162
  BB 78
   Insn 1017: point = 164
  BB 77
   Insn 478: point = 165
   Insn 477: point = 165
   Insn 1211: point = 166
  BB 75
   Insn 1014: point = 169
   Insn 469: point = 169
   Insn 461: point = 169
   Insn 460: point = 169
   Insn 459: point = 170
   Insn 458: point = 172
   Insn 1209: point = 173
   Insn 457: point = 174
   Insn 456: point = 175
  BB 73
   Insn 1012: point = 176
   Insn 452: point = 176
  BB 72
   Insn 450: point = 178
   Insn 449: point = 178
   Insn 1288: point = 179
  BB 71
   Insn 448: point = 182
  BB 70
   Insn 446: point = 183
   Insn 445: point = 183
   Insn 1208: point = 184
   Insn 1207: point = 185
	   Creating copy r556<-r606@1
   Insn 1280: point = 187
   Insn 867: point = 189
   Insn 1206: point = 191
	   Creating copy r555<-r606@1
   Insn 1263: point = 192
   Insn 443: point = 193
  BB 74
   Insn 33: point = 195
  BB 69
   Insn 441: point = 197
   Insn 440: point = 197
  BB 68
   Insn 437: point = 198
   Insn 436: point = 198
  BB 76
   Insn 34: point = 200
   Insn 1265: point = 202
	Hard reg 0 is preferable by r607 with profit 1
   Insn 474: point = 204
   Insn 473: point = 204
   Insn 1210: point = 205
   Insn 1264: point = 207
	Hard reg 0 is preferable by r607 with profit 2
  BB 117
   Insn 1042: point = 210
  BB 116
   Insn 704: point = 211
   Insn 703: point = 211
   Insn 874: point = 211
   Insn 873: point = 212
   Insn 698: point = 213
   Insn 697: point = 213
   Insn 696: point = 213
   Insn 695: point = 213
   Insn 1277: point = 214
	Hard reg 1 is preferable by r615 with profit 4
   Insn 694: point = 216
   Insn 693: point = 217
   Insn 1233: point = 219
	   Creating copy r577<-r611@4
   Insn 692: point = 221
   Insn 1232: point = 222
	   Creating copy r576<-r611@4
   Insn 1271: point = 223
	   Creating copy r611<-r612@4
   Insn 691: point = 225
   Insn 1275: point = 226
	Hard reg 2 is preferable by r614 with profit 4
   Insn 1231: point = 228
	   Creating copy r575<-r612@4
   Insn 1272: point = 229
	   Creating copy r612<-r613@4
   Insn 1273: point = 231
   Insn 690: point = 232
	Hard reg 0 is preferable by r613 with profit 4
   Insn 689: point = 233
   Insn 688: point = 233
   Insn 1274: point = 233
	Hard reg 2 is preferable by r614 with profit 8
   Insn 1276: point = 235
	Hard reg 1 is preferable by r615 with profit 8
  BB 66
   Insn 428: point = 238
   Insn 427: point = 238
  BB 65
   Insn 426: point = 239
  BB 64
   Insn 424: point = 240
   Insn 423: point = 240
  BB 63
   Insn 421: point = 241
   Insn 420: point = 241
   Insn 1098: point = 241
   Insn 1097: point = 243
   Insn 1096: point = 245
  BB 62
   Insn 418: point = 248
   Insn 417: point = 248
  BB 60
   Insn 1007: point = 249
   Insn 31: point = 249
   Insn 30: point = 249
  BB 61
   Insn 413: point = 251
  BB 59
   Insn 405: point = 252
   Insn 404: point = 252
  BB 58
   Insn 403: point = 253
  BB 57
   Insn 401: point = 254
   Insn 400: point = 254
  BB 56
   Insn 1095: point = 255
   Insn 1094: point = 257
   Insn 1093: point = 259
   Insn 1092: point = 261
   Insn 889: point = 263
  BB 115
   Insn 886: point = 265
  BB 55
   Insn 397: point = 267
   Insn 396: point = 267
   Insn 1205: point = 268
	   Creating copy r554<-r601@7
   Insn 906: point = 270
   Insn 1258: point = 271
	   Creating copy r601<-r602@7
   Insn 1259: point = 273
   Insn 1204: point = 274
	   Creating copy r553->r602@7
   Insn 395: point = 276
   Insn 1203: point = 277
	Hard reg 2 is preferable by r552 with profit 7
   Insn 393: point = 279
   Insn 1202: point = 280
   Insn 391: point = 282
   Insn 1201: point = 283
	Hard reg 0 is preferable by r551 with profit 7
   Insn 389: point = 285
   Insn 1200: point = 287
   Insn 1199: point = 288
   Insn 388: point = 289
   Insn 1197: point = 291
	Hard reg 0 is preferable by r549 with profit 7
   Insn 387: point = 293
   Insn 1198: point = 294
	   Creating copy r550<-r603@7
   Insn 1260: point = 295
   Insn 1196: point = 297
   Insn 1261: point = 299
   Insn 1195: point = 300
	Hard reg 2 is preferable by r548 with profit 7
   Insn 386: point = 302
   Insn 1262: point = 302
   Insn 1194: point = 304
  BB 54
   Insn 384: point = 307
   Insn 383: point = 307
  BB 52
   Insn 1005: point = 309
   Insn 373: point = 309
   Insn 365: point = 309
   Insn 364: point = 309
   Insn 363: point = 310
   Insn 362: point = 312
   Insn 361: point = 312
   Insn 360: point = 313
  BB 50
   Insn 1003: point = 314
   Insn 356: point = 314
  BB 49
   Insn 354: point = 316
   Insn 353: point = 316
   Insn 1289: point = 317
  BB 48
   Insn 352: point = 320
  BB 47
   Insn 350: point = 321
   Insn 349: point = 321
   Insn 1193: point = 322
   Insn 1281: point = 323
   Insn 865: point = 325
   Insn 347: point = 326
  BB 51
   Insn 27: point = 328
  BB 46
   Insn 345: point = 330
   Insn 344: point = 330
  BB 45
   Insn 341: point = 331
   Insn 340: point = 331
  BB 44
   Insn 1001: point = 333
  BB 53
   Insn 28: point = 334
   Insn 1257: point = 336
	Hard reg 0 is preferable by r600 with profit 2
   Insn 378: point = 338
   Insn 377: point = 338
   Insn 1256: point = 339
	Hard reg 0 is preferable by r600 with profit 4
  BB 114
   Insn 1038: point = 342
  BB 113
   Insn 680: point = 343
   Insn 679: point = 343
   Insn 872: point = 343
   Insn 871: point = 344
   Insn 674: point = 345
   Insn 673: point = 345
   Insn 672: point = 345
   Insn 671: point = 345
   Insn 1270: point = 346
	Hard reg 1 is preferable by r610 with profit 15
   Insn 670: point = 348
   Insn 669: point = 349
   Insn 668: point = 350
   Insn 667: point = 350
   Insn 666: point = 350
   Insn 665: point = 351
   Insn 664: point = 351
   Insn 1269: point = 351
	Hard reg 1 is preferable by r610 with profit 30
   Insn 663: point = 353
  BB 43
   Insn 332: point = 356
   Insn 331: point = 356
  BB 42
   Insn 330: point = 357
  BB 41
   Insn 328: point = 358
   Insn 327: point = 358
  BB 40
   Insn 325: point = 359
   Insn 324: point = 359
   Insn 1091: point = 359
   Insn 1090: point = 361
  BB 39
   Insn 322: point = 364
   Insn 321: point = 364
  BB 37
   Insn 998: point = 365
   Insn 25: point = 365
   Insn 24: point = 365
  BB 38
   Insn 317: point = 367
  BB 36
   Insn 309: point = 368
   Insn 308: point = 368
  BB 35
   Insn 307: point = 369
  BB 34
   Insn 305: point = 370
   Insn 304: point = 370
  BB 33
   Insn 1089: point = 371
   Insn 1088: point = 373
   Insn 1087: point = 375
   Insn 890: point = 377
  BB 112
   Insn 887: point = 379
  BB 32
   Insn 301: point = 381
   Insn 300: point = 381
   Insn 1192: point = 381
   Insn 864: point = 383
   Insn 1191: point = 385
   Insn 863: point = 387
   Insn 1190: point = 388
   Insn 296: point = 390
   Insn 1189: point = 392
   Insn 294: point = 393
   Insn 293: point = 395
   Insn 291: point = 397
   Insn 1188: point = 398
	Hard reg 0 is preferable by r542 with profit 27
   Insn 289: point = 400
   Insn 1290: point = 402
	   Creating copy r625<-r660@27
   Insn 1187: point = 404
   Insn 1186: point = 404
   Insn 288: point = 405
   Insn 1185: point = 407
	Hard reg 1 is preferable by r541 with profit 27
   Insn 287: point = 409
   Insn 1291: point = 410
	   Creating copy r626<-r660@27
   Insn 1332: point = 411
	   Creating copy r660<-r662@27
   Insn 1184: point = 413
   Insn 1253: point = 415
   Insn 1183: point = 416
	Hard reg 4 is preferable by r540 with profit 27
   Insn 285: point = 418
   Insn 1292: point = 419
	   Creating copy r627<-r662@27
   Insn 1334: point = 420
	   Creating copy r662<-r663@27
   Insn 1182: point = 422
   Insn 1254: point = 423
   Insn 1293: point = 425
	   Creating copy r628->r663@27
   Insn 283: point = 427
   Insn 1181: point = 429
  BB 102
   Insn 1028: point = 431
   Insn 574: point = 431
  BB 31
   Insn 1086: point = 433
   Insn 1085: point = 435
   Insn 1084: point = 437
   Insn 899: point = 439
   Insn 1180: point = 441
	   Creating copy r538<-r596@2
   Insn 22: point = 443
   Insn 21: point = 444
   Insn 20: point = 445
  BB 30
   Insn 278: point = 447
   Insn 277: point = 447
   Insn 1179: point = 448
	   Creating copy r537<-r596@2
   Insn 1252: point = 449
  BB 28
   Insn 996: point = 451
   Insn 1083: point = 451
  BB 27
   Insn 274: point = 454
   Insn 273: point = 454
   Insn 1178: point = 455
   Insn 270: point = 456
   Insn 268: point = 456
   Insn 1296: point = 457
   Insn 266: point = 459
   Insn 1295: point = 461
   Insn 1294: point = 461
   Insn 265: point = 462
   Insn 1177: point = 464
	Hard reg 4 is preferable by r535 with profit 27
   Insn 263: point = 466
   Insn 1330: point = 466
   Insn 1176: point = 468
   Insn 1331: point = 469
  BB 26
   Insn 259: point = 472
   Insn 1175: point = 473
   Insn 257: point = 475
   Insn 1174: point = 477
   Insn 1173: point = 478
   Insn 256: point = 479
   Insn 1172: point = 481
	Hard reg 4 is preferable by r533 with profit 13
   Insn 255: point = 483
   Insn 1171: point = 483
   Insn 1250: point = 485
   Insn 1170: point = 486
	Hard reg 5 is preferable by r532 with profit 13
   Insn 254: point = 488
   Insn 1169: point = 488
   Insn 1251: point = 489
  BB 25
   Insn 252: point = 492
   Insn 251: point = 492
   Insn 1168: point = 493
	Hard reg 4 is preferable by r531 with profit 27
   Insn 248: point = 495
   Insn 1167: point = 495
  BB 24
   Insn 1082: point = 497
   Insn 1081: point = 499
   Insn 1080: point = 501
   Insn 17: point = 503
   Insn 16: point = 504
  BB 29
   Insn 18: point = 506
  BB 23
   Insn 245: point = 508
   Insn 244: point = 508
   Insn 1166: point = 509
	   Creating copy r530<-r591@2
   Insn 1165: point = 511
	Hard reg 3 is preferable by r529 with profit 2
   Insn 242: point = 513
   Insn 1164: point = 515
   Insn 1247: point = 515
	   Creating copy r591<-r592@2
   Insn 1163: point = 517
   Insn 911: point = 518
   Insn 1248: point = 519
	   Creating copy r592<-r593@2
   Insn 1249: point = 521
   Insn 1162: point = 522
	   Creating copy r528->r593@2
   Insn 241: point = 524
   Insn 240: point = 525
   Insn 238: point = 525
   Insn 236: point = 525
   Insn 234: point = 525
   Insn 232: point = 525
   Insn 231: point = 525
   Insn 230: point = 525
   Insn 229: point = 525
   Insn 228: point = 526
  BB 22
   Insn 225: point = 528
   Insn 224: point = 528
   Insn 1161: point = 529
   Insn 895: point = 531
   Insn 1160: point = 532
	Hard reg 0 is preferable by r526 with profit 9
   Insn 223: point = 534
   Insn 1159: point = 536
  BB 131
   Insn 1079: point = 538
   Insn 1078: point = 540
   Insn 1077: point = 542
  BB 20
   Insn 214: point = 545
   Insn 213: point = 545
   Insn 15: point = 545
   Insn 221: point = 546
   Insn 212: point = 547
  BB 19
   Insn 209: point = 548
   Insn 208: point = 548
   Insn 206: point = 548
   Insn 205: point = 548
   Insn 1157: point = 549
	Hard reg 0 is preferable by r524 with profit 90
   Insn 204: point = 551
   Insn 1156: point = 552
	   Creating copy r524<-r590@90
   Insn 202: point = 554
   Insn 1155: point = 555
	Hard reg 1 is preferable by r523 with profit 90
   Insn 200: point = 557
   Insn 1154: point = 559
   Insn 1153: point = 559
   Insn 1299: point = 560
   Insn 195: point = 562
   Insn 192: point = 563
   Insn 191: point = 565
  BB 18
   Insn 1076: point = 567
   Insn 13: point = 569
  BB 17
   Insn 186: point = 571
   Insn 185: point = 571
   Insn 1300: point = 572
	   Creating copy r633<-r647@90
   Insn 1319: point = 574
   Insn 1302: point = 575
	   Creating copy r634->r647@90
   Insn 183: point = 577
   Insn 1301: point = 577
	   Creating copy r634<-r648@90
   Insn 182: point = 579
   Insn 1303: point = 580
	   Creating copy r635<-r648@90
   Insn 1320: point = 581
   Insn 1152: point = 583
	Hard reg 0 is preferable by r522 with profit 90
   Insn 181: point = 585
   Insn 1151: point = 586
	   Creating copy r522<-r589@90
   Insn 179: point = 588
   Insn 1150: point = 589
	Hard reg 1 is preferable by r521 with profit 90
   Insn 177: point = 591
   Insn 1305: point = 593
	   Creating copy r637<-r651@90
   Insn 1321: point = 595
   Insn 1149: point = 596
   Insn 1148: point = 596
   Insn 1307: point = 597
   Insn 172: point = 599
   Insn 1306: point = 601
	   Creating copy r638<-r651@90
   Insn 1323: point = 602
	   Creating copy r651<-r652@90
   Insn 169: point = 604
   Insn 168: point = 606
   Insn 1308: point = 608
	   Creating copy r640<-r652@90
   Insn 1324: point = 609
  BB 16
   Insn 1075: point = 612
	Hard reg 3 is preferable by r586 with profit 1
   Insn 1074: point = 614
   Insn 12: point = 616
   Insn 1146: point = 617
	   Creating copy r519->r586@1
   Insn 163: point = 619
   Insn 1147: point = 621
	   Creating copy r520<-r587@1
  BB 15
   Insn 161: point = 624
   Insn 160: point = 624
   Insn 1145: point = 625
	   Creating copy r518<-r587@1
   Insn 1243: point = 626
	   Creating copy r587<-r588@1
   Insn 1244: point = 628
   Insn 1073: point = 629
	Hard reg 0 is preferable by r588 with profit 1
  BB 14
   Insn 158: point = 632
   Insn 157: point = 632
   Insn 1144: point = 633
	   Creating copy r517<-r583@81
   Insn 155: point = 635
   Insn 1239: point = 636
   Insn 1143: point = 637
	   Creating copy r516->r583@81
   Insn 154: point = 639
   Insn 1142: point = 639
	   Creating copy r516<-r584@81
   Insn 153: point = 641
   Insn 1141: point = 642
	   Creating copy r515<-r584@81
   Insn 1240: point = 643
   Insn 151: point = 645
   Insn 1140: point = 646
	Hard reg 0 is preferable by r514 with profit 81
   Insn 149: point = 648
   Insn 1139: point = 650
   Insn 1138: point = 651
   Insn 148: point = 652
   Insn 1137: point = 654
	Hard reg 0 is preferable by r513 with profit 81
   Insn 147: point = 656
   Insn 1136: point = 656
	   Creating copy r513<-r585@81
   Insn 1241: point = 657
	Hard reg 3 is preferable by r585 with profit 81
   Insn 1135: point = 659
	Hard reg 2 is preferable by r512 with profit 81
   Insn 146: point = 661
   Insn 1134: point = 661
   Insn 1072: point = 663
  BB 13
   Insn 143: point = 666
   Insn 142: point = 666
   Insn 141: point = 667
   Insn 139: point = 669
   Insn 138: point = 670
   Insn 137: point = 671
   Insn 1310: point = 671
	Hard reg 4 is preferable by r641 with profit 910
   Insn 136: point = 673
   Insn 1309: point = 673
	Hard reg 4 is preferable by r641 with profit 1820
   Insn 135: point = 675
   Insn 134: point = 677
   Insn 133: point = 679
   Insn 131: point = 681
   Insn 1312: point = 683
	Hard reg 4 is preferable by r642 with profit 910
   Insn 130: point = 685
   Insn 1311: point = 685
	   Creating copy r642<-r646@910
   Insn 1133: point = 687
	Hard reg 0 is preferable by r511 with profit 910
   Insn 129: point = 689
   Insn 1132: point = 689
	   Creating copy r511<-r646@910
   Insn 1318: point = 690
	Hard reg 4 is preferable by r646 with profit 910
  BB 125
   Insn 1050: point = 693
   Insn 1111: point = 693
   Insn 1110: point = 695
   Insn 10: point = 697
  BB 12
   Insn 991: point = 699
   Insn 1071: point = 699
   Insn 1070: point = 701
   Insn 1069: point = 703
  BB 11
   Insn 124: point = 706
   Insn 123: point = 706
   Insn 122: point = 707
   Insn 120: point = 709
   Insn 119: point = 710
   Insn 118: point = 711
   Insn 937: point = 711
   Insn 1131: point = 712
   Insn 935: point = 713
   Insn 934: point = 714
   Insn 1130: point = 715
   Insn 932: point = 716
  BB 10
   Insn 1068: point = 717
	Hard reg 4 is preferable by r581 with profit 81
   Insn 1067: point = 719
	Hard reg 3 is preferable by r582 with profit 81
   Insn 1066: point = 721
   Insn 860: point = 723
   Insn 859: point = 724
  BB 124
   Insn 880: point = 726
   Insn 879: point = 727
  BB 9
   Insn 110: point = 729
   Insn 109: point = 729
   Insn 108: point = 730
   Insn 107: point = 732
   Insn 106: point = 733
   Insn 105: point = 734
  BB 8
   Insn 7: point = 735
  BB 7
   Insn 103: point = 737
   Insn 102: point = 737
   Insn 101: point = 738
   Insn 100: point = 739
   Insn 98: point = 740
   Insn 1129: point = 741
	Hard reg 3 is preferable by r508 with profit 1
   Insn 96: point = 743
   Insn 1128: point = 745
   Insn 1127: point = 746
   Insn 95: point = 747
   Insn 1126: point = 749
	Hard reg 0 is preferable by r507 with profit 1
   Insn 94: point = 751
   Insn 1125: point = 751
	   Creating copy r507<-r580@1
   Insn 1236: point = 752
	Hard reg 3 is preferable by r580 with profit 1
   Insn 1124: point = 754
	Hard reg 2 is preferable by r506 with profit 1
   Insn 93: point = 756
   Insn 1123: point = 756
   Insn 1065: point = 758
  BB 6
   Insn 91: point = 761
   Insn 90: point = 761
   Insn 89: point = 762
   Insn 87: point = 764
   Insn 86: point = 765
   Insn 85: point = 766
   Insn 1314: point = 766
	Hard reg 4 is preferable by r643 with profit 9
   Insn 84: point = 768
   Insn 1313: point = 768
	Hard reg 4 is preferable by r643 with profit 18
   Insn 83: point = 770
   Insn 82: point = 772
   Insn 81: point = 774
   Insn 79: point = 776
   Insn 1316: point = 778
	Hard reg 4 is preferable by r644 with profit 9
   Insn 78: point = 780
   Insn 1315: point = 780
	   Creating copy r644<-r645@9
   Insn 1122: point = 782
	Hard reg 0 is preferable by r505 with profit 9
   Insn 77: point = 784
   Insn 1121: point = 784
	   Creating copy r505<-r645@9
   Insn 1317: point = 785
	Hard reg 4 is preferable by r645 with profit 9
  BB 123
   Insn 1048: point = 788
   Insn 1109: point = 788
   Insn 1108: point = 790
   Insn 6: point = 792
  BB 5
   Insn 988: point = 794
   Insn 1064: point = 794
   Insn 1063: point = 796
   Insn 1062: point = 798
  BB 4
   Insn 72: point = 801
   Insn 71: point = 801
   Insn 70: point = 802
   Insn 68: point = 804
   Insn 67: point = 805
   Insn 66: point = 806
   Insn 931: point = 806
   Insn 929: point = 806
   Insn 928: point = 807
   Insn 926: point = 807
  BB 3
   Insn 1061: point = 808
	Hard reg 5 is preferable by r578 with profit 1
   Insn 1060: point = 810
	Hard reg 4 is preferable by r579 with profit 1
   Insn 1059: point = 812
   Insn 927: point = 814
   Insn 856: point = 815
   Insn 855: point = 816
  BB 122
   Insn 878: point = 818
   Insn 877: point = 819
  BB 2
   Insn 58: point = 821
   Insn 57: point = 821
   Insn 56: point = 822
   Insn 55: point = 824
   Insn 54: point = 825
   Insn 53: point = 826
   Insn 3: point = 826
 r83: [69..444] [62..67] [52..53]
 r84: [731..733]
 r85: [737..739]
 r87: [644..735] [632..636]
 r94: [615..616]
 r101: [568..569]
 r104: [508..511] [502..505]
 r106: [500..518] [438..451]
 r112: [376..393] [262..361] [165..245] [151..163] [124..136]
 r113: [281..388]
 r117: [260..277] [234..243] [225..226]
 r120: [328..328] [316..326] [311..314]
 r123: [81..443] [72..77]
 r125: [543..545]
 r129: [14..23]
 r132: [12..17]
 r135: [498..504]
 r136: [506..506] [490..503] [477..485] [424..473] [303..415] [72..299]
 r149: [823..825]
 r150: [803..805]
 r151: [813..824] [791..798]
 r158: [769..770]
 r159: [789..792] [744..758]
 r160: [763..765]
 r165: [162..162] [149..154]
 r166: [708..710]
 r167: [722..732] [696..703]
 r174: [674..675]
 r175: [694..697] [649..663]
 r176: [668..670]
 r181: [160..160] [147..152] [129..134] [112..125] [85..108]
 r186: [265..265] [258..263] [236..241] [213..214] [157..159]
 r187: [267..270] [256..264]
 r189: [436..445]
 r203: [379..379] [372..377] [354..359] [338..350] [307..334]
 r209: [206..231] [167..200]
 r212: [195..195] [178..193] [171..176]
 r229: [102..102] [94..100] [89..92]
 r252: [541..546] [24..33]
 r254: [127..128] [119..120]
 r258: [352..353] [345..346]
 r261: [821..822]
 r262: [801..802]
 r263: [777..782]
 r264: [777..778]
 r265: [771..776]
 r266: [771..772]
 r267: [773..774]
 r268: [761..762]
 r269: [748..754]
 r270: [748..749]
 r271: [740..747]
 r272: [738..741]
 r274: [729..730]
 r275: [706..707]
 r276: [682..687]
 r277: [682..683]
 r278: [676..681]
 r279: [676..677]
 r280: [678..679]
 r281: [666..667]
 r283: [653..659]
 r284: [653..654]
 r285: [645..652]
 r286: [641..646]
 r291: [605..606]
 r293: [588..597]
 r298: [585..589]
 r301: [579..583]
 r305: [564..565]
 r307: [554..560]
 r312: [551..555]
 r315: [548..549]
 r317: [528..532]
 r318: [534..535]
 r320: [525..526]
 r328: [480..486]
 r329: [480..481]
 r330: [472..479]
 r332: [463..464]
 r334: [456..462]
 r340: [406..416]
 r342: [406..407]
 r344: [397..405]
 r345: [394..398]
 r347: [394..395]
 r356: [309..310]
 r363: [290..300]
 r364: [290..291]
 r365: [282..289]
 r366: [279..283]
 r374: [169..170]
 r386: [87..88]
 r397: [48..49]
 r403: [27..28]
 r404: [29..30]
 r406: [25..26]
 r409: [19..20]
 r412: [16..18]
 r414: [7..8]
 r417: [2..3]
 r420: [0..1]
 r421: [348..349]
 r422: [216..217]
 r424: [122..123]
 r427: [296..385]
 r428: [305..381]
 r429: [818..819] [753..796]
 r430: [818..818] [757..794]
 r431: [726..727] [658..701]
 r432: [726..726] [662..699]
 r433: [114..118] [109..110] [105..106]
 r434: [117..117] [90..106]
 r435: [208..212] [201..202] [198..199]
 r436: [211..211] [174..199]
 r437: [340..344] [335..336] [331..332]
 r438: [343..343] [312..332]
 r439: [492..493]
 r441: [318..323]
 r443: [180..187]
 r445: [94..99]
 r448: [267..273] [238..264] [155..159]
 r449: [539..628]
 r450: [434..439]
 r451: [528..529] [447..521] [62..69] [54..54] [39..41]
 r456: [36..547]
 r457: [548..570]
 r458: [571..623]
 r460: [632..736]
 r461: [801..814]
 r462: [9..13] [0..6]
 r463: [0..11]
 r464: [535..542] [36..36]
 r465: [528..540] [62..65] [54..58] [34..45]
 r466: [528..538] [62..63] [54..57] [36..44]
 r467: [396..437] [72..72]
 r468: [433..435] [381..431] [374..378]
 r469: [384..433] [72..73]
 r470: [70..82]
 r471: [137..150]
 r472: [139..148]
 r473: [142..146] [135..140]
 r474: [246..261]
 r475: [244..259]
 r476: [251..257] [242..249]
 r477: [248..255]
 r478: [362..375]
 r479: [364..373]
 r480: [367..371] [360..365]
 r481: [454..501]
 r482: [452..499]
 r483: [470..497] [460..466] [454..457]
 r484: [548..567]
 r485: [610..614] [582..595] [571..574]
 r486: [571..612]
 r487: [630..635]
 r488: [680..695] [666..669]
 r489: [691..693] [664..671]
 r490: [713..721] [704..709]
 r491: [702..719]
 r492: [700..717]
 r493: [775..790] [761..764]
 r494: [786..788] [759..766]
 r495: [806..812] [799..804]
 r496: [797..810]
 r497: [795..808]
 r498: [772..773]
 r499: [677..678]
 r500: [604..605]
 r501: [563..564]
 r502: [513..514]
 r505: [783..784]
 r506: [755..756]
 r507: [750..751]
 r508: [742..746]
 r509: [714..715]
 r510: [711..712]
 r511: [688..689]
 r512: [660..661]
 r513: [655..656]
 r514: [647..651]
 r515: [641..642]
 r516: [638..639]
 r517: [632..633]
 r518: [624..625]
 r519: [618..619]
 r520: [620..621]
 r521: [590..596]
 r522: [584..586]
 r523: [556..559]
 r524: [550..552]
 r526: [533..536]
 r527: [530..531]
 r528: [523..524]
 r529: [512..517]
 r530: [508..509]
 r531: [494..495]
 r532: [487..488]
 r533: [482..483]
 r534: [474..478]
 r535: [465..468]
 r536: [454..455]
 r537: [447..448]
 r538: [440..441]
 r539: [428..429]
 r540: [417..422]
 r541: [408..413]
 r542: [399..404]
 r543: [391..392]
 r544: [389..390]
 r545: [386..387]
 r546: [382..383]
 r547: [321..322]
 r548: [301..304]
 r549: [292..297]
 r550: [293..294]
 r551: [284..288]
 r552: [278..280]
 r553: [275..276]
 r554: [267..268]
 r555: [190..191]
 r556: [183..185]
 r557: [183..184]
 r558: [172..173]
 r559: [204..205]
 r560: [165..166]
 r561: [97..98]
 r564: [74..75]
 r566: [50..51]
 r567: [46..47]
 r568: [42..43]
 r570: [59..60]
 r571: [55..56]
 r572: [37..38]
 r573: [21..22]
 r574: [4..5]
 r575: [225..228]
 r576: [221..222]
 r577: [218..219]
 r578: [809..815]
 r579: [811..816]
 r580: [745..752]
 r581: [718..723]
 r582: [720..724]
 r583: [634..637]
 r584: [640..643]
 r585: [650..657]
 r586: [613..617]
 r587: [622..626]
 r588: [627..629]
 r589: [587..604]
 r590: [553..563]
 r591: [510..515]
 r592: [516..519]
 r593: [520..522]
 r595: [484..489]
 r596: [442..449]
 r598: [414..423]
 r600: [337..339]
 r601: [269..271]
 r602: [272..274]
 r603: [287..295]
 r605: [298..302]
 r606: [186..192]
 r607: [203..207]
 r608: [111..113]
 r609: [76..78]
 r610: [347..351]
 r611: [220..223]
 r612: [224..229]
 r613: [230..232]
 r614: [227..233]
 r615: [215..235]
 r616: [121..126]
 r617: [188..189]
 r618: [324..325]
 r623: [178..179]
 r624: [316..317]
 r625: [401..402]
 r626: [409..410]
 r627: [418..419]
 r628: [426..427]
 r629: [458..461]
 r632: [561..562]
 r633: [571..572]
 r634: [576..577]
 r635: [579..580]
 r637: [592..593]
 r638: [600..601]
 r639: [598..599]
 r640: [607..608]
 r641: [672..673]
 r642: [684..685]
 r643: [767..768]
 r644: [779..780]
 r645: [781..785]
 r646: [686..690]
 r647: [573..575]
 r648: [578..581]
 r651: [594..602]
 r652: [603..609]
 r659: [467..469]
 r660: [403..411]
 r662: [412..420]
 r663: [421..425]
 r666: [79..80]
Compressing live ranges: from 826 to 545 - 65%
Ranges after the compression:
 r83: [45..281] [38..39]
 r84: [477..478]
 r85: [479..480]
 r87: [413..478] [405..408]
 r94: [393..394]
 r101: [359..360]
 r104: [319..322] [316..317]
 r106: [314..326] [276..283]
 r112: [231..244] [164..222] [95..153] [79..86]
 r113: [177..240]
 r117: [162..174] [146..151] [140..141]
 r120: [195..203]
 r123: [57..281] [49..54]
 r125: [344..345]
 r129: [12..17]
 r132: [10..13]
 r135: [312..317]
 r136: [308..318] [265..305] [191..260] [49..188]
 r149: [543..544]
 r150: [529..530]
 r151: [537..544] [521..526]
 r158: [501..502]
 r159: [519..522] [483..494]
 r160: [497..498]
 r165: [100..100] [93..96]
 r166: [461..462]
 r167: [471..478] [453..458]
 r174: [433..434]
 r175: [451..454] [415..426]
 r176: [429..430]
 r181: [99..99] [91..96] [83..84] [70..80] [59..67]
 r186: [160..166] [148..149] [132..133] [97..98]
 r187: [167..170] [158..165]
 r189: [274..281]
 r203: [227..233] [219..220] [208..216] [193..205]
 r209: [127..145] [104..122]
 r212: [106..120]
 r229: [61..65]
 r252: [342..345] [18..23]
 r254: [81..82] [75..76]
 r258: [217..218] [213..214]
 r261: [541..542]
 r262: [527..528]
 r263: [509..514]
 r264: [509..510]
 r265: [503..508]
 r266: [503..504]
 r267: [505..506]
 r268: [495..496]
 r269: [485..490]
 r270: [485..486]
 r271: [481..484]
 r272: [479..482]
 r274: [475..476]
 r275: [459..460]
 r276: [441..446]
 r277: [441..442]
 r278: [435..440]
 r279: [435..436]
 r280: [437..438]
 r281: [427..428]
 r283: [417..422]
 r284: [417..418]
 r285: [413..416]
 r286: [411..414]
 r291: [385..386]
 r293: [373..378]
 r298: [371..374]
 r301: [367..370]
 r305: [357..358]
 r307: [350..353]
 r312: [348..351]
 r315: [346..347]
 r317: [333..336]
 r318: [337..338]
 r320: [331..332]
 r328: [300..305]
 r329: [300..301]
 r330: [296..299]
 r332: [290..291]
 r334: [286..289]
 r340: [253..260]
 r342: [253..254]
 r344: [247..252]
 r345: [245..248]
 r347: [245..246]
 r356: [193..194]
 r363: [181..188]
 r364: [181..182]
 r365: [177..180]
 r366: [175..178]
 r374: [104..105]
 r386: [59..60]
 r397: [34..35]
 r403: [20..21]
 r404: [22..23]
 r406: [18..19]
 r409: [14..15]
 r412: [12..13]
 r414: [6..7]
 r417: [2..3]
 r420: [0..1]
 r421: [215..216]
 r422: [134..135]
 r424: [77..78]
 r427: [185..238]
 r428: [193..234]
 r429: [539..540] [489..524]
 r430: [539..539] [493..522]
 r431: [473..474] [421..456]
 r432: [473..473] [425..454]
 r433: [72..74] [66..69]
 r434: [73..73] [61..67]
 r435: [129..131] [121..124]
 r436: [130..130] [108..122]
 r437: [210..212] [204..207]
 r438: [211..211] [195..205]
 r439: [308..309]
 r441: [199..200]
 r443: [112..115]
 r445: [63..64]
 r448: [167..172] [148..165] [97..98]
 r449: [340..404]
 r450: [272..277]
 r451: [333..334] [282..328] [45..47] [40..40] [28..29]
 r456: [25..345]
 r457: [346..360]
 r458: [361..400]
 r460: [405..478]
 r461: [527..538]
 r462: [8..11] [0..5]
 r463: [0..9]
 r464: [338..343] [25..25]
 r465: [333..341] [45..46] [40..42] [24..31]
 r466: [333..339] [45..46] [40..42] [25..31]
 r467: [247..275] [49..49]
 r468: [234..273] [229..232]
 r469: [237..271] [49..50]
 r470: [48..58]
 r471: [87..94]
 r472: [87..92]
 r473: [85..90]
 r474: [154..163]
 r475: [152..161]
 r476: [150..159]
 r477: [154..157]
 r478: [223..230]
 r479: [223..228]
 r480: [221..226]
 r481: [284..315]
 r482: [284..313]
 r483: [296..311] [284..293]
 r484: [346..358]
 r485: [389..392] [369..378] [361..364]
 r486: [361..390]
 r487: [405..408]
 r488: [439..452] [427..430]
 r489: [449..450] [427..430]
 r490: [465..470] [459..462]
 r491: [457..468]
 r492: [455..466]
 r493: [507..520] [495..498]
 r494: [517..518] [495..498]
 r495: [527..536]
 r496: [525..534]
 r497: [523..532]
 r498: [504..505]
 r499: [436..437]
 r500: [384..385]
 r501: [356..357]
 r502: [323..324]
 r505: [515..516]
 r506: [491..492]
 r507: [487..488]
 r508: [483..484]
 r509: [465..466]
 r510: [463..464]
 r511: [447..448]
 r512: [423..424]
 r513: [419..420]
 r514: [415..416]
 r515: [411..412]
 r516: [409..410]
 r517: [405..406]
 r518: [401..402]
 r519: [395..396]
 r520: [397..398]
 r521: [375..378]
 r522: [371..372]
 r523: [352..353]
 r524: [348..349]
 r526: [337..339]
 r527: [335..336]
 r528: [329..330]
 r529: [323..326]
 r530: [319..320]
 r531: [310..311]
 r532: [306..307]
 r533: [302..303]
 r534: [298..299]
 r535: [292..295]
 r536: [284..285]
 r537: [282..283]
 r538: [278..279]
 r539: [269..270]
 r540: [261..264]
 r541: [255..258]
 r542: [249..252]
 r543: [243..244]
 r544: [241..242]
 r545: [239..240]
 r546: [235..236]
 r547: [199..200]
 r548: [189..192]
 r549: [183..186]
 r550: [183..184]
 r551: [179..180]
 r552: [175..176]
 r553: [173..174]
 r554: [167..168]
 r555: [118..119]
 r556: [112..113]
 r557: [112..113]
 r558: [106..107]
 r559: [125..126]
 r560: [102..103]
 r561: [63..64]
 r564: [51..52]
 r566: [36..37]
 r567: [32..33]
 r568: [30..31]
 r570: [43..44]
 r571: [41..42]
 r572: [26..27]
 r573: [16..17]
 r574: [4..5]
 r575: [140..143]
 r576: [138..139]
 r577: [136..137]
 r578: [533..538]
 r579: [535..538]
 r580: [483..488]
 r581: [467..472]
 r582: [469..472]
 r583: [407..408]
 r584: [411..412]
 r585: [415..420]
 r586: [391..394]
 r587: [399..402]
 r588: [403..404]
 r589: [373..384]
 r590: [350..356]
 r591: [321..324]
 r592: [325..326]
 r593: [327..328]
 r595: [304..307]
 r596: [280..283]
 r598: [259..264]
 r600: [208..209]
 r601: [169..170]
 r602: [171..172]
 r603: [179..184]
 r605: [187..190]
 r606: [114..119]
 r607: [125..128]
 r608: [70..71]
 r609: [53..54]
 r610: [215..216]
 r611: [138..139]
 r612: [140..143]
 r613: [144..145]
 r614: [142..145]
 r615: [134..147]
 r616: [77..80]
 r617: [116..117]
 r618: [201..202]
 r623: [110..111]
 r624: [197..198]
 r625: [249..250]
 r626: [255..256]
 r627: [261..262]
 r628: [267..268]
 r629: [288..289]
 r632: [354..355]
 r633: [361..362]
 r634: [365..366]
 r635: [367..368]
 r637: [375..376]
 r638: [381..382]
 r639: [379..380]
 r640: [387..388]
 r641: [431..432]
 r642: [443..444]
 r643: [499..500]
 r644: [511..512]
 r645: [513..516]
 r646: [445..448]
 r647: [363..364]
 r648: [367..368]
 r651: [377..382]
 r652: [383..388]
 r659: [294..295]
 r660: [251..256]
 r662: [257..262]
 r663: [263..266]
 r666: [55..56]

********** Pseudos coalescing #2: **********


********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1285:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1176:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1088:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1085:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 581:  (0) r  (1) rm {*cmpsi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=2,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=3,overall=8,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=17,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=5,overall=14,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=7,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=8,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=10,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=12: Bad operand -- refuse
	 Choosing alt 0 in insn 574:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=667 from oldreg=468, assigning class GENERAL_REGS to r667
  574: r667:SI=[const(`s'+0x8)]
    Inserting insn reload after:
 1339: r468:SI=r667:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1339:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            alt=1,overall=15,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 567:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 564:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
          alt=1,overall=7,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) ?mr {*cmpsi_ccno_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*addsi_1}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
            alt=3,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1331:  (0) =r  (1) riFo {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1330:  (0) o  (1) riF {*movdi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1324:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1321:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1320:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1319:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #5: **********

  BB 130
   Insn 777: point = 0
   Insn 776: point = 0
  BB 111
   Insn 1034: point = 0
  BB 110
   Insn 656: point = 0
   Insn 655: point = 0
   Insn 654: point = 1
   Insn 1230: point = 3
	Hard reg 0 is preferable by r574 with profit 9
   Insn 653: point = 5
   Insn 1229: point = 5
   Insn 649: point = 6
   Insn 647: point = 7
   Insn 646: point = 7
   Insn 645: point = 7
   Insn 644: point = 7
   Insn 643: point = 8
  BB 134
   Insn 1107: point = 11
   Insn 1106: point = 13
  BB 109
   Insn 635: point = 16
   Insn 634: point = 16
   Insn 42: point = 17
   Insn 633: point = 18
   Insn 1228: point = 20
	Hard reg 0 is preferable by r573 with profit 1
   Insn 632: point = 22
   Insn 1227: point = 22
   Insn 629: point = 23
   Insn 627: point = 24
   Insn 626: point = 24
   Insn 625: point = 24
   Insn 624: point = 25
   Insn 623: point = 26
   Insn 622: point = 28
   Insn 621: point = 30
  BB 21
   Insn 993: point = 32
   Insn 216: point = 32
  BB 126
   Insn 1052: point = 33
   Insn 758: point = 33
  BB 133
   Insn 1105: point = 33
  BB 108
   Insn 616: point = 36
   Insn 615: point = 36
   Insn 612: point = 36
   Insn 1226: point = 36
	Hard reg 3 is preferable by r572 with profit 9
   Insn 611: point = 38
   Insn 1225: point = 38
  BB 105
   Insn 1030: point = 41
   Insn 1221: point = 41
   Insn 902: point = 43
   Insn 901: point = 44
   Insn 594: point = 45
   Insn 593: point = 46
   Insn 592: point = 46
   Insn 591: point = 46
   Insn 590: point = 46
   Insn 1220: point = 47
   Insn 588: point = 48
   Insn 587: point = 49
   Insn 584: point = 50
   Insn 1219: point = 51
  BB 107
   Insn 1224: point = 54
   Insn 905: point = 56
   Insn 904: point = 57
   Insn 607: point = 58
   Insn 606: point = 59
   Insn 605: point = 59
   Insn 604: point = 59
   Insn 603: point = 59
   Insn 1223: point = 60
  BB 106
   Insn 600: point = 62
   Insn 599: point = 62
   Insn 903: point = 63
  BB 104
   Insn 582: point = 65
   Insn 581: point = 65
   Insn 580: point = 65
  BB 103
   Insn 1114: point = 67
   Insn 41: point = 67
  BB 132
   Insn 1104: point = 69
  BB 101
   Insn 571: point = 72
   Insn 570: point = 72
   Insn 569: point = 72
   Insn 568: point = 73
   Insn 1217: point = 75
	   Creating copy r564<-r609@27
   Insn 1268: point = 77
   Insn 1216: point = 78
	   Creating copy r609<-r666@27
   Insn 1285: point = 80
   Insn 567: point = 82
   Insn 566: point = 82
  BB 129
   Insn 1057: point = 84
  BB 100
   Insn 564: point = 85
   Insn 563: point = 85
  BB 98
   Insn 1026: point = 87
   Insn 553: point = 87
   Insn 545: point = 87
   Insn 544: point = 87
   Insn 543: point = 88
   Insn 542: point = 90
   Insn 541: point = 90
   Insn 540: point = 91
  BB 96
   Insn 1024: point = 92
   Insn 536: point = 92
  BB 95
   Insn 534: point = 94
   Insn 533: point = 94
  BB 94
   Insn 532: point = 96
  BB 93
   Insn 530: point = 97
   Insn 529: point = 97
   Insn 1212: point = 98
   Insn 869: point = 99
   Insn 527: point = 100
  BB 97
   Insn 39: point = 102
  BB 92
   Insn 525: point = 104
   Insn 524: point = 104
  BB 91
   Insn 521: point = 105
   Insn 520: point = 105
  BB 90
   Insn 1022: point = 107
  BB 99
   Insn 40: point = 108
   Insn 1267: point = 110
	Hard reg 0 is preferable by r608 with profit 1
   Insn 558: point = 112
   Insn 557: point = 112
   Insn 1266: point = 113
	Hard reg 0 is preferable by r608 with profit 2
  BB 121
   Insn 1046: point = 116
  BB 120
   Insn 743: point = 117
   Insn 742: point = 117
   Insn 876: point = 117
   Insn 875: point = 118
   Insn 737: point = 119
   Insn 736: point = 119
   Insn 735: point = 119
   Insn 734: point = 119
   Insn 1279: point = 120
	Hard reg 1 is preferable by r616 with profit 4
   Insn 733: point = 122
   Insn 732: point = 123
   Insn 731: point = 124
   Insn 730: point = 124
   Insn 729: point = 125
   Insn 728: point = 126
   Insn 727: point = 126
   Insn 1278: point = 126
	Hard reg 1 is preferable by r616 with profit 8
   Insn 726: point = 128
  BB 89
   Insn 512: point = 131
   Insn 511: point = 131
  BB 88
   Insn 510: point = 132
  BB 87
   Insn 508: point = 133
   Insn 507: point = 133
  BB 86
   Insn 505: point = 134
   Insn 504: point = 134
   Insn 1103: point = 134
   Insn 1102: point = 136
  BB 85
   Insn 502: point = 139
   Insn 501: point = 139
  BB 83
   Insn 1019: point = 140
   Insn 37: point = 140
   Insn 36: point = 140
  BB 84
   Insn 497: point = 142
  BB 82
   Insn 489: point = 143
   Insn 488: point = 143
  BB 81
   Insn 487: point = 144
  BB 80
   Insn 485: point = 145
   Insn 484: point = 145
  BB 79
   Insn 1101: point = 146
   Insn 1100: point = 148
   Insn 1099: point = 150
   Insn 888: point = 152
  BB 127
   Insn 1054: point = 154
   Insn 891: point = 154
  BB 128
   Insn 771: point = 157
   Insn 770: point = 157
  BB 67
   Insn 1010: point = 159
  BB 119
   Insn 885: point = 160
  BB 118
   Insn 715: point = 162
   Insn 714: point = 162
   Insn 712: point = 162
  BB 78
   Insn 1017: point = 164
  BB 77
   Insn 478: point = 165
   Insn 477: point = 165
   Insn 1211: point = 166
  BB 75
   Insn 1014: point = 169
   Insn 469: point = 169
   Insn 461: point = 169
   Insn 460: point = 169
   Insn 459: point = 170
   Insn 458: point = 172
   Insn 1209: point = 173
   Insn 457: point = 174
   Insn 456: point = 175
  BB 73
   Insn 1012: point = 176
   Insn 452: point = 176
  BB 72
   Insn 450: point = 178
   Insn 449: point = 178
   Insn 1288: point = 179
  BB 71
   Insn 448: point = 182
  BB 70
   Insn 446: point = 183
   Insn 445: point = 183
   Insn 1208: point = 184
   Insn 1207: point = 185
	   Creating copy r556<-r606@1
   Insn 1280: point = 187
   Insn 867: point = 189
   Insn 1206: point = 191
	   Creating copy r555<-r606@1
   Insn 1263: point = 192
   Insn 443: point = 193
  BB 74
   Insn 33: point = 195
  BB 69
   Insn 441: point = 197
   Insn 440: point = 197
  BB 68
   Insn 437: point = 198
   Insn 436: point = 198
  BB 76
   Insn 34: point = 200
   Insn 1265: point = 202
	Hard reg 0 is preferable by r607 with profit 1
   Insn 474: point = 204
   Insn 473: point = 204
   Insn 1210: point = 205
   Insn 1264: point = 207
	Hard reg 0 is preferable by r607 with profit 2
  BB 117
   Insn 1042: point = 210
  BB 116
   Insn 704: point = 211
   Insn 703: point = 211
   Insn 874: point = 211
   Insn 873: point = 212
   Insn 698: point = 213
   Insn 697: point = 213
   Insn 696: point = 213
   Insn 695: point = 213
   Insn 1277: point = 214
	Hard reg 1 is preferable by r615 with profit 4
   Insn 694: point = 216
   Insn 693: point = 217
   Insn 1233: point = 219
	   Creating copy r577<-r611@4
   Insn 692: point = 221
   Insn 1232: point = 222
	   Creating copy r576<-r611@4
   Insn 1271: point = 223
	   Creating copy r611<-r612@4
   Insn 691: point = 225
   Insn 1275: point = 226
	Hard reg 2 is preferable by r614 with profit 4
   Insn 1231: point = 228
	   Creating copy r575<-r612@4
   Insn 1272: point = 229
	   Creating copy r612<-r613@4
   Insn 1273: point = 231
   Insn 690: point = 232
	Hard reg 0 is preferable by r613 with profit 4
   Insn 689: point = 233
   Insn 688: point = 233
   Insn 1274: point = 233
	Hard reg 2 is preferable by r614 with profit 8
   Insn 1276: point = 235
	Hard reg 1 is preferable by r615 with profit 8
  BB 66
   Insn 428: point = 238
   Insn 427: point = 238
  BB 65
   Insn 426: point = 239
  BB 64
   Insn 424: point = 240
   Insn 423: point = 240
  BB 63
   Insn 421: point = 241
   Insn 420: point = 241
   Insn 1098: point = 241
   Insn 1097: point = 243
   Insn 1096: point = 245
  BB 62
   Insn 418: point = 248
   Insn 417: point = 248
  BB 60
   Insn 1007: point = 249
   Insn 31: point = 249
   Insn 30: point = 249
  BB 61
   Insn 413: point = 251
  BB 59
   Insn 405: point = 252
   Insn 404: point = 252
  BB 58
   Insn 403: point = 253
  BB 57
   Insn 401: point = 254
   Insn 400: point = 254
  BB 56
   Insn 1095: point = 255
   Insn 1094: point = 257
   Insn 1093: point = 259
   Insn 1092: point = 261
   Insn 889: point = 263
  BB 115
   Insn 886: point = 265
  BB 55
   Insn 397: point = 267
   Insn 396: point = 267
   Insn 1205: point = 268
	   Creating copy r554<-r601@7
   Insn 906: point = 270
   Insn 1258: point = 271
	   Creating copy r601<-r602@7
   Insn 1259: point = 273
   Insn 1204: point = 274
	   Creating copy r553->r602@7
   Insn 395: point = 276
   Insn 1203: point = 277
	Hard reg 2 is preferable by r552 with profit 7
   Insn 393: point = 279
   Insn 1202: point = 280
   Insn 391: point = 282
   Insn 1201: point = 283
	Hard reg 0 is preferable by r551 with profit 7
   Insn 389: point = 285
   Insn 1200: point = 287
   Insn 1199: point = 288
   Insn 388: point = 289
   Insn 1197: point = 291
	Hard reg 0 is preferable by r549 with profit 7
   Insn 387: point = 293
   Insn 1198: point = 294
	   Creating copy r550<-r603@7
   Insn 1260: point = 295
   Insn 1196: point = 297
   Insn 1261: point = 299
   Insn 1195: point = 300
	Hard reg 2 is preferable by r548 with profit 7
   Insn 386: point = 302
   Insn 1262: point = 302
   Insn 1194: point = 304
  BB 54
   Insn 384: point = 307
   Insn 383: point = 307
  BB 52
   Insn 1005: point = 309
   Insn 373: point = 309
   Insn 365: point = 309
   Insn 364: point = 309
   Insn 363: point = 310
   Insn 362: point = 312
   Insn 361: point = 312
   Insn 360: point = 313
  BB 50
   Insn 1003: point = 314
   Insn 356: point = 314
  BB 49
   Insn 354: point = 316
   Insn 353: point = 316
   Insn 1289: point = 317
  BB 48
   Insn 352: point = 320
  BB 47
   Insn 350: point = 321
   Insn 349: point = 321
   Insn 1193: point = 322
   Insn 1281: point = 323
   Insn 865: point = 325
   Insn 347: point = 326
  BB 51
   Insn 27: point = 328
  BB 46
   Insn 345: point = 330
   Insn 344: point = 330
  BB 45
   Insn 341: point = 331
   Insn 340: point = 331
  BB 44
   Insn 1001: point = 333
  BB 53
   Insn 28: point = 334
   Insn 1257: point = 336
	Hard reg 0 is preferable by r600 with profit 2
   Insn 378: point = 338
   Insn 377: point = 338
   Insn 1256: point = 339
	Hard reg 0 is preferable by r600 with profit 4
  BB 114
   Insn 1038: point = 342
  BB 113
   Insn 680: point = 343
   Insn 679: point = 343
   Insn 872: point = 343
   Insn 871: point = 344
   Insn 674: point = 345
   Insn 673: point = 345
   Insn 672: point = 345
   Insn 671: point = 345
   Insn 1270: point = 346
	Hard reg 1 is preferable by r610 with profit 15
   Insn 670: point = 348
   Insn 669: point = 349
   Insn 668: point = 350
   Insn 667: point = 350
   Insn 666: point = 350
   Insn 665: point = 351
   Insn 664: point = 351
   Insn 1269: point = 351
	Hard reg 1 is preferable by r610 with profit 30
   Insn 663: point = 353
  BB 43
   Insn 332: point = 356
   Insn 331: point = 356
  BB 42
   Insn 330: point = 357
  BB 41
   Insn 328: point = 358
   Insn 327: point = 358
  BB 40
   Insn 325: point = 359
   Insn 324: point = 359
   Insn 1091: point = 359
   Insn 1090: point = 361
  BB 39
   Insn 322: point = 364
   Insn 321: point = 364
  BB 37
   Insn 998: point = 365
   Insn 25: point = 365
   Insn 24: point = 365
  BB 38
   Insn 317: point = 367
  BB 36
   Insn 309: point = 368
   Insn 308: point = 368
  BB 35
   Insn 307: point = 369
  BB 34
   Insn 305: point = 370
   Insn 304: point = 370
  BB 33
   Insn 1089: point = 371
   Insn 1088: point = 373
   Insn 1087: point = 375
   Insn 890: point = 377
  BB 112
   Insn 887: point = 379
  BB 32
   Insn 301: point = 381
   Insn 300: point = 381
   Insn 1192: point = 381
   Insn 864: point = 383
   Insn 1191: point = 385
   Insn 863: point = 387
   Insn 1190: point = 388
   Insn 296: point = 390
   Insn 1189: point = 392
   Insn 294: point = 393
   Insn 293: point = 395
   Insn 291: point = 397
   Insn 1188: point = 398
	Hard reg 0 is preferable by r542 with profit 27
   Insn 289: point = 400
   Insn 1290: point = 402
	   Creating copy r625<-r660@27
   Insn 1187: point = 404
   Insn 1186: point = 404
   Insn 288: point = 405
   Insn 1185: point = 407
	Hard reg 1 is preferable by r541 with profit 27
   Insn 287: point = 409
   Insn 1291: point = 410
	   Creating copy r626<-r660@27
   Insn 1332: point = 411
	   Creating copy r660<-r662@27
   Insn 1184: point = 413
   Insn 1253: point = 415
   Insn 1183: point = 416
	Hard reg 4 is preferable by r540 with profit 27
   Insn 285: point = 418
   Insn 1292: point = 419
	   Creating copy r627<-r662@27
   Insn 1334: point = 420
	   Creating copy r662<-r663@27
   Insn 1182: point = 422
   Insn 1254: point = 423
   Insn 1293: point = 425
	   Creating copy r628->r663@27
   Insn 283: point = 427
   Insn 1181: point = 429
  BB 102
   Insn 1028: point = 431
   Insn 1339: point = 431
   Insn 574: point = 433
  BB 31
   Insn 1086: point = 435
   Insn 1085: point = 437
   Insn 1084: point = 439
   Insn 899: point = 441
   Insn 1180: point = 443
	   Creating copy r538<-r596@2
   Insn 22: point = 445
   Insn 21: point = 446
   Insn 20: point = 447
  BB 30
   Insn 278: point = 449
   Insn 277: point = 449
   Insn 1179: point = 450
	   Creating copy r537<-r596@2
   Insn 1252: point = 451
  BB 28
   Insn 996: point = 453
   Insn 1083: point = 453
  BB 27
   Insn 274: point = 456
   Insn 273: point = 456
   Insn 1178: point = 457
   Insn 270: point = 458
   Insn 268: point = 458
   Insn 1296: point = 459
   Insn 266: point = 461
   Insn 1295: point = 463
   Insn 1294: point = 463
   Insn 265: point = 464
   Insn 1177: point = 466
	Hard reg 4 is preferable by r535 with profit 27
   Insn 263: point = 468
   Insn 1330: point = 468
   Insn 1176: point = 470
   Insn 1331: point = 471
  BB 26
   Insn 259: point = 474
   Insn 1175: point = 475
   Insn 257: point = 477
   Insn 1174: point = 479
   Insn 1173: point = 480
   Insn 256: point = 481
   Insn 1172: point = 483
	Hard reg 4 is preferable by r533 with profit 13
   Insn 255: point = 485
   Insn 1171: point = 485
   Insn 1250: point = 487
   Insn 1170: point = 488
	Hard reg 5 is preferable by r532 with profit 13
   Insn 254: point = 490
   Insn 1169: point = 490
   Insn 1251: point = 491
  BB 25
   Insn 252: point = 494
   Insn 251: point = 494
   Insn 1168: point = 495
	Hard reg 4 is preferable by r531 with profit 27
   Insn 248: point = 497
   Insn 1167: point = 497
  BB 24
   Insn 1082: point = 499
   Insn 1081: point = 501
   Insn 1080: point = 503
   Insn 17: point = 505
   Insn 16: point = 506
  BB 29
   Insn 18: point = 508
  BB 23
   Insn 245: point = 510
   Insn 244: point = 510
   Insn 1166: point = 511
	   Creating copy r530<-r591@2
   Insn 1165: point = 513
	Hard reg 3 is preferable by r529 with profit 2
   Insn 242: point = 515
   Insn 1164: point = 517
   Insn 1247: point = 517
	   Creating copy r591<-r592@2
   Insn 1163: point = 519
   Insn 911: point = 520
   Insn 1248: point = 521
	   Creating copy r592<-r593@2
   Insn 1249: point = 523
   Insn 1162: point = 524
	   Creating copy r528->r593@2
   Insn 241: point = 526
   Insn 240: point = 527
   Insn 238: point = 527
   Insn 236: point = 527
   Insn 234: point = 527
   Insn 232: point = 527
   Insn 231: point = 527
   Insn 230: point = 527
   Insn 229: point = 527
   Insn 228: point = 528
  BB 22
   Insn 225: point = 530
   Insn 224: point = 530
   Insn 1161: point = 531
   Insn 895: point = 533
   Insn 1160: point = 534
	Hard reg 0 is preferable by r526 with profit 9
   Insn 223: point = 536
   Insn 1159: point = 538
  BB 131
   Insn 1079: point = 540
   Insn 1078: point = 542
   Insn 1077: point = 544
  BB 20
   Insn 214: point = 547
   Insn 213: point = 547
   Insn 15: point = 547
   Insn 221: point = 548
   Insn 212: point = 549
  BB 19
   Insn 209: point = 550
   Insn 208: point = 550
   Insn 206: point = 550
   Insn 205: point = 550
   Insn 1157: point = 551
	Hard reg 0 is preferable by r524 with profit 90
   Insn 204: point = 553
   Insn 1156: point = 554
	   Creating copy r524<-r590@90
   Insn 202: point = 556
   Insn 1155: point = 557
	Hard reg 1 is preferable by r523 with profit 90
   Insn 200: point = 559
   Insn 1154: point = 561
   Insn 1153: point = 561
   Insn 1299: point = 562
   Insn 195: point = 564
   Insn 192: point = 565
   Insn 191: point = 567
  BB 18
   Insn 1076: point = 569
   Insn 13: point = 571
  BB 17
   Insn 186: point = 573
   Insn 185: point = 573
   Insn 1300: point = 574
	   Creating copy r633<-r647@90
   Insn 1319: point = 576
   Insn 1302: point = 577
	   Creating copy r634->r647@90
   Insn 183: point = 579
   Insn 1301: point = 579
	   Creating copy r634<-r648@90
   Insn 182: point = 581
   Insn 1303: point = 582
	   Creating copy r635<-r648@90
   Insn 1320: point = 583
   Insn 1152: point = 585
	Hard reg 0 is preferable by r522 with profit 90
   Insn 181: point = 587
   Insn 1151: point = 588
	   Creating copy r522<-r589@90
   Insn 179: point = 590
   Insn 1150: point = 591
	Hard reg 1 is preferable by r521 with profit 90
   Insn 177: point = 593
   Insn 1305: point = 595
	   Creating copy r637<-r651@90
   Insn 1321: point = 597
   Insn 1149: point = 598
   Insn 1148: point = 598
   Insn 1307: point = 599
   Insn 172: point = 601
   Insn 1306: point = 603
	   Creating copy r638<-r651@90
   Insn 1323: point = 604
	   Creating copy r651<-r652@90
   Insn 169: point = 606
   Insn 168: point = 608
   Insn 1308: point = 610
	   Creating copy r640<-r652@90
   Insn 1324: point = 611
  BB 16
   Insn 1075: point = 614
	Hard reg 3 is preferable by r586 with profit 1
   Insn 1074: point = 616
   Insn 12: point = 618
   Insn 1146: point = 619
	   Creating copy r519->r586@1
   Insn 163: point = 621
   Insn 1147: point = 623
	   Creating copy r520<-r587@1
  BB 15
   Insn 161: point = 626
   Insn 160: point = 626
   Insn 1145: point = 627
	   Creating copy r518<-r587@1
   Insn 1243: point = 628
	   Creating copy r587<-r588@1
   Insn 1244: point = 630
   Insn 1073: point = 631
	Hard reg 0 is preferable by r588 with profit 1
  BB 14
   Insn 158: point = 634
   Insn 157: point = 634
   Insn 1144: point = 635
	   Creating copy r517<-r583@81
   Insn 155: point = 637
   Insn 1239: point = 638
   Insn 1143: point = 639
	   Creating copy r516->r583@81
   Insn 154: point = 641
   Insn 1142: point = 641
	   Creating copy r516<-r584@81
   Insn 153: point = 643
   Insn 1141: point = 644
	   Creating copy r515<-r584@81
   Insn 1240: point = 645
   Insn 151: point = 647
   Insn 1140: point = 648
	Hard reg 0 is preferable by r514 with profit 81
   Insn 149: point = 650
   Insn 1139: point = 652
   Insn 1138: point = 653
   Insn 148: point = 654
   Insn 1137: point = 656
	Hard reg 0 is preferable by r513 with profit 81
   Insn 147: point = 658
   Insn 1136: point = 658
	   Creating copy r513<-r585@81
   Insn 1241: point = 659
	Hard reg 3 is preferable by r585 with profit 81
   Insn 1135: point = 661
	Hard reg 2 is preferable by r512 with profit 81
   Insn 146: point = 663
   Insn 1134: point = 663
   Insn 1072: point = 665
  BB 13
   Insn 143: point = 668
   Insn 142: point = 668
   Insn 141: point = 669
   Insn 139: point = 671
   Insn 138: point = 672
   Insn 137: point = 673
   Insn 1310: point = 673
	Hard reg 4 is preferable by r641 with profit 910
   Insn 136: point = 675
   Insn 1309: point = 675
	Hard reg 4 is preferable by r641 with profit 1820
   Insn 135: point = 677
   Insn 134: point = 679
   Insn 133: point = 681
   Insn 131: point = 683
   Insn 1312: point = 685
	Hard reg 4 is preferable by r642 with profit 910
   Insn 130: point = 687
   Insn 1311: point = 687
	   Creating copy r642<-r646@910
   Insn 1133: point = 689
	Hard reg 0 is preferable by r511 with profit 910
   Insn 129: point = 691
   Insn 1132: point = 691
	   Creating copy r511<-r646@910
   Insn 1318: point = 692
	Hard reg 4 is preferable by r646 with profit 910
  BB 125
   Insn 1050: point = 695
   Insn 1111: point = 695
   Insn 1110: point = 697
   Insn 10: point = 699
  BB 12
   Insn 991: point = 701
   Insn 1071: point = 701
   Insn 1070: point = 703
   Insn 1069: point = 705
  BB 11
   Insn 124: point = 708
   Insn 123: point = 708
   Insn 122: point = 709
   Insn 120: point = 711
   Insn 119: point = 712
   Insn 118: point = 713
   Insn 937: point = 713
   Insn 1131: point = 714
   Insn 935: point = 715
   Insn 934: point = 716
   Insn 1130: point = 717
   Insn 932: point = 718
  BB 10
   Insn 1068: point = 719
	Hard reg 4 is preferable by r581 with profit 81
   Insn 1067: point = 721
	Hard reg 3 is preferable by r582 with profit 81
   Insn 1066: point = 723
   Insn 860: point = 725
   Insn 859: point = 726
  BB 124
   Insn 880: point = 728
   Insn 879: point = 729
  BB 9
   Insn 110: point = 731
   Insn 109: point = 731
   Insn 108: point = 732
   Insn 107: point = 734
   Insn 106: point = 735
   Insn 105: point = 736
  BB 8
   Insn 7: point = 737
  BB 7
   Insn 103: point = 739
   Insn 102: point = 739
   Insn 101: point = 740
   Insn 100: point = 741
   Insn 98: point = 742
   Insn 1129: point = 743
	Hard reg 3 is preferable by r508 with profit 1
   Insn 96: point = 745
   Insn 1128: point = 747
   Insn 1127: point = 748
   Insn 95: point = 749
   Insn 1126: point = 751
	Hard reg 0 is preferable by r507 with profit 1
   Insn 94: point = 753
   Insn 1125: point = 753
	   Creating copy r507<-r580@1
   Insn 1236: point = 754
	Hard reg 3 is preferable by r580 with profit 1
   Insn 1124: point = 756
	Hard reg 2 is preferable by r506 with profit 1
   Insn 93: point = 758
   Insn 1123: point = 758
   Insn 1065: point = 760
  BB 6
   Insn 91: point = 763
   Insn 90: point = 763
   Insn 89: point = 764
   Insn 87: point = 766
   Insn 86: point = 767
   Insn 85: point = 768
   Insn 1314: point = 768
	Hard reg 4 is preferable by r643 with profit 9
   Insn 84: point = 770
   Insn 1313: point = 770
	Hard reg 4 is preferable by r643 with profit 18
   Insn 83: point = 772
   Insn 82: point = 774
   Insn 81: point = 776
   Insn 79: point = 778
   Insn 1316: point = 780
	Hard reg 4 is preferable by r644 with profit 9
   Insn 78: point = 782
   Insn 1315: point = 782
	   Creating copy r644<-r645@9
   Insn 1122: point = 784
	Hard reg 0 is preferable by r505 with profit 9
   Insn 77: point = 786
   Insn 1121: point = 786
	   Creating copy r505<-r645@9
   Insn 1317: point = 787
	Hard reg 4 is preferable by r645 with profit 9
  BB 123
   Insn 1048: point = 790
   Insn 1109: point = 790
   Insn 1108: point = 792
   Insn 6: point = 794
  BB 5
   Insn 988: point = 796
   Insn 1064: point = 796
   Insn 1063: point = 798
   Insn 1062: point = 800
  BB 4
   Insn 72: point = 803
   Insn 71: point = 803
   Insn 70: point = 804
   Insn 68: point = 806
   Insn 67: point = 807
   Insn 66: point = 808
   Insn 931: point = 808
   Insn 929: point = 808
   Insn 928: point = 809
   Insn 926: point = 809
  BB 3
   Insn 1061: point = 810
	Hard reg 5 is preferable by r578 with profit 1
   Insn 1060: point = 812
	Hard reg 4 is preferable by r579 with profit 1
   Insn 1059: point = 814
   Insn 927: point = 816
   Insn 856: point = 817
   Insn 855: point = 818
  BB 122
   Insn 878: point = 820
   Insn 877: point = 821
  BB 2
   Insn 58: point = 823
   Insn 57: point = 823
   Insn 56: point = 824
   Insn 55: point = 826
   Insn 54: point = 827
   Insn 53: point = 828
   Insn 3: point = 828
 r83: [69..446] [62..67] [52..53]
 r84: [733..735]
 r85: [739..741]
 r87: [646..737] [634..638]
 r94: [617..618]
 r101: [570..571]
 r104: [510..513] [504..507]
 r106: [502..520] [440..453]
 r112: [376..393] [262..361] [165..245] [151..163] [124..136]
 r113: [281..388]
 r117: [260..277] [234..243] [225..226]
 r120: [328..328] [316..326] [311..314]
 r123: [81..445] [72..77]
 r125: [545..547]
 r129: [14..23]
 r132: [12..17]
 r135: [500..506]
 r136: [508..508] [492..505] [479..487] [424..475] [303..415] [72..299]
 r149: [825..827]
 r150: [805..807]
 r151: [815..826] [793..800]
 r158: [771..772]
 r159: [791..794] [746..760]
 r160: [765..767]
 r165: [162..162] [149..154]
 r166: [710..712]
 r167: [724..734] [698..705]
 r174: [676..677]
 r175: [696..699] [651..665]
 r176: [670..672]
 r181: [160..160] [147..152] [129..134] [112..125] [85..108]
 r186: [265..265] [258..263] [236..241] [213..214] [157..159]
 r187: [267..270] [256..264]
 r189: [438..447]
 r203: [379..379] [372..377] [354..359] [338..350] [307..334]
 r209: [206..231] [167..200]
 r212: [195..195] [178..193] [171..176]
 r229: [102..102] [94..100] [89..92]
 r252: [543..548] [24..33]
 r254: [127..128] [119..120]
 r258: [352..353] [345..346]
 r261: [823..824]
 r262: [803..804]
 r263: [779..784]
 r264: [779..780]
 r265: [773..778]
 r266: [773..774]
 r267: [775..776]
 r268: [763..764]
 r269: [750..756]
 r270: [750..751]
 r271: [742..749]
 r272: [740..743]
 r274: [731..732]
 r275: [708..709]
 r276: [684..689]
 r277: [684..685]
 r278: [678..683]
 r279: [678..679]
 r280: [680..681]
 r281: [668..669]
 r283: [655..661]
 r284: [655..656]
 r285: [647..654]
 r286: [643..648]
 r291: [607..608]
 r293: [590..599]
 r298: [587..591]
 r301: [581..585]
 r305: [566..567]
 r307: [556..562]
 r312: [553..557]
 r315: [550..551]
 r317: [530..534]
 r318: [536..537]
 r320: [527..528]
 r328: [482..488]
 r329: [482..483]
 r330: [474..481]
 r332: [465..466]
 r334: [458..464]
 r340: [406..416]
 r342: [406..407]
 r344: [397..405]
 r345: [394..398]
 r347: [394..395]
 r356: [309..310]
 r363: [290..300]
 r364: [290..291]
 r365: [282..289]
 r366: [279..283]
 r374: [169..170]
 r386: [87..88]
 r397: [48..49]
 r403: [27..28]
 r404: [29..30]
 r406: [25..26]
 r409: [19..20]
 r412: [16..18]
 r414: [7..8]
 r417: [2..3]
 r420: [0..1]
 r421: [348..349]
 r422: [216..217]
 r424: [122..123]
 r427: [296..385]
 r428: [305..381]
 r429: [820..821] [755..798]
 r430: [820..820] [759..796]
 r431: [728..729] [660..703]
 r432: [728..728] [664..701]
 r433: [114..118] [109..110] [105..106]
 r434: [117..117] [90..106]
 r435: [208..212] [201..202] [198..199]
 r436: [211..211] [174..199]
 r437: [340..344] [335..336] [331..332]
 r438: [343..343] [312..332]
 r439: [494..495]
 r441: [318..323]
 r443: [180..187]
 r445: [94..99]
 r448: [267..273] [238..264] [155..159]
 r449: [541..630]
 r450: [436..441]
 r451: [530..531] [449..523] [62..69] [54..54] [39..41]
 r456: [36..549]
 r457: [550..572]
 r458: [573..625]
 r460: [634..738]
 r461: [803..816]
 r462: [9..13] [0..6]
 r463: [0..11]
 r464: [537..544] [36..36]
 r465: [530..542] [62..65] [54..58] [34..45]
 r466: [530..540] [62..63] [54..57] [36..44]
 r467: [396..439] [72..72]
 r468: [435..437] [381..431] [374..378]
 r469: [384..435] [72..73]
 r470: [70..82]
 r471: [137..150]
 r472: [139..148]
 r473: [142..146] [135..140]
 r474: [246..261]
 r475: [244..259]
 r476: [251..257] [242..249]
 r477: [248..255]
 r478: [362..375]
 r479: [364..373]
 r480: [367..371] [360..365]
 r481: [456..503]
 r482: [454..501]
 r483: [472..499] [462..468] [456..459]
 r484: [550..569]
 r485: [612..616] [584..597] [573..576]
 r486: [573..614]
 r487: [632..637]
 r488: [682..697] [668..671]
 r489: [693..695] [666..673]
 r490: [715..723] [706..711]
 r491: [704..721]
 r492: [702..719]
 r493: [777..792] [763..766]
 r494: [788..790] [761..768]
 r495: [808..814] [801..806]
 r496: [799..812]
 r497: [797..810]
 r498: [774..775]
 r499: [679..680]
 r500: [606..607]
 r501: [565..566]
 r502: [515..516]
 r505: [785..786]
 r506: [757..758]
 r507: [752..753]
 r508: [744..748]
 r509: [716..717]
 r510: [713..714]
 r511: [690..691]
 r512: [662..663]
 r513: [657..658]
 r514: [649..653]
 r515: [643..644]
 r516: [640..641]
 r517: [634..635]
 r518: [626..627]
 r519: [620..621]
 r520: [622..623]
 r521: [592..598]
 r522: [586..588]
 r523: [558..561]
 r524: [552..554]
 r526: [535..538]
 r527: [532..533]
 r528: [525..526]
 r529: [514..519]
 r530: [510..511]
 r531: [496..497]
 r532: [489..490]
 r533: [484..485]
 r534: [476..480]
 r535: [467..470]
 r536: [456..457]
 r537: [449..450]
 r538: [442..443]
 r539: [428..429]
 r540: [417..422]
 r541: [408..413]
 r542: [399..404]
 r543: [391..392]
 r544: [389..390]
 r545: [386..387]
 r546: [382..383]
 r547: [321..322]
 r548: [301..304]
 r549: [292..297]
 r550: [293..294]
 r551: [284..288]
 r552: [278..280]
 r553: [275..276]
 r554: [267..268]
 r555: [190..191]
 r556: [183..185]
 r557: [183..184]
 r558: [172..173]
 r559: [204..205]
 r560: [165..166]
 r561: [97..98]
 r564: [74..75]
 r566: [50..51]
 r567: [46..47]
 r568: [42..43]
 r570: [59..60]
 r571: [55..56]
 r572: [37..38]
 r573: [21..22]
 r574: [4..5]
 r575: [225..228]
 r576: [221..222]
 r577: [218..219]
 r578: [811..817]
 r579: [813..818]
 r580: [747..754]
 r581: [720..725]
 r582: [722..726]
 r583: [636..639]
 r584: [642..645]
 r585: [652..659]
 r586: [615..619]
 r587: [624..628]
 r588: [629..631]
 r589: [589..606]
 r590: [555..565]
 r591: [512..517]
 r592: [518..521]
 r593: [522..524]
 r595: [486..491]
 r596: [444..451]
 r598: [414..423]
 r600: [337..339]
 r601: [269..271]
 r602: [272..274]
 r603: [287..295]
 r605: [298..302]
 r606: [186..192]
 r607: [203..207]
 r608: [111..113]
 r609: [76..78]
 r610: [347..351]
 r611: [220..223]
 r612: [224..229]
 r613: [230..232]
 r614: [227..233]
 r615: [215..235]
 r616: [121..126]
 r617: [188..189]
 r618: [324..325]
 r623: [178..179]
 r624: [316..317]
 r625: [401..402]
 r626: [409..410]
 r627: [418..419]
 r628: [426..427]
 r629: [460..463]
 r632: [563..564]
 r633: [573..574]
 r634: [578..579]
 r635: [581..582]
 r637: [594..595]
 r638: [602..603]
 r639: [600..601]
 r640: [609..610]
 r641: [674..675]
 r642: [686..687]
 r643: [769..770]
 r644: [781..782]
 r645: [783..787]
 r646: [688..692]
 r647: [575..577]
 r648: [580..583]
 r651: [596..604]
 r652: [605..611]
 r659: [469..471]
 r660: [403..411]
 r662: [412..420]
 r663: [421..425]
 r666: [79..80]
 r667: [432..433]
Compressing live ranges: from 828 to 547 - 66%
Ranges after the compression:
 r83: [45..283] [38..39]
 r84: [479..480]
 r85: [481..482]
 r87: [415..480] [407..410]
 r94: [395..396]
 r101: [361..362]
 r104: [321..324] [318..319]
 r106: [316..328] [278..285]
 r112: [231..244] [164..222] [95..153] [79..86]
 r113: [177..240]
 r117: [162..174] [146..151] [140..141]
 r120: [195..203]
 r123: [57..283] [49..54]
 r125: [346..347]
 r129: [12..17]
 r132: [10..13]
 r135: [314..319]
 r136: [310..320] [265..307] [191..260] [49..188]
 r149: [545..546]
 r150: [531..532]
 r151: [539..546] [523..528]
 r158: [503..504]
 r159: [521..524] [485..496]
 r160: [499..500]
 r165: [100..100] [93..96]
 r166: [463..464]
 r167: [473..480] [455..460]
 r174: [435..436]
 r175: [453..456] [417..428]
 r176: [431..432]
 r181: [99..99] [91..96] [83..84] [70..80] [59..67]
 r186: [160..166] [148..149] [132..133] [97..98]
 r187: [167..170] [158..165]
 r189: [276..283]
 r203: [227..233] [219..220] [208..216] [193..205]
 r209: [127..145] [104..122]
 r212: [106..120]
 r229: [61..65]
 r252: [344..347] [18..23]
 r254: [81..82] [75..76]
 r258: [217..218] [213..214]
 r261: [543..544]
 r262: [529..530]
 r263: [511..516]
 r264: [511..512]
 r265: [505..510]
 r266: [505..506]
 r267: [507..508]
 r268: [497..498]
 r269: [487..492]
 r270: [487..488]
 r271: [483..486]
 r272: [481..484]
 r274: [477..478]
 r275: [461..462]
 r276: [443..448]
 r277: [443..444]
 r278: [437..442]
 r279: [437..438]
 r280: [439..440]
 r281: [429..430]
 r283: [419..424]
 r284: [419..420]
 r285: [415..418]
 r286: [413..416]
 r291: [387..388]
 r293: [375..380]
 r298: [373..376]
 r301: [369..372]
 r305: [359..360]
 r307: [352..355]
 r312: [350..353]
 r315: [348..349]
 r317: [335..338]
 r318: [339..340]
 r320: [333..334]
 r328: [302..307]
 r329: [302..303]
 r330: [298..301]
 r332: [292..293]
 r334: [288..291]
 r340: [253..260]
 r342: [253..254]
 r344: [247..252]
 r345: [245..248]
 r347: [245..246]
 r356: [193..194]
 r363: [181..188]
 r364: [181..182]
 r365: [177..180]
 r366: [175..178]
 r374: [104..105]
 r386: [59..60]
 r397: [34..35]
 r403: [20..21]
 r404: [22..23]
 r406: [18..19]
 r409: [14..15]
 r412: [12..13]
 r414: [6..7]
 r417: [2..3]
 r420: [0..1]
 r421: [215..216]
 r422: [134..135]
 r424: [77..78]
 r427: [185..238]
 r428: [193..234]
 r429: [541..542] [491..526]
 r430: [541..541] [495..524]
 r431: [475..476] [423..458]
 r432: [475..475] [427..456]
 r433: [72..74] [66..69]
 r434: [73..73] [61..67]
 r435: [129..131] [121..124]
 r436: [130..130] [108..122]
 r437: [210..212] [204..207]
 r438: [211..211] [195..205]
 r439: [310..311]
 r441: [199..200]
 r443: [112..115]
 r445: [63..64]
 r448: [167..172] [148..165] [97..98]
 r449: [342..406]
 r450: [274..279]
 r451: [335..336] [284..330] [45..47] [40..40] [28..29]
 r456: [25..347]
 r457: [348..362]
 r458: [363..402]
 r460: [407..480]
 r461: [529..540]
 r462: [8..11] [0..5]
 r463: [0..9]
 r464: [340..345] [25..25]
 r465: [335..343] [45..46] [40..42] [24..31]
 r466: [335..341] [45..46] [40..42] [25..31]
 r467: [247..277] [49..49]
 r468: [273..275] [234..270] [229..232]
 r469: [237..273] [49..50]
 r470: [48..58]
 r471: [87..94]
 r472: [87..92]
 r473: [85..90]
 r474: [154..163]
 r475: [152..161]
 r476: [150..159]
 r477: [154..157]
 r478: [223..230]
 r479: [223..228]
 r480: [221..226]
 r481: [286..317]
 r482: [286..315]
 r483: [298..313] [286..295]
 r484: [348..360]
 r485: [391..394] [371..380] [363..366]
 r486: [363..392]
 r487: [407..410]
 r488: [441..454] [429..432]
 r489: [451..452] [429..432]
 r490: [467..472] [461..464]
 r491: [459..470]
 r492: [457..468]
 r493: [509..522] [497..500]
 r494: [519..520] [497..500]
 r495: [529..538]
 r496: [527..536]
 r497: [525..534]
 r498: [506..507]
 r499: [438..439]
 r500: [386..387]
 r501: [358..359]
 r502: [325..326]
 r505: [517..518]
 r506: [493..494]
 r507: [489..490]
 r508: [485..486]
 r509: [467..468]
 r510: [465..466]
 r511: [449..450]
 r512: [425..426]
 r513: [421..422]
 r514: [417..418]
 r515: [413..414]
 r516: [411..412]
 r517: [407..408]
 r518: [403..404]
 r519: [397..398]
 r520: [399..400]
 r521: [377..380]
 r522: [373..374]
 r523: [354..355]
 r524: [350..351]
 r526: [339..341]
 r527: [337..338]
 r528: [331..332]
 r529: [325..328]
 r530: [321..322]
 r531: [312..313]
 r532: [308..309]
 r533: [304..305]
 r534: [300..301]
 r535: [294..297]
 r536: [286..287]
 r537: [284..285]
 r538: [280..281]
 r539: [269..270]
 r540: [261..264]
 r541: [255..258]
 r542: [249..252]
 r543: [243..244]
 r544: [241..242]
 r545: [239..240]
 r546: [235..236]
 r547: [199..200]
 r548: [189..192]
 r549: [183..186]
 r550: [183..184]
 r551: [179..180]
 r552: [175..176]
 r553: [173..174]
 r554: [167..168]
 r555: [118..119]
 r556: [112..113]
 r557: [112..113]
 r558: [106..107]
 r559: [125..126]
 r560: [102..103]
 r561: [63..64]
 r564: [51..52]
 r566: [36..37]
 r567: [32..33]
 r568: [30..31]
 r570: [43..44]
 r571: [41..42]
 r572: [26..27]
 r573: [16..17]
 r574: [4..5]
 r575: [140..143]
 r576: [138..139]
 r577: [136..137]
 r578: [535..540]
 r579: [537..540]
 r580: [485..490]
 r581: [469..474]
 r582: [471..474]
 r583: [409..410]
 r584: [413..414]
 r585: [417..422]
 r586: [393..396]
 r587: [401..404]
 r588: [405..406]
 r589: [375..386]
 r590: [352..358]
 r591: [323..326]
 r592: [327..328]
 r593: [329..330]
 r595: [306..309]
 r596: [282..285]
 r598: [259..264]
 r600: [208..209]
 r601: [169..170]
 r602: [171..172]
 r603: [179..184]
 r605: [187..190]
 r606: [114..119]
 r607: [125..128]
 r608: [70..71]
 r609: [53..54]
 r610: [215..216]
 r611: [138..139]
 r612: [140..143]
 r613: [144..145]
 r614: [142..145]
 r615: [134..147]
 r616: [77..80]
 r617: [116..117]
 r618: [201..202]
 r623: [110..111]
 r624: [197..198]
 r625: [249..250]
 r626: [255..256]
 r627: [261..262]
 r628: [267..268]
 r629: [290..291]
 r632: [356..357]
 r633: [363..364]
 r634: [367..368]
 r635: [369..370]
 r637: [377..378]
 r638: [383..384]
 r639: [381..382]
 r640: [389..390]
 r641: [433..434]
 r642: [445..446]
 r643: [501..502]
 r644: [513..514]
 r645: [515..518]
 r646: [447..450]
 r647: [365..366]
 r648: [369..370]
 r651: [379..384]
 r652: [385..390]
 r659: [296..297]
 r660: [251..256]
 r662: [257..262]
 r663: [263..266]
 r666: [55..56]
 r667: [271..272]

********** Assignment #3: **********

	 Assigning to 667 (cl=GENERAL_REGS, orig=189, freq=48, tfirst=667, tfreq=48)...
	   Assign 0 to reload r667 (freq=48)
  Reassigning non-reload pseudos

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 8):	 485	 430	 123	 432	 307	 483
  Slot 1 regnos (width = 8):	 293	 87	 136
  Slot 2 regnos (width = 4):	 468	 608	 441	 600	 449	 616	 448	 209	 451	 610
  Slot 3 regnos (width = 8):	 113	 607	 443	 482	 614
  Slot 4 regnos (width = 4):	 427	 615
  Slot 5 regnos (width = 4):	 428
  Slot 6 regnos (width = 4):	 83
Changing spilled pseudos to memory in insn #1064
Changing spilled pseudos to memory in insn #1123
Changing spilled pseudos to memory in insn #7
Changing spilled pseudos to memory in insn #1071
Changing spilled pseudos to memory in insn #1134
Changing spilled pseudos to memory in insn #1240
Changing spilled pseudos to memory in insn #1239
Changing spilled pseudos to memory in insn #1244
Changing spilled pseudos to memory in insn #1074
Changing spilled pseudos to memory in insn #1324
Changing spilled pseudos to memory in insn #1307
Changing spilled pseudos to memory in insn #1321
Changing spilled pseudos to memory in insn #179
Changing spilled pseudos to memory in insn #1320
Changing spilled pseudos to memory in insn #1319
Changing spilled pseudos to memory in insn #13
Changing spilled pseudos to memory in insn #1299
Changing spilled pseudos to memory in insn #202
Changing spilled pseudos to memory in insn #213
Changing spilled pseudos to memory in insn #1079
Changing spilled pseudos to memory in insn #1161
Changing spilled pseudos to memory in insn #1249
Changing spilled pseudos to memory in insn #17
Changing spilled pseudos to memory in insn #1081
Changing spilled pseudos to memory in insn #1082
Changing spilled pseudos to memory in insn #1251
Changing spilled pseudos to memory in insn #254
Changing spilled pseudos to memory in insn #1250
Changing spilled pseudos to memory in insn #255
Changing spilled pseudos to memory in insn #1174
Changing spilled pseudos to memory in insn #257
Changing spilled pseudos to memory in insn #1175
Changing spilled pseudos to memory in insn #259
Changing spilled pseudos to memory in insn #1331
Changing spilled pseudos to memory in insn #1330
Changing spilled pseudos to memory in insn #263
Changing spilled pseudos to memory in insn #1295
Changing spilled pseudos to memory in insn #266
Changing spilled pseudos to memory in insn #1296
Changing spilled pseudos to memory in insn #268
Changing spilled pseudos to memory in insn #1083
Changing spilled pseudos to memory in insn #18
Changing spilled pseudos to memory in insn #1252
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #22
Changing spilled pseudos to memory in insn #1085
Changing spilled pseudos to memory in insn #1181
Changing spilled pseudos to memory in insn #1254
Changing spilled pseudos to memory in insn #1253
Changing spilled pseudos to memory in insn #1187
Changing spilled pseudos to memory in insn #1189
Changing spilled pseudos to memory in insn #1190
Changing spilled pseudos to memory in insn #1191
Changing spilled pseudos to memory in insn #1192
Changing spilled pseudos to memory in insn #300
Changing spilled pseudos to memory in insn #1088
Changing spilled pseudos to memory in insn #1281
Changing spilled pseudos to memory in insn #1289
Changing spilled pseudos to memory in insn #1256
Changing spilled pseudos to memory in insn #1257
Changing spilled pseudos to memory in insn #1194
Changing spilled pseudos to memory in insn #1262
Changing spilled pseudos to memory in insn #1261
Changing spilled pseudos to memory in insn #1260
Changing spilled pseudos to memory in insn #389
Changing spilled pseudos to memory in insn #1202
Changing spilled pseudos to memory in insn #1259
Changing spilled pseudos to memory in insn #1263
Changing spilled pseudos to memory in insn #1280
Changing spilled pseudos to memory in insn #1288
Changing spilled pseudos to memory in insn #1209
Changing spilled pseudos to memory in insn #1264
Changing spilled pseudos to memory in insn #1210
Changing spilled pseudos to memory in insn #1265
Changing spilled pseudos to memory in insn #34
Changing spilled pseudos to memory in insn #1211
Changing spilled pseudos to memory in insn #1266
Changing spilled pseudos to memory in insn #1267
Changing spilled pseudos to memory in insn #564
Changing spilled pseudos to memory in insn #567
Changing spilled pseudos to memory in insn #1285
Changing spilled pseudos to memory in insn #1268
Changing spilled pseudos to memory in insn #1339
Changing spilled pseudos to memory in insn #41
Changing spilled pseudos to memory in insn #1104
Changing spilled pseudos to memory in insn #581
Changing spilled pseudos to memory in insn #1219
Changing spilled pseudos to memory in insn #1221
Changing spilled pseudos to memory in insn #599
Changing spilled pseudos to memory in insn #1224
Changing spilled pseudos to memory in insn #1225
Changing spilled pseudos to memory in insn #1269
Changing spilled pseudos to memory in insn #1270
Changing spilled pseudos to memory in insn #1276
Changing spilled pseudos to memory in insn #1274
Changing spilled pseudos to memory in insn #1273
Changing spilled pseudos to memory in insn #1275
Changing spilled pseudos to memory in insn #1277
Changing spilled pseudos to memory in insn #1278
Changing spilled pseudos to memory in insn #1279
Changing spilled pseudos to memory in insn #878
Changing spilled pseudos to memory in insn #880
Changing spilled pseudos to memory in insn #891
	   Spilling non-eliminable hard regs: 6

********** Local #5: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #891
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 891:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #880
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 880:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #878
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 878:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1279
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1279:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1278
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1278:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1277
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1277:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 0 for insn #1275
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1275:  (0) =r  (1) riFo {*movdi_internal}
Reusing alternative 1 for insn #1273
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1273:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1274
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1274:  (0) o  (1) riF {*movdi_internal}
Reusing alternative 1 for insn #1276
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1276:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1270
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1270:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1269
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1269:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1225
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1225:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1224
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1224:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #599
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) rm  (1) re {*cmpsi_1}
Reusing alternative 1 for insn #1221
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1221:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1219
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1219:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #581
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 581:  (0) r  (1) rm {*cmpsi_1}
Reusing alternative 1 for insn #1104
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1104:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #41
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1339
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1339:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1268
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1268:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1285
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1285:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #567
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 567:  (0) rm  (1) 0  (2) re {*addsi_1}
Reusing alternative 1 for insn #564
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 564:  (0) rm  (1) 0  (2) re {*addsi_1}
Reusing alternative 0 for insn #1267
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1267:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1266
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1266:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1211
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1211:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #34
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1265
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1265:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 0 for insn #1210
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1210:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1264
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1264:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1209
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1209:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 0 for insn #1288
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1288:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1280
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1280:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1263
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1263:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1259
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1259:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1202
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1202:  (0) =r  (1) riFo {*movdi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            alt=1,overall=14,losers=1 -- refuse
	 Choosing alt 1 in insn 389:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
Reusing alternative 0 for insn #1260
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1260:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1261
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1261:  (0) o  (1) riF {*movdi_internal}
Reusing alternative 0 for insn #1262
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1262:  (0) =r  (1) riFo {*movdi_internal}
Reusing alternative 0 for insn #1194
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1194:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 0 for insn #1257
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1257:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1256
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1256:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1289
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1289:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1281
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1281:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1088
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1088:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #300
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) ?mr {*cmpsi_ccno_1}
Reusing alternative 1 for insn #1192
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1192:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1191
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1191:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1190
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1190:  (0) o  (1) riF {*movdi_internal}
Reusing alternative 0 for insn #1189
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1189:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1187:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1253
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1253:  (0) o  (1) riF {*movdi_internal}
Reusing alternative 0 for insn #1254
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1254:  (0) =r  (1) riFo {*movdi_internal}
Reusing alternative 0 for insn #1181
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1181:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1085
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1085:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #22
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #21
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1252
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1252:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #18
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) o  (1) riF {*movdi_internal}
Reusing alternative 0 for insn #1083
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1083:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 268:  (0) rm  (1) 0  (2) re {*addsi_1}
Reusing alternative 1 for insn #1296
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1296:  (0) o  (1) riF {*movdi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            alt=1,overall=14,losers=1 -- refuse
	 Choosing alt 1 in insn 266:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1295:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 263:  (0) r  (1) 0  (2) mr {*mulsi3_1}
Reusing alternative 1 for insn #1330
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1330:  (0) o  (1) riF {*movdi_internal}
Reusing alternative 0 for insn #1331
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1331:  (0) =r  (1) riFo {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 259:  (0) rm  (1) 0  (2) re {*addsi_1}
Reusing alternative 1 for insn #1175
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1175:  (0) o  (1) riF {*movdi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            alt=1,overall=14,losers=1 -- refuse
	 Choosing alt 1 in insn 257:  (0) A  (1) 0  (2) rm {*umulsidi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1174:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 255:  (0) r  (1) 0  (2) mr {*mulsi3_1}
Reusing alternative 1 for insn #1250
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1250:  (0) o  (1) riF {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 254:  (0) r  (1) 0  (2) mr {*mulsi3_1}
Reusing alternative 0 for insn #1251
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1251:  (0) =r  (1) riFo {*movdi_internal}
Reusing alternative 1 for insn #1082
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1082:  (0) o  (1) riF {*movdi_internal}
Reusing alternative 1 for insn #1081
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1081:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #17
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) o  (1) riF {*movdi_internal}
Reusing alternative 1 for insn #1249
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1249:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1161
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1161:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1079
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1079:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #213
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) ?mr {*cmpsi_ccno_1}
Reusing alternative 0 for insn #202
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*addsi_1}
Reusing alternative 1 for insn #1299
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1299:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #13
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1319
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1319:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1320
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1320:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 0 for insn #179
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*addsi_1}
Reusing alternative 1 for insn #1321
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1321:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1307
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1307:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1324
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1324:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1074
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1074:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1244
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1244:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #1239
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1239:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1240
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1240:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 0 for insn #1134
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1134:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1071
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1071:  (0) m  (1) re {*movsi_internal}
Reusing alternative 1 for insn #7
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #1123
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1123:  (0) =r  (1) g {*movsi_internal}
Reusing alternative 1 for insn #1064
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1064:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #6: **********

  BB 130
   Insn 777: point = 0
   Insn 776: point = 0
  BB 111
   Insn 1034: point = 0
  BB 110
   Insn 656: point = 0
   Insn 655: point = 0
   Insn 654: point = 1
   Insn 1230: point = 3
   Insn 653: point = 5
   Insn 1229: point = 5
   Insn 649: point = 6
   Insn 647: point = 7
   Insn 646: point = 7
   Insn 645: point = 7
   Insn 644: point = 7
   Insn 643: point = 8
  BB 134
   Insn 1107: point = 11
   Insn 1106: point = 13
  BB 109
   Insn 635: point = 16
   Insn 634: point = 16
   Insn 42: point = 17
   Insn 633: point = 18
   Insn 1228: point = 20
   Insn 632: point = 22
   Insn 1227: point = 22
   Insn 629: point = 23
   Insn 627: point = 24
   Insn 626: point = 24
   Insn 625: point = 24
   Insn 624: point = 25
   Insn 623: point = 26
   Insn 622: point = 28
   Insn 621: point = 30
  BB 21
   Insn 993: point = 32
   Insn 216: point = 32
  BB 126
   Insn 1052: point = 33
   Insn 758: point = 33
  BB 133
   Insn 1105: point = 33
  BB 108
   Insn 616: point = 36
   Insn 615: point = 36
   Insn 612: point = 36
   Insn 1226: point = 36
   Insn 611: point = 38
   Insn 1225: point = 38
  BB 105
   Insn 1030: point = 40
   Insn 1221: point = 40
   Insn 902: point = 41
   Insn 901: point = 42
   Insn 594: point = 43
   Insn 593: point = 44
   Insn 592: point = 44
   Insn 591: point = 44
   Insn 590: point = 44
   Insn 1220: point = 45
   Insn 588: point = 46
   Insn 587: point = 47
   Insn 584: point = 48
   Insn 1219: point = 49
  BB 107
   Insn 1224: point = 51
   Insn 905: point = 52
   Insn 904: point = 53
   Insn 607: point = 54
   Insn 606: point = 55
   Insn 605: point = 55
   Insn 604: point = 55
   Insn 603: point = 55
   Insn 1223: point = 56
  BB 106
   Insn 600: point = 58
   Insn 599: point = 58
   Insn 903: point = 58
  BB 104
   Insn 582: point = 60
   Insn 581: point = 60
   Insn 580: point = 60
  BB 103
   Insn 1114: point = 62
   Insn 41: point = 62
  BB 132
   Insn 1104: point = 63
  BB 101
   Insn 571: point = 65
   Insn 570: point = 65
   Insn 569: point = 65
   Insn 568: point = 66
   Insn 1217: point = 68
   Insn 1268: point = 70
   Insn 1216: point = 70
   Insn 1285: point = 72
   Insn 567: point = 73
   Insn 566: point = 73
  BB 129
   Insn 1057: point = 75
  BB 100
   Insn 564: point = 76
   Insn 563: point = 76
  BB 98
   Insn 1026: point = 78
   Insn 553: point = 78
   Insn 545: point = 78
   Insn 544: point = 78
   Insn 543: point = 79
   Insn 542: point = 81
   Insn 541: point = 81
   Insn 540: point = 82
  BB 96
   Insn 1024: point = 83
   Insn 536: point = 83
  BB 95
   Insn 534: point = 85
   Insn 533: point = 85
  BB 94
   Insn 532: point = 87
  BB 93
   Insn 530: point = 88
   Insn 529: point = 88
   Insn 1212: point = 89
   Insn 869: point = 90
   Insn 527: point = 91
  BB 97
   Insn 39: point = 93
  BB 92
   Insn 525: point = 95
   Insn 524: point = 95
  BB 91
   Insn 521: point = 96
   Insn 520: point = 96
  BB 90
   Insn 1022: point = 98
  BB 99
   Insn 40: point = 99
   Insn 1267: point = 101
   Insn 558: point = 102
   Insn 557: point = 102
   Insn 1266: point = 103
  BB 121
   Insn 1046: point = 105
  BB 120
   Insn 743: point = 106
   Insn 742: point = 106
   Insn 876: point = 106
   Insn 875: point = 107
   Insn 737: point = 108
   Insn 736: point = 108
   Insn 735: point = 108
   Insn 734: point = 108
   Insn 1279: point = 109
   Insn 733: point = 110
   Insn 732: point = 111
   Insn 731: point = 112
   Insn 730: point = 112
   Insn 729: point = 113
   Insn 728: point = 114
   Insn 727: point = 114
   Insn 1278: point = 114
   Insn 726: point = 115
  BB 89
   Insn 512: point = 118
   Insn 511: point = 118
  BB 88
   Insn 510: point = 119
  BB 87
   Insn 508: point = 120
   Insn 507: point = 120
  BB 86
   Insn 505: point = 121
   Insn 504: point = 121
   Insn 1103: point = 121
   Insn 1102: point = 123
  BB 85
   Insn 502: point = 126
   Insn 501: point = 126
  BB 83
   Insn 1019: point = 127
   Insn 37: point = 127
   Insn 36: point = 127
  BB 84
   Insn 497: point = 129
  BB 82
   Insn 489: point = 130
   Insn 488: point = 130
  BB 81
   Insn 487: point = 131
  BB 80
   Insn 485: point = 132
   Insn 484: point = 132
  BB 79
   Insn 1101: point = 133
   Insn 1100: point = 135
   Insn 1099: point = 137
   Insn 888: point = 139
  BB 127
   Insn 1054: point = 141
   Insn 891: point = 141
  BB 128
   Insn 771: point = 143
   Insn 770: point = 143
  BB 67
   Insn 1010: point = 145
  BB 119
   Insn 885: point = 146
  BB 118
   Insn 715: point = 148
   Insn 714: point = 148
   Insn 712: point = 148
  BB 78
   Insn 1017: point = 150
  BB 77
   Insn 478: point = 151
   Insn 477: point = 151
   Insn 1211: point = 152
  BB 75
   Insn 1014: point = 154
   Insn 469: point = 154
   Insn 461: point = 154
   Insn 460: point = 154
   Insn 459: point = 155
   Insn 458: point = 157
   Insn 1209: point = 158
   Insn 457: point = 159
   Insn 456: point = 160
  BB 73
   Insn 1012: point = 161
   Insn 452: point = 161
  BB 72
   Insn 450: point = 163
   Insn 449: point = 163
   Insn 1288: point = 164
  BB 71
   Insn 448: point = 166
  BB 70
   Insn 446: point = 167
   Insn 445: point = 167
   Insn 1208: point = 168
   Insn 1207: point = 169
   Insn 1280: point = 171
   Insn 867: point = 172
   Insn 1206: point = 174
   Insn 1263: point = 175
   Insn 443: point = 176
  BB 74
   Insn 33: point = 178
  BB 69
   Insn 441: point = 180
   Insn 440: point = 180
  BB 68
   Insn 437: point = 181
   Insn 436: point = 181
  BB 76
   Insn 34: point = 183
   Insn 1265: point = 184
   Insn 474: point = 185
   Insn 473: point = 185
   Insn 1210: point = 186
   Insn 1264: point = 187
  BB 117
   Insn 1042: point = 189
  BB 116
   Insn 704: point = 190
   Insn 703: point = 190
   Insn 874: point = 190
   Insn 873: point = 191
   Insn 698: point = 192
   Insn 697: point = 192
   Insn 696: point = 192
   Insn 695: point = 192
   Insn 1277: point = 193
   Insn 694: point = 194
   Insn 693: point = 195
   Insn 1233: point = 197
   Insn 692: point = 199
   Insn 1232: point = 200
   Insn 1271: point = 201
   Insn 691: point = 203
   Insn 1275: point = 204
   Insn 1231: point = 205
   Insn 1272: point = 206
   Insn 1273: point = 208
   Insn 690: point = 208
   Insn 689: point = 209
   Insn 688: point = 209
   Insn 1274: point = 209
   Insn 1276: point = 210
  BB 66
   Insn 428: point = 212
   Insn 427: point = 212
  BB 65
   Insn 426: point = 213
  BB 64
   Insn 424: point = 214
   Insn 423: point = 214
  BB 63
   Insn 421: point = 215
   Insn 420: point = 215
   Insn 1098: point = 215
   Insn 1097: point = 217
   Insn 1096: point = 219
  BB 62
   Insn 418: point = 222
   Insn 417: point = 222
  BB 60
   Insn 1007: point = 223
   Insn 31: point = 223
   Insn 30: point = 223
  BB 61
   Insn 413: point = 225
  BB 59
   Insn 405: point = 226
   Insn 404: point = 226
  BB 58
   Insn 403: point = 227
  BB 57
   Insn 401: point = 228
   Insn 400: point = 228
  BB 56
   Insn 1095: point = 229
   Insn 1094: point = 231
   Insn 1093: point = 233
   Insn 1092: point = 235
   Insn 889: point = 237
  BB 115
   Insn 886: point = 239
  BB 55
   Insn 397: point = 241
   Insn 396: point = 241
   Insn 1205: point = 242
   Insn 906: point = 244
   Insn 1258: point = 245
   Insn 1259: point = 247
   Insn 1204: point = 247
   Insn 395: point = 249
   Insn 1203: point = 250
   Insn 393: point = 252
   Insn 1202: point = 253
   Insn 391: point = 254
   Insn 1201: point = 255
   Insn 389: point = 257
   Insn 1200: point = 259
   Insn 1199: point = 260
   Insn 388: point = 261
   Insn 1197: point = 263
   Insn 387: point = 265
   Insn 1198: point = 266
   Insn 1260: point = 267
   Insn 1196: point = 268
   Insn 1261: point = 270
   Insn 1195: point = 270
   Insn 386: point = 272
   Insn 1262: point = 272
   Insn 1194: point = 273
  BB 54
   Insn 384: point = 275
   Insn 383: point = 275
  BB 52
   Insn 1005: point = 277
   Insn 373: point = 277
   Insn 365: point = 277
   Insn 364: point = 277
   Insn 363: point = 278
   Insn 362: point = 280
   Insn 361: point = 280
   Insn 360: point = 281
  BB 50
   Insn 1003: point = 282
   Insn 356: point = 282
  BB 49
   Insn 354: point = 284
   Insn 353: point = 284
   Insn 1289: point = 285
  BB 48
   Insn 352: point = 287
  BB 47
   Insn 350: point = 288
   Insn 349: point = 288
   Insn 1193: point = 289
   Insn 1281: point = 290
   Insn 865: point = 291
   Insn 347: point = 292
  BB 51
   Insn 27: point = 294
  BB 46
   Insn 345: point = 296
   Insn 344: point = 296
  BB 45
   Insn 341: point = 297
   Insn 340: point = 297
  BB 44
   Insn 1001: point = 299
  BB 53
   Insn 28: point = 300
   Insn 1257: point = 302
   Insn 378: point = 303
   Insn 377: point = 303
   Insn 1256: point = 304
  BB 114
   Insn 1038: point = 306
  BB 113
   Insn 680: point = 307
   Insn 679: point = 307
   Insn 872: point = 307
   Insn 871: point = 308
   Insn 674: point = 309
   Insn 673: point = 309
   Insn 672: point = 309
   Insn 671: point = 309
   Insn 1270: point = 310
   Insn 670: point = 311
   Insn 669: point = 312
   Insn 668: point = 313
   Insn 667: point = 313
   Insn 666: point = 313
   Insn 665: point = 314
   Insn 664: point = 314
   Insn 1269: point = 314
   Insn 663: point = 315
  BB 43
   Insn 332: point = 318
   Insn 331: point = 318
  BB 42
   Insn 330: point = 319
  BB 41
   Insn 328: point = 320
   Insn 327: point = 320
  BB 40
   Insn 325: point = 321
   Insn 324: point = 321
   Insn 1091: point = 321
   Insn 1090: point = 323
  BB 39
   Insn 322: point = 326
   Insn 321: point = 326
  BB 37
   Insn 998: point = 327
   Insn 25: point = 327
   Insn 24: point = 327
  BB 38
   Insn 317: point = 329
  BB 36
   Insn 309: point = 330
   Insn 308: point = 330
  BB 35
   Insn 307: point = 331
  BB 34
   Insn 305: point = 332
   Insn 304: point = 332
  BB 33
   Insn 1089: point = 333
   Insn 1088: point = 335
   Insn 1087: point = 336
   Insn 890: point = 338
  BB 112
   Insn 887: point = 340
  BB 32
   Insn 301: point = 342
   Insn 300: point = 342
   Insn 1192: point = 342
   Insn 864: point = 343
   Insn 1191: point = 345
   Insn 863: point = 346
   Insn 1190: point = 347
   Insn 296: point = 348
   Insn 1189: point = 350
   Insn 294: point = 351
   Insn 293: point = 353
   Insn 291: point = 355
   Insn 1188: point = 356
   Insn 289: point = 358
   Insn 1290: point = 360
   Insn 1187: point = 362
   Insn 1186: point = 362
   Insn 288: point = 363
   Insn 1185: point = 365
   Insn 287: point = 367
   Insn 1291: point = 368
   Insn 1332: point = 369
   Insn 1184: point = 371
   Insn 1253: point = 373
   Insn 1183: point = 373
   Insn 285: point = 375
   Insn 1292: point = 376
   Insn 1334: point = 377
   Insn 1182: point = 379
   Insn 1254: point = 380
   Insn 1293: point = 381
   Insn 283: point = 383
   Insn 1181: point = 385
  BB 102
   Insn 1028: point = 387
   Insn 1339: point = 387
   Insn 574: point = 388
  BB 31
   Insn 1086: point = 390
   Insn 1085: point = 392
   Insn 1084: point = 393
   Insn 899: point = 395
   Insn 1180: point = 397
   Insn 22: point = 399
   Insn 21: point = 399
   Insn 20: point = 399
  BB 30
   Insn 278: point = 401
   Insn 277: point = 401
   Insn 1179: point = 402
   Insn 1252: point = 403
  BB 28
   Insn 996: point = 405
   Insn 1083: point = 405
  BB 27
   Insn 274: point = 407
   Insn 273: point = 407
   Insn 1178: point = 408
   Insn 270: point = 409
   Insn 268: point = 409
   Insn 1296: point = 410
   Insn 266: point = 411
   Insn 1295: point = 413
   Insn 1294: point = 413
   Insn 265: point = 414
   Insn 1177: point = 416
   Insn 263: point = 418
   Insn 1330: point = 418
   Insn 1176: point = 419
   Insn 1331: point = 420
  BB 26
   Insn 259: point = 422
   Insn 1175: point = 423
   Insn 257: point = 424
   Insn 1174: point = 426
   Insn 1173: point = 426
   Insn 256: point = 427
   Insn 1172: point = 429
   Insn 255: point = 431
   Insn 1171: point = 431
   Insn 1250: point = 433
   Insn 1170: point = 433
   Insn 254: point = 435
   Insn 1169: point = 435
   Insn 1251: point = 436
  BB 25
   Insn 252: point = 438
   Insn 251: point = 438
   Insn 1168: point = 439
   Insn 248: point = 441
   Insn 1167: point = 441
  BB 24
   Insn 1082: point = 443
   Insn 1081: point = 444
   Insn 1080: point = 445
   Insn 17: point = 447
   Insn 16: point = 447
  BB 29
   Insn 18: point = 449
  BB 23
   Insn 245: point = 450
   Insn 244: point = 450
   Insn 1166: point = 451
   Insn 1165: point = 453
   Insn 242: point = 455
   Insn 1164: point = 457
   Insn 1247: point = 457
   Insn 1163: point = 459
   Insn 911: point = 460
   Insn 1248: point = 461
   Insn 1249: point = 463
   Insn 1162: point = 463
   Insn 241: point = 465
   Insn 240: point = 466
   Insn 238: point = 466
   Insn 236: point = 466
   Insn 234: point = 466
   Insn 232: point = 466
   Insn 231: point = 466
   Insn 230: point = 466
   Insn 229: point = 466
   Insn 228: point = 467
  BB 22
   Insn 225: point = 469
   Insn 224: point = 469
   Insn 1161: point = 470
   Insn 895: point = 471
   Insn 1160: point = 472
   Insn 223: point = 474
   Insn 1159: point = 476
  BB 131
   Insn 1079: point = 478
   Insn 1078: point = 479
   Insn 1077: point = 481
  BB 20
   Insn 214: point = 484
   Insn 213: point = 484
   Insn 15: point = 484
   Insn 221: point = 485
   Insn 212: point = 486
  BB 19
   Insn 209: point = 487
   Insn 208: point = 487
   Insn 206: point = 487
   Insn 205: point = 487
   Insn 1157: point = 488
   Insn 204: point = 490
   Insn 1156: point = 491
   Insn 202: point = 493
   Insn 1155: point = 493
   Insn 200: point = 495
   Insn 1154: point = 497
   Insn 1153: point = 497
   Insn 1299: point = 498
   Insn 195: point = 499
   Insn 192: point = 500
   Insn 191: point = 502
  BB 18
   Insn 1076: point = 504
   Insn 13: point = 506
  BB 17
   Insn 186: point = 508
   Insn 185: point = 508
   Insn 1300: point = 509
   Insn 1319: point = 511
   Insn 1302: point = 511
   Insn 183: point = 513
   Insn 1301: point = 513
   Insn 182: point = 515
   Insn 1303: point = 516
   Insn 1320: point = 517
   Insn 1152: point = 518
   Insn 181: point = 520
   Insn 1151: point = 521
   Insn 179: point = 523
   Insn 1150: point = 523
   Insn 177: point = 525
   Insn 1305: point = 527
   Insn 1321: point = 529
   Insn 1149: point = 529
   Insn 1148: point = 529
   Insn 1307: point = 530
   Insn 172: point = 531
   Insn 1306: point = 533
   Insn 1323: point = 534
   Insn 169: point = 536
   Insn 168: point = 538
   Insn 1308: point = 540
   Insn 1324: point = 541
  BB 16
   Insn 1075: point = 543
   Insn 1074: point = 545
   Insn 12: point = 546
   Insn 1146: point = 547
   Insn 163: point = 549
   Insn 1147: point = 551
  BB 15
   Insn 161: point = 554
   Insn 160: point = 554
   Insn 1145: point = 555
   Insn 1243: point = 556
   Insn 1244: point = 558
   Insn 1073: point = 558
  BB 14
   Insn 158: point = 561
   Insn 157: point = 561
   Insn 1144: point = 562
   Insn 155: point = 564
   Insn 1239: point = 565
   Insn 1143: point = 565
   Insn 154: point = 567
   Insn 1142: point = 567
   Insn 153: point = 569
   Insn 1141: point = 570
   Insn 1240: point = 571
   Insn 151: point = 572
   Insn 1140: point = 573
   Insn 149: point = 575
   Insn 1139: point = 577
   Insn 1138: point = 578
   Insn 148: point = 579
   Insn 1137: point = 581
   Insn 147: point = 583
   Insn 1136: point = 583
   Insn 1241: point = 584
   Insn 1135: point = 586
   Insn 146: point = 588
   Insn 1134: point = 588
   Insn 1072: point = 589
  BB 13
   Insn 143: point = 592
   Insn 142: point = 592
   Insn 141: point = 593
   Insn 139: point = 595
   Insn 138: point = 596
   Insn 137: point = 597
   Insn 1310: point = 597
   Insn 136: point = 599
   Insn 1309: point = 599
   Insn 135: point = 601
   Insn 134: point = 603
   Insn 133: point = 605
   Insn 131: point = 607
   Insn 1312: point = 609
   Insn 130: point = 611
   Insn 1311: point = 611
   Insn 1133: point = 613
   Insn 129: point = 615
   Insn 1132: point = 615
   Insn 1318: point = 616
  BB 125
   Insn 1050: point = 619
   Insn 1111: point = 619
   Insn 1110: point = 621
   Insn 10: point = 623
  BB 12
   Insn 991: point = 625
   Insn 1071: point = 625
   Insn 1070: point = 626
   Insn 1069: point = 628
  BB 11
   Insn 124: point = 631
   Insn 123: point = 631
   Insn 122: point = 632
   Insn 120: point = 634
   Insn 119: point = 635
   Insn 118: point = 636
   Insn 937: point = 636
   Insn 1131: point = 637
   Insn 935: point = 638
   Insn 934: point = 639
   Insn 1130: point = 640
   Insn 932: point = 641
  BB 10
   Insn 1068: point = 642
   Insn 1067: point = 644
   Insn 1066: point = 646
   Insn 860: point = 648
   Insn 859: point = 649
  BB 124
   Insn 880: point = 651
   Insn 879: point = 651
  BB 9
   Insn 110: point = 653
   Insn 109: point = 653
   Insn 108: point = 654
   Insn 107: point = 656
   Insn 106: point = 657
   Insn 105: point = 658
  BB 8
   Insn 7: point = 659
  BB 7
   Insn 103: point = 660
   Insn 102: point = 660
   Insn 101: point = 661
   Insn 100: point = 662
   Insn 98: point = 663
   Insn 1129: point = 664
   Insn 96: point = 666
   Insn 1128: point = 668
   Insn 1127: point = 669
   Insn 95: point = 670
   Insn 1126: point = 672
   Insn 94: point = 674
   Insn 1125: point = 674
   Insn 1236: point = 675
   Insn 1124: point = 677
   Insn 93: point = 679
   Insn 1123: point = 679
   Insn 1065: point = 680
  BB 6
   Insn 91: point = 683
   Insn 90: point = 683
   Insn 89: point = 684
   Insn 87: point = 686
   Insn 86: point = 687
   Insn 85: point = 688
   Insn 1314: point = 688
   Insn 84: point = 690
   Insn 1313: point = 690
   Insn 83: point = 692
   Insn 82: point = 694
   Insn 81: point = 696
   Insn 79: point = 698
   Insn 1316: point = 700
   Insn 78: point = 702
   Insn 1315: point = 702
   Insn 1122: point = 704
   Insn 77: point = 706
   Insn 1121: point = 706
   Insn 1317: point = 707
  BB 123
   Insn 1048: point = 710
   Insn 1109: point = 710
   Insn 1108: point = 712
   Insn 6: point = 714
  BB 5
   Insn 988: point = 716
   Insn 1064: point = 716
   Insn 1063: point = 717
   Insn 1062: point = 719
  BB 4
   Insn 72: point = 722
   Insn 71: point = 722
   Insn 70: point = 723
   Insn 68: point = 725
   Insn 67: point = 726
   Insn 66: point = 727
   Insn 931: point = 727
   Insn 929: point = 727
   Insn 928: point = 728
   Insn 926: point = 728
  BB 3
   Insn 1061: point = 729
   Insn 1060: point = 731
   Insn 1059: point = 733
   Insn 927: point = 735
   Insn 856: point = 736
   Insn 855: point = 737
  BB 122
   Insn 878: point = 739
   Insn 877: point = 739
  BB 2
   Insn 58: point = 741
   Insn 57: point = 741
   Insn 56: point = 742
   Insn 55: point = 744
   Insn 54: point = 745
   Insn 53: point = 746
   Insn 3: point = 746
 r84: [655..657]
 r85: [660..662]
 r94: [545..546]
 r101: [505..506]
 r104: [450..453] [446..448]
 r106: [444..460] [394..405]
 r112: [337..351] [236..323] [151..219] [138..149] [112..123]
 r117: [234..250] [209..217] [203..204]
 r120: [294..294] [284..292] [279..282]
 r125: [482..484]
 r129: [14..23]
 r132: [12..17]
 r135: [443..447]
 r149: [743..745]
 r150: [724..726]
 r151: [734..744] [713..719]
 r158: [691..692]
 r159: [711..714] [667..680]
 r160: [685..687]
 r165: [148..148] [136..141]
 r166: [633..635]
 r167: [647..656] [622..628]
 r174: [600..601]
 r175: [620..623] [576..589]
 r176: [594..596]
 r181: [146..146] [134..139] [116..121] [102..113] [76..99]
 r186: [239..239] [232..237] [210..215] [192..193] [143..145]
 r187: [241..244] [230..238]
 r189: [392..399]
 r203: [340..340] [334..338] [316..321] [303..313] [275..300]
 r212: [178..178] [163..176] [156..161]
 r229: [93..93] [85..91] [80..83]
 r252: [480..485] [24..33]
 r254: [114..115] [108..109]
 r258: [314..315] [309..310]
 r261: [741..742]
 r262: [722..723]
 r263: [699..704]
 r264: [699..700]
 r265: [693..698]
 r266: [693..694]
 r267: [695..696]
 r268: [683..684]
 r269: [671..677]
 r270: [671..672]
 r271: [663..670]
 r272: [661..664]
 r274: [653..654]
 r275: [631..632]
 r276: [608..613]
 r277: [608..609]
 r278: [602..607]
 r279: [602..603]
 r280: [604..605]
 r281: [592..593]
 r283: [580..586]
 r284: [580..581]
 r285: [572..579]
 r286: [569..573]
 r291: [537..538]
 r298: [520..523]
 r301: [515..518]
 r305: [501..502]
 r312: [490..493]
 r315: [487..488]
 r317: [469..472]
 r318: [474..475]
 r320: [466..467]
 r328: [428..433]
 r329: [428..429]
 r330: [422..427]
 r332: [415..416]
 r334: [409..414]
 r340: [364..373]
 r342: [364..365]
 r344: [355..363]
 r345: [352..356]
 r347: [352..353]
 r356: [277..278]
 r363: [262..270]
 r364: [262..263]
 r365: [254..261]
 r366: [252..255]
 r374: [154..155]
 r386: [78..79]
 r397: [46..47]
 r403: [27..28]
 r404: [29..30]
 r406: [25..26]
 r409: [19..20]
 r412: [16..18]
 r414: [7..8]
 r417: [2..3]
 r420: [0..1]
 r421: [311..312]
 r422: [194..195]
 r424: [110..111]
 r429: [739..739] [676..717]
 r431: [651..651] [585..626]
 r433: [103..107] [100..101] [96..97]
 r434: [106..106] [81..97]
 r435: [187..191] [181..184]
 r436: [190..190] [159..182]
 r437: [304..308] [301..302] [297..298]
 r438: [307..307] [280..298]
 r439: [438..439]
 r445: [85..90]
 r450: [391..395]
 r456: [36..486]
 r457: [487..507]
 r458: [508..553]
 r460: [561..659]
 r461: [722..735]
 r462: [9..13] [0..6]
 r463: [0..11]
 r464: [475..481] [36..36]
 r465: [469..479] [58..60] [51..54] [34..43]
 r466: [469..478] [58..58] [51..53] [36..42]
 r467: [354..393] [65..65]
 r469: [344..390] [65..66]
 r470: [63..73]
 r471: [124..137]
 r472: [126..135]
 r473: [129..133] [122..127]
 r474: [220..235]
 r475: [218..233]
 r476: [225..231] [216..223]
 r477: [222..229]
 r478: [324..336]
 r479: [326..335]
 r480: [329..333] [322..327]
 r481: [407..445]
 r484: [487..504]
 r486: [508..543]
 r487: [559..564]
 r488: [606..621] [592..595]
 r489: [617..619] [590..597]
 r490: [638..646] [629..634]
 r491: [627..644]
 r492: [625..642]
 r493: [697..712] [683..686]
 r494: [708..710] [681..688]
 r495: [727..733] [720..725]
 r496: [718..731]
 r497: [716..729]
 r498: [694..695]
 r499: [603..604]
 r500: [536..537]
 r501: [500..501]
 r502: [455..456]
 r505: [705..706]
 r506: [678..679]
 r507: [673..674]
 r508: [665..669]
 r509: [639..640]
 r510: [636..637]
 r511: [614..615]
 r512: [587..588]
 r513: [582..583]
 r514: [574..578]
 r515: [569..570]
 r516: [566..567]
 r517: [561..562]
 r518: [554..555]
 r519: [548..549]
 r520: [550..551]
 r521: [524..529]
 r522: [519..521]
 r523: [494..497]
 r524: [489..491]
 r526: [473..476]
 r527: [470..471]
 r528: [464..465]
 r529: [454..459]
 r530: [450..451]
 r531: [440..441]
 r532: [434..435]
 r533: [430..431]
 r534: [423..426]
 r535: [417..419]
 r536: [407..408]
 r537: [401..402]
 r538: [396..397]
 r539: [384..385]
 r540: [374..379]
 r541: [366..371]
 r542: [357..362]
 r543: [349..350]
 r544: [347..348]
 r545: [345..346]
 r546: [342..343]
 r547: [288..289]
 r548: [271..273]
 r549: [264..268]
 r550: [265..266]
 r551: [256..260]
 r552: [251..253]
 r553: [248..249]
 r554: [241..242]
 r555: [173..174]
 r556: [167..169]
 r557: [167..168]
 r558: [157..158]
 r559: [185..186]
 r560: [151..152]
 r561: [88..89]
 r564: [67..68]
 r566: [48..49]
 r567: [44..45]
 r568: [40..41]
 r570: [55..56]
 r571: [51..52]
 r572: [37..38]
 r573: [21..22]
 r574: [4..5]
 r575: [203..205]
 r576: [199..200]
 r577: [196..197]
 r578: [730..736]
 r579: [732..737]
 r580: [668..675]
 r581: [643..648]
 r582: [645..649]
 r583: [563..565]
 r584: [568..571]
 r585: [577..584]
 r586: [544..547]
 r587: [552..556]
 r588: [557..558]
 r589: [522..536]
 r590: [492..500]
 r591: [452..457]
 r592: [458..461]
 r593: [462..463]
 r595: [432..436]
 r596: [398..403]
 r598: [372..380]
 r601: [243..245]
 r602: [246..247]
 r603: [259..267]
 r605: [269..272]
 r606: [170..175]
 r609: [69..70]
 r611: [198..201]
 r612: [202..206]
 r613: [207..208]
 r617: [171..172]
 r618: [290..291]
 r623: [163..164]
 r624: [284..285]
 r625: [359..360]
 r626: [367..368]
 r627: [375..376]
 r628: [382..383]
 r629: [410..413]
 r632: [498..499]
 r633: [508..509]
 r634: [512..513]
 r635: [515..516]
 r637: [526..527]
 r638: [532..533]
 r639: [530..531]
 r640: [539..540]
 r641: [598..599]
 r642: [610..611]
 r643: [689..690]
 r644: [701..702]
 r645: [703..707]
 r646: [612..616]
 r647: [510..511]
 r648: [514..517]
 r651: [528..534]
 r652: [535..541]
 r659: [418..420]
 r660: [361..369]
 r662: [370..377]
 r663: [378..381]
 r666: [71..72]
 r667: [387..388]
Compressing live ranges: from 746 to 486 - 65%
Ranges after the compression:
 r84: [421..422]
 r85: [423..424]
 r94: [340..341]
 r101: [312..313]
 r104: [274..279]
 r106: [272..283] [242..249]
 r112: [203..213] [144..196] [85..133] [69..76]
 r117: [142..154] [128..131] [124..125]
 r120: [171..179]
 r125: [297..298]
 r129: [12..17]
 r132: [10..13]
 r135: [272..275]
 r149: [484..485]
 r150: [471..472]
 r151: [479..485] [463..468]
 r158: [443..444]
 r159: [461..464] [427..436]
 r160: [439..440]
 r165: [90..90] [83..86]
 r166: [406..407]
 r167: [416..422] [398..403]
 r174: [378..379]
 r175: [396..399] [362..371]
 r176: [374..375]
 r181: [89..89] [81..86] [73..74] [62..70] [51..59]
 r186: [140..146] [128..129] [116..117] [87..88]
 r187: [147..150] [138..145]
 r189: [240..247]
 r203: [201..205] [193..194] [184..190] [169..181]
 r212: [96..108]
 r229: [53..57]
 r252: [295..298] [18..23]
 r254: [71..72] [65..66]
 r258: [191..192] [187..188]
 r261: [482..483]
 r262: [469..470]
 r263: [451..456]
 r264: [451..452]
 r265: [445..450]
 r266: [445..446]
 r267: [447..448]
 r268: [437..438]
 r269: [429..434]
 r270: [429..430]
 r271: [425..428]
 r272: [423..426]
 r274: [419..420]
 r275: [404..405]
 r276: [386..391]
 r277: [386..387]
 r278: [380..385]
 r279: [380..381]
 r280: [382..383]
 r281: [372..373]
 r283: [364..369]
 r284: [364..365]
 r285: [360..363]
 r286: [358..361]
 r291: [336..337]
 r298: [322..325]
 r301: [320..321]
 r305: [310..311]
 r312: [301..304]
 r315: [299..300]
 r317: [290..291]
 r318: [292..293]
 r320: [288..289]
 r328: [260..265]
 r329: [260..261]
 r330: [258..259]
 r332: [254..255]
 r334: [252..253]
 r340: [222..229]
 r342: [222..223]
 r344: [216..221]
 r345: [214..217]
 r347: [214..215]
 r356: [169..170]
 r363: [161..166]
 r364: [161..162]
 r365: [157..160]
 r366: [155..158]
 r374: [94..95]
 r386: [51..52]
 r397: [32..33]
 r403: [20..21]
 r404: [22..23]
 r406: [18..19]
 r409: [14..15]
 r412: [12..13]
 r414: [6..7]
 r417: [2..3]
 r420: [0..1]
 r421: [189..190]
 r422: [118..119]
 r424: [67..68]
 r429: [481..481] [433..466]
 r431: [418..418] [368..401]
 r433: [58..64]
 r434: [63..63] [53..59]
 r435: [113..115] [109..110]
 r436: [114..114] [98..110]
 r437: [180..186]
 r438: [185..185] [171..181]
 r439: [268..269]
 r445: [55..56]
 r450: [240..243]
 r456: [25..298]
 r457: [299..313]
 r458: [314..347]
 r460: [352..422]
 r461: [469..480]
 r462: [8..11] [0..5]
 r463: [0..9]
 r464: [293..296] [25..25]
 r465: [290..294] [40..41] [36..37] [24..29]
 r466: [290..294] [40..40] [36..37] [25..29]
 r467: [216..241] [43..43]
 r469: [208..239] [43..44]
 r470: [42..50]
 r471: [77..84]
 r472: [77..82]
 r473: [75..80]
 r474: [134..143]
 r475: [132..141]
 r476: [130..139]
 r477: [134..137]
 r478: [197..202]
 r479: [197..202]
 r480: [195..200]
 r481: [250..273]
 r484: [299..311]
 r486: [314..339]
 r487: [352..355]
 r488: [384..397] [372..375]
 r489: [394..395] [372..375]
 r490: [410..415] [404..407]
 r491: [402..413]
 r492: [400..411]
 r493: [449..462] [437..440]
 r494: [459..460] [437..440]
 r495: [469..478]
 r496: [467..476]
 r497: [465..474]
 r498: [446..447]
 r499: [381..382]
 r500: [335..336]
 r501: [309..310]
 r502: [280..281]
 r505: [457..458]
 r506: [435..436]
 r507: [431..432]
 r508: [427..428]
 r509: [410..411]
 r510: [408..409]
 r511: [392..393]
 r512: [370..371]
 r513: [366..367]
 r514: [362..363]
 r515: [358..359]
 r516: [356..357]
 r517: [352..353]
 r518: [348..349]
 r519: [342..343]
 r520: [344..345]
 r521: [326..329]
 r522: [322..323]
 r523: [305..306]
 r524: [301..302]
 r526: [292..294]
 r527: [290..291]
 r528: [286..287]
 r529: [280..283]
 r530: [276..277]
 r531: [270..271]
 r532: [266..267]
 r533: [262..263]
 r534: [258..259]
 r535: [256..257]
 r536: [250..251]
 r537: [248..249]
 r538: [244..245]
 r539: [236..237]
 r540: [230..233]
 r541: [224..227]
 r542: [218..221]
 r543: [212..213]
 r544: [210..211]
 r545: [208..209]
 r546: [206..207]
 r547: [175..176]
 r548: [167..168]
 r549: [163..164]
 r550: [163..164]
 r551: [159..160]
 r552: [155..156]
 r553: [153..154]
 r554: [147..148]
 r555: [106..107]
 r556: [102..103]
 r557: [102..103]
 r558: [96..97]
 r559: [111..112]
 r560: [92..93]
 r561: [55..56]
 r564: [45..46]
 r566: [34..35]
 r567: [30..31]
 r568: [28..29]
 r570: [38..39]
 r571: [36..37]
 r572: [26..27]
 r573: [16..17]
 r574: [4..5]
 r575: [124..125]
 r576: [122..123]
 r577: [120..121]
 r578: [475..480]
 r579: [477..480]
 r580: [427..432]
 r581: [412..417]
 r582: [414..417]
 r583: [354..355]
 r584: [358..359]
 r585: [362..367]
 r586: [340..341]
 r587: [346..349]
 r588: [350..351]
 r589: [324..335]
 r590: [303..309]
 r591: [278..281]
 r592: [282..283]
 r593: [284..285]
 r595: [264..267]
 r596: [246..249]
 r598: [228..233]
 r601: [149..150]
 r602: [151..152]
 r603: [159..164]
 r605: [165..168]
 r606: [104..107]
 r609: [47..48]
 r611: [122..123]
 r612: [124..125]
 r613: [126..127]
 r617: [104..105]
 r618: [177..178]
 r623: [100..101]
 r624: [173..174]
 r625: [218..219]
 r626: [224..225]
 r627: [230..231]
 r628: [234..235]
 r629: [252..253]
 r632: [307..308]
 r633: [314..315]
 r634: [318..319]
 r635: [320..321]
 r637: [326..327]
 r638: [332..333]
 r639: [330..331]
 r640: [338..339]
 r641: [376..377]
 r642: [388..389]
 r643: [441..442]
 r644: [453..454]
 r645: [455..458]
 r646: [390..393]
 r647: [316..317]
 r648: [320..321]
 r651: [328..333]
 r652: [334..339]
 r659: [256..257]
 r660: [220..225]
 r662: [226..231]
 r663: [232..233]
 r666: [49..50]
 r667: [238..239]

********** Assignment #4: **********


********** Local #6: **********

	   Spilling non-eliminable hard regs: 6
Restoring SCRATCH in insn #82(nop 2)
Restoring SCRATCH in insn #134(nop 2)
Restoring SCRATCH in insn #169(nop 2)
Restoring SCRATCH in insn #192(nop 2)
Restoring SCRATCH in insn #242(nop 2)
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=-24)
changing reg in insn 106
changing reg in insn 100
changing reg in insn 102
changing reg in insn 12
changing reg in insn 1074
changing reg in insn 13
changing reg in insn 1076
changing reg in insn 1080
changing reg in insn 1083
changing reg in insn 911
changing reg in insn 1084
changing reg in insn 1081
changing reg in insn 1102
changing reg in insn 1096
changing reg in insn 1090
changing reg in insn 294
changing reg in insn 1099
changing reg in insn 1092
changing reg in insn 1087
changing reg in insn 730
changing reg in insn 667
changing reg in insn 1097
changing reg in insn 1093
changing reg in insn 691
changing reg in insn 27
changing reg in insn 356
changing reg in insn 347
changing reg in insn 363
changing reg in insn 15
changing reg in insn 1077
changing reg in insn 629
changing reg in insn 1106
changing reg in insn 632
changing reg in insn 42
changing reg in insn 1107
changing reg in insn 16
changing reg in insn 1082
changing reg in insn 54
changing reg in insn 67
changing reg in insn 1062
changing reg in insn 55
changing reg in insn 1108
changing reg in insn 1059
changing reg in insn 83
changing reg in insn 1065
changing reg in insn 6
changing reg in insn 1109
changing reg in insn 86
changing reg in insn 891
changing reg in insn 712
changing reg in insn 1100
changing reg in insn 714
changing reg in insn 119
changing reg in insn 1069
changing reg in insn 107
changing reg in insn 1110
changing reg in insn 1066
changing reg in insn 135
changing reg in insn 1072
changing reg in insn 10
changing reg in insn 1111
changing reg in insn 138
changing reg in insn 1103
changing reg in insn 885
changing reg in insn 888
changing reg in insn 40
changing reg in insn 729
changing reg in insn 1101
changing reg in insn 529
changing reg in insn 511
changing reg in insn 507
changing reg in insn 504
changing reg in insn 732
changing reg in insn 731
changing reg in insn 730
changing reg in insn 726
changing reg in insn 563
changing reg in insn 557
changing reg in insn 542
changing reg in insn 869
changing reg in insn 1098
changing reg in insn 886
changing reg in insn 889
changing reg in insn 1094
changing reg in insn 695
changing reg in insn 427
changing reg in insn 423
changing reg in insn 420
changing reg in insn 770
changing reg in insn 906
changing reg in insn 1095
changing reg in insn 20
changing reg in insn 1085
changing reg in insn 1091
changing reg in insn 887
changing reg in insn 890
changing reg in insn 28
changing reg in insn 666
changing reg in insn 1089
changing reg in insn 349
changing reg in insn 331
changing reg in insn 327
changing reg in insn 324
changing reg in insn 669
changing reg in insn 668
changing reg in insn 667
changing reg in insn 663
changing reg in insn 383
changing reg in insn 377
changing reg in insn 362
changing reg in insn 865
changing reg in insn 33
changing reg in insn 452
changing reg in insn 443
changing reg in insn 459
changing reg in insn 39
changing reg in insn 536
changing reg in insn 527
changing reg in insn 543
changing reg in insn 1105
changing reg in insn 221
changing reg in insn 216
changing reg in insn 1078
changing reg in insn 625
changing reg in insn 726
changing reg in insn 734
changing reg in insn 663
changing reg in insn 671
changing reg in insn 56
changing reg in insn 57
changing reg in insn 70
changing reg in insn 71
changing reg in insn 79
changing reg in insn 83
changing reg in insn 82
changing reg in insn 83
changing reg in insn 81
changing reg in insn 82
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 95
changing reg in insn 95
changing reg in insn 98
changing reg in insn 108
changing reg in insn 109
changing reg in insn 122
changing reg in insn 123
changing reg in insn 131
changing reg in insn 135
changing reg in insn 134
changing reg in insn 135
changing reg in insn 133
changing reg in insn 134
changing reg in insn 141
changing reg in insn 142
changing reg in insn 148
changing reg in insn 148
changing reg in insn 148
changing reg in insn 151
changing reg in insn 168
changing reg in insn 169
changing reg in insn 181
changing reg in insn 179
changing reg in insn 182
changing reg in insn 191
changing reg in insn 192
changing reg in insn 204
changing reg in insn 202
changing reg in insn 205
changing reg in insn 224
changing reg in insn 223
changing reg in insn 228
changing reg in insn 229
changing reg in insn 256
changing reg in insn 265
changing reg in insn 265
changing reg in insn 288
changing reg in insn 288
changing reg in insn 288
changing reg in insn 291
changing reg in insn 294
changing reg in insn 293
changing reg in insn 294
changing reg in insn 363
changing reg in insn 364
changing reg in insn 388
changing reg in insn 388
changing reg in insn 388
changing reg in insn 391
changing reg in insn 393
changing reg in insn 459
changing reg in insn 460
changing reg in insn 543
changing reg in insn 544
changing reg in insn 587
changing reg in insn 588
changing reg in insn 622
changing reg in insn 623
changing reg in insn 623
changing reg in insn 621
changing reg in insn 622
changing reg in insn 623
changing reg in insn 624
changing reg in insn 633
changing reg in insn 633
changing reg in insn 633
changing reg in insn 634
changing reg in insn 643
changing reg in insn 644
changing reg in insn 654
changing reg in insn 654
changing reg in insn 654
changing reg in insn 655
changing reg in insn 669
changing reg in insn 670
changing reg in insn 693
changing reg in insn 694
changing reg in insn 732
changing reg in insn 733
changing reg in insn 1063
changing reg in insn 877
changing reg in insn 1070
changing reg in insn 879
changing reg in insn 875
changing reg in insn 520
changing reg in insn 40
changing reg in insn 876
changing reg in insn 529
changing reg in insn 524
changing reg in insn 533
changing reg in insn 541
changing reg in insn 742
changing reg in insn 873
changing reg in insn 436
changing reg in insn 34
changing reg in insn 874
changing reg in insn 445
changing reg in insn 440
changing reg in insn 449
changing reg in insn 457
changing reg in insn 703
changing reg in insn 871
changing reg in insn 340
changing reg in insn 28
changing reg in insn 872
changing reg in insn 349
changing reg in insn 344
changing reg in insn 353
changing reg in insn 361
changing reg in insn 679
changing reg in insn 251
changing reg in insn 869
changing reg in insn 533
changing reg in insn 899
changing reg in insn 1086
changing reg in insn 927
changing reg in insn 931
changing reg in insn 928
changing reg in insn 1106
changing reg in insn 649
changing reg in insn 653
changing reg in insn 643
changing reg in insn 1107
changing reg in insn 647
changing reg in insn 655
changing reg in insn 647
changing reg in insn 643
changing reg in insn 1077
changing reg in insn 223
changing reg in insn 223
changing reg in insn 615
changing reg in insn 612
changing reg in insn 1078
changing reg in insn 580
changing reg in insn 594
changing reg in insn 607
changing reg in insn 1105
changing reg in insn 224
changing reg in insn 581
changing reg in insn 599
changing reg in insn 1079
changing reg in insn 901
changing reg in insn 903
changing reg in insn 904
changing reg in insn 615
changing reg in insn 1084
changing reg in insn 569
changing reg in insn 293
changing reg in insn 570
changing reg in insn 1086
changing reg in insn 568
changing reg in insn 864
changing reg in insn 863
changing reg in insn 569
changing reg in insn 566
changing reg in insn 1104
changing reg in insn 568
changing reg in insn 567
changing reg in insn 1099
changing reg in insn 1102
changing reg in insn 1100
changing reg in insn 37
changing reg in insn 497
changing reg in insn 484
changing reg in insn 488
changing reg in insn 37
changing reg in insn 36
changing reg in insn 497
changing reg in insn 501
changing reg in insn 1101
changing reg in insn 36
changing reg in insn 1103
changing reg in insn 1092
changing reg in insn 1096
changing reg in insn 1093
changing reg in insn 1097
changing reg in insn 1094
changing reg in insn 30
changing reg in insn 1098
changing reg in insn 1095
changing reg in insn 31
changing reg in insn 413
changing reg in insn 400
changing reg in insn 404
changing reg in insn 31
changing reg in insn 30
changing reg in insn 413
changing reg in insn 417
changing reg in insn 1087
changing reg in insn 1090
changing reg in insn 1088
changing reg in insn 25
changing reg in insn 317
changing reg in insn 304
changing reg in insn 308
changing reg in insn 25
changing reg in insn 24
changing reg in insn 317
changing reg in insn 321
changing reg in insn 1089
changing reg in insn 24
changing reg in insn 1091
changing reg in insn 1080
changing reg in insn 270
changing reg in insn 270
changing reg in insn 1076
changing reg in insn 206
changing reg in insn 208
changing reg in insn 206
changing reg in insn 205
changing reg in insn 200
changing reg in insn 195
changing reg in insn 191
changing reg in insn 204
changing reg in insn 200
changing reg in insn 191
changing reg in insn 1075
changing reg in insn 185
changing reg in insn 155
changing reg in insn 1073
changing reg in insn 157
changing reg in insn 1110
changing reg in insn 139
changing reg in insn 133
changing reg in insn 1111
changing reg in insn 1072
changing reg in insn 1066
changing reg in insn 120
changing reg in insn 1069
changing reg in insn 935
changing reg in insn 932
changing reg in insn 1067
changing reg in insn 934
changing reg in insn 1070
changing reg in insn 934
changing reg in insn 1068
changing reg in insn 937
changing reg in insn 1071
changing reg in insn 937
changing reg in insn 1108
changing reg in insn 87
changing reg in insn 81
changing reg in insn 1109
changing reg in insn 1065
changing reg in insn 1059
changing reg in insn 68
changing reg in insn 1062
changing reg in insn 929
changing reg in insn 926
changing reg in insn 1060
changing reg in insn 928
changing reg in insn 1063
changing reg in insn 928
changing reg in insn 1061
changing reg in insn 931
changing reg in insn 1064
changing reg in insn 931
deleting insn with uid = 1059.
deleting insn with uid = 1060.
deleting insn with uid = 1061.
deleting insn with uid = 1062.
deleting insn with uid = 1317.
deleting insn with uid = 1315.
deleting insn with uid = 1316.
deleting insn with uid = 1313.
deleting insn with uid = 1314.
deleting insn with uid = 1065.
deleting insn with uid = 1124.
deleting insn with uid = 1236.
deleting insn with uid = 1127.
deleting insn with uid = 1066.
deleting insn with uid = 1067.
deleting insn with uid = 1068.
deleting insn with uid = 1069.
deleting insn with uid = 1070.
deleting insn with uid = 1318.
deleting insn with uid = 1311.
deleting insn with uid = 1312.
deleting insn with uid = 1309.
deleting insn with uid = 1310.
deleting insn with uid = 1072.
deleting insn with uid = 1135.
deleting insn with uid = 1241.
deleting insn with uid = 1138.
deleting insn with uid = 1141.
deleting insn with uid = 1142.
deleting insn with uid = 1143.
deleting insn with uid = 1144.
deleting insn with uid = 1308.
deleting insn with uid = 1323.
deleting insn with uid = 1306.
deleting insn with uid = 1148.
deleting insn with uid = 1305.
deleting insn with uid = 1151.
deleting insn with uid = 1303.
deleting insn with uid = 1153.
deleting insn with uid = 1156.
deleting insn with uid = 1077.
deleting insn with uid = 1078.
deleting insn with uid = 1163.
deleting insn with uid = 1165.
deleting insn with uid = 1168.
deleting insn with uid = 1170.
deleting insn with uid = 1172.
deleting insn with uid = 1173.
deleting insn with uid = 1177.
deleting insn with uid = 1294.
deleting insn with uid = 1084.
deleting insn with uid = 1086.
deleting insn with uid = 1293.
deleting insn with uid = 1334.
deleting insn with uid = 1292.
deleting insn with uid = 1183.
deleting insn with uid = 1332.
deleting insn with uid = 1291.
deleting insn with uid = 1185.
deleting insn with uid = 1186.
deleting insn with uid = 1290.
deleting insn with uid = 1087.
deleting insn with uid = 1089.
deleting insn with uid = 1090.
deleting insn with uid = 1091.
deleting insn with uid = 1195.
deleting insn with uid = 1198.
deleting insn with uid = 1199.
deleting insn with uid = 1203.
deleting insn with uid = 1258.
deleting insn with uid = 1205.
deleting insn with uid = 1092.
deleting insn with uid = 1093.
deleting insn with uid = 1094.
deleting insn with uid = 1096.
deleting insn with uid = 1097.
deleting insn with uid = 1098.
deleting insn with uid = 1206.
deleting insn with uid = 1207.
deleting insn with uid = 1099.
deleting insn with uid = 1101.
deleting insn with uid = 1102.
deleting insn with uid = 1103.
deleting insn with uid = 1216.
deleting insn with uid = 1217.
deleting insn with uid = 1226.
deleting insn with uid = 1105.
deleting insn with uid = 1106.
deleting insn with uid = 1107.
deleting insn with uid = 872.
deleting insn with uid = 874.
deleting insn with uid = 876.
deleting insn with uid = 1109.
deleting insn with uid = 1110.
deleting insn with uid = 1111.


try_optimize_cfg iteration 1

Forwarding edge 44->45 to 55 failed.
Forwarding edge 67->68 to 132 failed.
Forwarding edge 78->79 to 102 failed.
Forwarding edge 90->91 to 101 failed.
Forwarding edge 110->111 to 112 failed.
Deleting fallthru block 111.
deleting block 111
Forwarding edge 112->113 to 114 failed.
Deleting fallthru block 113.
deleting block 113
Forwarding edge 114->115 to 134 failed.
Forwarding edge 117->118 to 54 failed.
Forwarding edge 120->121 to 77 failed.
Forwarding edge 124->125 to 100 failed.
Forwarding edge 132->133 to 102 failed.


try_optimize_cfg iteration 2

Forwarding edge 44->45 to 55 failed.
Forwarding edge 67->68 to 132 failed.
Forwarding edge 78->79 to 102 failed.
Forwarding edge 90->91 to 101 failed.
Forwarding edge 114->115 to 134 failed.
Forwarding edge 117->118 to 54 failed.
Forwarding edge 120->121 to 77 failed.
Forwarding edge 124->125 to 100 failed.
Forwarding edge 132->133 to 102 failed.


try_optimize_cfg iteration 1

Forwarding edge 44->45 to 55 failed.
Forwarding edge 67->68 to 132 failed.
Forwarding edge 78->79 to 102 failed.
Forwarding edge 90->91 to 101 failed.
Forwarding edge 114->115 to 134 failed.
Forwarding edge 117->118 to 54 failed.
Forwarding edge 120->121 to 77 failed.
Forwarding edge 124->125 to 100 failed.
Forwarding edge 132->133 to 102 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 3.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 231.
verify found no changes in insn with uid = 365.
verify found no changes in insn with uid = 378.
verify found no changes in insn with uid = 461.
verify found no changes in insn with uid = 474.
verify found no changes in insn with uid = 545.
verify found no changes in insn with uid = 558.
verify found no changes in insn with uid = 592.
verify found no changes in insn with uid = 605.
verify found no changes in insn with uid = 627.
verify found no changes in insn with uid = 646.
verify found no changes in insn with uid = 665.
verify found no changes in insn with uid = 673.
verify found no changes in insn with uid = 689.
verify found no changes in insn with uid = 697.
verify found no changes in insn with uid = 728.
verify found no changes in insn with uid = 736.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 133 n_edges 203 count 148 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 133 n_edges 203 count 148 (  1.1)


int main()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={177d,189u,3e} r1={79d,74u} r2={72d,57u} r3={39d,63u} r4={36d,45u} r5={31d,43u,3e} r6={1d,249u} r7={13d,244u,8e} r8={24d} r9={24d} r10={24d} r11={24d} r12={24d} r13={24d} r14={24d} r15={24d} r17={182d,75u} r18={24d} r19={24d} r20={1d,1u,3e} r21={25d} r22={25d} r23={25d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={25d} r30={25d} r31={25d} r32={24d} r33={24d} r34={24d} r35={24d} r36={24d} r37={24d} r38={24d} r39={24d} r40={24d} r41={24d} r42={24d} r43={24d} r44={24d} r45={24d} r46={24d} r47={24d} r48={24d} r49={24d} r50={24d} r51={24d} r52={24d} r53={24d} r54={24d} r55={24d} r56={24d} r57={24d} r58={24d} r59={24d} r60={24d} r61={24d} r62={24d} r63={24d} r64={24d} r65={24d} r66={24d} r67={24d} r68={24d} r69={24d} r70={24d} r71={24d} r72={24d} r73={24d} r74={24d} r75={24d} r76={24d} r485={3e} 
;;    total ref usage 3281{2221d,1040u,20e} in 605{581 regular + 24 call} insns.
(note 1 0 51 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(note 51 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 51 3 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 3 2 53 2 (call (mem:QI (symbol_ref:SI ("__main") [flags 0x43]) [0  S1 A8])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:32 641 {*call}
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (nil))
(call_insn 53 3 54 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:11 648 {*call_value}
     (nil)
    (nil))
(insn 54 53 55 2 (set (reg:SI 0 ax [orig:149 D.83218 ] [149])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg/v:QI 1 dx [orig:151 ch ] [151])
        (reg:QI 0 ax [orig:149 D.83218 ] [149])) D:\LHX\7.5 contest\t1.cpp:11 93 {*movqi_internal}
     (nil))
(insn 56 55 57 2 (parallel [
            (set (reg:QI 0 ax [orig:261 D.83228 ] [261])
                (plus:QI (reg:QI 0 ax [orig:149 D.83218 ] [149])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:12 224 {*addqi_1}
     (nil))
(insn 57 56 58 2 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:261 D.83228 ] [261])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:12 5 {*cmpqi_1}
     (nil))
(jump_insn 58 57 59 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 780)
            (pc))) D:\LHX\7.5 contest\t1.cpp:12 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 780)
;;  succ:       3 [91.0%]  (FALLTHRU)
;;              126 [9.0%] 
;; lr  out 	 1 [dx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [91.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 4 [si] 5 [di]
;; live  in  	 1 [dx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx] 4 [si] 5 [di]
;; live  kill	
(note 59 58 855 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 855 59 1235 3 (set (reg:SI 4 si [orig:429 flag ] [429])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(note 1235 855 856 3 NOTE_INSN_DELETED)
(insn 856 1235 1234 3 (set (reg:SI 5 di [orig:430 flag+4 ] [430])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(note 1234 856 927 3 NOTE_INSN_DELETED)
(insn 927 1234 69 3 (set (reg:SI 3 bx [461])
        (const_int -1 [0xffffffffffffffff])) D:\LHX\7.5 contest\t1.cpp:13 90 {*movsi_internal}
     (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 92, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU)
;;              4 [91.0%]  (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 69 927 60 4 117 "" [1 uses])
(note 60 69 926 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 926 60 928 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 1 dx [orig:151 ch ] [151])
            (const_int 45 [0x2d]))) D:\LHX\7.5 contest\t1.cpp:13 5 {*cmpqi_1}
     (nil))
(insn 928 926 929 4 (set (reg:SI 4 si [orig:429 flag ] [429])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 4 si [orig:429 flag ] [429])
            (reg:SI 3 bx [461]))) D:\LHX\7.5 contest\t1.cpp:13 927 {*movsicc_noc}
     (nil))
(insn 929 928 931 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 1 dx [orig:151 ch ] [151])
            (const_int 45 [0x2d]))) D:\LHX\7.5 contest\t1.cpp:13 5 {*cmpqi_1}
     (nil))
(insn 931 929 66 4 (set (reg:SI 5 di [orig:430 flag+4 ] [430])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 5 di [orig:430 flag+4 ] [430])
            (reg:SI 3 bx [461]))) D:\LHX\7.5 contest\t1.cpp:13 927 {*movsicc_noc}
     (nil))
(call_insn 66 931 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:14 648 {*call_value}
     (nil)
    (nil))
(insn 67 66 68 4 (set (reg:SI 0 ax [orig:150 D.83218 ] [150])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:14 90 {*movsi_internal}
     (nil))
(insn 68 67 70 4 (set (reg/v:QI 1 dx [orig:151 ch ] [151])
        (reg:QI 0 ax [orig:150 D.83218 ] [150])) D:\LHX\7.5 contest\t1.cpp:14 93 {*movqi_internal}
     (nil))
(insn 70 68 71 4 (parallel [
            (set (reg:QI 0 ax [orig:262 D.83228 ] [262])
                (plus:QI (reg:QI 0 ax [orig:150 D.83218 ] [150])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:12 224 {*addqi_1}
     (nil))
(insn 71 70 72 4 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:262 D.83228 ] [262])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:12 5 {*cmpqi_1}
     (nil))
(jump_insn 72 71 987 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 69)
            (pc))) D:\LHX\7.5 contest\t1.cpp:12 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 69)
;;  succ:       4 [91.0%]  (DFS_BACK)
;;              5 [9.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 [9.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx]
;; live  kill	
(note 987 72 1063 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 1063 987 1064 5 (set (reg:SI 3 bx [orig:429 flag ] [429])
        (reg:SI 4 si [orig:429 flag ] [429])) 90 {*movsi_internal}
     (nil))
(insn 1064 1063 988 5 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (reg:SI 5 di [orig:430 flag+4 ] [430])) 90 {*movsi_internal}
     (nil))
(jump_insn 988 1064 989 5 (set (pc)
        (label_ref 748)) 636 {jump}
     (nil)
 -> 748)
;;  succ:       127 [100.0%]  (LOOP_EXIT)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

(barrier 989 988 88)
;; basic block 6, loop depth 0, count 0, freq 92, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [91.0%]  (DFS_BACK)
;;              127 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 88 989 76 6 118 "" [2 uses])
(note 76 88 1121 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 1121 76 77 6 (set (reg:DI 0 ax [orig:263 D.83229 ] [263])
        (reg/v:DI 4 si [orig:159 re ] [159])) D:\LHX\7.5 contest\t1.cpp:16 89 {*movdi_internal}
     (nil))
(insn 77 1121 1122 6 (parallel [
            (set (reg:DI 0 ax [orig:263 D.83229 ] [263])
                (ashift:DI (reg:DI 0 ax [orig:263 D.83229 ] [263])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 488 {*ashldi3_doubleword}
     (nil))
(insn 1122 77 78 6 (set (reg:DI 0 ax [orig:263 D.83229 ] [263])
        (reg:DI 0 ax [orig:263 D.83229 ] [263])) D:\LHX\7.5 contest\t1.cpp:16 89 {*movdi_internal}
     (nil))
(insn 78 1122 79 6 (parallel [
            (set (reg:DI 4 si [orig:264 D.83229 ] [264])
                (ashift:DI (reg:DI 4 si [orig:264 D.83229 ] [264])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 488 {*ashldi3_doubleword}
     (nil))
(insn 79 78 81 6 (parallel [
            (set (reg:DI 4 si [orig:265 D.83229 ] [265])
                (plus:DI (reg:DI 4 si [orig:264 D.83229 ] [264])
                    (reg:DI 0 ax [orig:263 D.83229 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (nil))
(insn 81 79 82 6 (set (reg:SI 0 ax [orig:267 ch ] [267])
        (sign_extend:SI (reg/v:QI 2 cx [orig:151 ch ] [151]))) D:\LHX\7.5 contest\t1.cpp:16 148 {extendqisi2}
     (nil))
(insn 82 81 83 6 (parallel [
            (set (reg:DI 0 ax [orig:266 D.83229 ] [266])
                (sign_extend:DI (reg:SI 0 ax [orig:267 ch ] [267])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:16 143 {extendsidi2_1}
     (nil))
(insn 83 82 84 6 (parallel [
            (set (reg:DI 4 si [orig:158 D.83229 ] [158])
                (plus:DI (reg:DI 4 si [orig:265 D.83229 ] [265])
                    (reg:DI 0 ax [orig:266 D.83229 ] [266])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (nil))
(insn 84 83 85 6 (parallel [
            (set (reg/v:DI 4 si [orig:159 re ] [159])
                (plus:DI (reg/v:DI 4 si [orig:159 re ] [159])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (nil))
(call_insn 85 84 86 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:16 648 {*call_value}
     (nil)
    (nil))
(insn 86 85 87 6 (set (reg:SI 0 ax [orig:160 D.83218 ] [160])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:16 90 {*movsi_internal}
     (nil))
(insn 87 86 89 6 (set (reg/v:QI 2 cx [orig:151 ch ] [151])
        (reg:QI 0 ax [orig:160 D.83218 ] [160])) D:\LHX\7.5 contest\t1.cpp:16 93 {*movqi_internal}
     (nil))
(insn 89 87 90 6 (parallel [
            (set (reg:QI 0 ax [orig:268 D.83228 ] [268])
                (plus:QI (reg:QI 0 ax [orig:160 D.83218 ] [160])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 224 {*addqi_1}
     (nil))
(insn 90 89 91 6 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:268 D.83228 ] [268])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:16 5 {*cmpqi_1}
     (nil))
(jump_insn 91 90 92 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 88)
            (pc))) D:\LHX\7.5 contest\t1.cpp:16 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 88)
;;  succ:       6 [91.0%]  (DFS_BACK)
;;              7 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(note 92 91 1123 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 1123 92 93 7 (set (reg:SI 2 cx [269])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])) D:\LHX\7.5 contest\t1.cpp:17 90 {*movsi_internal}
     (nil))
(insn 93 1123 1125 7 (parallel [
            (set (reg:SI 2 cx [269])
                (mult:SI (reg:SI 2 cx [269])
                    (reg:SI 4 si [orig:159 re ] [159])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 306 {*mulsi3_1}
     (nil))
(insn 1125 93 94 7 (set (reg:SI 0 ax [270])
        (reg:SI 3 bx [orig:429 flag ] [429])) D:\LHX\7.5 contest\t1.cpp:17 90 {*movsi_internal}
     (nil))
(insn 94 1125 1126 7 (parallel [
            (set (reg:SI 0 ax [270])
                (mult:SI (reg:SI 0 ax [270])
                    (reg:SI 5 di [ re+4 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 306 {*mulsi3_1}
     (nil))
(insn 1126 94 95 7 (set (reg:SI 0 ax [270])
        (reg:SI 0 ax [270])) D:\LHX\7.5 contest\t1.cpp:17 90 {*movsi_internal}
     (nil))
(insn 95 1126 1128 7 (parallel [
            (set (reg:SI 2 cx [271])
                (plus:SI (reg:SI 2 cx [269])
                    (reg:SI 0 ax [270])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 220 {*addsi_1}
     (nil))
(insn 1128 95 96 7 (set (reg:SI 0 ax [orig:272 D.83229 ] [272])
        (reg:SI 3 bx [orig:429 flag ] [429])) D:\LHX\7.5 contest\t1.cpp:17 90 {*movsi_internal}
     (nil))
(insn 96 1128 1129 7 (parallel [
            (set (reg:DI 0 ax [orig:272 D.83229 ] [272])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:272 D.83229 ] [272]))
                    (zero_extend:DI (reg:SI 4 si [orig:159 re ] [159]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 323 {*umulsidi3_1}
     (nil))
(insn 1129 96 97 7 (set (reg:DI 3 bx [orig:272 D.83229 ] [272])
        (reg:DI 0 ax [orig:272 D.83229 ] [272])) D:\LHX\7.5 contest\t1.cpp:17 89 {*movdi_internal}
     (nil))
(note 97 1129 98 7 NOTE_INSN_DELETED)
(insn 98 97 100 7 (parallel [
            (set (reg:SI 4 si [ D.83229+4 ])
                (plus:SI (reg:SI 4 si [ D.83229+4 ])
                    (reg:SI 2 cx [271])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 220 {*addsi_1}
     (nil))
(insn 100 98 101 7 (set (reg:SI 1 dx [orig:85 D.83218 ] [85])
        (reg:SI 3 bx [orig:272 D.83229 ] [272])) D:\LHX\7.5 contest\t1.cpp:37 90 {*movsi_internal}
     (nil))
(insn 101 100 102 7 (set (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])
        (reg:SI 3 bx [orig:272 D.83229 ] [272])) D:\LHX\7.5 contest\t1.cpp:37 90 {*movsi_internal}
     (nil))
(insn 102 101 103 7 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 1 dx [orig:85 D.83218 ] [85])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:38 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 103 102 781 7 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 756)
            (pc))) D:\LHX\7.5 contest\t1.cpp:38 596 {*jcc_1}
     (int_list:REG_BR_PROB 100 (nil))
 -> 756)
;;  succ:       8 [99.0%]  (FALLTHRU)
;;              130 [1.0%] 
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [99.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 781 103 7 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 7 781 933 8 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S4 A64])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(note 933 7 156 8 NOTE_INSN_DELETED)
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              14 [99.0%]  (DFS_BACK)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 156 933 104 9 124 "" [1 uses])
(note 104 156 105 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 105 104 106 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:11 648 {*call_value}
     (nil)
    (nil))
(insn 106 105 107 9 (set (reg:SI 0 ax [orig:84 D.83218 ] [84])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
(insn 107 106 108 9 (set (reg/v:QI 2 cx [orig:167 ch ] [167])
        (reg:QI 0 ax [orig:84 D.83218 ] [84])) D:\LHX\7.5 contest\t1.cpp:11 93 {*movqi_internal}
     (nil))
(insn 108 107 109 9 (parallel [
            (set (reg:QI 0 ax [orig:274 D.83228 ] [274])
                (plus:QI (reg:QI 0 ax [orig:84 D.83218 ] [84])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:12 224 {*addqi_1}
     (nil))
(insn 109 108 110 9 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:274 D.83228 ] [274])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:12 5 {*cmpqi_1}
     (nil))
(jump_insn 110 109 111 9 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 783)
            (pc))) D:\LHX\7.5 contest\t1.cpp:12 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 783)
;;  succ:       10 [91.0%]  (FALLTHRU)
;;              128 [9.0%] 
;; lr  out 	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [91.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 4 [si]
;; live  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx] 4 [si]
;; live  kill	
(note 111 110 859 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 859 111 1238 10 (set (reg:SI 3 bx [orig:431 flag ] [431])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(note 1238 859 860 10 NOTE_INSN_DELETED)
(insn 860 1238 1237 10 (set (reg:SI 4 si [orig:432 flag+4 ] [432])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:12 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(note 1237 860 121 10 NOTE_INSN_DELETED)
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              11 [91.0%]  (DFS_BACK)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 121 1237 112 11 122 "" [1 uses])
(note 112 121 932 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 932 112 1130 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 2 cx [orig:167 ch ] [167])
            (const_int 45 [0x2d]))) D:\LHX\7.5 contest\t1.cpp:13 5 {*cmpqi_1}
     (nil))
(insn 1130 932 934 11 (set (reg:SI 0 ax [509])
        (const_int -1 [0xffffffffffffffff])) D:\LHX\7.5 contest\t1.cpp:13 90 {*movsi_internal}
     (nil))
(insn 934 1130 935 11 (set (reg:SI 3 bx [orig:431 flag ] [431])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 3 bx [orig:431 flag ] [431])
            (reg:SI 0 ax [509]))) D:\LHX\7.5 contest\t1.cpp:13 927 {*movsicc_noc}
     (nil))
(insn 935 934 1131 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:QI 2 cx [orig:167 ch ] [167])
            (const_int 45 [0x2d]))) D:\LHX\7.5 contest\t1.cpp:13 5 {*cmpqi_1}
     (nil))
(insn 1131 935 937 11 (set (reg:SI 0 ax [510])
        (const_int -1 [0xffffffffffffffff])) D:\LHX\7.5 contest\t1.cpp:13 90 {*movsi_internal}
     (nil))
(insn 937 1131 118 11 (set (reg:SI 4 si [orig:432 flag+4 ] [432])
        (if_then_else:SI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 4 si [orig:432 flag+4 ] [432])
            (reg:SI 0 ax [510]))) D:\LHX\7.5 contest\t1.cpp:13 927 {*movsicc_noc}
     (nil))
(call_insn 118 937 119 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:14 648 {*call_value}
     (nil)
    (nil))
(insn 119 118 120 11 (set (reg:SI 0 ax [orig:166 D.83218 ] [166])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:14 90 {*movsi_internal}
     (nil))
(insn 120 119 122 11 (set (reg/v:QI 2 cx [orig:167 ch ] [167])
        (reg:QI 0 ax [orig:166 D.83218 ] [166])) D:\LHX\7.5 contest\t1.cpp:14 93 {*movqi_internal}
     (nil))
(insn 122 120 123 11 (parallel [
            (set (reg:QI 0 ax [orig:275 D.83228 ] [275])
                (plus:QI (reg:QI 0 ax [orig:166 D.83218 ] [166])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:12 224 {*addqi_1}
     (nil))
(insn 123 122 124 11 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:275 D.83228 ] [275])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:12 5 {*cmpqi_1}
     (nil))
(jump_insn 124 123 990 11 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 121)
            (pc))) D:\LHX\7.5 contest\t1.cpp:12 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 121)
;;  succ:       11 [91.0%]  (DFS_BACK)
;;              12 [9.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 [9.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 4 [si] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 990 124 1071 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 1071 990 991 12 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (reg:SI 4 si [orig:432 flag+4 ] [432])) 90 {*movsi_internal}
     (nil))
(jump_insn 991 1071 992 12 (set (pc)
        (label_ref 752)) 636 {jump}
     (nil)
 -> 752)
;;  succ:       129 [100.0%]  (LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

(barrier 992 991 140)
;; basic block 13, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [91.0%]  (DFS_BACK)
;;              129 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 140 992 128 13 123 "" [2 uses])
(note 128 140 1132 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 1132 128 129 13 (set (reg:DI 0 ax [orig:276 D.83229 ] [276])
        (reg/v:DI 4 si [orig:175 re ] [175])) D:\LHX\7.5 contest\t1.cpp:16 89 {*movdi_internal}
     (nil))
(insn 129 1132 1133 13 (parallel [
            (set (reg:DI 0 ax [orig:276 D.83229 ] [276])
                (ashift:DI (reg:DI 0 ax [orig:276 D.83229 ] [276])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 488 {*ashldi3_doubleword}
     (nil))
(insn 1133 129 130 13 (set (reg:DI 0 ax [orig:276 D.83229 ] [276])
        (reg:DI 0 ax [orig:276 D.83229 ] [276])) D:\LHX\7.5 contest\t1.cpp:16 89 {*movdi_internal}
     (nil))
(insn 130 1133 131 13 (parallel [
            (set (reg:DI 4 si [orig:277 D.83229 ] [277])
                (ashift:DI (reg:DI 4 si [orig:277 D.83229 ] [277])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 488 {*ashldi3_doubleword}
     (nil))
(insn 131 130 133 13 (parallel [
            (set (reg:DI 4 si [orig:278 D.83229 ] [278])
                (plus:DI (reg:DI 4 si [orig:277 D.83229 ] [277])
                    (reg:DI 0 ax [orig:276 D.83229 ] [276])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (nil))
(insn 133 131 134 13 (set (reg:SI 0 ax [orig:280 ch ] [280])
        (sign_extend:SI (reg/v:QI 2 cx [orig:167 ch ] [167]))) D:\LHX\7.5 contest\t1.cpp:16 148 {extendqisi2}
     (nil))
(insn 134 133 135 13 (parallel [
            (set (reg:DI 0 ax [orig:279 D.83229 ] [279])
                (sign_extend:DI (reg:SI 0 ax [orig:280 ch ] [280])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:16 143 {extendsidi2_1}
     (nil))
(insn 135 134 136 13 (parallel [
            (set (reg:DI 4 si [orig:174 D.83229 ] [174])
                (plus:DI (reg:DI 4 si [orig:278 D.83229 ] [278])
                    (reg:DI 0 ax [orig:279 D.83229 ] [279])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (nil))
(insn 136 135 137 13 (parallel [
            (set (reg/v:DI 4 si [orig:175 re ] [175])
                (plus:DI (reg/v:DI 4 si [orig:175 re ] [175])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 215 {*adddi3_doubleword}
     (nil))
(call_insn 137 136 138 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 0267a780 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:16 648 {*call_value}
     (nil)
    (nil))
(insn 138 137 139 13 (set (reg:SI 0 ax [orig:176 D.83218 ] [176])
        (reg:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:16 90 {*movsi_internal}
     (nil))
(insn 139 138 141 13 (set (reg/v:QI 2 cx [orig:167 ch ] [167])
        (reg:QI 0 ax [orig:176 D.83218 ] [176])) D:\LHX\7.5 contest\t1.cpp:16 93 {*movqi_internal}
     (nil))
(insn 141 139 142 13 (parallel [
            (set (reg:QI 0 ax [orig:281 D.83228 ] [281])
                (plus:QI (reg:QI 0 ax [orig:176 D.83218 ] [176])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:16 224 {*addqi_1}
     (nil))
(insn 142 141 143 13 (set (reg:CC 17 flags)
        (compare:CC (reg:QI 0 ax [orig:281 D.83228 ] [281])
            (const_int 9 [0x9]))) D:\LHX\7.5 contest\t1.cpp:16 5 {*cmpqi_1}
     (nil))
(jump_insn 143 142 144 13 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 140)
            (pc))) D:\LHX\7.5 contest\t1.cpp:16 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 140)
;;  succ:       13 [91.0%]  (DFS_BACK)
;;              14 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(note 144 143 1134 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 1134 144 146 14 (set (reg:SI 2 cx [283])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])) D:\LHX\7.5 contest\t1.cpp:17 90 {*movsi_internal}
     (nil))
(insn 146 1134 1136 14 (parallel [
            (set (reg:SI 2 cx [283])
                (mult:SI (reg:SI 2 cx [283])
                    (reg:SI 4 si [orig:175 re ] [175])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 306 {*mulsi3_1}
     (nil))
(insn 1136 146 147 14 (set (reg:SI 0 ax [284])
        (reg:SI 3 bx [orig:431 flag ] [431])) D:\LHX\7.5 contest\t1.cpp:17 90 {*movsi_internal}
     (nil))
(insn 147 1136 1137 14 (parallel [
            (set (reg:SI 0 ax [284])
                (mult:SI (reg:SI 0 ax [284])
                    (reg:SI 5 di [ re+4 ])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 306 {*mulsi3_1}
     (nil))
(insn 1137 147 148 14 (set (reg:SI 0 ax [284])
        (reg:SI 0 ax [284])) D:\LHX\7.5 contest\t1.cpp:17 90 {*movsi_internal}
     (nil))
(insn 148 1137 1139 14 (parallel [
            (set (reg:SI 2 cx [285])
                (plus:SI (reg:SI 2 cx [283])
                    (reg:SI 0 ax [284])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 220 {*addsi_1}
     (nil))
(insn 1139 148 149 14 (set (reg:SI 0 ax [orig:286 D.83229 ] [286])
        (reg:SI 3 bx [orig:431 flag ] [431])) D:\LHX\7.5 contest\t1.cpp:17 90 {*movsi_internal}
     (nil))
(insn 149 1139 1140 14 (parallel [
            (set (reg:DI 0 ax [orig:286 D.83229 ] [286])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:286 D.83229 ] [286]))
                    (zero_extend:DI (reg:SI 4 si [orig:175 re ] [175]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 323 {*umulsidi3_1}
     (nil))
(insn 1140 149 150 14 (set (reg:DI 0 ax [orig:286 D.83229 ] [286])
        (reg:DI 0 ax [orig:286 D.83229 ] [286])) D:\LHX\7.5 contest\t1.cpp:17 89 {*movdi_internal}
     (nil))
(note 150 1140 151 14 NOTE_INSN_DELETED)
(insn 151 150 1240 14 (parallel [
            (set (reg:SI 1 dx [ D.83229+4 ])
                (plus:SI (reg:SI 1 dx [ D.83229+4 ])
                    (reg:SI 2 cx [285])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:17 220 {*addsi_1}
     (nil))
(insn 1240 151 153 14 (set (reg/v:SI 5 di [orig:87 i ] [87])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S4 A64])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (nil))
(insn 153 1240 154 14 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 5 di [orig:87 i ] [87])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _30, step: 4, offset: 0B]+0 S4 A32])
        (reg:SI 0 ax [orig:286 D.83229 ] [286])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (nil))
(insn 154 153 1239 14 (parallel [
            (set (reg/v:SI 5 di [orig:87 i ] [87])
                (plus:SI (reg/v:SI 5 di [orig:87 i ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:38 220 {*addsi_1}
     (nil))
(insn 1239 154 155 14 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S4 A64])
        (reg/v:SI 5 di [orig:87 i ] [87])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (nil))
(insn 155 1239 157 14 (set (reg:SI 0 ax [orig:449 D.83218 ] [449])
        (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (nil))
(insn 157 155 158 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:449 D.83218 ] [449])
            (reg/v:SI 5 di [orig:87 i ] [87]))) D:\LHX\7.5 contest\t1.cpp:38 7 {*cmpsi_1}
     (nil))
(jump_insn 158 157 159 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 156)
            (pc))) D:\LHX\7.5 contest\t1.cpp:38 596 {*jcc_1}
     (int_list:REG_BR_PROB 9900 (nil))
 -> 156)
;;  succ:       9 [99.0%]  (DFS_BACK)
;;              15 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 159 158 1073 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 1073 159 1244 15 (set (reg:SI 0 ax [orig:449 D.83218 ] [449])
        (reg:SI 0 ax [orig:449 D.83218 ] [449])) 90 {*movsi_internal}
     (nil))
(insn 1244 1073 1243 15 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 0 ax [orig:449 D.83218 ] [449])) 90 {*movsi_internal}
     (nil))
(insn 1243 1244 1145 15 (set (reg:SI 0 ax [orig:449 D.83218 ] [449])
        (reg:SI 0 ax [orig:449 D.83218 ] [449])) D:\LHX\7.5 contest\t1.cpp:39 90 {*movsi_internal}
     (nil))
(insn 1145 1243 160 15 (set (reg:SI 0 ax [orig:449 D.83218 ] [449])
        (reg:SI 0 ax [orig:449 D.83218 ] [449])) D:\LHX\7.5 contest\t1.cpp:39 90 {*movsi_internal}
     (nil))
(insn 160 1145 161 15 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:449 D.83218 ] [449])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:39 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 161 160 162 15 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) D:\LHX\7.5 contest\t1.cpp:39 596 {*jcc_1}
     (int_list:REG_BR_PROB 100 (nil))
 -> 210)
;;  succ:       16 [99.0%]  (FALLTHRU)
;;              20 [1.0%] 
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       15 [99.0%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 3 [bx] 4 [si]
;; live  kill	 17 [flags]
(note 162 161 1147 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 1147 162 163 16 (set (reg:SI 0 ax [orig:449 D.83218 ] [449])
        (reg:SI 0 ax [orig:449 D.83218 ] [449])) 90 {*movsi_internal}
     (nil))
(insn 163 1147 1146 16 (parallel [
            (set (reg:SI 0 ax [orig:240 D.83218 ] [240])
                (plus:SI (reg:SI 0 ax [orig:449 D.83218 ] [449])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 220 {*addsi_1}
     (nil))
(insn 1146 163 1242 16 (set (reg:SI 0 ax [orig:240 D.83218 ] [240])
        (reg:SI 0 ax [orig:240 D.83218 ] [240])) 90 {*movsi_internal}
     (nil))
(note 1242 1146 12 16 NOTE_INSN_DELETED)
(insn 12 1242 176 16 (set (reg/v:SI 4 si [orig:94 i ] [94])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:39 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(note 176 12 1074 16 NOTE_INSN_DELETED)
(insn 1074 176 1075 16 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (reg/v:SI 4 si [orig:94 i ] [94])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (nil))
(insn 1075 1074 184 16 (set (reg:SI 3 bx [orig:240 D.83218 ] [240])
        (reg:SI 0 ax [orig:240 D.83218 ] [240])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU)
;;              17 [99.0%]  (DFS_BACK)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 184 1075 164 17 126 "" [1 uses])
(note 164 184 1324 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 1324 164 168 17 (set (reg/v:SI 2 cx [orig:94 i ] [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (nil))
(insn 168 1324 169 17 (set (reg:SI 1 dx [orig:291 MEM[symbol: a, index: _39, step: 4, offset: 0B] ] [291])
        (mem:SI (plus:SI (mult:SI (reg/v:SI 2 cx [orig:94 i ] [94])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _39, step: 4, offset: 0B]+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _39, step: 4, offset: 0B]+0 S4 A32])
        (nil)))
(insn 169 168 1245 17 (parallel [
            (set (reg:DI 4 si [orig:290 D.83220 ] [290])
                (sign_extend:DI (reg:SI 1 dx [orig:291 MEM[symbol: a, index: _39, step: 4, offset: 0B] ] [291])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:40 143 {extendsidi2_1}
     (nil))
(note 1245 169 171 17 NOTE_INSN_DELETED)
(note 171 1245 172 17 NOTE_INSN_DELETED)
(insn 172 171 1307 17 (parallel [
            (set (reg:SI 0 ax [293])
                (mult:SI (mem:SI (plus:SI (mult:SI (reg/v:SI 2 cx [orig:94 i ] [94])
                                (const_int 8 [0x8]))
                            (const:SI (plus:SI (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)
                                    (const_int -4 [0xfffffffffffffffc])))) [34 MEM[symbol: pre, index: _39, step: 8, offset: 4294967288B]+4 S4 A32])
                    (const_int 19260817 [0x125e591])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:40 306 {*mulsi3_1}
     (nil))
(insn 1307 172 1322 17 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S4 A64])
        (reg:SI 0 ax [293])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (nil))
(note 1322 1307 1149 17 NOTE_INSN_DELETED)
(insn 1149 1322 1321 17 (set (reg:SI 0 ax [orig:298 D.83220 ] [298])
        (const_int 19260817 [0x125e591])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (nil))
(insn 1321 1149 177 17 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (reg/v:SI 2 cx [orig:94 i ] [94])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (nil))
(insn 177 1321 1150 17 (parallel [
            (set (reg:DI 0 ax [orig:298 D.83220 ] [298])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:298 D.83220 ] [298]))
                    (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg/v:SI 2 cx [orig:94 i ] [94])
                                    (const_int 8 [0x8]))
                                (const:SI (plus:SI (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)
                                        (const_int -8 [0xfffffffffffffff8])))) [34 MEM[symbol: pre, index: _39, step: 8, offset: 4294967288B]+0 S4 A64]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:40 323 {*umulsidi3_1}
     (expr_list:REG_EQUAL (mult:DI (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                            (const_int 8 [0x8]))
                        (const:SI (plus:SI (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)
                                (const_int -8 [0xfffffffffffffff8])))) [34 MEM[symbol: pre, index: _39, step: 8, offset: 4294967288B]+0 S4 A64]))
            (const_int 19260817 [0x125e591]))
        (nil)))
(insn 1150 177 178 17 (set (reg:DI 1 dx [orig:298 D.83220 ] [298])
        (reg:DI 0 ax [orig:298 D.83220 ] [298])) D:\LHX\7.5 contest\t1.cpp:40 89 {*movdi_internal}
     (nil))
(note 178 1150 1304 17 NOTE_INSN_DELETED)
(note 1304 178 179 17 NOTE_INSN_DELETED)
(insn 179 1304 181 17 (parallel [
            (set (reg:SI 2 cx [ D.83220+4 ])
                (plus:SI (reg:SI 2 cx [ D.83220+4 ])
                    (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:40 220 {*addsi_1}
     (nil))
(insn 181 179 1152 17 (parallel [
            (set (reg:DI 4 si [301])
                (plus:DI (reg:DI 4 si [301])
                    (reg:DI 1 dx [orig:298 D.83220 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:40 215 {*adddi3_doubleword}
     (expr_list:REG_EQUIV (mem:DI (plus:SI (mult:SI (reg/v:SI 485 [orig:94 i ] [94])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 MEM[symbol: pre, index: _39, step: 8, offset: 0B]+0 S8 A64])
        (nil)))
(insn 1152 181 1320 17 (set (reg:DI 0 ax [301])
        (reg:DI 4 si [301])) D:\LHX\7.5 contest\t1.cpp:40 89 {*movdi_internal}
     (nil))
(insn 1320 1152 182 17 (set (reg/v:SI 2 cx [orig:94 i ] [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])) D:\LHX\7.5 contest\t1.cpp:40 90 {*movsi_internal}
     (nil))
(insn 182 1320 1301 17 (set (mem:DI (plus:SI (mult:SI (reg/v:SI 2 cx [orig:94 i ] [94])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 MEM[symbol: pre, index: _39, step: 8, offset: 0B]+0 S8 A64])
        (reg:DI 0 ax [301])) D:\LHX\7.5 contest\t1.cpp:40 89 {*movdi_internal}
     (nil))
(insn 1301 182 183 17 (set (reg/v:SI 0 ax [orig:94 i ] [94])
        (reg/v:SI 2 cx [orig:94 i ] [94])) D:\LHX\7.5 contest\t1.cpp:39 90 {*movsi_internal}
     (nil))
(insn 183 1301 1302 17 (parallel [
            (set (reg/v:SI 0 ax [orig:94 i ] [94])
                (plus:SI (reg/v:SI 0 ax [orig:94 i ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:39 220 {*addsi_1}
     (nil))
(insn 1302 183 1319 17 (set (reg/v:SI 0 ax [orig:94 i ] [94])
        (reg/v:SI 0 ax [orig:94 i ] [94])) D:\LHX\7.5 contest\t1.cpp:39 90 {*movsi_internal}
     (nil))
(insn 1319 1302 1300 17 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (reg/v:SI 0 ax [orig:94 i ] [94])) D:\LHX\7.5 contest\t1.cpp:39 90 {*movsi_internal}
     (nil))
(insn 1300 1319 185 17 (set (reg/v:SI 0 ax [orig:94 i ] [94])
        (reg/v:SI 0 ax [orig:94 i ] [94])) D:\LHX\7.5 contest\t1.cpp:39 90 {*movsi_internal}
     (nil))
(insn 185 1300 186 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:94 i ] [94])
            (reg:SI 3 bx [orig:240 D.83218 ] [240]))) D:\LHX\7.5 contest\t1.cpp:39 7 {*cmpsi_1}
     (nil))
(jump_insn 186 185 784 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 184)
            (pc))) D:\LHX\7.5 contest\t1.cpp:39 596 {*jcc_1}
     (int_list:REG_BR_PROB 9900 (nil))
 -> 184)
;;  succ:       17 [99.0%]  (DFS_BACK)
;;              18 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       17 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 4 [si] 5 [di]
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 4 [si] 5 [di]
;; live  kill	
(note 784 186 13 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 13 784 199 18 (set (reg/v:SI 4 si [orig:101 i ] [101])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:\LHX\7.5 contest\t1.cpp:38 90 {*movsi_internal}
     (nil))
(note 199 13 1076 18 NOTE_INSN_DELETED)
(insn 1076 199 207 18 (set (reg/v:SI 5 di [orig:101 i ] [101])
        (reg/v:SI 4 si [orig:101 i ] [101])) D:\LHX\7.5 contest\t1.cpp:43 90 {*movsi_internal}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              19 [99.0%]  (DFS_BACK)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 207 1076 187 19 127 "" [1 uses])
(note 187 207 191 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 191 187 192 19 (set (reg:SI 1 dx [orig:305 MEM[symbol: a, index: _411, step: 4, offset: 0B] ] [305])
        (mem:SI (plus:SI (mult:SI (reg/v:SI 5 di [orig:101 i ] [101])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _411, step: 4, offset: 0B]+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:43 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (mult:SI (reg/v:SI 5 di [orig:101 i ] [101])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("a") [flags 0x2]  <var_decl 06e5d780 a>)) [21 MEM[symbol: a, index: _411, step: 4, offset: 0B]+0 S4 A32])
        (nil)))
(insn 192 191 1246 19 (parallel [
            (set (reg:DI 3 bx [orig:304 D.83220 ] [304])
                (sign_extend:DI (reg:SI 1 dx [orig:305 MEM[symbol: a, index: _411, step: 4, offset: 0B] ] [305])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:43 143 {extendsidi2_1}
     (nil))
(note 1246 192 194 19 NOTE_INSN_DELETED)
(note 194 1246 195 19 NOTE_INSN_DELETED)
(insn 195 194 1299 19 (parallel [
            (set (reg:SI 0 ax [307])
                (mult:SI (mem:SI (plus:SI (mult:SI (reg/v:SI 5 di [orig:101 i ] [101])
                                (const_int 8 [0x8]))
                            (const:SI (plus:SI (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)
                                    (const_int 12 [0xc])))) [34 MEM[symbol: suf, index: _411, step: 8, offset: 8B]+4 S4 A32])
                    (const_int 19260817 [0x125e591])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:43 306 {*mulsi3_1}
     (nil))
(insn 1299 195 1325 19 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (reg:SI 0 ax [307])) D:\LHX\7.5 contest\t1.cpp:43 90 {*movsi_internal}
     (nil))
(note 1325 1299 1154 19 NOTE_INSN_DELETED)
(insn 1154 1325 200 19 (set (reg:SI 0 ax [orig:312 D.83220 ] [312])
        (const_int 19260817 [0x125e591])) D:\LHX\7.5 contest\t1.cpp:43 90 {*movsi_internal}
     (nil))
(insn 200 1154 1155 19 (parallel [
            (set (reg:DI 0 ax [orig:312 D.83220 ] [312])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:312 D.83220 ] [312]))
                    (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg/v:SI 5 di [orig:101 i ] [101])
                                    (const_int 8 [0x8]))
                                (const:SI (plus:SI (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)
                                        (const_int 8 [0x8])))) [34 MEM[symbol: suf, index: _411, step: 8, offset: 8B]+0 S4 A64]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:43 323 {*umulsidi3_1}
     (expr_list:REG_EQUAL (mult:DI (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg/v:SI 5 di [orig:101 i ] [101])
                            (const_int 8 [0x8]))
                        (const:SI (plus:SI (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)
                                (const_int 8 [0x8])))) [34 MEM[symbol: suf, index: _411, step: 8, offset: 8B]+0 S4 A64]))
            (const_int 19260817 [0x125e591]))
        (nil)))
(insn 1155 200 201 19 (set (reg:DI 1 dx [orig:312 D.83220 ] [312])
        (reg:DI 0 ax [orig:312 D.83220 ] [312])) D:\LHX\7.5 contest\t1.cpp:43 89 {*movdi_internal}
     (nil))
(note 201 1155 1298 19 NOTE_INSN_DELETED)
(note 1298 201 202 19 NOTE_INSN_DELETED)
(insn 202 1298 204 19 (parallel [
            (set (reg:SI 2 cx [ D.83220+4 ])
                (plus:SI (reg:SI 2 cx [ D.83220+4 ])
                    (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:43 220 {*addsi_1}
     (nil))
(insn 204 202 1157 19 (parallel [
            (set (reg:DI 3 bx [315])
                (plus:DI (reg:DI 3 bx [315])
                    (reg:DI 1 dx [orig:312 D.83220 ] [312])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:43 215 {*adddi3_doubleword}
     (expr_list:REG_EQUIV (mem:DI (plus:SI (mult:SI (reg/v:SI 5 di [orig:101 i ] [101])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)) [34 MEM[symbol: suf, index: _411, step: 8, offset: 0B]+0 S8 A64])
        (nil)))
(insn 1157 204 205 19 (set (reg:DI 0 ax [315])
        (reg:DI 3 bx [315])) D:\LHX\7.5 contest\t1.cpp:43 89 {*movdi_internal}
     (nil))
(insn 205 1157 206 19 (set (mem:DI (plus:SI (mult:SI (reg/v:SI 5 di [orig:101 i ] [101])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)) [34 MEM[symbol: suf, index: _411, step: 8, offset: 0B]+0 S8 A64])
        (reg:DI 0 ax [315])) D:\LHX\7.5 contest\t1.cpp:43 89 {*movdi_internal}
     (nil))
(insn 206 205 208 19 (parallel [
            (set (reg/v:SI 5 di [orig:101 i ] [101])
                (plus:SI (reg/v:SI 5 di [orig:101 i ] [101])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:42 220 {*addsi_1}
     (nil))
(insn 208 206 209 19 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 5 di [orig:101 i ] [101])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:42 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 209 208 210 19 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 207)
            (pc))) D:\LHX\7.5 contest\t1.cpp:42 596 {*jcc_1}
     (int_list:REG_BR_PROB 9900 (nil))
 -> 207)
;;  succ:       19 [99.0%]  (DFS_BACK)
;;              20 [1.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       19 [1.0%]  (FALLTHRU,LOOP_EXIT)
;;              15 [1.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 2 [cx] 3 [bx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 2 [cx] 3 [bx] 17 [flags]
;; live  kill	
(code_label 210 209 211 20 125 "" [1 uses])
(note 211 210 212 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 221 20 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [21 j+0 S4 A32])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (nil))
(insn 221 212 15 20 (set (reg:SI 2 cx [orig:252 D.83218 ] [252])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 15 221 602 20 (set (reg:SI 3 bx [orig:125 D.83218 ] [125])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(note 602 15 1158 20 NOTE_INSN_DELETED)
(note 1158 602 1297 20 NOTE_INSN_DELETED)
(note 1297 1158 213 20 NOTE_INSN_DELETED)
(insn 213 1297 214 20 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:45 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 214 213 759 20 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 1113)
            (pc))) D:\LHX\7.5 contest\t1.cpp:45 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 1113)
;;  succ:       22 [91.0%] 
;;              21 [9.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 1
;;  prev block 20, next block 22, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [9.0%]  (FALLTHRU)
;;              130 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 2 [cx]
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 2 [cx]
;; live  kill	
(code_label 759 214 215 21 184 "" [1 uses])
(note 215 759 216 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 993 21 (set (reg:SI 2 cx [orig:252 D.83218 ] [252])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(jump_insn 993 216 994 21 (set (pc)
        (label_ref 617)) 636 {jump}
     (nil)
 -> 617)
;;  succ:       112 [100.0%] 
;; lr  out 	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 6 [bp] 7 [sp] 20 [frame]

(barrier 994 993 1113)
;; basic block 22, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 [91.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 1113 994 1112 22 231 "" [1 uses])
(note 1112 1113 1079 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 1079 1112 941 22 (set (reg:SI 5 di [orig:449 D.83218 ] [449])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       23 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 92, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       22 [100.0%]  (FALLTHRU)
;;              110 [91.0%]  (DFS_BACK)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 941 1079 940 23 209 "" [1 uses])
(note 940 941 1159 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 1159 940 223 23 (set (reg:SI 0 ax [orig:317 D.83218 ] [317])
        (reg:SI 5 di [orig:449 D.83218 ] [449])) D:\LHX\7.5 contest\t1.cpp:46 90 {*movsi_internal}
     (nil))
(insn 223 1159 1160 23 (parallel [
            (set (reg:SI 0 ax [orig:317 D.83218 ] [317])
                (div:SI (reg:SI 0 ax [orig:317 D.83218 ] [317])
                    (reg:SI 3 bx [orig:125 D.83218 ] [125])))
            (set (reg:SI 1 dx [318])
                (mod:SI (reg:SI 0 ax [orig:317 D.83218 ] [317])
                    (reg:SI 3 bx [orig:125 D.83218 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:46 338 {*divmodsi4}
     (nil))
(insn 1160 223 895 23 (set (reg:SI 0 ax [orig:317 D.83218 ] [317])
        (reg:SI 0 ax [orig:317 D.83218 ] [317])) D:\LHX\7.5 contest\t1.cpp:46 90 {*movsi_internal}
     (nil))
(insn 895 1160 1161 23 (set (reg:SI 3 bx [orig:451 j ] [451])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [21 j+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 1161 895 224 23 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 3 bx [orig:451 j ] [451])) 90 {*movsi_internal}
     (nil))
(insn 224 1161 225 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:317 D.83218 ] [317])
            (reg:SI 2 cx [orig:252 D.83218 ] [252]))) D:\LHX\7.5 contest\t1.cpp:46 7 {*cmpsi_1}
     (nil))
(jump_insn 225 224 226 23 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 608)
            (pc))) D:\LHX\7.5 contest\t1.cpp:46 596 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 608)
;;  succ:       110 [71.0%] 
;;              24 [29.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 27, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       23 [29.0%]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;; live  kill	 0 [ax] 17 [flags]
(note 226 225 228 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 228 226 229 24 (set (reg/f:SI 0 ax [orig:320 MEM[(struct _Rb_tree_node_base * *)&s + 8B] ] [320])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])
        (nil)))
(insn 229 228 230 24 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:320 MEM[(struct _Rb_tree_node_base * *)&s + 8B] ] [320])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 90 {*movsi_internal}
     (nil))
(insn 230 229 231 24 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 90 {*movsi_internal}
     (nil))
(call_insn 231 230 232 24 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E") [flags 0x3]  <function_decl 06e20200 _M_erase>) [0 _M_erase S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 646 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 232 231 234 24 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:908 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 234 232 236 24 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 12 [0xc]))) [6 MEM[(struct _Rb_tree_node_base * &)&s + 12]+0 S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:909 90 {*movsi_internal}
     (nil))
(insn 236 234 238 24 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * &)&s + 8]+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:910 90 {*movsi_internal}
     (nil))
(insn 238 236 240 24 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 16 [0x10]))) [6 MEM[(struct _Rb_tree_node_base * &)&s + 16]+0 S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:911 90 {*movsi_internal}
     (nil))
(insn 240 238 241 24 (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:912 90 {*movsi_internal}
     (nil))
(insn 241 240 1162 24 (set (reg:SI 0 ax [orig:451 j ] [451])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [21 j+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 1162 241 1249 24 (set (reg:SI 0 ax [orig:451 j ] [451])
        (reg:SI 0 ax [orig:451 j ] [451])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 1249 1162 1248 24 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 0 ax [orig:451 j ] [451])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 1248 1249 911 24 (set (reg:SI 0 ax [orig:451 j ] [451])
        (reg:SI 0 ax [orig:451 j ] [451])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 911 1248 1247 24 (set (reg:SI 5 di [orig:106 D.83218 ] [106])
        (reg:SI 0 ax [orig:451 j ] [451])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 1247 911 1164 24 (set (reg:SI 0 ax [orig:451 j ] [451])
        (reg:SI 0 ax [orig:451 j ] [451])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 1164 1247 242 24 (set (reg:SI 3 bx [orig:104 b ] [104])
        (reg:SI 0 ax [orig:451 j ] [451])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(insn 242 1164 243 24 (parallel [
            (set (reg/v:DI 3 bx [orig:104 b ] [104])
                (sign_extend:DI (reg:SI 3 bx [orig:104 b ] [104])))
            (clobber (reg:CC 17 flags))
            (clobber (scratch:SI))
        ]) D:\LHX\7.5 contest\t1.cpp:47 143 {extendsidi2_1}
     (nil))
(note 243 242 1166 24 NOTE_INSN_DELETED)
(insn 1166 243 244 24 (set (reg:SI 0 ax [503])
        (reg:SI 0 ax [orig:451 j ] [451])) D:\LHX\7.5 contest\t1.cpp:26 90 {*movsi_internal}
     (nil))
(insn 244 1166 245 24 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ior:SI (reg:SI 0 ax [503])
                        (reg:SI 4 si [ b+4 ]))
                    (const_int 0 [0])))
            (clobber (reg:SI 0 ax [503]))
        ]) D:\LHX\7.5 contest\t1.cpp:26 425 {*iorsi_3}
     (nil))
(jump_insn 245 244 246 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 789)
            (pc))) D:\LHX\7.5 contest\t1.cpp:26 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 789)
;;  succ:       25 [91.0%]  (FALLTHRU)
;;              30 [9.0%] 
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 24, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       24 [91.0%]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx]
;; live  kill	
(note 246 245 16 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 16 246 17 25 (set (reg/v:DI 0 ax [orig:135 a ] [135])
        (const_int 19260817 [0x125e591])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 19260817 [0x125e591])
        (nil)))
(insn 17 16 1080 25 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 1080 17 1081 25 (set (reg/v:DI 2 cx [orig:104 b ] [104])
        (reg/v:DI 3 bx [orig:104 b ] [104])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (nil))
(insn 1081 1080 1082 25 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S4 A64])
        (reg:SI 5 di [orig:106 D.83218 ] [106])) D:\LHX\7.5 contest\t1.cpp:26 90 {*movsi_internal}
     (nil))
(insn 1082 1081 271 25 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S8 A64])
        (reg/v:DI 0 ax [orig:135 a ] [135])) D:\LHX\7.5 contest\t1.cpp:26 89 {*movdi_internal}
     (nil))
;;  succ:       26 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 270, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       25 [100.0%]  (FALLTHRU)
;;              28 [91.0%]  (DFS_BACK)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 4 [si] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 271 1082 247 26 133 "" [1 uses])
(note 247 271 1167 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 1167 247 248 26 (set (reg:SI 4 si [orig:439 D.83220 ] [439])
        (reg:SI 2 cx [orig:104 b ] [104])) D:\LHX\7.5 contest\t1.cpp:27 90 {*movsi_internal}
     (nil))
(insn 248 1167 251 26 (parallel [
            (set (reg:SI 4 si [orig:439 D.83220 ] [439])
                (and:SI (reg:SI 4 si [orig:439 D.83220 ] [439])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 370 {*andsi_1}
     (nil))
(insn 251 248 252 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 4 si [orig:439 D.83220 ] [439])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:27 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 252 251 253 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 261)
            (pc))) D:\LHX\7.5 contest\t1.cpp:27 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 261)
;;  succ:       27 [50.0%]  (FALLTHRU)
;;              28 [50.0%] 
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 135, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       26 [50.0%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(note 253 252 1251 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 1251 253 1169 27 (set (reg/v:DI 0 ax [orig:136 tmod ] [136])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])) D:\LHX\7.5 contest\t1.cpp:27 89 {*movdi_internal}
     (nil))
(insn 1169 1251 1328 27 (set (reg:SI 5 di [328])
        (reg:SI 1 dx [ tmod+4 ])) D:\LHX\7.5 contest\t1.cpp:27 90 {*movsi_internal}
     (nil))
(note 1328 1169 254 27 NOTE_INSN_DELETED)
(insn 254 1328 1250 27 (parallel [
            (set (reg:SI 5 di [328])
                (mult:SI (reg:SI 5 di [328])
                    (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 306 {*mulsi3_1}
     (nil))
(insn 1250 254 1327 27 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])
        (reg/v:DI 0 ax [orig:136 tmod ] [136])) D:\LHX\7.5 contest\t1.cpp:27 89 {*movdi_internal}
     (nil))
(note 1327 1250 1171 27 NOTE_INSN_DELETED)
(insn 1171 1327 1326 27 (set (reg:SI 4 si [329])
        (reg:SI 0 ax [orig:136 tmod ] [136])) D:\LHX\7.5 contest\t1.cpp:27 90 {*movsi_internal}
     (nil))
(note 1326 1171 255 27 NOTE_INSN_DELETED)
(insn 255 1326 256 27 (parallel [
            (set (reg:SI 4 si [329])
                (mult:SI (reg:SI 4 si [329])
                    (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [45 %sfp+-20 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 306 {*mulsi3_1}
     (nil))
(insn 256 255 1174 27 (parallel [
            (set (reg:SI 4 si [330])
                (plus:SI (reg:SI 4 si [329])
                    (reg:SI 5 di [328])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 220 {*addsi_1}
     (nil))
(insn 1174 256 257 27 (set (reg:SI 0 ax [orig:136 tmod ] [136])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S4 A64])) D:\LHX\7.5 contest\t1.cpp:27 90 {*movsi_internal}
     (nil))
(insn 257 1174 1175 27 (parallel [
            (set (reg/v:DI 0 ax [orig:136 tmod ] [136])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:136 tmod ] [136]))
                    (zero_extend:DI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 323 {*umulsidi3_1}
     (nil))
(insn 1175 257 258 27 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])
        (reg/v:DI 0 ax [orig:136 tmod ] [136])) D:\LHX\7.5 contest\t1.cpp:27 89 {*movdi_internal}
     (nil))
(note 258 1175 259 27 NOTE_INSN_DELETED)
(insn 259 258 261 27 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [45 %sfp+-28 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [45 %sfp+-28 S4 A32])
                    (reg:SI 4 si [330])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:27 220 {*addsi_1}
     (nil))
;;  succ:       28 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 270, maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       26 [50.0%] 
;;              27 [100.0%]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;; live  kill	 0 [ax] 17 [flags]
(code_label 261 259 262 28 132 "" [1 uses])
(note 262 261 1331 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 1331 262 1176 28 (set (reg/v:DI 0 ax [orig:135 a ] [135])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S8 A64])) D:\LHX\7.5 contest\t1.cpp:28 89 {*movdi_internal}
     (nil))
(insn 1176 1331 1330 28 (set (reg:SI 4 si [332])
        (reg:SI 1 dx [ a+4 ])) D:\LHX\7.5 contest\t1.cpp:28 90 {*movsi_internal}
     (nil))
(insn 1330 1176 263 28 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S8 A64])
        (reg/v:DI 0 ax [orig:135 a ] [135])) D:\LHX\7.5 contest\t1.cpp:28 89 {*movdi_internal}
     (nil))
(insn 263 1330 265 28 (parallel [
            (set (reg:SI 4 si [332])
                (mult:SI (reg:SI 4 si [332])
                    (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 306 {*mulsi3_1}
     (nil))
(insn 265 263 1329 28 (parallel [
            (set (reg:SI 4 si [334])
                (ashift:SI (reg:SI 4 si [332])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 496 {*ashlsi3_1}
     (nil))
(note 1329 265 1295 28 NOTE_INSN_DELETED)
(insn 1295 1329 266 28 (set (reg:SI 0 ax [orig:135 a ] [135])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])) D:\LHX\7.5 contest\t1.cpp:28 90 {*movsi_internal}
     (nil))
(insn 266 1295 1296 28 (parallel [
            (set (reg/v:DI 0 ax [orig:135 a ] [135])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:135 a ] [135]))
                    (zero_extend:DI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 323 {*umulsidi3_1}
     (nil))
(insn 1296 266 267 28 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S8 A64])
        (reg/v:DI 0 ax [orig:135 a ] [135])) D:\LHX\7.5 contest\t1.cpp:28 89 {*movdi_internal}
     (nil))
(note 267 1296 268 28 NOTE_INSN_DELETED)
(insn 268 267 270 28 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [45 %sfp+-20 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [45 %sfp+-20 S4 A32])
                    (reg:SI 4 si [334])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 220 {*addsi_1}
     (nil))
(insn 270 268 272 28 (parallel [
            (set (reg/v:DI 2 cx [orig:104 b ] [104])
                (lshiftrt:DI (reg/v:DI 2 cx [orig:104 b ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:28 516 {*lshrdi3_doubleword}
     (nil))
(note 272 270 1178 28 NOTE_INSN_DELETED)
(insn 1178 272 273 28 (set (reg:SI 0 ax [504])
        (reg:SI 3 bx [ b+4 ])) D:\LHX\7.5 contest\t1.cpp:26 90 {*movsi_internal}
     (nil))
(insn 273 1178 274 28 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ior:SI (reg:SI 0 ax [504])
                        (reg:SI 2 cx [orig:104 b ] [104]))
                    (const_int 0 [0])))
            (clobber (reg:SI 0 ax [504]))
        ]) D:\LHX\7.5 contest\t1.cpp:26 425 {*iorsi_3}
     (nil))
(jump_insn 274 273 995 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 271)
            (pc))) D:\LHX\7.5 contest\t1.cpp:26 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 271)
;;  succ:       26 [91.0%]  (DFS_BACK)
;;              29 [9.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 24, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 [9.0%]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 5 [di]
;; live  kill	
(note 995 274 1083 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 1083 995 996 29 (set (reg:SI 5 di [orig:106 D.83218 ] [106])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S4 A64])) 90 {*movsi_internal}
     (nil))
(jump_insn 996 1083 997 29 (set (pc)
        (label_ref 275)) 636 {jump}
     (nil)
 -> 275)
;;  succ:       31 [100.0%]  (LOOP_EXIT)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 997 996 789)
;; basic block 30, loop depth 0, count 0, freq 2
;;  prev block 29, next block 31, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       24 [9.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(code_label 789 997 788 30 188 "" [1 uses])
(note 788 789 18 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 18 788 275 30 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:25 89 {*movdi_internal}
     (nil))
;;  succ:       31 [100.0%]  (FALLTHRU)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 27, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       30 [100.0%]  (FALLTHRU)
;;              29 [100.0%]  (LOOP_EXIT)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 275 18 276 31 131 "" [1 uses])
(note 276 275 1252 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 1252 276 1179 31 (set (reg:SI 0 ax [orig:451 j ] [451])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (nil))
(insn 1179 1252 277 31 (set (reg:SI 0 ax [orig:451 j ] [451])
        (reg:SI 0 ax [orig:451 j ] [451])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (nil))
(insn 277 1179 278 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:451 j ] [451])
            (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32]))) D:\LHX\7.5 contest\t1.cpp:49 7 {*cmpsi_1}
     (nil))
(jump_insn 278 277 279 31 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 791)
            (pc))) D:\LHX\7.5 contest\t1.cpp:49 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 791)
;;  succ:       32 [91.0%]  (FALLTHRU)
;;              104 [9.0%] 
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 24, maybe hot
;;  prev block 31, next block 33, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       31 [91.0%]  (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx]
;; live  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx]
;; live  kill	
(note 279 278 20 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 20 279 21 32 (set (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 21 20 22 32 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [45 %sfp+-56 S4 A32])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 22 21 1180 32 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 1180 22 899 32 (set (reg:SI 0 ax [orig:451 j ] [451])
        (reg:SI 0 ax [orig:451 j ] [451])) 90 {*movsi_internal}
     (nil))
(insn 899 1180 1085 32 (set (reg:SI 3 bx [450])
        (plus:SI (reg:SI 0 ax [orig:451 j ] [451])
            (const_int 1 [0x1]))) 213 {*leasi}
     (nil))
(insn 1085 899 575 32 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])) 90 {*movsi_internal}
     (nil))
;;  succ:       33 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 270, maybe hot
;;  prev block 32, next block 34, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       32 [100.0%]  (FALLTHRU)
;;              103 [100.0%]  (DFS_BACK)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 575 1085 280 33 170 "" [1 uses])
(note 280 575 1255 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(note 1255 280 1336 33 NOTE_INSN_DELETED)
(note 1336 1255 1181 33 NOTE_INSN_DELETED)
(insn 1181 1336 283 33 (set (reg/v:SI 0 ax [orig:123 i ] [123])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])) D:\LHX\7.5 contest\t1.cpp:50 90 {*movsi_internal}
     (nil))
(insn 283 1181 1335 33 (parallel [
            (set (reg:SI 2 cx [339])
                (plus:SI (reg/v:SI 0 ax [orig:123 i ] [123])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 220 {*addsi_1}
     (nil))
(note 1335 283 284 33 NOTE_INSN_DELETED)
(note 284 1335 1254 33 NOTE_INSN_DELETED)
(insn 1254 284 1182 33 (set (reg/v:DI 0 ax [orig:136 tmod ] [136])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])) D:\LHX\7.5 contest\t1.cpp:50 89 {*movdi_internal}
     (nil))
(insn 1182 1254 285 33 (set (reg:SI 4 si [340])
        (reg:SI 1 dx [ tmod+4 ])) D:\LHX\7.5 contest\t1.cpp:50 90 {*movsi_internal}
     (nil))
(insn 285 1182 286 33 (parallel [
            (set (reg:SI 4 si [340])
                (mult:SI (reg:SI 4 si [340])
                    (mem:SI (plus:SI (mult:SI (reg:SI 2 cx [339])
                                (const_int 8 [0x8]))
                            (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 pre S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 306 {*mulsi3_1}
     (nil))
(note 286 285 1253 33 NOTE_INSN_DELETED)
(insn 1253 286 1333 33 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])
        (reg/v:DI 0 ax [orig:136 tmod ] [136])) D:\LHX\7.5 contest\t1.cpp:50 89 {*movdi_internal}
     (nil))
(note 1333 1253 1184 33 NOTE_INSN_DELETED)
(insn 1184 1333 287 33 (set (reg:SI 1 dx [342])
        (reg:SI 0 ax [orig:136 tmod ] [136])) D:\LHX\7.5 contest\t1.cpp:50 90 {*movsi_internal}
     (nil))
(insn 287 1184 288 33 (parallel [
            (set (reg:SI 1 dx [342])
                (mult:SI (reg:SI 1 dx [342])
                    (mem:SI (plus:SI (mult:SI (reg:SI 2 cx [339])
                                (const_int 8 [0x8]))
                            (const:SI (plus:SI (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)
                                    (const_int 4 [0x4])))) [34 pre S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 306 {*mulsi3_1}
     (nil))
(insn 288 287 1187 33 (parallel [
            (set (reg:SI 4 si [344])
                (plus:SI (reg:SI 4 si [340])
                    (reg:SI 1 dx [342])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 220 {*addsi_1}
     (nil))
(insn 1187 288 289 33 (set (reg:SI 0 ax [orig:345 D.83220 ] [345])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S4 A64])) D:\LHX\7.5 contest\t1.cpp:50 90 {*movsi_internal}
     (nil))
(insn 289 1187 1188 33 (parallel [
            (set (reg:DI 0 ax [orig:345 D.83220 ] [345])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:345 D.83220 ] [345]))
                    (zero_extend:DI (mem:SI (plus:SI (mult:SI (reg:SI 2 cx [339])
                                    (const_int 8 [0x8]))
                                (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 pre S4 A64]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 323 {*umulsidi3_1}
     (nil))
(insn 1188 289 290 33 (set (reg:DI 0 ax [orig:345 D.83220 ] [345])
        (reg:DI 0 ax [orig:345 D.83220 ] [345])) D:\LHX\7.5 contest\t1.cpp:50 89 {*movdi_internal}
     (nil))
(note 290 1188 291 33 NOTE_INSN_DELETED)
(insn 291 290 293 33 (parallel [
            (set (reg:SI 1 dx [ D.83220+4 ])
                (plus:SI (reg:SI 1 dx [ D.83220+4 ])
                    (reg:SI 4 si [344])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 220 {*addsi_1}
     (nil))
(insn 293 291 294 33 (set (reg:DI 4 si [347])
        (mem:DI (plus:SI (mult:SI (reg:SI 5 di [orig:106 D.83218 ] [106])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("pre") [flags 0x2]  <var_decl 06e5d8a0 pre>)) [34 pre S8 A64])) D:\LHX\7.5 contest\t1.cpp:50 89 {*movdi_internal}
     (nil))
(insn 294 293 1189 33 (parallel [
            (set (reg/v:DI 4 si [orig:112 t1 ] [112])
                (minus:DI (reg:DI 4 si [347])
                    (reg:DI 0 ax [orig:345 D.83220 ] [345])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:50 259 {*subdi3_doubleword}
     (nil))
(insn 1189 294 296 33 (set (reg/v:SI 0 ax [orig:123 i ] [123])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 296 1189 1190 33 (set (reg:DI 0 ax [orig:113 D.83220 ] [113])
        (mem:DI (plus:SI (mult:SI (reg/v:SI 0 ax [orig:123 i ] [123])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)) [34 suf S8 A64])) D:\LHX\7.5 contest\t1.cpp:51 89 {*movdi_internal}
     (nil))
(insn 1190 296 863 33 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S8 A64])
        (reg:DI 0 ax [orig:113 D.83220 ] [113])) D:\LHX\7.5 contest\t1.cpp:51 89 {*movdi_internal}
     (nil))
(insn 863 1190 1191 33 (set (reg:SI 0 ax [orig:427 D.83220 ] [427])
        (mem:SI (plus:SI (mult:SI (reg:SI 3 bx [450])
                    (const_int 8 [0x8]))
                (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)) [34 suf S4 A64])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 1191 863 864 33 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [45 %sfp+-40 S4 A32])
        (reg:SI 0 ax [orig:427 D.83220 ] [427])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 864 1191 1192 33 (set (reg:SI 0 ax [orig:428 D.83220+4 ] [428])
        (mem:SI (plus:SI (mult:SI (reg:SI 3 bx [450])
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("suf") [flags 0x2]  <var_decl 06e5d9c0 suf>)
                        (const_int 4 [0x4])))) [34 suf S4 A32])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 1192 864 300 33 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [45 %sfp+-52 S4 A32])
        (reg:SI 0 ax [orig:428 D.83220+4 ] [428])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 300 1192 301 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 301 300 302 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 793)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 793)
;;  succ:       34 [91.0%]  (FALLTHRU)
;;              116 [9.0%] 
;; lr  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 245, maybe hot
;;  prev block 33, next block 35, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       33 [91.0%]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 2 [cx] 3 [bx]
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 2 [cx] 3 [bx]
;; live  kill	
(note 302 301 890 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 890 302 1088 34 (set (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))
        (nil)))
(insn 1088 890 320 34 (set (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (nil))
;;  succ:       35 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 2725, maybe hot
;;  prev block 34, next block 36, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       34 [100.0%]  (FALLTHRU)
;;              40 [91.0%]  (DFS_BACK)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 320 1088 303 35 139 "" [1 uses])
(note 303 320 304 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 35 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [ t1+4 ])
            (mem:SI (plus:SI (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_423 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 305 304 818 35 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 315)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 315)
;;  succ:       39 [50.0%] 
;;              36 [50.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 1363, maybe hot
;;  prev block 35, next block 37, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       35 [50.0%]  (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 818 305 307 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(jump_insn 307 818 819 36 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 852)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 852)
;;  succ:       38 [50.0%] 
;;              37 [50.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 682, maybe hot
;;  prev block 36, next block 38, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       36 [50.0%]  (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 819 307 308 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 308 819 309 37 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 4 si [orig:112 t1 ] [112])
            (mem:SI (plus:SI (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_423 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 309 308 852 37 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 315)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 315)
;;  succ:       39 [50.0%] 
;;              38 [50.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 1363, maybe hot
;; Invalid sum of incoming frequencies 1023, should be 1363
;;  prev block 37, next block 39, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       37 [50.0%]  (FALLTHRU)
;;              36 [50.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 2 [cx] 3 [bx]
;; live  in  	 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 2 [cx] 3 [bx]
;; live  kill	
(code_label 852 309 311 38 198 "" [1 uses])
(note 311 852 312 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(note 312 311 24 38 NOTE_INSN_DELETED)
(insn 24 312 25 38 (set (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
        (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 90 {*movsi_internal}
     (nil))
(insn 25 24 998 38 (set (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
        (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_423 + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1262 90 {*movsi_internal}
     (nil))
(jump_insn 998 25 999 38 (set (pc)
        (label_ref 318)) 636 {jump}
     (nil)
 -> 318)
;;  succ:       40 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 999 998 315)
;; basic block 39, loop depth 0, count 0, freq 1363, maybe hot
;; Invalid sum of incoming frequencies 1704, should be 1363
;;  prev block 38, next block 40, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       35 [50.0%] 
;;              37 [50.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 2 [cx]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 2 [cx]
;; live  kill	
(code_label 315 999 316 39 136 "" [2 uses])
(note 316 315 317 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 317 316 318 39 (set (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
        (mem/f:SI (plus:SI (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_423 + 12B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       40 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 2725, maybe hot
;;  prev block 39, next block 41, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       39 [100.0%]  (FALLTHRU)
;;              38 [100.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 318 317 319 40 138 "" [1 uses])
(note 319 318 321 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 321 319 322 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 2 cx [orig:189 __i$_M_node ] [189])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 322 321 323 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 320)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 320)
;;  succ:       35 [91.0%]  (DFS_BACK)
;;              41 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 245, maybe hot
;;  prev block 40, next block 42, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       40 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 323 322 324 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 324 323 325 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 325 324 326 41 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 661)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 671 (nil))
 -> 661)
;;  succ:       117 [6.7%] 
;;              42 [93.3%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 229, maybe hot
;;  prev block 41, next block 43, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       41 [93.3%]  (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 326 325 327 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 327 326 328 42 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [ t1+4 ])
            (mem:SI (plus:SI (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_446 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 328 327 821 42 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 661)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 661)
;;  succ:       117 [50.0%] 
;;              43 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 115, maybe hot
;;  prev block 42, next block 44, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       42 [50.0%]  (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 821 328 330 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(jump_insn 330 821 822 43 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 381)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 381)
;;  succ:       55 [50.0%] 
;;              44 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 58, maybe hot
;;  prev block 43, next block 45, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       43 [50.0%]  (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 822 330 331 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 331 822 332 44 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 4 si [orig:112 t1 ] [112])
            (mem:SI (plus:SI (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_446 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 332 331 1000 44 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 661)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 661)
;;  succ:       117 [50.0%] 
;;              45 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 29, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 [50.0%]  (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1000 332 1001 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1001 1000 1002 45 (set (pc)
        (label_ref 381)) 636 {jump}
     (nil)
 -> 381)
;;  succ:       55 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1002 1001 678)
;; basic block 46, loop depth 0, count 0, freq 18, maybe hot
;; Invalid sum of incoming frequencies 122, should be 18
;;  prev block 45, next block 47, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       117 [78.4%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 678 1002 337 46 176 "" [1 uses])
(note 337 678 338 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(note 338 337 339 46 NOTE_INSN_DELETED)
(note 339 338 340 46 NOTE_INSN_DELETED)
(insn 340 339 341 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:437 __res ] [437])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 341 340 824 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 801)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 507 (nil))
 -> 801)
;;  succ:       52 [5.1%] 
;;              47 [94.9%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 46, next block 48, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       46 [94.9%]  (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 824 341 342 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(note 342 824 343 47 NOTE_INSN_DELETED)
(note 343 342 344 47 NOTE_INSN_DELETED)
(insn 344 343 345 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:438 __res+4 ] [438])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 345 344 346 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 801)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 534 (nil))
 -> 801)
;;  succ:       52 [5.3%] 
;;              48 [94.7%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 47, next block 49, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       47 [94.7%]  (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
(note 346 345 347 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 865 48 (set (reg/v:QI 0 ax [orig:120 __insert_left ] [120])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 865 347 1281 48 (set (reg:SI 2 cx [orig:441 MEM[(const long long unsigned int &)__i$_M_node_205 + 16] ] [441])
        (mem:SI (plus:SI (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_205 + 16]+0 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(insn 1281 865 866 48 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 2 cx [orig:441 MEM[(const long long unsigned int &)__i$_M_node_205 + 16] ] [441])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(note 866 1281 1193 48 NOTE_INSN_DELETED)
(insn 1193 866 349 48 (set (reg:SI 2 cx [547])
        (mem:SI (plus:SI (reg:SI 1 dx [orig:438 __res+4 ] [438])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__res$second_203 + 16]+4 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(insn 349 1193 350 48 (set (reg:CC 17 flags)
        (compare:CC (mem:SI (plus:SI (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_205 + 16]+4 S4 A32])
            (reg:SI 2 cx [547]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 350 349 825 48 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 358)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 358)
;;  succ:       53 [50.0%] 
;;              49 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 48, next block 50, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       48 [50.0%]  (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 825 350 352 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(jump_insn 352 825 826 49 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 355)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 355)
;;  succ:       51 [50.0%] 
;;              50 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 4
;;  prev block 49, next block 51, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       49 [50.0%]  (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 2 [cx] 17 [flags]
;; live  kill	
(note 826 352 1289 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 1289 826 353 50 (set (reg:SI 2 cx [orig:441 MEM[(const long long unsigned int &)__i$_M_node_205 + 16] ] [441])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(insn 353 1289 354 50 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 2 cx [orig:441 MEM[(const long long unsigned int &)__i$_M_node_205 + 16] ] [441])
            (mem:SI (plus:SI (reg:SI 1 dx [orig:438 __res+4 ] [438])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__res$second_203 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 354 353 355 50 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 358)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 358)
;;  succ:       53 [50.0%] 
;;              51 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 50, next block 52, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       49 [50.0%] 
;;              50 [50.0%]  (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 355 354 827 51 144 "" [1 uses])
(note 827 355 356 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 356 827 1003 51 (set (reg/v:QI 0 ax [orig:120 __insert_left ] [120])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 1003 356 1004 51 (set (pc)
        (label_ref 358)) 636 {jump}
     (nil)
 -> 358)
;;  succ:       53 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1004 1003 801)
;; basic block 52, loop depth 0, count 0, freq 2
;;  prev block 51, next block 53, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       47 [5.3%] 
;;              46 [5.1%] 
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 801 1004 800 52 192 "" [2 uses])
(note 800 801 27 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 27 800 358 52 (set (reg/v:QI 0 ax [orig:120 __insert_left ] [120])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       53 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 82, maybe hot
;;  prev block 52, next block 54, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       52 [100.0%]  (FALLTHRU)
;;              50 [50.0%] 
;;              48 [50.0%] 
;;              51 [100.0%] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 358 27 359 53 142 "" [3 uses])
(note 359 358 360 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 361 53 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0  S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 361 360 362 53 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 1 dx [orig:438 __res+4 ] [438])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 362 361 363 53 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 363 362 364 53 (set (reg:SI 0 ax [orig:356 __insert_left ] [356])
        (zero_extend:SI (reg/v:QI 0 ax [orig:120 __insert_left ] [120]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 138 {*zero_extendqisi2}
     (expr_list:REG_EQUIV (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (nil)))
(insn 364 363 365 53 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:356 __insert_left ] [356])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 90 {*movsi_internal}
     (nil))
(call_insn 365 364 371 53 (call (mem:QI (symbol_ref:SI ("_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_") [flags 0x43]  <function_decl 06b77200 _Rb_tree_insert_and_rebalance>) [0 _Rb_tree_insert_and_rebalance S1 A8])
        (const_int 16 [0x10])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 12 [0xc])) [0  S4 A32]))
                    (nil))))))
(note 371 365 372 53 NOTE_INSN_DELETED)
(note 372 371 373 53 NOTE_INSN_DELETED)
(insn 373 372 1005 53 (parallel [
            (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                            (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                (plus:SI (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                                (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1698 220 {*addsi_1}
     (nil))
(jump_insn 1005 373 1006 53 (set (pc)
        (label_ref 381)) 636 {jump}
     (nil)
 -> 381)
;;  succ:       55 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1006 1005 1037)
;; basic block 54, loop depth 0, count 0, freq 23, maybe hot
;;  prev block 53, next block 55, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       118 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	
(code_label 1037 1006 376 54 228 "" [1 uses])
(note 376 1037 1256 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 1256 376 377 54 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 0 ax [orig:437 __res ] [437])) 90 {*movsi_internal}
     (nil))
(insn 377 1256 378 54 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
(call_insn 378 377 1257 54 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 1257 378 28 54 (set (reg:SI 0 ax [orig:437 __res ] [437])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 28 1257 381 54 (set (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
        (reg:SI 0 ax [orig:437 __res ] [437])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
;;  succ:       55 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 270, maybe hot
;;  prev block 54, next block 56, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       54 [100.0%]  (FALLTHRU)
;;              45 [100.0%] 
;;              43 [50.0%] 
;;              53 [100.0%] 
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 381 28 382 55 141 "" [3 uses])
(note 382 381 383 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 384 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
                    (const_int 24 [0x18])) [21 MEM[(mapped_type &)__i$_M_node_351 + 24]+0 S4 A32])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:53 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 384 383 385 55 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 721)
            (pc))) D:\LHX\7.5 contest\t1.cpp:53 596 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 721)
;;  succ:       56 [29.0%]  (FALLTHRU)
;;              102 [71.0%] 
;; lr  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 78, maybe hot
;;  prev block 55, next block 57, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       55 [29.0%]  (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(note 385 384 1194 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 1194 385 1262 56 (set (reg:SI 2 cx [363])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [45 %sfp+-52 S4 A32])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 1262 1194 386 56 (set (reg/v:DI 0 ax [orig:136 tmod ] [136])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])) D:\LHX\7.5 contest\t1.cpp:51 89 {*movdi_internal}
     (nil))
(insn 386 1262 1261 56 (parallel [
            (set (reg:SI 2 cx [363])
                (mult:SI (reg:SI 2 cx [363])
                    (reg:SI 0 ax [orig:136 tmod ] [136])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 306 {*mulsi3_1}
     (nil))
(insn 1261 386 1337 56 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S8 A64])
        (reg/v:DI 0 ax [orig:136 tmod ] [136])) D:\LHX\7.5 contest\t1.cpp:51 89 {*movdi_internal}
     (nil))
(note 1337 1261 1196 56 NOTE_INSN_DELETED)
(insn 1196 1337 1260 56 (set (reg:SI 0 ax [364])
        (reg:SI 1 dx [ tmod+4 ])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 1260 1196 387 56 (set (reg:SI 3 bx [orig:427 D.83220 ] [427])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [45 %sfp+-40 S4 A32])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 387 1260 1197 56 (parallel [
            (set (reg:SI 0 ax [364])
                (mult:SI (reg:SI 0 ax [364])
                    (reg:SI 3 bx [orig:427 D.83220 ] [427])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 306 {*mulsi3_1}
     (nil))
(insn 1197 387 388 56 (set (reg:SI 0 ax [364])
        (reg:SI 0 ax [364])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 388 1197 1200 56 (parallel [
            (set (reg:SI 2 cx [365])
                (plus:SI (reg:SI 2 cx [363])
                    (reg:SI 0 ax [364])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 220 {*addsi_1}
     (nil))
(insn 1200 388 389 56 (set (reg:SI 0 ax [orig:366 D.83220 ] [366])
        (reg:SI 3 bx [orig:427 D.83220 ] [427])) D:\LHX\7.5 contest\t1.cpp:51 90 {*movsi_internal}
     (nil))
(insn 389 1200 1201 56 (parallel [
            (set (reg:DI 0 ax [orig:366 D.83220 ] [366])
                (mult:DI (zero_extend:DI (reg:SI 0 ax [orig:366 D.83220 ] [366]))
                    (zero_extend:DI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                                (const_int -56 [0xffffffffffffffc8])) [45 %sfp+-32 S4 A64]))))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 323 {*umulsidi3_1}
     (nil))
(insn 1201 389 390 56 (set (reg:DI 0 ax [orig:366 D.83220 ] [366])
        (reg:DI 0 ax [orig:366 D.83220 ] [366])) D:\LHX\7.5 contest\t1.cpp:51 89 {*movdi_internal}
     (nil))
(note 390 1201 391 56 NOTE_INSN_DELETED)
(insn 391 390 1202 56 (parallel [
            (set (reg:SI 1 dx [ D.83220+4 ])
                (plus:SI (reg:SI 1 dx [ D.83220+4 ])
                    (reg:SI 2 cx [365])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 220 {*addsi_1}
     (nil))
(insn 1202 391 393 56 (set (reg/v:DI 2 cx [orig:117 t2 ] [117])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S8 A64])) D:\LHX\7.5 contest\t1.cpp:51 89 {*movdi_internal}
     (nil))
(insn 393 1202 395 56 (parallel [
            (set (reg/v:DI 2 cx [orig:117 t2 ] [117])
                (minus:DI (reg/v:DI 2 cx [orig:117 t2 ] [117])
                    (reg:DI 0 ax [orig:366 D.83220 ] [366])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:51 259 {*subdi3_doubleword}
     (nil))
(insn 395 393 1204 56 (set (reg/f:SI 0 ax [orig:448 __i$_M_node ] [448])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 1204 395 1259 56 (set (reg/f:SI 1 dx [orig:448 __i$_M_node ] [448])
        (reg/f:SI 0 ax [orig:448 __i$_M_node ] [448])) 90 {*movsi_internal}
     (nil))
(insn 1259 1204 906 56 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg/f:SI 1 dx [orig:448 __i$_M_node ] [448])) 90 {*movsi_internal}
     (nil))
(insn 906 1259 396 56 (set (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
        (reg/f:SI 1 dx [orig:448 __i$_M_node ] [448])) 90 {*movsi_internal}
     (nil))
(insn 396 906 397 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:448 __i$_M_node ] [448])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 397 396 398 56 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 803)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 803)
;;  succ:       57 [91.0%]  (FALLTHRU)
;;              119 [9.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 71, maybe hot
;;  prev block 56, next block 58, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       56 [91.0%]  (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(note 398 397 889 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 889 398 1095 57 (set (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))
        (nil)))
(insn 1095 889 416 57 (set (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
        (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (nil))
;;  succ:       58 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 790, maybe hot
;;  prev block 57, next block 59, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       57 [100.0%]  (FALLTHRU)
;;              63 [91.0%]  (DFS_BACK)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 416 1095 399 58 151 "" [1 uses])
(note 399 416 400 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 400 399 401 58 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 3 bx [ t2+4 ])
            (mem:SI (plus:SI (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_425 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 401 400 829 58 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 411)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 411)
;;  succ:       62 [50.0%] 
;;              59 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 59, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 58, next block 60, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       58 [50.0%]  (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 829 401 403 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(jump_insn 403 829 830 59 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 853)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 853)
;;  succ:       61 [50.0%] 
;;              60 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 198, maybe hot
;;  prev block 59, next block 61, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       59 [50.0%]  (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 830 403 404 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 404 830 405 60 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 2 cx [orig:117 t2 ] [117])
            (mem:SI (plus:SI (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_425 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 405 404 853 60 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 411)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 411)
;;  succ:       62 [50.0%] 
;;              61 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 60, next block 62, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       60 [50.0%]  (FALLTHRU)
;;              59 [50.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 853 405 407 61 199 "" [1 uses])
(note 407 853 408 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(note 408 407 30 61 NOTE_INSN_DELETED)
(insn 30 408 31 61 (set (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])
        (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 90 {*movsi_internal}
     (nil))
(insn 31 30 1007 61 (set (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_425 + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1262 90 {*movsi_internal}
     (nil))
(jump_insn 1007 31 1008 61 (set (pc)
        (label_ref 414)) 636 {jump}
     (nil)
 -> 414)
;;  succ:       63 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1008 1007 411)
;; basic block 62, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 61, next block 63, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       58 [50.0%] 
;;              60 [50.0%] 
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 411 1008 412 62 148 "" [2 uses])
(note 412 411 413 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 413 412 414 62 (set (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_425 + 12B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       63 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 790, maybe hot
;;  prev block 62, next block 64, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       62 [100.0%]  (FALLTHRU)
;;              61 [100.0%] 
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 414 413 415 63 150 "" [1 uses])
(note 415 414 417 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 417 415 418 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:187 __i$_M_node ] [187])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 418 417 419 63 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 416)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 416)
;;  succ:       58 [91.0%]  (DFS_BACK)
;;              64 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 71, maybe hot
;;  prev block 63, next block 65, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       63 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 419 418 420 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 420 419 421 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 421 420 422 64 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 685)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 662 (nil))
 -> 685)
;;  succ:       120 [6.6%] 
;;              65 [93.4%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 66, maybe hot
;;  prev block 64, next block 66, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       64 [93.4%]  (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 422 421 423 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 65 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 3 bx [ t2+4 ])
            (mem:SI (plus:SI (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_447 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 424 423 832 65 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 685)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 685)
;;  succ:       120 [50.0%] 
;;              66 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 33, maybe hot
;;  prev block 65, next block 67, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       65 [50.0%]  (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 832 424 426 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(jump_insn 426 832 833 66 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 767)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 767)
;;  succ:       132 [50.0%] 
;;              67 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 67, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 66, next block 68, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       66 [50.0%]  (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 833 426 427 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 427 833 428 67 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 2 cx [orig:117 t2 ] [117])
            (mem:SI (plus:SI (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_447 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 428 427 1009 67 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 685)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 685)
;;  succ:       120 [50.0%] 
;;              68 [50.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 [50.0%]  (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1009 428 1010 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1010 1009 1011 68 (set (pc)
        (label_ref 767)) 636 {jump}
     (nil)
 -> 767)
;;  succ:       132 [100.0%] 
;; lr  out 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1011 1010 702)
;; basic block 69, loop depth 0, count 0, freq 5
;;  prev block 68, next block 70, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       120 [78.4%] 
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 702 1011 433 69 178 "" [1 uses])
(note 433 702 434 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(note 434 433 435 69 NOTE_INSN_DELETED)
(note 435 434 436 69 NOTE_INSN_DELETED)
(insn 436 435 437 69 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:435 __res ] [435])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 437 436 835 69 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 811)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 507 (nil))
 -> 811)
;;  succ:       75 [5.1%] 
;;              70 [94.9%]  (FALLTHRU)
;; lr  out 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 5
;;  prev block 69, next block 71, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       69 [94.9%]  (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 835 437 438 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(note 438 835 439 70 NOTE_INSN_DELETED)
(note 439 438 440 70 NOTE_INSN_DELETED)
(insn 440 439 441 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:436 __res+4 ] [436])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 441 440 442 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 811)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 534 (nil))
 -> 811)
;;  succ:       75 [5.3%] 
;;              71 [94.7%]  (FALLTHRU)
;; lr  out 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 5
;;  prev block 70, next block 72, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       70 [94.7%]  (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 17 [flags]
;; live  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 17 [flags]
;; live  kill	
(note 442 441 443 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 443 442 1263 71 (set (reg/v:QI 0 ax [orig:212 __insert_left ] [212])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 1263 443 867 71 (set (reg/f:SI 3 bx [orig:209 __i$_M_node ] [209])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(insn 867 1263 1280 71 (set (reg:SI 2 cx [orig:443 MEM[(const long long unsigned int &)__i$_M_node_241 + 16] ] [443])
        (mem:SI (plus:SI (reg/f:SI 3 bx [orig:209 __i$_M_node ] [209])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_241 + 16]+0 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(insn 1280 867 868 71 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S4 A64])
        (reg:SI 2 cx [orig:443 MEM[(const long long unsigned int &)__i$_M_node_241 + 16] ] [443])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(note 868 1280 1208 71 NOTE_INSN_DELETED)
(insn 1208 868 445 71 (set (reg:SI 2 cx [557])
        (mem:SI (plus:SI (reg:SI 1 dx [orig:436 __res+4 ] [436])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__res$second_239 + 16]+4 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(insn 445 1208 446 71 (set (reg:CC 17 flags)
        (compare:CC (mem:SI (plus:SI (reg/f:SI 3 bx [orig:209 __i$_M_node ] [209])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_241 + 16]+4 S4 A32])
            (reg:SI 2 cx [557]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 446 445 836 71 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 454)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 454)
;;  succ:       76 [50.0%] 
;;              72 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 3
;;  prev block 71, next block 73, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       71 [50.0%]  (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 836 446 448 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(jump_insn 448 836 837 72 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 451)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 451)
;;  succ:       74 [50.0%] 
;;              73 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 2
;;  prev block 72, next block 74, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       72 [50.0%]  (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx] 17 [flags]
;; live  kill	
(note 837 448 1288 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1288 837 449 73 (set (reg:SI 3 bx [orig:443 MEM[(const long long unsigned int &)__i$_M_node_241 + 16] ] [443])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(insn 449 1288 450 73 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 3 bx [orig:443 MEM[(const long long unsigned int &)__i$_M_node_241 + 16] ] [443])
            (mem:SI (plus:SI (reg:SI 1 dx [orig:436 __res+4 ] [436])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__res$second_239 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 450 449 451 73 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 454)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 454)
;;  succ:       76 [50.0%] 
;;              74 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 3
;;  prev block 73, next block 75, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       72 [50.0%] 
;;              73 [50.0%]  (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 451 450 838 74 156 "" [1 uses])
(note 838 451 452 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 452 838 1012 74 (set (reg/v:QI 0 ax [orig:212 __insert_left ] [212])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 1012 452 1013 74 (set (pc)
        (label_ref 454)) 636 {jump}
     (nil)
 -> 454)
;;  succ:       76 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1013 1012 811)
;; basic block 75, loop depth 0, count 0, freq 1
;;  prev block 74, next block 76, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       70 [5.3%] 
;;              69 [5.1%] 
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 811 1013 810 75 195 "" [2 uses])
(note 810 811 33 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 33 810 454 75 (set (reg/v:QI 0 ax [orig:212 __insert_left ] [212])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       76 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 24, maybe hot
;;  prev block 75, next block 77, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       75 [100.0%]  (FALLTHRU)
;;              73 [50.0%] 
;;              71 [50.0%] 
;;              74 [100.0%] 
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	 17 [flags]
(code_label 454 33 455 76 154 "" [3 uses])
(note 455 454 456 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 456 455 457 76 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0  S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 457 456 1209 76 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 1 dx [orig:436 __res+4 ] [436])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 1209 457 458 76 (set (reg/f:SI 3 bx [orig:209 __i$_M_node ] [209])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 458 1209 459 76 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 3 bx [orig:209 __i$_M_node ] [209])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 459 458 460 76 (set (reg:SI 0 ax [orig:374 __insert_left ] [374])
        (zero_extend:SI (reg/v:QI 0 ax [orig:212 __insert_left ] [212]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 138 {*zero_extendqisi2}
     (expr_list:REG_EQUIV (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (nil)))
(insn 460 459 461 76 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:374 __insert_left ] [374])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 90 {*movsi_internal}
     (nil))
(call_insn 461 460 467 76 (call (mem:QI (symbol_ref:SI ("_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_") [flags 0x43]  <function_decl 06b77200 _Rb_tree_insert_and_rebalance>) [0 _Rb_tree_insert_and_rebalance S1 A8])
        (const_int 16 [0x10])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 12 [0xc])) [0  S4 A32]))
                    (nil))))))
(note 467 461 468 76 NOTE_INSN_DELETED)
(note 468 467 469 76 NOTE_INSN_DELETED)
(insn 469 468 1014 76 (parallel [
            (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                            (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                (plus:SI (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                                (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1698 220 {*addsi_1}
     (nil))
(jump_insn 1014 469 1015 76 (set (pc)
        (label_ref 475)) 636 {jump}
     (nil)
 -> 475)
;;  succ:       78 [100.0%] 
;; lr  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1015 1014 1041)
;; basic block 77, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 76, next block 78, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       121 [100.0%] 
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1041 1015 472 77 229 "" [1 uses])
(note 472 1041 1264 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1264 472 1210 77 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S4 A64])
        (reg:SI 0 ax [orig:435 __res ] [435])) 90 {*movsi_internal}
     (nil))
(insn 1210 1264 473 77 (set (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
(insn 473 1210 474 77 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
(call_insn 474 473 1265 77 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 1265 474 34 77 (set (reg:SI 0 ax [orig:435 __res ] [435])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 34 1265 475 77 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 0 ax [orig:435 __res ] [435])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
;;  succ:       78 [100.0%]  (FALLTHRU)
;; lr  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 78, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 77, next block 79, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       77 [100.0%]  (FALLTHRU)
;;              76 [100.0%] 
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 475 34 476 78 157 "" [1 uses])
(note 476 475 1211 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 1211 476 477 78 (set (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:\LHX\7.5 contest\t1.cpp:53 90 {*movsi_internal}
     (nil))
(insn 477 1211 478 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
                    (const_int 24 [0x18])) [21 MEM[(mapped_type &)__i$_M_node_368 + 24]+0 S4 A32])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:53 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 478 477 1016 78 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 709)
            (pc))) D:\LHX\7.5 contest\t1.cpp:53 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 709)
;;  succ:       122 [50.0%] 
;;              79 [50.0%]  (FALLTHRU)
;; lr  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 [50.0%]  (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1016 478 1017 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1017 1016 1018 79 (set (pc)
        (label_ref 721)) 636 {jump}
     (nil)
 -> 721)
;;  succ:       102 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

(barrier 1018 1017 713)
;; basic block 80, loop depth 0, count 0, freq 71, maybe hot
;;  prev block 79, next block 81, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       122 [91.0%] 
;;              131 [100.0%] 
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx]
;; live  in  	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	
(code_label 713 1018 482 80 180 "" [2 uses])
(note 482 713 888 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 888 482 1100 80 (set (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))
        (nil)))
(insn 1100 888 500 80 (set (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
        (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
;;  succ:       81 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 790, maybe hot
;;  prev block 80, next block 82, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       80 [100.0%]  (FALLTHRU)
;;              86 [91.0%]  (DFS_BACK)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 500 1100 483 81 162 "" [1 uses])
(note 483 500 484 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 484 483 485 81 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [ t1+4 ])
            (mem:SI (plus:SI (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_427 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 485 484 840 81 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 495)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 495)
;;  succ:       85 [50.0%] 
;;              82 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 82, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 81, next block 83, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       81 [50.0%]  (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 840 485 487 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(jump_insn 487 840 841 82 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 854)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 854)
;;  succ:       84 [50.0%] 
;;              83 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 83, loop depth 0, count 0, freq 198, maybe hot
;;  prev block 82, next block 84, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       82 [50.0%]  (FALLTHRU)
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 841 487 488 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 488 841 489 83 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 4 si [orig:112 t1 ] [112])
            (mem:SI (plus:SI (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_427 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 7 {*cmpsi_1}
     (nil))
(jump_insn 489 488 854 83 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 495)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 495)
;;  succ:       85 [50.0%] 
;;              84 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 84, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 83, next block 85, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       83 [50.0%]  (FALLTHRU)
;;              82 [50.0%] 
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx]
;; live  in  	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	
(code_label 854 489 491 84 200 "" [1 uses])
(note 491 854 492 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(note 492 491 36 84 NOTE_INSN_DELETED)
(insn 36 492 37 84 (set (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
        (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1261 90 {*movsi_internal}
     (nil))
(insn 37 36 1019 84 (set (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
                (const_int 8 [0x8])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_427 + 8B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1262 90 {*movsi_internal}
     (nil))
(jump_insn 1019 37 1020 84 (set (pc)
        (label_ref 498)) 636 {jump}
     (nil)
 -> 498)
;;  succ:       86 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1020 1019 495)
;; basic block 85, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 84, next block 86, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       81 [50.0%] 
;;              83 [50.0%] 
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 495 1020 496 85 159 "" [2 uses])
(note 496 495 497 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 497 496 498 85 (set (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
                (const_int 12 [0xc])) [6 MEM[(struct _Rb_tree_node_base * *)__i$_M_node_427 + 12B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       86 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 86, loop depth 0, count 0, freq 790, maybe hot
;;  prev block 85, next block 87, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       85 [100.0%]  (FALLTHRU)
;;              84 [100.0%] 
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 498 497 499 86 161 "" [1 uses])
(note 499 498 501 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 501 499 502 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 502 501 503 86 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 500)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 500)
;;  succ:       81 [91.0%]  (DFS_BACK)
;;              87 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 87, loop depth 0, count 0, freq 71, maybe hot
;;  prev block 86, next block 88, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       86 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 503 502 504 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 504 503 505 87 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 505 504 506 87 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 724)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 1040 (nil))
 -> 724)
;;  succ:       124 [10.4%] 
;;              88 [89.6%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 66, maybe hot
;;  prev block 87, next block 89, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       87 [89.6%]  (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 506 505 507 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 507 506 508 88 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 5 di [ t1+4 ])
            (mem:SI (plus:SI (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_448 + 16]+4 S4 A32]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 508 507 843 88 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 724)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 724)
;;  succ:       124 [50.0%] 
;;              89 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 89, loop depth 0, count 0, freq 33, maybe hot
;;  prev block 88, next block 90, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       88 [50.0%]  (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 843 508 510 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(jump_insn 510 843 844 89 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 561)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 561)
;;  succ:       101 [50.0%] 
;;              90 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 90, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 89, next block 91, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       89 [50.0%]  (FALLTHRU)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 844 510 511 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 511 844 512 90 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 4 si [orig:112 t1 ] [112])
            (mem:SI (plus:SI (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_448 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 7 {*cmpsi_1}
     (nil))
(jump_insn 512 511 1021 90 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 724)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_map.h:498 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 724)
;;  succ:       124 [50.0%] 
;;              91 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 91, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       90 [50.0%]  (FALLTHRU)
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1021 512 1022 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1022 1021 1023 91 (set (pc)
        (label_ref 561)) 636 {jump}
     (nil)
 -> 561)
;;  succ:       101 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]

(barrier 1023 1022 741)
;; basic block 92, loop depth 0, count 0, freq 5
;;  prev block 91, next block 93, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       124 [78.4%] 
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 741 1023 517 92 182 "" [1 uses])
(note 517 741 518 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(note 518 517 519 92 NOTE_INSN_DELETED)
(note 519 518 520 92 NOTE_INSN_DELETED)
(insn 520 519 521 92 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:433 __res ] [433])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 521 520 846 92 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 817)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 507 (nil))
 -> 817)
;;  succ:       98 [5.1%] 
;;              93 [94.9%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 93, loop depth 0, count 0, freq 5
;;  prev block 92, next block 94, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       92 [94.9%]  (FALLTHRU)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 846 521 522 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(note 522 846 523 93 NOTE_INSN_DELETED)
(note 523 522 524 93 NOTE_INSN_DELETED)
(insn 524 523 525 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:434 __res+4 ] [434])
            (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 525 524 526 93 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 817)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 534 (nil))
 -> 817)
;;  succ:       98 [5.3%] 
;;              94 [94.7%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 94, loop depth 0, count 0, freq 5
;;  prev block 93, next block 95, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       93 [94.7%]  (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 5 [di] 17 [flags]
;; live  kill	
(note 526 525 527 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 869 94 (set (reg/v:QI 0 ax [orig:229 __insert_left ] [229])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 869 527 870 94 (set (reg:SI 2 cx [orig:445 MEM[(const long long unsigned int &)__i$_M_node_277 + 16] ] [445])
        (mem:SI (plus:SI (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
                (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__i$_M_node_277 + 16]+0 S4 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(note 870 869 1212 94 NOTE_INSN_DELETED)
(insn 1212 870 529 94 (set (reg:SI 5 di [561])
        (mem:SI (plus:SI (reg:SI 1 dx [orig:434 __res+4 ] [434])
                (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__res$second_275 + 16]+4 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 90 {*movsi_internal}
     (nil))
(insn 529 1212 530 94 (set (reg:CC 17 flags)
        (compare:CC (mem:SI (plus:SI (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
                    (const_int 20 [0x14])) [34 MEM[(const long long unsigned int &)__i$_M_node_277 + 16]+4 S4 A32])
            (reg:SI 5 di [561]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 530 529 847 94 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 538)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 538)
;;  succ:       99 [50.0%] 
;;              95 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 20 [frame]

;; basic block 95, loop depth 0, count 0, freq 3
;;  prev block 94, next block 96, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       94 [50.0%]  (FALLTHRU)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 17 [flags]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 20 [frame]
;; live  gen 	
;; live  kill	
(note 847 530 532 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(jump_insn 532 847 848 95 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 535)
;;  succ:       97 [50.0%] 
;;              96 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 96, loop depth 0, count 0, freq 2
;;  prev block 95, next block 97, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       95 [50.0%]  (FALLTHRU)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(note 848 532 533 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 533 848 534 96 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 2 cx [orig:445 MEM[(const long long unsigned int &)__i$_M_node_277 + 16] ] [445])
            (mem:SI (plus:SI (reg:SI 1 dx [orig:434 __res+4 ] [434])
                    (const_int 16 [0x10])) [34 MEM[(const long long unsigned int &)__res$second_275 + 16]+0 S4 A64]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 7 {*cmpsi_1}
     (nil))
(jump_insn 534 533 535 96 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 538)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 538)
;;  succ:       99 [50.0%] 
;;              97 [50.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 97, loop depth 0, count 0, freq 3
;;  prev block 96, next block 98, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       95 [50.0%] 
;;              96 [50.0%]  (FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 535 534 849 97 168 "" [1 uses])
(note 849 535 536 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 536 849 1024 97 (set (reg/v:QI 0 ax [orig:229 __insert_left ] [229])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 1024 536 1025 97 (set (pc)
        (label_ref 538)) 636 {jump}
     (nil)
 -> 538)
;;  succ:       99 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

(barrier 1025 1024 817)
;; basic block 98, loop depth 0, count 0, freq 1
;;  prev block 97, next block 99, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       93 [5.3%] 
;;              92 [5.1%] 
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 817 1025 816 98 197 "" [2 uses])
(note 816 817 39 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 39 816 538 98 (set (reg/v:QI 0 ax [orig:229 __insert_left ] [229])
        (const_int 1 [0x1])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1694 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       99 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 99, loop depth 0, count 0, freq 24, maybe hot
;;  prev block 98, next block 100, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       98 [100.0%]  (FALLTHRU)
;;              96 [50.0%] 
;;              94 [50.0%] 
;;              97 [100.0%] 
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 538 39 539 99 166 "" [3 uses])
(note 539 538 540 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 99 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0  S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 541 540 542 99 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 1 dx [orig:434 __res+4 ] [434])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 542 541 543 99 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 90 {*movsi_internal}
     (nil))
(insn 543 542 544 99 (set (reg:SI 0 ax [orig:386 __insert_left ] [386])
        (zero_extend:SI (reg/v:QI 0 ax [orig:229 __insert_left ] [229]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 138 {*zero_extendqisi2}
     (expr_list:REG_EQUIV (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (nil)))
(insn 544 543 545 99 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [orig:386 __insert_left ] [386])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1697 90 {*movsi_internal}
     (nil))
(call_insn 545 544 551 99 (call (mem:QI (symbol_ref:SI ("_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_") [flags 0x43]  <function_decl 06b77200 _Rb_tree_insert_and_rebalance>) [0 _Rb_tree_insert_and_rebalance S1 A8])
        (const_int 16 [0x10])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1696 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 12 [0xc])) [0  S4 A32]))
                    (nil))))))
(note 551 545 552 99 NOTE_INSN_DELETED)
(note 552 551 553 99 NOTE_INSN_DELETED)
(insn 553 552 1026 99 (parallel [
            (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                            (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                (plus:SI (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                                (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree *)&s]._M_impl._M_node_count+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1698 220 {*addsi_1}
     (nil))
(jump_insn 1026 553 1027 99 (set (pc)
        (label_ref 561)) 636 {jump}
     (nil)
 -> 561)
;;  succ:       101 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]

(barrier 1027 1026 1045)
;; basic block 100, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 99, next block 101, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       125 [100.0%] 
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	
(code_label 1045 1027 556 100 230 "" [1 uses])
(note 556 1045 1266 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 1266 556 557 100 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 0 ax [orig:433 __res ] [433])) 90 {*movsi_internal}
     (nil))
(insn 557 1266 558 100 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 90 {*movsi_internal}
     (nil))
(call_insn 558 557 1267 100 (call (mem:QI (symbol_ref:SI ("_ZdlPv") [flags 0x43]  <function_decl 01938e00 operator delete>) [0 operator delete S1 A8])
        (const_int 4 [0x4])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:110 641 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 1267 558 40 100 (set (reg:SI 0 ax [orig:433 __res ] [433])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 40 1267 561 100 (set (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
        (reg:SI 0 ax [orig:433 __res ] [433])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
;;  succ:       101 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 101, loop depth 0, count 0, freq 78, maybe hot
;;  prev block 100, next block 102, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       100 [100.0%]  (FALLTHRU)
;;              91 [100.0%] 
;;              89 [50.0%] 
;;              99 [100.0%] 
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	 17 [flags]
(code_label 561 40 562 101 165 "" [3 uses])
(note 562 561 563 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 563 562 1213 101 (set (mem:SI (plus:SI (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
                (const_int 24 [0x18])) [21 MEM[(mapped_type &)__i$_M_node_365 + 24]+0 S4 A32])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:53 90 {*movsi_internal}
     (nil))
(note 1213 563 1286 101 NOTE_INSN_DELETED)
(note 1286 1213 564 101 NOTE_INSN_DELETED)
(insn 564 1286 1287 101 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [45 %sfp+-56 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [45 %sfp+-56 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:53 220 {*addsi_1}
     (nil))
(note 1287 564 1214 101 NOTE_INSN_DELETED)
(note 1214 1287 721 101 NOTE_INSN_DELETED)
;;  succ:       102 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

;; basic block 102, loop depth 0, count 0, freq 270, maybe hot
;;  prev block 101, next block 103, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       79 [100.0%] 
;;              101 [100.0%]  (FALLTHRU)
;;              55 [71.0%] 
;;              133 [100.0%] 
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 721 1214 565 102 181 "" [3 uses])
(note 565 721 566 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 566 565 1215 102 (set (reg:SI 0 ax [orig:451 j ] [451])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [21 j+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (nil))
(note 1215 566 1284 102 NOTE_INSN_DELETED)
(note 1284 1215 567 102 NOTE_INSN_DELETED)
(insn 567 1284 1285 102 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
                    (reg:SI 0 ax [orig:451 j ] [451])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:49 220 {*addsi_1}
     (nil))
(insn 1285 567 1338 102 (set (reg/v:SI 5 di [orig:123 i ] [123])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (nil))
(note 1338 1285 1268 102 NOTE_INSN_DELETED)
(insn 1268 1338 568 102 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (reg/v:SI 5 di [orig:123 i ] [123])) D:\LHX\7.5 contest\t1.cpp:49 90 {*movsi_internal}
     (nil))
(insn 568 1268 569 102 (parallel [
            (set (reg:SI 3 bx [450])
                (plus:SI (reg:SI 0 ax [orig:451 j ] [451])
                    (reg/v:SI 5 di [orig:123 i ] [123])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:49 220 {*addsi_1}
     (nil))
(insn 569 568 570 102 (parallel [
            (set (reg:SI 5 di [orig:106 D.83218 ] [106])
                (plus:SI (reg:SI 3 bx [450])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:49 220 {*addsi_1}
     (nil))
(insn 570 569 571 102 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 5 di [orig:106 D.83218 ] [106])
            (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32]))) D:\LHX\7.5 contest\t1.cpp:49 7 {*cmpsi_1}
     (nil))
(jump_insn 571 570 572 102 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 1117)
            (pc))) D:\LHX\7.5 contest\t1.cpp:49 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 1117)
;;  succ:       103 [91.0%]  (FALLTHRU)
;;              105 [9.0%]  (LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 103, loop depth 0, count 0, freq 246, maybe hot
;;  prev block 102, next block 104, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       102 [91.0%]  (FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(note 572 571 574 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 574 572 1339 103 (set (reg/f:SI 0 ax [orig:189 __i$_M_node ] [189])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 1339 574 1028 103 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg/f:SI 0 ax [orig:189 __i$_M_node ] [189])) 90 {*movsi_internal}
     (nil))
(jump_insn 1028 1339 1029 103 (set (pc)
        (label_ref 575)) 636 {jump}
     (nil)
 -> 575)
;;  succ:       33 [100.0%]  (DFS_BACK)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1029 1028 791)
;; basic block 104, loop depth 0, count 0, freq 2
;;  prev block 103, next block 105, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       31 [9.0%] 
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(code_label 791 1029 790 104 189 "" [1 uses])
(note 790 791 41 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 41 790 1114 104 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [45 %sfp+-56 S4 A32])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:47 90 {*movsi_internal}
     (nil))
(jump_insn 1114 41 1115 104 (set (pc)
        (label_ref 578)) 636 {jump}
     (nil)
 -> 578)
;;  succ:       106 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

(barrier 1115 1114 1117)
;; basic block 105, loop depth 0, count 0, freq 24, maybe hot
;;  prev block 104, next block 106, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102 [9.0%]  (LOOP_EXIT)
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(code_label 1117 1115 1116 105 232 "" [1 uses])
(note 1116 1117 1104 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 1104 1116 578 105 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 0 ax [orig:451 j ] [451])) 90 {*movsi_internal}
     (nil))
;;  succ:       106 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

;; basic block 106, loop depth 0, count 0, freq 27, maybe hot
;;  prev block 105, next block 107, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       105 [100.0%]  (FALLTHRU)
;;              104 [100.0%] 
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 2 [cx] 17 [flags]
;; live  kill	
(code_label 578 1104 579 106 134 "" [1 uses])
(note 579 578 580 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 1218 106 (set (reg:SI 2 cx [orig:252 D.83218 ] [252])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:56 90 {*movsi_internal}
     (nil))
(note 1218 580 1283 106 NOTE_INSN_DELETED)
(note 1283 1218 581 106 NOTE_INSN_DELETED)
(insn 581 1283 582 106 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 2 cx [orig:252 D.83218 ] [252])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [45 %sfp+-56 S4 A32]))) D:\LHX\7.5 contest\t1.cpp:56 7 {*cmpsi_1}
     (nil))
(jump_insn 582 581 583 106 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 597)
            (pc))) D:\LHX\7.5 contest\t1.cpp:56 596 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 597)
;;  succ:       107 [29.0%]  (FALLTHRU)
;;              108 [71.0%] 
;; lr  out 	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 107, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 106, next block 108, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       106 [29.0%]  (FALLTHRU)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
(note 583 582 1219 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 1219 583 584 107 (set (reg/v:SI 0 ax [orig:83 tmp ] [83])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [45 %sfp+-56 S4 A32])) D:\LHX\7.5 contest\t1.cpp:57 90 {*movsi_internal}
     (nil))
(insn 584 1219 587 107 (set (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])
        (reg/v:SI 0 ax [orig:83 tmp ] [83])) D:\LHX\7.5 contest\t1.cpp:57 90 {*movsi_internal}
     (nil))
(insn 587 584 588 107 (set (reg/f:SI 0 ax [orig:397 num.D.72607._M_impl._M_start ] [397])
        (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 num.D.72607._M_impl._M_start+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1439 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 num.D.72607._M_impl._M_start+0 S4 A32])
        (nil)))
(insn 588 587 1220 107 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])
        (reg/f:SI 0 ax [orig:397 num.D.72607._M_impl._M_start ] [397])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:1439 90 {*movsi_internal}
     (nil))
(insn 1220 588 590 107 (set (reg:SI 0 ax [567])
        (plus:SI (reg/f:SI 6 bp)
            (const_int -28 [0xffffffffffffffe4]))) D:\LHX\7.5 contest\t1.cpp:58 213 {*leasi}
     (nil))
(insn 590 1220 591 107 (set (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [567])) D:\LHX\7.5 contest\t1.cpp:58 90 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 591 590 592 107 (set (reg:SI 2 cx)
        (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)) D:\LHX\7.5 contest\t1.cpp:58 90 {*movsi_internal}
     (nil))
(call_insn 592 591 593 107 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt6vectorIiSaIiEE9push_backERKi") [flags 0x3]  <function_decl 06ec8400 push_back>) [0 push_back S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:\LHX\7.5 contest\t1.cpp:58 646 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 593 592 594 107 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:58 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 594 593 901 107 (set (reg:SI 2 cx [orig:252 D.83218 ] [252])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 901 594 902 107 (set (reg:SI 5 di [orig:449 D.83218 ] [449])
        (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 902 901 1221 107 (set (reg:SI 0 ax [orig:451 j ] [451])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [21 j+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 1221 902 1030 107 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 0 ax [orig:451 j ] [451])) 90 {*movsi_internal}
     (nil))
(jump_insn 1030 1221 1031 107 (set (pc)
        (label_ref 608)) 636 {jump}
     (nil)
 -> 608)
;;  succ:       110 [100.0%] 
;; lr  out 	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1031 1030 597)
;; basic block 108, loop depth 0, count 0, freq 19, maybe hot
;;  prev block 107, next block 109, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       106 [71.0%] 
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(code_label 597 1031 598 108 171 "" [1 uses])
(note 598 597 903 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(insn 903 598 1222 108 (set (reg:SI 5 di [orig:449 D.83218 ] [449])
        (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(note 1222 903 1282 108 NOTE_INSN_DELETED)
(note 1282 1222 599 108 NOTE_INSN_DELETED)
(insn 599 1282 600 108 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [45 %sfp+-56 S4 A32])
            (reg:SI 2 cx [orig:252 D.83218 ] [252]))) D:\LHX\7.5 contest\t1.cpp:60 7 {*cmpsi_1}
     (nil))
(jump_insn 600 599 601 108 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 608)
            (pc))) D:\LHX\7.5 contest\t1.cpp:60 596 {*jcc_1}
     (int_list:REG_BR_PROB 8629 (nil))
 -> 608)
;;  succ:       109 [13.7%]  (FALLTHRU)
;;              110 [86.3%] 
;; lr  out 	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 109, loop depth 0, count 0, freq 3
;;  prev block 108, next block 110, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       108 [13.7%]  (FALLTHRU)
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 2 [cx] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
(note 601 600 1223 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 1223 601 603 109 (set (reg:SI 0 ax [570])
        (plus:SI (reg/f:SI 6 bp)
            (const_int -28 [0xffffffffffffffe4]))) D:\LHX\7.5 contest\t1.cpp:60 213 {*leasi}
     (nil))
(insn 603 1223 604 109 (set (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg:SI 0 ax [570])) D:\LHX\7.5 contest\t1.cpp:60 90 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 604 603 605 109 (set (reg:SI 2 cx)
        (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)) D:\LHX\7.5 contest\t1.cpp:60 90 {*movsi_internal}
     (nil))
(call_insn 605 604 606 109 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZNSt6vectorIiSaIiEE9push_backERKi") [flags 0x3]  <function_decl 06ec8400 push_back>) [0 push_back S1 A8])
                (const_int 4 [0x4]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) D:\LHX\7.5 contest\t1.cpp:60 646 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int -4 [0xfffffffffffffffc])
        (nil))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (nil))))
(insn 606 605 607 109 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:60 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 607 606 904 109 (set (reg:SI 2 cx [orig:252 D.83218 ] [252])
        (mem/c:SI (symbol_ref:SI ("ans") [flags 0x2]  <var_decl 06eeb600 ans>) [21 ans+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 904 607 905 109 (set (reg:SI 5 di [orig:449 D.83218 ] [449])
        (mem/c:SI (symbol_ref:SI ("n") [flags 0x2]  <var_decl 06e5d660 n>) [21 n+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 905 904 1224 109 (set (reg:SI 0 ax [orig:451 j ] [451])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [21 j+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 1224 905 608 109 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg:SI 0 ax [orig:451 j ] [451])) 90 {*movsi_internal}
     (nil))
;;  succ:       110 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 110, loop depth 0, count 0, freq 92, maybe hot
;;  prev block 109, next block 112, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       23 [71.0%] 
;;              109 [100.0%]  (FALLTHRU)
;;              108 [86.3%] 
;;              107 [100.0%] 
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 2 [cx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 608 1224 609 110 130 "" [3 uses])
(note 609 608 1225 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn 1225 609 611 110 (set (reg:SI 3 bx [orig:125 D.83218 ] [125])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (nil))
(insn 611 1225 612 110 (parallel [
            (set (reg:SI 3 bx [orig:125 D.83218 ] [125])
                (plus:SI (reg:SI 3 bx [orig:125 D.83218 ] [125])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:45 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [21 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 612 611 615 110 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [21 j+0 S4 A32])
        (reg:SI 3 bx [orig:125 D.83218 ] [125])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (nil))
(insn 615 612 616 110 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 5 di [orig:449 D.83218 ] [449])
            (reg:SI 3 bx [orig:125 D.83218 ] [125]))) D:\LHX\7.5 contest\t1.cpp:45 7 {*cmpsi_1}
     (nil))
(jump_insn 616 615 617 110 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 941)
            (pc))) D:\LHX\7.5 contest\t1.cpp:45 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 941)
;;  succ:       23 [91.0%]  (DFS_BACK)
;;              112 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 112, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 110, next block 114, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       110 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              21 [100.0%] 
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 617 616 618 112 129 "" [1 uses])
(note 618 617 621 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(insn 621 618 622 112 (set (reg/f:SI 0 ax [orig:404 MEM[(int * *)&num + 4B] ] [404])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])
        (nil)))
(insn 622 621 623 112 (parallel [
            (set (reg:SI 0 ax [orig:403 D.83218 ] [403])
                (minus:SI (reg/f:SI 0 ax [orig:404 MEM[(int * *)&num + 4B] ] [404])
                    (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(int * *)&num]+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 263 {*subsi_1}
     (nil))
(insn 623 622 624 112 (parallel [
            (set (reg:SI 0 ax [orig:406 D.83218 ] [406])
                (ashiftrt:SI (reg:SI 0 ax [orig:403 D.83218 ] [403])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 530 {*ashrsi3_1}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (expr_list:REG_EQUAL (div:SI (reg:SI 0 ax [orig:403 D.83218 ] [403])
                (const_int 4 [0x4]))
            (nil))))
(insn 624 623 625 112 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0  S4 A32])
        (reg:SI 0 ax [orig:406 D.83218 ] [406])) D:\LHX\7.5 contest\t1.cpp:62 90 {*movsi_internal}
     (nil))
(insn 625 624 626 112 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 2 cx [orig:252 D.83218 ] [252])) D:\LHX\7.5 contest\t1.cpp:62 90 {*movsi_internal}
     (nil))
(insn 626 625 627 112 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref/f:SI ("*LC0") [flags 0x2]  <var_decl 07609ae0 *LC0>)) D:\LHX\7.5 contest\t1.cpp:62 90 {*movsi_internal}
     (nil))
(call_insn 627 626 629 112 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZL6printfPKcz") [flags 0x3]  <function_decl 018c8600 printf>) [0 printf S1 A8])
            (const_int 12 [0xc]))) D:\LHX\7.5 contest\t1.cpp:62 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [0  S4 A32]))
                (nil)))))
(insn 629 627 631 112 (set (reg/f:SI 1 dx [orig:129 D.83222 ] [129])
        (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(int * *)&num]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(note 631 629 1227 112 NOTE_INSN_DELETED)
(insn 1227 631 632 112 (set (reg:SI 0 ax [orig:409 D.83218 ] [409])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (nil))
(insn 632 1227 1228 112 (parallel [
            (set (reg:SI 0 ax [orig:409 D.83218 ] [409])
                (minus:SI (reg:SI 0 ax [orig:409 D.83218 ] [409])
                    (reg/f:SI 1 dx [orig:129 D.83222 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 263 {*subsi_1}
     (nil))
(insn 1228 632 633 112 (set (reg:SI 0 ax [orig:409 D.83218 ] [409])
        (reg:SI 0 ax [orig:409 D.83218 ] [409])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (nil))
(insn 633 1228 42 112 (parallel [
            (set (reg:SI 0 ax [orig:412 D.83218 ] [412])
                (ashiftrt:SI (reg:SI 0 ax [orig:409 D.83218 ] [409])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 530 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 0 ax [orig:409 D.83218 ] [409])
            (const_int 4 [0x4]))
        (nil)))
(insn 42 633 634 112 (set (reg/v:SI 3 bx [orig:132 i ] [132])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:63 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 634 42 635 112 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:412 D.83218 ] [412])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:63 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 635 634 939 112 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 1032)
            (pc))) D:\LHX\7.5 contest\t1.cpp:63 596 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 1032)
;;  succ:       114 [91.0%]  (FALLTHRU)
;;              134 [9.0%] 
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 114, loop depth 0, count 0, freq 92, maybe hot
;;  prev block 112, next block 115, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       112 [91.0%]  (FALLTHRU)
;;              114 [91.0%]  (DFS_BACK)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 939 635 938 114 208 "" [1 uses])
(note 938 939 643 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 643 938 644 114 (set (reg:SI 0 ax [orig:414 *_120 ] [414])
        (mem:SI (plus:SI (mult:SI (reg/v:SI 3 bx [orig:132 i ] [132])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 dx [orig:129 D.83222 ] [129])) [21 *_120+0 S4 A32])) D:\LHX\7.5 contest\t1.cpp:63 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (nil)))
(insn 644 643 645 114 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 0 ax [orig:414 *_120 ] [414])) D:\LHX\7.5 contest\t1.cpp:63 90 {*movsi_internal}
     (nil))
(insn 645 644 646 114 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref/f:SI ("*LC1") [flags 0x2]  <var_decl 07609b40 *LC1>)) D:\LHX\7.5 contest\t1.cpp:63 90 {*movsi_internal}
     (nil))
(call_insn 646 645 647 114 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZL6printfPKcz") [flags 0x3]  <function_decl 018c8600 printf>) [0 printf S1 A8])
            (const_int 8 [0x8]))) D:\LHX\7.5 contest\t1.cpp:63 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 647 646 649 114 (parallel [
            (set (reg/v:SI 3 bx [orig:132 i ] [132])
                (plus:SI (reg/v:SI 3 bx [orig:132 i ] [132])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) D:\LHX\7.5 contest\t1.cpp:63 220 {*addsi_1}
     (nil))
(insn 649 647 652 114 (set (reg/f:SI 1 dx [orig:129 D.83222 ] [129])
        (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(int * *)&num]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(note 652 649 1229 114 NOTE_INSN_DELETED)
(insn 1229 652 653 114 (set (reg:SI 0 ax [orig:417 D.83218 ] [417])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(int * *)&num + 4B]+0 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (nil))
(insn 653 1229 1230 114 (parallel [
            (set (reg:SI 0 ax [orig:417 D.83218 ] [417])
                (minus:SI (reg:SI 0 ax [orig:417 D.83218 ] [417])
                    (reg/f:SI 1 dx [orig:129 D.83222 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 263 {*subsi_1}
     (nil))
(insn 1230 653 654 114 (set (reg:SI 0 ax [orig:417 D.83218 ] [417])
        (reg:SI 0 ax [orig:417 D.83218 ] [417])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 90 {*movsi_internal}
     (nil))
(insn 654 1230 655 114 (parallel [
            (set (reg:SI 0 ax [orig:420 D.83218 ] [420])
                (ashiftrt:SI (reg:SI 0 ax [orig:417 D.83218 ] [417])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:655 530 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 0 ax [orig:417 D.83218 ] [417])
            (const_int 4 [0x4]))
        (nil)))
(insn 655 654 656 114 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 3 bx [orig:132 i ] [132])
            (reg:SI 0 ax [orig:420 D.83218 ] [420]))) D:\LHX\7.5 contest\t1.cpp:63 7 {*cmpsi_1}
     (nil))
(jump_insn 656 655 1033 114 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 939)
            (pc))) D:\LHX\7.5 contest\t1.cpp:63 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 939)
;;  succ:       114 [91.0%]  (DFS_BACK)
;;              115 [9.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 115, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 114, next block 116, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       114 [9.0%]  (FALLTHRU)
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1033 656 1034 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1034 1033 1035 115 (set (pc)
        (label_ref 1032)) 636 {jump}
     (nil)
 -> 1032)
;;  succ:       134 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

(barrier 1035 1034 793)
;; basic block 116, loop depth 0, count 0, freq 24, maybe hot
;;  prev block 115, next block 117, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       33 [9.0%] 
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 793 1035 792 116 190 "" [1 uses])
(note 792 793 887 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 887 792 661 116 (set (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (nil))
;;  succ:       117 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 117, loop depth 0, count 0, freq 156, maybe hot
;;  prev block 116, next block 118, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       116 [100.0%]  (FALLTHRU)
;;              41 [6.7%] 
;;              42 [50.0%] 
;;              44 [50.0%] 
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 661 887 662 117 135 "" [3 uses])
(note 662 661 663 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(insn 663 662 1269 117 (set (reg/v:SI 1 dx [orig:258 __pos ] [258])
        (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])) 90 {*movsi_internal}
     (nil))
(insn 1269 663 664 117 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg/v:SI 1 dx [orig:258 __pos ] [258])) 90 {*movsi_internal}
     (nil))
(insn 664 1269 665 117 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (const_int 32 [0x20])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(call_insn 665 664 666 117 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znwj") [flags 0x43]  <function_decl 01938d00 operator new>) [0 operator new S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 648 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 666 665 667 117 (set (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(insn 667 666 668 117 (set (mem:DI (plus:SI (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
                (const_int 16 [0x10])) [34 MEM[(struct pair *)__i$_M_node_205 + 16B].first+0 S8 A64])
        (reg/v:DI 4 si [orig:112 t1 ] [112])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 89 {*movdi_internal}
     (nil))
(insn 668 667 669 117 (set (mem:SI (plus:SI (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
                (const_int 24 [0x18])) [21 MEM[(struct pair *)__i$_M_node_205 + 16B].second+0 S4 A64])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 669 668 670 117 (parallel [
            (set (reg/f:SI 0 ax [orig:421 D.83232 ] [421])
                (plus:SI (reg/f:SI 3 bx [orig:203 __i$_M_node ] [203])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/aligned_buffer.h:53 220 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (nil)))
(insn 670 669 1270 117 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [orig:421 D.83232 ] [421])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 1270 670 671 117 (set (reg/v:SI 1 dx [orig:258 __pos ] [258])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 671 1270 672 117 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v:SI 1 dx [orig:258 __pos ] [258])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 672 671 673 117 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(call_insn 673 672 674 117 (parallel [
            (set (reg:DI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_") [flags 0x3]  <function_decl 06e17d80 _M_get_insert_hint_unique_pos>) [0 _M_get_insert_hint_unique_pos S1 A8])
                    (const_int 8 [0x8])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 653 {*call_value_pop}
     (expr_list:REG_ARGS_SIZE (const_int -8 [0xfffffffffffffff8])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [0  S4 A32]))
                (nil)))))
(insn 674 673 871 117 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 871 674 679 117 (set (reg:SI 0 ax [orig:437 __res ] [437])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 679 871 680 117 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:438 __res+4 ] [438])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 680 679 1036 117 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 678)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 596 {*jcc_1}
     (int_list:REG_BR_PROB 7837 (nil))
 -> 678)
;;  succ:       46 [78.4%] 
;;              118 [21.6%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 118, loop depth 0, count 0, freq 34, maybe hot
;;  prev block 117, next block 119, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       117 [21.6%]  (FALLTHRU)
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1036 680 1038 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1038 1036 1039 118 (set (pc)
        (label_ref 1037)) 636 {jump}
     (nil)
 -> 1037)
;;  succ:       54 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1039 1038 803)
;; basic block 119, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 118, next block 120, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       56 [9.0%] 
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 803 1039 802 119 193 "" [1 uses])
(note 802 803 886 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(insn 886 802 685 119 (set (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (nil))
;;  succ:       120 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 120, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 119, next block 121, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       119 [100.0%]  (FALLTHRU)
;;              64 [6.6%] 
;;              65 [50.0%] 
;;              67 [50.0%] 
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 685 886 686 120 147 "" [3 uses])
(note 686 685 1276 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn 1276 686 1274 120 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [45 %sfp+-40 S4 A32])
        (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])) 90 {*movsi_internal}
     (nil))
(insn 1274 1276 688 120 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S8 A64])
        (reg/v:DI 2 cx [orig:117 t2 ] [117])) 89 {*movdi_internal}
     (nil))
(insn 688 1274 689 120 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (const_int 32 [0x20])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(call_insn 689 688 690 120 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znwj") [flags 0x43]  <function_decl 01938d00 operator new>) [0 operator new S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 648 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 690 689 1273 120 (set (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(insn 1273 690 1272 120 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(insn 1272 1273 1231 120 (set (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
        (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 1231 1272 1275 120 (set (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
        (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 1275 1231 691 120 (set (reg/v:DI 2 cx [orig:117 t2 ] [117])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [45 %sfp+-48 S8 A64])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 89 {*movdi_internal}
     (nil))
(insn 691 1275 1271 120 (set (mem:DI (plus:SI (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
                (const_int 16 [0x10])) [34 MEM[(struct pair *)__i$_M_node_241 + 16B].first+0 S8 A64])
        (reg/v:DI 2 cx [orig:117 t2 ] [117])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 89 {*movdi_internal}
     (nil))
(insn 1271 691 1232 120 (set (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
        (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 1232 1271 692 120 (set (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
        (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 692 1232 1233 120 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
                (const_int 24 [0x18])) [21 MEM[(struct pair *)__i$_M_node_241 + 16B].second+0 S4 A64])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 1233 692 693 120 (set (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
        (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/aligned_buffer.h:53 90 {*movsi_internal}
     (nil))
(insn 693 1233 694 120 (parallel [
            (set (reg/f:SI 0 ax [orig:422 D.83232 ] [422])
                (plus:SI (reg/f:SI 0 ax [orig:209 __i$_M_node ] [209])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/aligned_buffer.h:53 220 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (nil)))
(insn 694 693 1277 120 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [orig:422 D.83232 ] [422])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 1277 694 695 120 (set (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [45 %sfp+-40 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 695 1277 696 120 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 696 695 697 120 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(call_insn 697 696 698 120 (parallel [
            (set (reg:DI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_") [flags 0x3]  <function_decl 06e17d80 _M_get_insert_hint_unique_pos>) [0 _M_get_insert_hint_unique_pos S1 A8])
                    (const_int 8 [0x8])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 653 {*call_value_pop}
     (expr_list:REG_ARGS_SIZE (const_int -8 [0xfffffffffffffff8])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [0  S4 A32]))
                (nil)))))
(insn 698 697 873 120 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 873 698 703 120 (set (reg:SI 0 ax [orig:435 __res ] [435])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 703 873 704 120 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:436 __res+4 ] [436])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 704 703 1040 120 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 702)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 596 {*jcc_1}
     (int_list:REG_BR_PROB 7837 (nil))
 -> 702)
;;  succ:       69 [78.4%] 
;;              121 [21.6%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 121, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 120, next block 122, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       120 [21.6%]  (FALLTHRU)
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1040 704 1042 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1042 1040 1043 121 (set (pc)
        (label_ref 1041)) 636 {jump}
     (nil)
 -> 1041)
;;  succ:       77 [100.0%] 
;; lr  out 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1043 1042 709)
;; basic block 122, loop depth 0, count 0, freq 39, maybe hot
;;  prev block 121, next block 123, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       78 [50.0%] 
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 709 1043 710 122 158 "" [1 uses])
(note 710 709 712 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 712 710 714 122 (set (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
        (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 714 712 715 122 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 715 714 718 122 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 713)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 596 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 713)
;;  succ:       80 [91.0%] 
;;              123 [9.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 123, loop depth 0, count 0, freq 4
;;  prev block 122, next block 124, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       122 [9.0%]  (FALLTHRU)
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx]
;; live  kill	
(note 718 715 885 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 885 718 724 123 (set (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1260 90 {*movsi_internal}
     (nil))
;;  succ:       124 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 124, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 123, next block 125, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       123 [100.0%]  (FALLTHRU)
;;              87 [10.4%] 
;;              88 [50.0%] 
;;              90 [50.0%] 
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 724 885 725 124 163 "" [3 uses])
(note 725 724 726 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn 726 725 1278 124 (set (reg/v:SI 1 dx [orig:254 __pos ] [254])
        (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])) 90 {*movsi_internal}
     (nil))
(insn 1278 726 727 124 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])
        (reg/v:SI 1 dx [orig:254 __pos ] [254])) 90 {*movsi_internal}
     (nil))
(insn 727 1278 728 124 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (const_int 32 [0x20])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(call_insn 728 727 729 124 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znwj") [flags 0x43]  <function_decl 01938d00 operator new>) [0 operator new S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 648 {*call_value}
     (nil)
    (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 729 728 730 124 (set (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/new_allocator.h:104 90 {*movsi_internal}
     (nil))
(insn 730 729 731 124 (set (mem:DI (plus:SI (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
                (const_int 16 [0x10])) [34 MEM[(struct pair *)__i$_M_node_277 + 16B].first+0 S8 A64])
        (reg/v:DI 4 si [orig:112 t1 ] [112])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 89 {*movdi_internal}
     (nil))
(insn 731 730 732 124 (set (mem:SI (plus:SI (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
                (const_int 24 [0x18])) [21 MEM[(struct pair *)__i$_M_node_277 + 16B].second+0 S4 A64])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/tuple:1102 90 {*movsi_internal}
     (nil))
(insn 732 731 733 124 (parallel [
            (set (reg/f:SI 0 ax [orig:424 D.83232 ] [424])
                (plus:SI (reg/f:SI 3 bx [orig:181 __i$_M_node ] [181])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/ext/aligned_buffer.h:53 220 {*addsi_1}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (nil)))
(insn 733 732 1279 124 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg/f:SI 0 ax [orig:424 D.83232 ] [424])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 1279 733 734 124 (set (reg/v:SI 1 dx [orig:254 __pos ] [254])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 734 1279 735 124 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (reg/v:SI 1 dx [orig:254 __pos ] [254])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 735 734 736 124 (set (reg:SI 2 cx)
        (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(call_insn 736 735 737 124 (parallel [
            (set (reg:DI 0 ax)
                (call (mem:QI (symbol_ref:SI ("_ZNSt8_Rb_treeIySt4pairIKyiESt10_Select1stIS2_ESt4lessIyESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_") [flags 0x3]  <function_decl 06e17d80 _M_get_insert_hint_unique_pos>) [0 _M_get_insert_hint_unique_pos S1 A8])
                    (const_int 8 [0x8])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 653 {*call_value_pop}
     (expr_list:REG_ARGS_SIZE (const_int -8 [0xfffffffffffffff8])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 2 cx))
        (expr_list:SI (use (mem:SI (reg/f:SI 7 sp) [0  S4 A32]))
            (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [0  S4 A32]))
                (nil)))))
(insn 737 736 875 124 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 220 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 875 737 742 124 (set (reg:SI 0 ax [orig:433 __res ] [433])
        (reg:SI 0 ax)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1794 90 {*movsi_internal}
     (nil))
(insn 742 875 743 124 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:434 __res+4 ] [434])
            (const_int 0 [0]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 743 742 1044 124 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 741)
            (pc))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:1796 596 {*jcc_1}
     (int_list:REG_BR_PROB 7837 (nil))
 -> 741)
;;  succ:       92 [78.4%] 
;;              125 [21.6%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 125, loop depth 0, count 0, freq 10, maybe hot
;;  prev block 124, next block 126, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       124 [21.6%]  (FALLTHRU)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1044 743 1046 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1046 1044 1047 125 (set (pc)
        (label_ref 1045)) 636 {jump}
     (nil)
 -> 1045)
;;  succ:       100 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

(barrier 1047 1046 780)
;; basic block 126, loop depth 0, count 0, freq 1
;;  prev block 125, next block 127, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [9.0%] 
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 1 [dx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 780 1047 779 126 186 "" [1 uses])
(note 779 780 877 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(insn 877 779 878 126 (set (reg:SI 3 bx [orig:429 flag ] [429])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
(insn 878 877 748 126 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
;;  succ:       127 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 127, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 126, next block 128, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       126 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (LOOP_EXIT)
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 5 [di]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 2 [cx] 4 [si] 5 [di]
;; live  kill	
(code_label 748 878 749 127 115 "" [1 uses])
(note 749 748 6 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 6 749 1108 127 (set (reg/v:DI 4 si [orig:159 re ] [159])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:13 89 {*movdi_internal}
     (nil))
(insn 1108 6 1048 127 (set (reg/v:QI 2 cx [orig:151 ch ] [151])
        (reg/v:QI 1 dx [orig:151 ch ] [151])) 93 {*movqi_internal}
     (nil))
(jump_insn 1048 1108 1049 127 (set (pc)
        (label_ref 88)) 636 {jump}
     (nil)
 -> 88)
;;  succ:       6 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1049 1048 783)
;; basic block 128, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 127, next block 129, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [9.0%] 
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 783 1049 782 128 187 "" [1 uses])
(note 782 783 879 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn 879 782 880 128 (set (reg:SI 3 bx [orig:431 flag ] [431])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
(insn 880 879 752 128 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [45 %sfp+-24 S4 A64])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:11 90 {*movsi_internal}
     (nil))
;;  succ:       129 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]

;; basic block 129, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 128, next block 130, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       128 [100.0%]  (FALLTHRU)
;;              12 [100.0%]  (LOOP_EXIT)
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 4 [si] 5 [di]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 4 [si] 5 [di]
;; live  kill	
(code_label 752 880 753 129 120 "" [1 uses])
(note 753 752 10 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn 10 753 1050 129 (set (reg/v:DI 4 si [orig:175 re ] [175])
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:13 89 {*movdi_internal}
     (nil))
(jump_insn 1050 10 1051 129 (set (pc)
        (label_ref 140)) 636 {jump}
     (nil)
 -> 140)
;;  succ:       13 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1051 1050 756)
;; basic block 130, loop depth 0, count 0, freq 0
;;  prev block 129, next block 131, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [1.0%] 
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(code_label 756 1051 757 130 119 "" [1 uses])
(note 757 756 758 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn 758 757 1052 130 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [21 j+0 S4 A32])
        (const_int 1 [0x1])) D:\LHX\7.5 contest\t1.cpp:45 90 {*movsi_internal}
     (nil))
(jump_insn 1052 758 1053 130 (set (pc)
        (label_ref 759)) 636 {jump}
     (nil)
 -> 759)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

(barrier 1053 1052 769)
;; basic block 131, loop depth 0, count 0, freq 0
;;  prev block 130, next block 132, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       132 [50.0%] 
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 769 1053 762 131 185 "" [1 uses])
(note 762 769 891 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn 891 762 1054 131 (set (reg/f:SI 0 ax [orig:165 __i$_M_node ] [165])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [45 %sfp+-36 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUAL (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_node_base * *)&s + 8B]+0 S4 A32])
        (nil)))
(jump_insn 1054 891 1055 131 (set (pc)
        (label_ref 713)) 636 {jump}
     (nil)
 -> 713)
;;  succ:       80 [100.0%] 
;; lr  out 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

(barrier 1055 1054 767)
;; basic block 132, loop depth 0, count 0, freq 33, maybe hot
;;  prev block 131, next block 133, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       66 [50.0%] 
;;              68 [100.0%] 
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 767 1055 768 132 153 "" [2 uses])
(note 768 767 770 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn 770 768 771 132 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg/f:SI 1 dx [orig:186 __i$_M_node ] [186])
                    (const_int 24 [0x18])) [21 MEM[(mapped_type &)__i$_M_node_347 + 24]+0 S4 A32])
            (const_int 0 [0]))) D:\LHX\7.5 contest\t1.cpp:53 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 771 770 1056 132 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 769)
            (pc))) D:\LHX\7.5 contest\t1.cpp:53 596 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 769)
;;  succ:       131 [50.0%] 
;;              133 [50.0%]  (FALLTHRU)
;; lr  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame]

;; basic block 133, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 132, next block 134, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       132 [50.0%]  (FALLTHRU)
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	
;; live  kill	
(note 1056 771 1057 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1057 1056 1058 133 (set (pc)
        (label_ref 721)) 636 {jump}
     (nil)
 -> 721)
;;  succ:       102 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 6 [bp] 7 [sp] 20 [frame]

(barrier 1058 1057 1032)
;; basic block 134, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 133, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       112 [9.0%] 
;;              115 [100.0%]  (LOOP_EXIT)
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 6 [bp] 7 [sp] 20 [frame]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1032 1058 778 134 227 "" [2 uses])
(note 778 1032 776 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(insn 776 778 777 134 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) D:\LHX\7.5 contest\t1.cpp:64 90 {*movsi_internal}
     (nil))
(insn 777 776 1120 134 (use (reg/i:SI 0 ax)) D:\LHX\7.5 contest\t1.cpp:64 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]

(note 1120 777 0 NOTE_INSN_DELETED)

;; Function (static initializers for D:\LHX\7.5 contest\t1.cpp) (_GLOBAL__sub_I_s, funcdef_no=6112, decl_uid=80904, symbol_order=4233) (executed once)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) lzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) lzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) lzw {*call_value}
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-12, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


(static initializers for D:\LHX\7.5 contest\t1.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 29 [mm0] 30 [mm1] 31 [mm2]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 2[cx] 7[sp]
;;  ref usage 	r0={5d} r1={5d} r2={6d,1u} r7={1d,12u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={4d} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={5d} r30={5d} r31={5d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} 
;;    total ref usage 304{291d,13u,0e} in 16{12 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 2 cx)
        (symbol_ref:SI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 035d1180 __ioinit>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 90 {*movsi_internal}
     (nil))
(call_insn 6 5 7 2 (call (mem:QI (symbol_ref:SI ("_ZNSt8ios_base4InitC1Ev") [flags 0x43]  <function_decl 032bbb80 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 641 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 2 cx))
        (nil)))
(insn 7 6 8 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref:SI ("__tcf_0") [flags 0x3]  <function_decl 0737aa00 __tcf_0>)) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 90 {*movsi_internal}
     (nil))
(call_insn 8 7 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("atexit") [flags 0x43]  <function_decl 0737aa80 atexit>) [0 atexit S1 A8])
            (const_int 4 [0x4]))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/iostream:74 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 10 8 12 2 (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 4 [0x4]))) [20 MEM[(struct _Rb_tree_impl *)&s]._M_header._M_color+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:463 90 {*movsi_internal}
     (nil))
(insn 12 10 14 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Rb_tree_impl *)&s]._M_header._M_parent+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:463 90 {*movsi_internal}
     (nil))
(insn 14 12 16 2 (set (mem/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 20 [0x14]))) [21 MEM[(struct _Rb_tree_impl *)&s]._M_node_count+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:463 90 {*movsi_internal}
     (nil))
(insn 16 14 18 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 12 [0xc]))) [6 MEM[(struct _Rb_tree_impl *)&s]._M_header._M_left+0 S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:484 90 {*movsi_internal}
     (nil))
(insn 18 16 19 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                    (const_int 16 [0x10]))) [6 MEM[(struct _Rb_tree_impl *)&s]._M_header._M_right+0 S4 A32])
        (const:SI (plus:SI (symbol_ref:SI ("s") [flags 0x2]  <var_decl 06d9cd20 s>)
                (const_int 4 [0x4])))) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_tree.h:485 90 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref:SI ("__tcf_1") [flags 0x3]  <function_decl 0737ac80 __tcf_1>)) D:\LHX\7.5 contest\t1.cpp:20 90 {*movsi_internal}
     (nil))
(call_insn 20 19 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("atexit") [flags 0x43]  <function_decl 0737aa80 atexit>) [0 atexit S1 A8])
            (const_int 4 [0x4]))) D:\LHX\7.5 contest\t1.cpp:20 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
(insn 22 20 24 2 (set (mem/f/c:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>) [6 MEM[(struct _Vector_impl *)&num]._M_start+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:87 90 {*movsi_internal}
     (nil))
(insn 24 22 26 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 4 [0x4]))) [6 MEM[(struct _Vector_impl *)&num]._M_finish+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:87 90 {*movsi_internal}
     (nil))
(insn 26 24 27 2 (set (mem/f/c:SI (const:SI (plus:SI (symbol_ref:SI ("num") [flags 0x2]  <var_decl 06e5dae0 num>)
                    (const_int 8 [0x8]))) [6 MEM[(struct _Vector_impl *)&num]._M_end_of_storage+0 S4 A32])
        (const_int 0 [0])) D:/Dev-Cpp/MinGW64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/bits/stl_vector.h:87 90 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (mem:SI (reg/f:SI 7 sp) [0  S4 A32])
        (symbol_ref:SI ("__tcf_2") [flags 0x3]  <function_decl 0737ad00 __tcf_2>)) D:\LHX\7.5 contest\t1.cpp:23 90 {*movsi_internal}
     (nil))
(call_insn 28 27 31 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("atexit") [flags 0x43]  <function_decl 0737aa80 atexit>) [0 atexit S1 A8])
            (const_int 4 [0x4]))) D:\LHX\7.5 contest\t1.cpp:23 648 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 7 sp) [0  S4 A32]))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 31 28 0 NOTE_INSN_DELETED)
